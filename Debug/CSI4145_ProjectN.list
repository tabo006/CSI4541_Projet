
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c200  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001348  0800c3d0  0800c3d0  0000d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d718  0800d718  0000f090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d718  0800d718  0000e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d720  0800d720  0000f090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d720  0800d720  0000e720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d724  0800d724  0000e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800d728  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005160  20000090  0800d7b8  0000f090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051f0  0800d7b8  0000f1f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ec  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004df0  00000000  00000000  0002faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a8  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002832b  00000000  00000000  00037a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d0c  00000000  00000000  0005fd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed0af  00000000  00000000  00082a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016fb06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea0  00000000  00000000  0016fb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001779ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c3b8 	.word	0x0800c3b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800c3b8 	.word	0x0800c3b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <MX_ADC1_Init+0x9c>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <MX_ADC1_Init+0xa0>)
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dee:	f001 ffa9 	bl	8002d44 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 ff8c 	bl	8001d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000e04:	2305      	movs	r3, #5
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000e0e:	f002 f97b 	bl	8003108 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 ff7c 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000ac 	.word	0x200000ac
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	0f000001 	.word	0x0f000001

08000e30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_ADC_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d127      	bne.n	8000ea2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_ADC_MspInit+0x84>)
 8000e9e:	f002 fcd5 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012000 	.word	0x40012000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <send_AT_command+0x48>)
 8000ec8:	f00a f9e0 	bl	800b28c <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff f99f 	bl	8000210 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <send_AT_command+0x4c>)
 8000ede:	f005 feab 	bl	8006c38 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f000 f811 	bl	8000f0c <waitFor>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <send_AT_command+0x50>)
 8000ef4:	f00a f9ca 	bl	800b28c <iprintf>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800c3d0 	.word	0x0800c3d0
 8000f04:	200006c0 	.word	0x200006c0
 8000f08:	0800c3dc 	.word	0x0800c3dc

08000f0c <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b6      	sub	sp, #216	@ 0xd8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	22c4      	movs	r2, #196	@ 0xc4
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a fa38 	bl	800b398 <memset>
    uint32_t startTick = HAL_GetTick();
 8000f28:	f001 fedc 	bl	8002ce4 <HAL_GetTick>
 8000f2c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000f36:	e044      	b.n	8000fc2 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 8000f38:	f107 0208 	add.w	r2, r7, #8
 8000f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f40:	18d1      	adds	r1, r2, r3
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	2201      	movs	r2, #1
 8000f46:	4828      	ldr	r0, [pc, #160]	@ (8000fe8 <waitFor+0xdc>)
 8000f48:	f005 ff01 	bl	8006d4e <HAL_UART_Receive>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d137      	bne.n	8000fc2 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d007      	beq.n	8000f72 <waitFor+0x66>
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d11b      	bne.n	8000faa <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a f9f0 	bl	800b36c <strstr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	@ (8000fec <waitFor+0xe0>)
 8000f9a:	f00a f977 	bl	800b28c <iprintf>
                    return 1;  // Found the expected response
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e01d      	b.n	8000fde <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fa8:	e00b      	b.n	8000fc2 <waitFor+0xb6>
            } else {
                index++;
 8000faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 8000fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fb8:	2bc6      	cmp	r3, #198	@ 0xc6
 8000fba:	d902      	bls.n	8000fc2 <waitFor+0xb6>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000fc2:	f001 fe8f 	bl	8002ce4 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8b1      	bhi.n	8000f38 <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <waitFor+0xe4>)
 8000fd8:	f00a f958 	bl	800b28c <iprintf>
    return 0;  // Timeout reached without expected response
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	37d8      	adds	r7, #216	@ 0xd8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200006c0 	.word	0x200006c0
 8000fec:	0800c400 	.word	0x0800c400
 8000ff0:	0800c414 	.word	0x0800c414

08000ff4 <ESP_Server_Init>:
void ESP_Server_Init(const char *ssid, const char *password) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    char cmdBuffer[100];  // Buffer for AT commands

    printf("RESETTING ESP8266...\n");
 8000ffe:	4821      	ldr	r0, [pc, #132]	@ (8001084 <ESP_Server_Init+0x90>)
 8001000:	f00a f9ac 	bl	800b35c <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8001004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001008:	491f      	ldr	r1, [pc, #124]	@ (8001088 <ESP_Server_Init+0x94>)
 800100a:	4820      	ldr	r0, [pc, #128]	@ (800108c <ESP_Server_Init+0x98>)
 800100c:	f7ff ff54 	bl	8000eb8 <send_AT_command>

    printf("Testing AT Command...\n");
 8001010:	481f      	ldr	r0, [pc, #124]	@ (8001090 <ESP_Server_Init+0x9c>)
 8001012:	f00a f9a3 	bl	800b35c <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 8001016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800101a:	491b      	ldr	r1, [pc, #108]	@ (8001088 <ESP_Server_Init+0x94>)
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <ESP_Server_Init+0xa0>)
 800101e:	f7ff ff4b 	bl	8000eb8 <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8001022:	481d      	ldr	r0, [pc, #116]	@ (8001098 <ESP_Server_Init+0xa4>)
 8001024:	f00a f99a 	bl	800b35c <puts>
    sprintf(cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001028:	f107 000c 	add.w	r0, r7, #12
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	491a      	ldr	r1, [pc, #104]	@ (800109c <ESP_Server_Init+0xa8>)
 8001032:	f00a f849 	bl	800b0c8 <siprintf>
    send_AT_command(cmdBuffer, "WIFI CONNECTED", 15000);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800103e:	4918      	ldr	r1, [pc, #96]	@ (80010a0 <ESP_Server_Init+0xac>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff39 	bl	8000eb8 <send_AT_command>

    printf("Checking assigned IP address...\n");
 8001046:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <ESP_Server_Init+0xb0>)
 8001048:	f00a f988 	bl	800b35c <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4915      	ldr	r1, [pc, #84]	@ (80010a8 <ESP_Server_Init+0xb4>)
 8001052:	4816      	ldr	r0, [pc, #88]	@ (80010ac <ESP_Server_Init+0xb8>)
 8001054:	f7ff ff30 	bl	8000eb8 <send_AT_command>

    printf("Enabling single connections...\n");
 8001058:	4815      	ldr	r0, [pc, #84]	@ (80010b0 <ESP_Server_Init+0xbc>)
 800105a:	f00a f97f 	bl	800b35c <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 800105e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <ESP_Server_Init+0x94>)
 8001064:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <ESP_Server_Init+0xc0>)
 8001066:	f7ff ff27 	bl	8000eb8 <send_AT_command>

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <ESP_Server_Init+0xc4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <ESP_Server_Init+0xc4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	60da      	str	r2, [r3, #12]
}
 800107a:	bf00      	nop
 800107c:	3770      	adds	r7, #112	@ 0x70
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800c430 	.word	0x0800c430
 8001088:	0800c448 	.word	0x0800c448
 800108c:	0800c44c 	.word	0x0800c44c
 8001090:	0800c458 	.word	0x0800c458
 8001094:	0800c470 	.word	0x0800c470
 8001098:	0800c478 	.word	0x0800c478
 800109c:	0800c490 	.word	0x0800c490
 80010a0:	0800c4a8 	.word	0x0800c4a8
 80010a4:	0800c4b8 	.word	0x0800c4b8
 80010a8:	0800c4d8 	.word	0x0800c4d8
 80010ac:	0800c4e0 	.word	0x0800c4e0
 80010b0:	0800c4ec 	.word	0x0800c4ec
 80010b4:	0800c50c 	.word	0x0800c50c
 80010b8:	200006c0 	.word	0x200006c0

080010bc <sendHTMLToLocalServer>:

void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010d2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80010d6:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80010d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010e0:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	492b      	ldr	r1, [pc, #172]	@ (8001194 <sendHTMLToLocalServer+0xd8>)
 80010e8:	f009 ffee 	bl	800b0c8 <siprintf>
    send_AT_command(cmdBuffer, "OK", 2000);
 80010ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4928      	ldr	r1, [pc, #160]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fede 	bl	8000eb8 <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 80010fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001100:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4601      	mov	r1, r0
 800110c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001110:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8001114:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001118:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800111c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	491c      	ldr	r1, [pc, #112]	@ (800119c <sendHTMLToLocalServer+0xe0>)
 800112a:	f009 ffcd 	bl	800b0c8 <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 800112e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f86c 	bl	8000210 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8001146:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <sendHTMLToLocalServer+0xe4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f009 ffbd 	bl	800b0c8 <siprintf>
    send_AT_command(responseBuffer, ">", 500);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001156:	4913      	ldr	r1, [pc, #76]	@ (80011a4 <sendHTMLToLocalServer+0xe8>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fead 	bl	8000eb8 <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 1000);
 800115e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001166:	4910      	ldr	r1, [pc, #64]	@ (80011a8 <sendHTMLToLocalServer+0xec>)
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fea5 	bl	8000eb8 <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 500);
 800116e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001172:	4909      	ldr	r1, [pc, #36]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <sendHTMLToLocalServer+0xf0>)
 8001176:	f7ff fe9f 	bl	8000eb8 <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 800117a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800117e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <sendHTMLToLocalServer+0xf4>)
 8001186:	f00a f881 	bl	800b28c <iprintf>
}
 800118a:	bf00      	nop
 800118c:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800c51c 	.word	0x0800c51c
 8001198:	0800c448 	.word	0x0800c448
 800119c:	0800c53c 	.word	0x0800c53c
 80011a0:	0800c598 	.word	0x0800c598
 80011a4:	0800c5a8 	.word	0x0800c5a8
 80011a8:	0800c5ac 	.word	0x0800c5ac
 80011ac:	0800c5b4 	.word	0x0800c5b4
 80011b0:	0800c5c4 	.word	0x0800c5c4

080011b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <MX_FREERTOS_Init+0x18>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_FREERTOS_Init+0x1c>)
 80011be:	f006 fe11 	bl	8007de4 <osThreadNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <MX_FREERTOS_Init+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0800d530 	.word	0x0800d530
 80011d0:	080011d9 	.word	0x080011d9
 80011d4:	200000f4 	.word	0x200000f4

080011d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f006 fe91 	bl	8007f08 <osDelay>
 80011e6:	e7fb      	b.n	80011e0 <StartDefaultTask+0x8>

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_GPIO_Init+0x138>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <MX_GPIO_Init+0x138>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <MX_GPIO_Init+0x138>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|System_state_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2160      	movs	r1, #96	@ 0x60
 8001272:	482c      	ldr	r0, [pc, #176]	@ (8001324 <MX_GPIO_Init+0x13c>)
 8001274:	f002 fc96 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2103      	movs	r1, #3
 800127c:	482a      	ldr	r0, [pc, #168]	@ (8001328 <MX_GPIO_Init+0x140>)
 800127e:	f002 fc91 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001288:	4828      	ldr	r0, [pc, #160]	@ (800132c <MX_GPIO_Init+0x144>)
 800128a:	f002 fc8b 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001294:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4821      	ldr	r0, [pc, #132]	@ (800132c <MX_GPIO_Init+0x144>)
 80012a6:	f002 fad1 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|System_state_Pin;
 80012aa:	2360      	movs	r3, #96	@ 0x60
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_GPIO_Init+0x13c>)
 80012c2:	f002 fac3 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = control_System_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(control_System_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <MX_GPIO_Init+0x144>)
 80012da:	f002 fab7 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 80012de:	2303      	movs	r3, #3
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <MX_GPIO_Init+0x140>)
 80012f6:	f002 faa9 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_GPIO_Init+0x144>)
 8001314:	f002 fa9a 	bl	800384c <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <MX_I2C1_Init+0x54>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_I2C1_Init+0x50>)
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <MX_I2C1_Init+0x58>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_I2C1_Init+0x50>)
 800134e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_I2C1_Init+0x50>)
 800136e:	f002 fc33 	bl	8003bd8 <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001378:	f000 fccc 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f8 	.word	0x200000f8
 8001384:	40005400 	.word	0x40005400
 8001388:	00061a80 	.word	0x00061a80

0800138c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_I2C_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	@ 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <HAL_I2C_MspInit+0x8c>)
 80013e6:	f002 fa31 	bl	800384c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <delay>:
/**
* @brief  The application entry point.
* @retval int
*/

void delay (uint16_t time){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <delay+0x30>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 800142e:	bf00      	nop
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <delay+0x30>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3f9      	bcc.n	8001430 <delay+0x14>
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000678 	.word	0x20000678

08001450 <main>:

int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8001454:	f001 fc10 	bl	8002c78 <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 8001458:	f000 f8e8 	bl	800162c <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 800145c:	f7ff fec4 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001460:	f001 fb32 	bl	8002ac8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001464:	f7ff ff64 	bl	8001330 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001468:	f7ff fc90 	bl	8000d8c <MX_ADC1_Init>
  MX_TIM2_Init();
 800146c:	f001 f952 	bl	8002714 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001470:	f001 fb00 	bl	8002a74 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001474:	f001 f8ac 	bl	80025d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001478:	f001 f9c2 	bl	8002800 <MX_TIM3_Init>
/* USER CODE BEGIN 2 */
SSD1306_Init(); // Initialize OLED display
 800147c:	f000 fc66 	bl	8001d4c <SSD1306_Init>
SSD1306_Clear(); // Clear the display
 8001480:	f000 fe87 	bl	8002192 <SSD1306_Clear>
SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 8001484:	210a      	movs	r1, #10
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fdca 	bl	8002020 <SSD1306_GotoXY>
SSD1306_Puts("main", &Font_11x18, 1); // Display simple message
 800148c:	2201      	movs	r2, #1
 800148e:	493f      	ldr	r1, [pc, #252]	@ (800158c <main+0x13c>)
 8001490:	483f      	ldr	r0, [pc, #252]	@ (8001590 <main+0x140>)
 8001492:	f000 fe59 	bl	8002148 <SSD1306_Puts>
SSD1306_UpdateScreen(); // Update the screen
 8001496:	f000 fd1d 	bl	8001ed4 <SSD1306_UpdateScreen>
// test_Laser();
// test_Buzzer();
// test_LED();
// test_Servo();
// test_ESP8266();
HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800149a:	2100      	movs	r1, #0
 800149c:	483d      	ldr	r0, [pc, #244]	@ (8001594 <main+0x144>)
 800149e:	f004 f9b3 	bl	8005808 <HAL_TIM_IC_Start_IT>
ESP_Server_Init(username, pwd);
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <main+0x148>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <main+0x14c>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fda1 	bl	8000ff4 <ESP_Server_Init>

sendHTMLToLocalServer(localIP, regularHTML);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <main+0x150>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <main+0x154>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdfd 	bl	80010bc <sendHTMLToLocalServer>
systemStateMutex = osMutexNew(&systemStateMutex_attributes);
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <main+0x158>)
 80014c4:	f006 fd3b 	bl	8007f3e <osMutexNew>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a38      	ldr	r2, [pc, #224]	@ (80015ac <main+0x15c>)
 80014cc:	6013      	str	r3, [r2, #0]
if (systemStateMutex == NULL) {
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <main+0x15c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <main+0x8c>
    printf("Failed to create system state mutex\n");
 80014d6:	4836      	ldr	r0, [pc, #216]	@ (80015b0 <main+0x160>)
 80014d8:	f009 ff40 	bl	800b35c <puts>
}
// test_Button();
/* USER CODE END 2 */
/* Init scheduler */
osKernelInitialize();
 80014dc:	f006 fc38 	bl	8007d50 <osKernelInitialize>
/* Call init function for freertos objects (in freertos.c) */
MX_FREERTOS_Init();
 80014e0:	f7ff fe68 	bl	80011b4 <MX_FREERTOS_Init>
TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 80014e4:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <main+0x164>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4833      	ldr	r0, [pc, #204]	@ (80015b8 <main+0x168>)
 80014ea:	f006 fc7b 	bl	8007de4 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <main+0x16c>)
 80014f2:	6013      	str	r3, [r2, #0]
TaskSystemButtonHandle = osThreadNew(StartTaskSystemButton, NULL, &TaskSystemButton_attributes);
 80014f4:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <main+0x170>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4832      	ldr	r0, [pc, #200]	@ (80015c4 <main+0x174>)
 80014fa:	f006 fc73 	bl	8007de4 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <main+0x178>)
 8001502:	6013      	str	r3, [r2, #0]
TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 8001504:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <main+0x17c>)
 8001506:	2100      	movs	r1, #0
 8001508:	4831      	ldr	r0, [pc, #196]	@ (80015d0 <main+0x180>)
 800150a:	f006 fc6b 	bl	8007de4 <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <main+0x184>)
 8001512:	6013      	str	r3, [r2, #0]
//laser
TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 8001514:	4a30      	ldr	r2, [pc, #192]	@ (80015d8 <main+0x188>)
 8001516:	2100      	movs	r1, #0
 8001518:	4830      	ldr	r0, [pc, #192]	@ (80015dc <main+0x18c>)
 800151a:	f006 fc63 	bl	8007de4 <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <main+0x190>)
 8001522:	6013      	str	r3, [r2, #0]
TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <main+0x194>)
 8001526:	2100      	movs	r1, #0
 8001528:	482f      	ldr	r0, [pc, #188]	@ (80015e8 <main+0x198>)
 800152a:	f006 fc5b 	bl	8007de4 <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <main+0x19c>)
 8001532:	6013      	str	r3, [r2, #0]
TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 8001534:	4a2e      	ldr	r2, [pc, #184]	@ (80015f0 <main+0x1a0>)
 8001536:	2100      	movs	r1, #0
 8001538:	482e      	ldr	r0, [pc, #184]	@ (80015f4 <main+0x1a4>)
 800153a:	f006 fc53 	bl	8007de4 <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a2d      	ldr	r2, [pc, #180]	@ (80015f8 <main+0x1a8>)
 8001542:	6013      	str	r3, [r2, #0]
TaskLedSystemHandle = osThreadNew(StartTaskSystemLed, NULL, &StartTaskSystemLed_attributes);
 8001544:	4a2d      	ldr	r2, [pc, #180]	@ (80015fc <main+0x1ac>)
 8001546:	2100      	movs	r1, #0
 8001548:	482d      	ldr	r0, [pc, #180]	@ (8001600 <main+0x1b0>)
 800154a:	f006 fc4b 	bl	8007de4 <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <main+0x1b4>)
 8001552:	6013      	str	r3, [r2, #0]
TaskLaserHandle = osThreadNew(StartTaskLaser, NULL, &StartTaskLaser_attributes);
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <main+0x1b8>)
 8001556:	2100      	movs	r1, #0
 8001558:	482c      	ldr	r0, [pc, #176]	@ (800160c <main+0x1bc>)
 800155a:	f006 fc43 	bl	8007de4 <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a2b      	ldr	r2, [pc, #172]	@ (8001610 <main+0x1c0>)
 8001562:	6013      	str	r3, [r2, #0]
TaskUpdateWebHandle = osThreadNew(StartTaskUpdateWeb, NULL, &StartTaskUpdateWeb_attributes);
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <main+0x1c4>)
 8001566:	2100      	movs	r1, #0
 8001568:	482b      	ldr	r0, [pc, #172]	@ (8001618 <main+0x1c8>)
 800156a:	f006 fc3b 	bl	8007de4 <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a2a      	ldr	r2, [pc, #168]	@ (800161c <main+0x1cc>)
 8001572:	6013      	str	r3, [r2, #0]
TaskDistanceHandle = osThreadNew(StartTaskDistance, NULL, &StartTaskDistance_attributes);
 8001574:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <main+0x1d0>)
 8001576:	2100      	movs	r1, #0
 8001578:	482a      	ldr	r0, [pc, #168]	@ (8001624 <main+0x1d4>)
 800157a:	f006 fc33 	bl	8007de4 <osThreadNew>
 800157e:	4603      	mov	r3, r0
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <main+0x1d8>)
 8001582:	6013      	str	r3, [r2, #0]
/* Start scheduler */
osKernelStart();
 8001584:	f006 fc08 	bl	8007d98 <osKernelStart>
/* We should never get here as control is now taken by the scheduler */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <main+0x138>
 800158c:	20000000 	.word	0x20000000
 8001590:	0800c748 	.word	0x0800c748
 8001594:	20000678 	.word	0x20000678
 8001598:	20000020 	.word	0x20000020
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000010 	.word	0x20000010
 80015a8:	0800d6bc 	.word	0x0800d6bc
 80015ac:	20000190 	.word	0x20000190
 80015b0:	0800c750 	.word	0x0800c750
 80015b4:	0800d554 	.word	0x0800d554
 80015b8:	0800172d 	.word	0x0800172d
 80015bc:	20000168 	.word	0x20000168
 80015c0:	0800d578 	.word	0x0800d578
 80015c4:	08001915 	.word	0x08001915
 80015c8:	2000016c 	.word	0x2000016c
 80015cc:	0800d59c 	.word	0x0800d59c
 80015d0:	08001995 	.word	0x08001995
 80015d4:	20000170 	.word	0x20000170
 80015d8:	0800d5c0 	.word	0x0800d5c0
 80015dc:	08001a69 	.word	0x08001a69
 80015e0:	20000174 	.word	0x20000174
 80015e4:	0800d5e4 	.word	0x0800d5e4
 80015e8:	08001aa9 	.word	0x08001aa9
 80015ec:	20000178 	.word	0x20000178
 80015f0:	0800d608 	.word	0x0800d608
 80015f4:	08001b11 	.word	0x08001b11
 80015f8:	2000017c 	.word	0x2000017c
 80015fc:	0800d62c 	.word	0x0800d62c
 8001600:	08001ad9 	.word	0x08001ad9
 8001604:	20000180 	.word	0x20000180
 8001608:	0800d650 	.word	0x0800d650
 800160c:	08001a31 	.word	0x08001a31
 8001610:	20000184 	.word	0x20000184
 8001614:	0800d674 	.word	0x0800d674
 8001618:	0800180d 	.word	0x0800180d
 800161c:	20000188 	.word	0x20000188
 8001620:	0800d698 	.word	0x0800d698
 8001624:	08001781 	.word	0x08001781
 8001628:	2000018c 	.word	0x2000018c

0800162c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2234      	movs	r2, #52	@ 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 feac 	bl	800b398 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <SystemClock_Config+0xd4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <SystemClock_Config+0xd4>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <SystemClock_Config+0xd4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <SystemClock_Config+0xd8>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SystemClock_Config+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 336;
 80016a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fbd4 	bl	8004e68 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x9e>
{
  Error_Handler();
 80016c6:	f000 fb25 	bl	8001d14 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 f842 	bl	8004770 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xca>
{
  Error_Handler();
 80016f2:	f000 fb0f 	bl	8001d14 <Error_Handler>
}
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */
/* USER CODE END Callback 0 */
if (htim->Instance == TIM6) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
  HAL_IncTick();
 800171a:	f001 facf 	bl	8002cbc <HAL_IncTick>
}
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001000 	.word	0x40001000

0800172c <StartTaskButton>:
void StartTaskButton(void *argument) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001738:	480e      	ldr	r0, [pc, #56]	@ (8001774 <StartTaskButton+0x48>)
 800173a:	f002 fa1b 	bl	8003b74 <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f7      	bne.n	8001734 <StartTaskButton+0x8>
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <StartTaskButton+0x4c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d1f3      	bne.n	8001734 <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 800174c:	2032      	movs	r0, #50	@ 0x32
 800174e:	f001 fad5 	bl	8002cfc <HAL_Delay>
			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <StartTaskButton+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET);
 8001758:	bf00      	nop
 800175a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <StartTaskButton+0x48>)
 8001760:	f002 fa08 	bl	8003b74 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f7      	beq.n	800175a <StartTaskButton+0x2e>
			HAL_Delay(50); // Prevent multiple triggers
 800176a:	2032      	movs	r0, #50	@ 0x32
 800176c:	f001 fac6 	bl	8002cfc <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001770:	e7e0      	b.n	8001734 <StartTaskButton+0x8>
 8001772:	bf00      	nop
 8001774:	40020800 	.word	0x40020800
 8001778:	20000150 	.word	0x20000150
 800177c:	2000014c 	.word	0x2000014c

08001780 <StartTaskDistance>:
		}
	}
}

void StartTaskDistance(void *argument) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		 HCSR04_Read();  // Trigger distance measurement
 8001788:	f000 faa4 	bl	8001cd4 <HCSR04_Read>
		 HAL_Delay(200);  // Delay to allow sensor to respond
 800178c:	20c8      	movs	r0, #200	@ 0xc8
 800178e:	f001 fab5 	bl	8002cfc <HAL_Delay>

		 char buffer[10];
		 SSD1306_Clear();
 8001792:	f000 fcfe 	bl	8002192 <SSD1306_Clear>
		 SSD1306_GotoXY(0, 10);
 8001796:	210a      	movs	r1, #10
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fc41 	bl	8002020 <SSD1306_GotoXY>
		 SSD1306_Puts("Distance", &Font_11x18, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	4914      	ldr	r1, [pc, #80]	@ (80017f4 <StartTaskDistance+0x74>)
 80017a2:	4815      	ldr	r0, [pc, #84]	@ (80017f8 <StartTaskDistance+0x78>)
 80017a4:	f000 fcd0 	bl	8002148 <SSD1306_Puts>
		 SSD1306_GotoXY(0, 30);
 80017a8:	211e      	movs	r1, #30
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fc38 	bl	8002020 <SSD1306_GotoXY>
		 sprintf(buffer, "%d cm", Distance);
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <StartTaskDistance+0x7c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4911      	ldr	r1, [pc, #68]	@ (8001800 <StartTaskDistance+0x80>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 fc83 	bl	800b0c8 <siprintf>
		 SSD1306_Puts(buffer, &Font_11x18, 1);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2201      	movs	r2, #1
 80017c8:	490a      	ldr	r1, [pc, #40]	@ (80017f4 <StartTaskDistance+0x74>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fcbc 	bl	8002148 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 80017d0:	f000 fb80 	bl	8001ed4 <SSD1306_UpdateScreen>

		 if(system_state == SYSTEM_ON && Distance < 15){
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <StartTaskDistance+0x84>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <StartTaskDistance+0x6a>
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <StartTaskDistance+0x7c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b0e      	cmp	r3, #14
 80017e2:	d802      	bhi.n	80017ea <StartTaskDistance+0x6a>
			 alarm_state = ALARM_ON;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <StartTaskDistance+0x88>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
		 }

		 osDelay(500);  // Delay to avoid excessive updates
 80017ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017ee:	f006 fb8b 	bl	8007f08 <osDelay>
	{
 80017f2:	e7c9      	b.n	8001788 <StartTaskDistance+0x8>
 80017f4:	20000000 	.word	0x20000000
 80017f8:	0800c774 	.word	0x0800c774
 80017fc:	20000165 	.word	0x20000165
 8001800:	0800c780 	.word	0x0800c780
 8001804:	20000150 	.word	0x20000150
 8001808:	2000014c 	.word	0x2000014c

0800180c <StartTaskUpdateWeb>:
		}
	}


void StartTaskUpdateWeb(void *argument) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    int prev_alarm_state = ALARM_OFF;  // Track previous state && prev_alarm_state == ALARM_OFF
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
    int prev_system_state = SYSTEM_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]

    for (;;) {
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 800181c:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4619      	mov	r1, r3
 8001824:	4835      	ldr	r0, [pc, #212]	@ (80018fc <StartTaskUpdateWeb+0xf0>)
 8001826:	f009 fd31 	bl	800b28c <iprintf>

        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 800182a:	4b33      	ldr	r3, [pc, #204]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d10b      	bne.n	800184a <StartTaskUpdateWeb+0x3e>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d108      	bne.n	800184a <StartTaskUpdateWeb+0x3e>
            // Alarm just turned ON
            sendHTMLToLocalServer(localIP, intrusionHTML);
 8001838:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <StartTaskUpdateWeb+0xf4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a31      	ldr	r2, [pc, #196]	@ (8001904 <StartTaskUpdateWeb+0xf8>)
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc3a 	bl	80010bc <sendHTMLToLocalServer>
        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8001848:	e04a      	b.n	80018e0 <StartTaskUpdateWeb+0xd4>
        }
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <StartTaskUpdateWeb+0x66>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10c      	bne.n	8001872 <StartTaskUpdateWeb+0x66>
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <StartTaskUpdateWeb+0xfc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d108      	bne.n	8001872 <StartTaskUpdateWeb+0x66>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <StartTaskUpdateWeb+0xf4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a29      	ldr	r2, [pc, #164]	@ (800190c <StartTaskUpdateWeb+0x100>)
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc26 	bl	80010bc <sendHTMLToLocalServer>
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8001870:	e036      	b.n	80018e0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <StartTaskUpdateWeb+0x8e>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10c      	bne.n	800189a <StartTaskUpdateWeb+0x8e>
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <StartTaskUpdateWeb+0xfc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d108      	bne.n	800189a <StartTaskUpdateWeb+0x8e>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <StartTaskUpdateWeb+0xf4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1f      	ldr	r2, [pc, #124]	@ (800190c <StartTaskUpdateWeb+0x100>)
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fc12 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8001898:	e022      	b.n	80018e0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10b      	bne.n	80018ba <StartTaskUpdateWeb+0xae>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <StartTaskUpdateWeb+0xae>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <StartTaskUpdateWeb+0xf4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <StartTaskUpdateWeb+0x104>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc02 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 80018b8:	e012      	b.n	80018e0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state == SYSTEM_OFF && system_state== SYSTEM_ON){
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <StartTaskUpdateWeb+0xd4>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10b      	bne.n	80018e0 <StartTaskUpdateWeb+0xd4>
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <StartTaskUpdateWeb+0xfc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <StartTaskUpdateWeb+0xd4>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <StartTaskUpdateWeb+0xf4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <StartTaskUpdateWeb+0x104>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fbee 	bl	80010bc <sendHTMLToLocalServer>
        }

        // Update previous state
        prev_alarm_state = alarm_state;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <StartTaskUpdateWeb+0xec>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
        prev_system_state = system_state;
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <StartTaskUpdateWeb+0xfc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60bb      	str	r3, [r7, #8]

        osDelay(1000);  // Delay before checking again
 80018ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018f0:	f006 fb0a 	bl	8007f08 <osDelay>
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 80018f4:	e792      	b.n	800181c <StartTaskUpdateWeb+0x10>
 80018f6:	bf00      	nop
 80018f8:	2000014c 	.word	0x2000014c
 80018fc:	0800c788 	.word	0x0800c788
 8001900:	20000018 	.word	0x20000018
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000150 	.word	0x20000150
 800190c:	20000014 	.word	0x20000014
 8001910:	20000010 	.word	0x20000010

08001914 <StartTaskSystemButton>:
    }
}

void StartTaskSystemButton(void *argument) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
   for (;;) {
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 800191c:	2110      	movs	r1, #16
 800191e:	4819      	ldr	r0, [pc, #100]	@ (8001984 <StartTaskSystemButton+0x70>)
 8001920:	f002 f928 	bl	8003b74 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f8      	bne.n	800191c <StartTaskSystemButton+0x8>
           HAL_Delay(50); // Debounce delay
 800192a:	2032      	movs	r0, #50	@ 0x32
 800192c:	f001 f9e6 	bl	8002cfc <HAL_Delay>
           osMutexAcquire(systemStateMutex, osWaitForever); // Lock mutex
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <StartTaskSystemButton+0x74>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001938:	4618      	mov	r0, r3
 800193a:	f006 fb86 	bl	800804a <osMutexAcquire>
           system_state = !system_state;
 800193e:	4b13      	ldr	r3, [pc, #76]	@ (800198c <StartTaskSystemButton+0x78>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <StartTaskSystemButton+0x78>)
 8001950:	601a      	str	r2, [r3, #0]
           if (system_state == SYSTEM_OFF){
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <StartTaskSystemButton+0x78>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <StartTaskSystemButton+0x4c>
               alarm_state = ALARM_OFF;
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <StartTaskSystemButton+0x7c>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
           }
           osMutexRelease(systemStateMutex); // Release mutex
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <StartTaskSystemButton+0x74>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f006 fbbb 	bl	80080e0 <osMutexRelease>
           // Wait for button release
           while (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET);
 800196a:	bf00      	nop
 800196c:	2110      	movs	r1, #16
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <StartTaskSystemButton+0x70>)
 8001970:	f002 f900 	bl	8003b74 <HAL_GPIO_ReadPin>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f8      	beq.n	800196c <StartTaskSystemButton+0x58>
           HAL_Delay(50); // Prevent multiple triggers
 800197a:	2032      	movs	r0, #50	@ 0x32
 800197c:	f001 f9be 	bl	8002cfc <HAL_Delay>
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001980:	e7cc      	b.n	800191c <StartTaskSystemButton+0x8>
 8001982:	bf00      	nop
 8001984:	40020800 	.word	0x40020800
 8001988:	20000190 	.word	0x20000190
 800198c:	20000150 	.word	0x20000150
 8001990:	2000014c 	.word	0x2000014c

08001994 <StartTaskLDR>:
       }
   }
}
void StartTaskLDR(void *argument) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
   int local_system_state = SYSTEM_OFF;  // Track the last known state
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
   for (;;) {
       // Acquire mutex before reading system_state
       osMutexAcquire(systemStateMutex, osWaitForever);
 80019a0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <StartTaskLDR+0x88>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 fb4e 	bl	800804a <osMutexAcquire>
       int current_system_state = system_state;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <StartTaskLDR+0x8c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
       osMutexRelease(systemStateMutex);
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <StartTaskLDR+0x88>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f006 fb91 	bl	80080e0 <osMutexRelease>
       // Check if system just turned ON
       if (current_system_state == SYSTEM_ON && local_system_state == SYSTEM_OFF) {
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <StartTaskLDR+0x3e>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <StartTaskLDR+0x3e>
           osDelay(2000);  // Delay before first LDR reading
 80019ca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019ce:	f006 fa9b 	bl	8007f08 <osDelay>
       }
       // Update local state
       local_system_state = current_system_state;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	617b      	str	r3, [r7, #20]
       if (current_system_state == SYSTEM_ON) {
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d119      	bne.n	8001a10 <StartTaskLDR+0x7c>
           uint32_t adcValue;
           HAL_ADC_Start(&hadc1);
 80019dc:	4811      	ldr	r0, [pc, #68]	@ (8001a24 <StartTaskLDR+0x90>)
 80019de:	f001 f9f5 	bl	8002dcc <HAL_ADC_Start>
           HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019e6:	480f      	ldr	r0, [pc, #60]	@ (8001a24 <StartTaskLDR+0x90>)
 80019e8:	f001 faf5 	bl	8002fd6 <HAL_ADC_PollForConversion>
           adcValue = HAL_ADC_GetValue(&hadc1);
 80019ec:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <StartTaskLDR+0x90>)
 80019ee:	f001 fb7d 	bl	80030ec <HAL_ADC_GetValue>
 80019f2:	60f8      	str	r0, [r7, #12]
           HAL_ADC_Stop(&hadc1);
 80019f4:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <StartTaskLDR+0x90>)
 80019f6:	f001 fabb 	bl	8002f70 <HAL_ADC_Stop>
           light_value = adcValue;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <StartTaskLDR+0x94>)
 80019fe:	6013      	str	r3, [r2, #0]
           if (adcValue < 1500) {
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d802      	bhi.n	8001a10 <StartTaskLDR+0x7c>
               alarm_state = ALARM_ON;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <StartTaskLDR+0x98>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

           }
       }
       osDelay(500);  // Regular delay between reads
 8001a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a14:	f006 fa78 	bl	8007f08 <osDelay>
   for (;;) {
 8001a18:	e7c2      	b.n	80019a0 <StartTaskLDR+0xc>
 8001a1a:	bf00      	nop
 8001a1c:	20000190 	.word	0x20000190
 8001a20:	20000150 	.word	0x20000150
 8001a24:	200000ac 	.word	0x200000ac
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	2000014c 	.word	0x2000014c

08001a30 <StartTaskLaser>:
   }
}


void StartTaskLaser(void *argument) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <StartTaskLaser+0x30>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <StartTaskLaser+0x1c>
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2102      	movs	r1, #2
 8001a44:	4807      	ldr	r0, [pc, #28]	@ (8001a64 <StartTaskLaser+0x34>)
 8001a46:	f002 f8ad 	bl	8003ba4 <HAL_GPIO_WritePin>
 8001a4a:	e004      	b.n	8001a56 <StartTaskLaser+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <StartTaskLaser+0x34>)
 8001a52:	f002 f8a7 	bl	8003ba4 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001a56:	2064      	movs	r0, #100	@ 0x64
 8001a58:	f006 fa56 	bl	8007f08 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001a5c:	e7ec      	b.n	8001a38 <StartTaskLaser+0x8>
 8001a5e:	bf00      	nop
 8001a60:	20000150 	.word	0x20000150
 8001a64:	40020400 	.word	0x40020400

08001a68 <StartTaskBuzzer>:
   }
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <StartTaskBuzzer+0x38>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d1fb      	bne.n	8001a70 <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <StartTaskBuzzer+0x3c>)
 8001a7e:	f002 f891 	bl	8003ba4 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001a82:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a86:	f001 f939 	bl	8002cfc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <StartTaskBuzzer+0x3c>)
 8001a90:	f002 f888 	bl	8003ba4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a98:	f001 f930 	bl	8002cfc <HAL_Delay>
		if(alarm_state == ALARM_ON){
 8001a9c:	e7e8      	b.n	8001a70 <StartTaskBuzzer+0x8>
 8001a9e:	bf00      	nop
 8001aa0:	2000014c 	.word	0x2000014c
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <StartTaskLed>:
		}
// Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	for(;;){
		if(alarm_state==ALARM_ON){
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <StartTaskLed+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <StartTaskLed+0x1c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2120      	movs	r1, #32
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <StartTaskLed+0x2c>)
 8001abe:	f002 f871 	bl	8003ba4 <HAL_GPIO_WritePin>
 8001ac2:	e7f5      	b.n	8001ab0 <StartTaskLed+0x8>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <StartTaskLed+0x2c>)
 8001aca:	f002 f86b 	bl	8003ba4 <HAL_GPIO_WritePin>
		if(alarm_state==ALARM_ON){
 8001ace:	e7ef      	b.n	8001ab0 <StartTaskLed+0x8>
 8001ad0:	2000014c 	.word	0x2000014c
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <StartTaskSystemLed>:
		}
		  // LED ON
	}
}
void StartTaskSystemLed(void *argument) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <StartTaskSystemLed+0x30>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <StartTaskSystemLed+0x1c>
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2140      	movs	r1, #64	@ 0x40
 8001aec:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <StartTaskSystemLed+0x34>)
 8001aee:	f002 f859 	bl	8003ba4 <HAL_GPIO_WritePin>
 8001af2:	e004      	b.n	8001afe <StartTaskSystemLed+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <StartTaskSystemLed+0x34>)
 8001afa:	f002 f853 	bl	8003ba4 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001afe:	2064      	movs	r0, #100	@ 0x64
 8001b00:	f006 fa02 	bl	8007f08 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001b04:	e7ec      	b.n	8001ae0 <StartTaskSystemLed+0x8>
 8001b06:	bf00      	nop
 8001b08:	20000150 	.word	0x20000150
 8001b0c:	40020000 	.word	0x40020000

08001b10 <StartTaskServo>:
   }
}
void StartTaskServo(void *argument) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		osDelay(1000);
 8001b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b1c:	f006 f9f4 	bl	8007f08 <osDelay>
		 if(alarm_state == ALARM_ON && door_state == DOOR_OPEN) {
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <StartTaskServo+0x98>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11d      	bne.n	8001b64 <StartTaskServo+0x54>
 8001b28:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <StartTaskServo+0x9c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d119      	bne.n	8001b64 <StartTaskServo+0x54>
		            // Move both servos 90° to the left
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b30:	2100      	movs	r1, #0
 8001b32:	481f      	ldr	r0, [pc, #124]	@ (8001bb0 <StartTaskServo+0xa0>)
 8001b34:	f003 fd50 	bl	80055d8 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	481e      	ldr	r0, [pc, #120]	@ (8001bb4 <StartTaskServo+0xa4>)
 8001b3c:	f003 fd4c 	bl	80055d8 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);  // 90° for first servo
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <StartTaskServo+0xa0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b48:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);  // 90° for second servo (same direction)
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <StartTaskServo+0xa4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b52:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001b54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b58:	f001 f8d0 	bl	8002cfc <HAL_Delay>
		            door_state = DOOR_CLOSED;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <StartTaskServo+0x9c>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e020      	b.n	8001ba6 <StartTaskServo+0x96>
		        }
		        else if(alarm_state == ALARM_OFF && door_state == DOOR_CLOSED) {
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <StartTaskServo+0x98>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1d5      	bne.n	8001b18 <StartTaskServo+0x8>
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <StartTaskServo+0x9c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d1d1      	bne.n	8001b18 <StartTaskServo+0x8>
		            // Move both servos back to 0° (neutral)
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b74:	2100      	movs	r1, #0
 8001b76:	480e      	ldr	r0, [pc, #56]	@ (8001bb0 <StartTaskServo+0xa0>)
 8001b78:	f003 fd2e 	bl	80055d8 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <StartTaskServo+0xa4>)
 8001b80:	f003 fd2a 	bl	80055d8 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);  // Back to 0° for first servo
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <StartTaskServo+0xa0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2500);   // Back to 0° for second servo (same direction)
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <StartTaskServo+0xa4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001b96:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001b98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b9c:	f001 f8ae 	bl	8002cfc <HAL_Delay>
		            door_state = DOOR_OPEN;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	@ (8001bac <StartTaskServo+0x9c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001ba6:	e7b7      	b.n	8001b18 <StartTaskServo+0x8>
 8001ba8:	2000014c 	.word	0x2000014c
 8001bac:	20000154 	.word	0x20000154
 8001bb0:	20000630 	.word	0x20000630
 8001bb4:	200005e8 	.word	0x200005e8

08001bb8 <HAL_TIM_IC_CaptureCallback>:
		        }
	}
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt is from channel 1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7f1b      	ldrb	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d170      	bne.n	8001caa <HAL_TIM_IC_CaptureCallback+0xf2>
        if (Is_First_Captured == 0) { // If it's the first edge (rising)
 8001bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11a      	bne.n	8001c06 <HAL_TIM_IC_CaptureCallback+0x4e>
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read first value
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f004 fa56 	bl	8006084 <HAL_TIM_ReadCapturedValue>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001bdc:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 8001bde:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Switch to falling edge
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 020a 	bic.w	r2, r2, #10
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0202 	orr.w	r2, r2, #2
 8001c02:	621a      	str	r2, [r3, #32]
            Distance = Difference * 0.034 / 2; // Convert to cm

            Is_First_Captured = 0; // Reset flag for next measurement
        }
    }
}
 8001c04:	e051      	b.n	8001caa <HAL_TIM_IC_CaptureCallback+0xf2>
        } else if (Is_First_Captured == 1) { // If it's the second edge (falling)
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d14d      	bne.n	8001caa <HAL_TIM_IC_CaptureCallback+0xf2>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read second value
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 fa37 	bl	8006084 <HAL_TIM_ReadCapturedValue>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c1a:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // Reset to rising edge
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a1a      	ldr	r2, [r3, #32]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 020a 	bic.w	r2, r2, #10
 8001c2a:	621a      	str	r2, [r3, #32]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a12      	ldr	r2, [r2, #32]
 8001c36:	621a      	str	r2, [r3, #32]
            if (IC_Val2 > IC_Val1) {
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d907      	bls.n	8001c54 <HAL_TIM_IC_CaptureCallback+0x9c>
                Difference = IC_Val2 - IC_Val1;
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e009      	b.n	8001c68 <HAL_TIM_IC_CaptureCallback+0xb0>
                Difference = (0xFFFF - IC_Val1) + IC_Val2;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c62:	33ff      	adds	r3, #255	@ 0xff
 8001c64:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c66:	6013      	str	r3, [r2, #0]
            Distance = Difference * 0.034 / 2; // Convert to cm
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc69 	bl	8000544 <__aeabi_ui2d>
 8001c72:	a311      	add	r3, pc, #68	@ (adr r3, 8001cb8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fcde 	bl	8000638 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c8c:	f7fe fdfe 	bl	800088c <__aeabi_ddiv>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe fee0 	bl	8000a5c <__aeabi_d2uiz>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001ca2:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // Reset flag for next measurement
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	b020c49c 	.word	0xb020c49c
 8001cbc:	3fa16872 	.word	0x3fa16872
 8001cc0:	20000164 	.word	0x20000164
 8001cc4:	20000158 	.word	0x20000158
 8001cc8:	2000015c 	.word	0x2000015c
 8001ccc:	20000160 	.word	0x20000160
 8001cd0:	20000165 	.word	0x20000165

08001cd4 <HCSR04_Read>:


void HCSR04_Read (void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // Set TRIG pin HIGH
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cde:	480a      	ldr	r0, [pc, #40]	@ (8001d08 <HCSR04_Read+0x34>)
 8001ce0:	f001 ff60 	bl	8003ba4 <HAL_GPIO_WritePin>
    delay(10);  // 10µs pulse
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f7ff fb99 	bl	800141c <delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // Set TRIG pin LOW
 8001cea:	2200      	movs	r2, #0
 8001cec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf0:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <HCSR04_Read+0x34>)
 8001cf2:	f001 ff57 	bl	8003ba4 <HAL_GPIO_WritePin>

    // Reset first capture flag
    Is_First_Captured = 0;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HCSR04_Read+0x38>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]

    // Start the input capture interrupt
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4804      	ldr	r0, [pc, #16]	@ (8001d10 <HCSR04_Read+0x3c>)
 8001d00:	f003 fd82 	bl	8005808 <HAL_TIM_IC_Start_IT>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	20000164 	.word	0x20000164
 8001d10:	20000678 	.word	0x20000678

08001d14 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <Error_Handler+0x8>

08001d20 <_write>:
{
}
/* USER CODE END Error_Handler_Debug */
}
int _write(int file, char *ptr, int len) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	4804      	ldr	r0, [pc, #16]	@ (8001d48 <_write+0x28>)
 8001d38:	f004 ff7e 	bl	8006c38 <HAL_UART_Transmit>
  return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000708 	.word	0x20000708

08001d4c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d52:	f000 fa27 	bl	80021a4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d56:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2178      	movs	r1, #120	@ 0x78
 8001d5e:	485b      	ldr	r0, [pc, #364]	@ (8001ecc <SSD1306_Init+0x180>)
 8001d60:	f002 f97c 	bl	800405c <HAL_I2C_IsDeviceReady>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e0a9      	b.n	8001ec2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001d6e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001d72:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d74:	e002      	b.n	8001d7c <SSD1306_Init+0x30>
		p--;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001d82:	22ae      	movs	r2, #174	@ 0xae
 8001d84:	2100      	movs	r1, #0
 8001d86:	2078      	movs	r0, #120	@ 0x78
 8001d88:	f000 fa88 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2078      	movs	r0, #120	@ 0x78
 8001d92:	f000 fa83 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d96:	2210      	movs	r2, #16
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2078      	movs	r0, #120	@ 0x78
 8001d9c:	f000 fa7e 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001da0:	22b0      	movs	r2, #176	@ 0xb0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2078      	movs	r0, #120	@ 0x78
 8001da6:	f000 fa79 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001daa:	22c8      	movs	r2, #200	@ 0xc8
 8001dac:	2100      	movs	r1, #0
 8001dae:	2078      	movs	r0, #120	@ 0x78
 8001db0:	f000 fa74 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2078      	movs	r0, #120	@ 0x78
 8001dba:	f000 fa6f 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2078      	movs	r0, #120	@ 0x78
 8001dc4:	f000 fa6a 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001dc8:	2240      	movs	r2, #64	@ 0x40
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2078      	movs	r0, #120	@ 0x78
 8001dce:	f000 fa65 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001dd2:	2281      	movs	r2, #129	@ 0x81
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2078      	movs	r0, #120	@ 0x78
 8001dd8:	f000 fa60 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001ddc:	22ff      	movs	r2, #255	@ 0xff
 8001dde:	2100      	movs	r1, #0
 8001de0:	2078      	movs	r0, #120	@ 0x78
 8001de2:	f000 fa5b 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001de6:	22a1      	movs	r2, #161	@ 0xa1
 8001de8:	2100      	movs	r1, #0
 8001dea:	2078      	movs	r0, #120	@ 0x78
 8001dec:	f000 fa56 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001df0:	22a6      	movs	r2, #166	@ 0xa6
 8001df2:	2100      	movs	r1, #0
 8001df4:	2078      	movs	r0, #120	@ 0x78
 8001df6:	f000 fa51 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001dfa:	22a8      	movs	r2, #168	@ 0xa8
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2078      	movs	r0, #120	@ 0x78
 8001e00:	f000 fa4c 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e04:	223f      	movs	r2, #63	@ 0x3f
 8001e06:	2100      	movs	r1, #0
 8001e08:	2078      	movs	r0, #120	@ 0x78
 8001e0a:	f000 fa47 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e0e:	22a4      	movs	r2, #164	@ 0xa4
 8001e10:	2100      	movs	r1, #0
 8001e12:	2078      	movs	r0, #120	@ 0x78
 8001e14:	f000 fa42 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e18:	22d3      	movs	r2, #211	@ 0xd3
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2078      	movs	r0, #120	@ 0x78
 8001e1e:	f000 fa3d 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2078      	movs	r0, #120	@ 0x78
 8001e28:	f000 fa38 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e2c:	22d5      	movs	r2, #213	@ 0xd5
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2078      	movs	r0, #120	@ 0x78
 8001e32:	f000 fa33 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e36:	22f0      	movs	r2, #240	@ 0xf0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2078      	movs	r0, #120	@ 0x78
 8001e3c:	f000 fa2e 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e40:	22d9      	movs	r2, #217	@ 0xd9
 8001e42:	2100      	movs	r1, #0
 8001e44:	2078      	movs	r0, #120	@ 0x78
 8001e46:	f000 fa29 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e4a:	2222      	movs	r2, #34	@ 0x22
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2078      	movs	r0, #120	@ 0x78
 8001e50:	f000 fa24 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e54:	22da      	movs	r2, #218	@ 0xda
 8001e56:	2100      	movs	r1, #0
 8001e58:	2078      	movs	r0, #120	@ 0x78
 8001e5a:	f000 fa1f 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e5e:	2212      	movs	r2, #18
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	@ 0x78
 8001e64:	f000 fa1a 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e68:	22db      	movs	r2, #219	@ 0xdb
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	@ 0x78
 8001e6e:	f000 fa15 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e72:	2220      	movs	r2, #32
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	@ 0x78
 8001e78:	f000 fa10 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001e7c:	228d      	movs	r2, #141	@ 0x8d
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	@ 0x78
 8001e82:	f000 fa0b 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001e86:	2214      	movs	r2, #20
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	@ 0x78
 8001e8c:	f000 fa06 	bl	800229c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e90:	22af      	movs	r2, #175	@ 0xaf
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	@ 0x78
 8001e96:	f000 fa01 	bl	800229c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001e9a:	222e      	movs	r2, #46	@ 0x2e
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	@ 0x78
 8001ea0:	f000 f9fc 	bl	800229c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f000 f843 	bl	8001f30 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001eaa:	f000 f813 	bl	8001ed4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <SSD1306_Init+0x184>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <SSD1306_Init+0x184>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001eba:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <SSD1306_Init+0x184>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200000f8 	.word	0x200000f8
 8001ed0:	20000594 	.word	0x20000594

08001ed4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	e01d      	b.n	8001f1c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	3b50      	subs	r3, #80	@ 0x50
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2078      	movs	r0, #120	@ 0x78
 8001eec:	f000 f9d6 	bl	800229c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2078      	movs	r0, #120	@ 0x78
 8001ef6:	f000 f9d1 	bl	800229c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001efa:	2210      	movs	r2, #16
 8001efc:	2100      	movs	r1, #0
 8001efe:	2078      	movs	r0, #120	@ 0x78
 8001f00:	f000 f9cc 	bl	800229c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	01db      	lsls	r3, r3, #7
 8001f08:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <SSD1306_UpdateScreen+0x58>)
 8001f0a:	441a      	add	r2, r3
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	2140      	movs	r1, #64	@ 0x40
 8001f10:	2078      	movs	r0, #120	@ 0x78
 8001f12:	f000 f95d 	bl	80021d0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b07      	cmp	r3, #7
 8001f20:	d9de      	bls.n	8001ee0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000194 	.word	0x20000194

08001f30 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <SSD1306_Fill+0x14>
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <SSD1306_Fill+0x16>
 8001f44:	23ff      	movs	r3, #255	@ 0xff
 8001f46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <SSD1306_Fill+0x2c>)
 8001f4e:	f009 fa23 	bl	800b398 <memset>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000194 	.word	0x20000194

08001f60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	80bb      	strh	r3, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	70fb      	strb	r3, [r7, #3]
	if (
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f76:	d848      	bhi.n	800200a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f7c:	d845      	bhi.n	800200a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f7e:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <SSD1306_DrawPixel+0xb8>)
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d11a      	bne.n	8001fd0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f9a:	88fa      	ldrh	r2, [r7, #6]
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	b298      	uxth	r0, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	01db      	lsls	r3, r3, #7
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <SSD1306_DrawPixel+0xbc>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	b25a      	sxtb	r2, r3
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b259      	sxtb	r1, r3
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2c9      	uxtb	r1, r1
 8001fca:	4a14      	ldr	r2, [pc, #80]	@ (800201c <SSD1306_DrawPixel+0xbc>)
 8001fcc:	54d1      	strb	r1, [r2, r3]
 8001fce:	e01d      	b.n	800200c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	b298      	uxth	r0, r3
 8001fd8:	4603      	mov	r3, r0
 8001fda:	01db      	lsls	r3, r3, #7
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a0f      	ldr	r2, [pc, #60]	@ (800201c <SSD1306_DrawPixel+0xbc>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b259      	sxtb	r1, r3
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	01db      	lsls	r3, r3, #7
 8002000:	4413      	add	r3, r2
 8002002:	b2c9      	uxtb	r1, r1
 8002004:	4a05      	ldr	r2, [pc, #20]	@ (800201c <SSD1306_DrawPixel+0xbc>)
 8002006:	54d1      	strb	r1, [r2, r3]
 8002008:	e000      	b.n	800200c <SSD1306_DrawPixel+0xac>
		return;
 800200a:	bf00      	nop
	}
}
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000594 	.word	0x20000594
 800201c:	20000194 	.word	0x20000194

08002020 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	80fb      	strh	r3, [r7, #6]
 800202c:	4613      	mov	r3, r2
 800202e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002030:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <SSD1306_GotoXY+0x28>)
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <SSD1306_GotoXY+0x28>)
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	8053      	strh	r3, [r2, #2]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20000594 	.word	0x20000594

0800204c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4613      	mov	r3, r2
 800205a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800205c:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <SSD1306_Putc+0xf8>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
	if (
 8002068:	2b7f      	cmp	r3, #127	@ 0x7f
 800206a:	dc07      	bgt.n	800207c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800206c:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <SSD1306_Putc+0xf8>)
 800206e:	885b      	ldrh	r3, [r3, #2]
 8002070:	461a      	mov	r2, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002078:	2b3f      	cmp	r3, #63	@ 0x3f
 800207a:	dd01      	ble.n	8002080 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800207c:	2300      	movs	r3, #0
 800207e:	e05d      	b.n	800213c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e04b      	b.n	800211e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	3b20      	subs	r3, #32
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	7849      	ldrb	r1, [r1, #1]
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4619      	mov	r1, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	440b      	add	r3, r1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e030      	b.n	800210c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020ba:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <SSD1306_Putc+0xf8>)
 80020bc:	881a      	ldrh	r2, [r3, #0]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	b298      	uxth	r0, r3
 80020c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <SSD1306_Putc+0xf8>)
 80020c8:	885a      	ldrh	r2, [r3, #2]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	79ba      	ldrb	r2, [r7, #6]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f7ff ff43 	bl	8001f60 <SSD1306_DrawPixel>
 80020da:	e014      	b.n	8002106 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <SSD1306_Putc+0xf8>)
 80020de:	881a      	ldrh	r2, [r3, #0]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	b298      	uxth	r0, r3
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <SSD1306_Putc+0xf8>)
 80020ea:	885a      	ldrh	r2, [r3, #2]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b299      	uxth	r1, r3
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	f7ff ff2d 	bl	8001f60 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	3301      	adds	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4293      	cmp	r3, r2
 8002116:	d3c8      	bcc.n	80020aa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	461a      	mov	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4293      	cmp	r3, r2
 8002128:	d3ad      	bcc.n	8002086 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <SSD1306_Putc+0xf8>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <SSD1306_Putc+0xf8>)
 8002138:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800213a:	79fb      	ldrb	r3, [r7, #7]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000594 	.word	0x20000594

08002148 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002156:	e012      	b.n	800217e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff73 	bl	800204c <SSD1306_Putc>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d002      	beq.n	8002178 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	e008      	b.n	800218a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e8      	bne.n	8002158 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	781b      	ldrb	r3, [r3, #0]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002196:	2000      	movs	r0, #0
 8002198:	f7ff feca 	bl	8001f30 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800219c:	f7ff fe9a 	bl	8001ed4 <SSD1306_UpdateScreen>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <ssd1306_I2C_Init+0x28>)
 80021ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021ae:	e002      	b.n	80021b6 <ssd1306_I2C_Init+0x12>
		p--;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f9      	bne.n	80021b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	0003d090 	.word	0x0003d090

080021d0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b0c7      	sub	sp, #284	@ 0x11c
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80021de:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80021e2:	600a      	str	r2, [r1, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021ea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021ee:	4622      	mov	r2, r4
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021f6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80021fa:	4602      	mov	r2, r0
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002202:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002206:	460a      	mov	r2, r1
 8002208:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800220a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800220e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002212:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002216:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002224:	e015      	b.n	8002252 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002226:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800222a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800222e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	441a      	add	r2, r3
 8002236:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800223a:	3301      	adds	r3, #1
 800223c:	7811      	ldrb	r1, [r2, #0]
 800223e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002242:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002246:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002248:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800224c:	3301      	adds	r3, #1
 800224e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002252:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002256:	b29b      	uxth	r3, r3
 8002258:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800225c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d8df      	bhi.n	8002226 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800226a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b299      	uxth	r1, r3
 8002272:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002276:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b29b      	uxth	r3, r3
 8002280:	f107 020c 	add.w	r2, r7, #12
 8002284:	200a      	movs	r0, #10
 8002286:	9000      	str	r0, [sp, #0]
 8002288:	4803      	ldr	r0, [pc, #12]	@ (8002298 <ssd1306_I2C_WriteMulti+0xc8>)
 800228a:	f001 fde9 	bl	8003e60 <HAL_I2C_Master_Transmit>
}
 800228e:	bf00      	nop
 8002290:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}
 8002298:	200000f8 	.word	0x200000f8

0800229c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	460b      	mov	r3, r1
 80022a8:	71bb      	strb	r3, [r7, #6]
 80022aa:	4613      	mov	r3, r2
 80022ac:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022b2:	797b      	ldrb	r3, [r7, #5]
 80022b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	b299      	uxth	r1, r3
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	230a      	movs	r3, #10
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2302      	movs	r3, #2
 80022c4:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <ssd1306_I2C_Write+0x38>)
 80022c6:	f001 fdcb 	bl	8003e60 <HAL_I2C_Master_Transmit>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200000f8 	.word	0x200000f8

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_MspInit+0x54>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4a11      	ldr	r2, [pc, #68]	@ (800232c <HAL_MspInit+0x54>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ee:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <HAL_MspInit+0x54>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_MspInit+0x54>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <HAL_MspInit+0x54>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	@ 0x40
 800230a:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_MspInit+0x54>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	f06f 0001 	mvn.w	r0, #1
 800231e:	f001 f9d9 	bl	80036d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	@ 0x38
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4b33      	ldr	r3, [pc, #204]	@ (8002414 <HAL_InitTick+0xe4>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	4a32      	ldr	r2, [pc, #200]	@ (8002414 <HAL_InitTick+0xe4>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002350:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <HAL_InitTick+0xe4>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800235c:	f107 0210 	add.w	r2, r7, #16
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f002 fb1c 	bl	80049a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002376:	f002 faed 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 800237a:	6378      	str	r0, [r7, #52]	@ 0x34
 800237c:	e004      	b.n	8002388 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800237e:	f002 fae9 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8002382:	4603      	mov	r3, r0
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238a:	4a23      	ldr	r2, [pc, #140]	@ (8002418 <HAL_InitTick+0xe8>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	3b01      	subs	r3, #1
 8002394:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_InitTick+0xec>)
 8002398:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_InitTick+0xf0>)
 800239a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800239c:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <HAL_InitTick+0xec>)
 800239e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023a4:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <HAL_InitTick+0xec>)
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <HAL_InitTick+0xec>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_InitTick+0xec>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_InitTick+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023bc:	4817      	ldr	r0, [pc, #92]	@ (800241c <HAL_InitTick+0xec>)
 80023be:	f002 fff1 	bl	80053a4 <HAL_TIM_Base_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11b      	bne.n	8002408 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023d0:	4812      	ldr	r0, [pc, #72]	@ (800241c <HAL_InitTick+0xec>)
 80023d2:	f003 f837 	bl	8005444 <HAL_TIM_Base_Start_IT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e4:	2036      	movs	r0, #54	@ 0x36
 80023e6:	f001 f991 	bl	800370c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d808      	bhi.n	8002402 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	2036      	movs	r0, #54	@ 0x36
 80023f6:	f001 f96d 	bl	80036d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <HAL_InitTick+0xf4>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e002      	b.n	8002408 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800240c:	4618      	mov	r0, r3
 800240e:	3738      	adds	r7, #56	@ 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	431bde83 	.word	0x431bde83
 800241c:	2000059c 	.word	0x2000059c
 8002420:	40001000 	.word	0x40001000
 8002424:	20000028 	.word	0x20000028

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <NMI_Handler+0x4>

08002430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <UsageFault_Handler+0x4>

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <TIM3_IRQHandler+0x10>)
 8002466:	f003 faf7 	bl	8005a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000678 	.word	0x20000678

08002474 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <USART1_IRQHandler+0x10>)
 800247a:	f004 fcff 	bl	8006e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200006c0 	.word	0x200006c0

08002488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <TIM6_DAC_IRQHandler+0x10>)
 800248e:	f003 fae3 	bl	8005a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000059c 	.word	0x2000059c

0800249c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_isatty>:

int _isatty(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f008 ff1a 	bl	800b3a8 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20020000 	.word	0x20020000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	200005e4 	.word	0x200005e4
 80025a8:	200051f0 	.word	0x200051f0

080025ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b096      	sub	sp, #88	@ 0x58
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2220      	movs	r2, #32
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f008 fec5 	bl	800b398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800260e:	4b3f      	ldr	r3, [pc, #252]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002610:	4a3f      	ldr	r2, [pc, #252]	@ (8002710 <MX_TIM1_Init+0x140>)
 8002612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002614:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002616:	2253      	movs	r2, #83	@ 0x53
 8002618:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261a:	4b3c      	ldr	r3, [pc, #240]	@ (800270c <MX_TIM1_Init+0x13c>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002622:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002628:	4b38      	ldr	r3, [pc, #224]	@ (800270c <MX_TIM1_Init+0x13c>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800262e:	4b37      	ldr	r3, [pc, #220]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800263a:	4834      	ldr	r0, [pc, #208]	@ (800270c <MX_TIM1_Init+0x13c>)
 800263c:	f002 feb2 	bl	80053a4 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002646:	f7ff fb65 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800264e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002650:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002654:	4619      	mov	r1, r3
 8002656:	482d      	ldr	r0, [pc, #180]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002658:	f003 fc4c 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002662:	f7ff fb57 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002666:	4829      	ldr	r0, [pc, #164]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002668:	f002 ff5c 	bl	8005524 <HAL_TIM_PWM_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002672:	f7ff fb4f 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800267e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002682:	4619      	mov	r1, r3
 8002684:	4821      	ldr	r0, [pc, #132]	@ (800270c <MX_TIM1_Init+0x13c>)
 8002686:	f004 f9a5 	bl	80069d4 <HAL_TIMEx_MasterConfigSynchronization>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002690:	f7ff fb40 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002694:	2360      	movs	r3, #96	@ 0x60
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 8002698:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a2:	2300      	movs	r3, #0
 80026a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b6:	2200      	movs	r2, #0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4814      	ldr	r0, [pc, #80]	@ (800270c <MX_TIM1_Init+0x13c>)
 80026bc:	f003 fb58 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80026c6:	f7ff fb25 	bl	8001d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4807      	ldr	r0, [pc, #28]	@ (800270c <MX_TIM1_Init+0x13c>)
 80026ee:	f004 f9ed 	bl	8006acc <HAL_TIMEx_ConfigBreakDeadTime>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80026f8:	f7ff fb0c 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026fc:	4803      	ldr	r0, [pc, #12]	@ (800270c <MX_TIM1_Init+0x13c>)
 80026fe:	f000 f959 	bl	80029b4 <HAL_TIM_MspPostInit>

}
 8002702:	bf00      	nop
 8002704:	3758      	adds	r7, #88	@ 0x58
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200005e8 	.word	0x200005e8
 8002710:	40010000 	.word	0x40010000

08002714 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08e      	sub	sp, #56	@ 0x38
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	f107 0320 	add.w	r3, r7, #32
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002744:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <MX_TIM2_Init+0xe8>)
 8002746:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800274a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800274c:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <MX_TIM2_Init+0xe8>)
 800274e:	2253      	movs	r2, #83	@ 0x53
 8002750:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002752:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <MX_TIM2_Init+0xe8>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002758:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <MX_TIM2_Init+0xe8>)
 800275a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800275e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002760:	4b26      	ldr	r3, [pc, #152]	@ (80027fc <MX_TIM2_Init+0xe8>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002766:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <MX_TIM2_Init+0xe8>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800276c:	4823      	ldr	r0, [pc, #140]	@ (80027fc <MX_TIM2_Init+0xe8>)
 800276e:	f002 fe19 	bl	80053a4 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002778:	f7ff facc 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002786:	4619      	mov	r1, r3
 8002788:	481c      	ldr	r0, [pc, #112]	@ (80027fc <MX_TIM2_Init+0xe8>)
 800278a:	f003 fbb3 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002794:	f7ff fabe 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002798:	4818      	ldr	r0, [pc, #96]	@ (80027fc <MX_TIM2_Init+0xe8>)
 800279a:	f002 fec3 	bl	8005524 <HAL_TIM_PWM_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027a4:	f7ff fab6 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027b0:	f107 0320 	add.w	r3, r7, #32
 80027b4:	4619      	mov	r1, r3
 80027b6:	4811      	ldr	r0, [pc, #68]	@ (80027fc <MX_TIM2_Init+0xe8>)
 80027b8:	f004 f90c 	bl	80069d4 <HAL_TIMEx_MasterConfigSynchronization>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027c2:	f7ff faa7 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c6:	2360      	movs	r3, #96	@ 0x60
 80027c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80027ca:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80027ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2200      	movs	r2, #0
 80027dc:	4619      	mov	r1, r3
 80027de:	4807      	ldr	r0, [pc, #28]	@ (80027fc <MX_TIM2_Init+0xe8>)
 80027e0:	f003 fac6 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027ea:	f7ff fa93 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027ee:	4803      	ldr	r0, [pc, #12]	@ (80027fc <MX_TIM2_Init+0xe8>)
 80027f0:	f000 f8e0 	bl	80029b4 <HAL_TIM_MspPostInit>

}
 80027f4:	bf00      	nop
 80027f6:	3738      	adds	r7, #56	@ 0x38
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000630 	.word	0x20000630

08002800 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002810:	463b      	mov	r3, r7
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281c:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 800281e:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <MX_TIM3_Init+0xa4>)
 8002820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002822:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 8002824:	2247      	movs	r2, #71	@ 0x47
 8002826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800282e:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 8002830:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002836:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002842:	4817      	ldr	r0, [pc, #92]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 8002844:	f002 ff90 	bl	8005768 <HAL_TIM_IC_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800284e:	f7ff fa61 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4619      	mov	r1, r3
 8002860:	480f      	ldr	r0, [pc, #60]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 8002862:	f004 f8b7 	bl	80069d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800286c:	f7ff fa52 	bl	8001d14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002870:	2300      	movs	r3, #0
 8002872:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002874:	2301      	movs	r3, #1
 8002876:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002880:	463b      	mov	r3, r7
 8002882:	2200      	movs	r2, #0
 8002884:	4619      	mov	r1, r3
 8002886:	4806      	ldr	r0, [pc, #24]	@ (80028a0 <MX_TIM3_Init+0xa0>)
 8002888:	f003 f9d6 	bl	8005c38 <HAL_TIM_IC_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002892:	f7ff fa3f 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000678 	.word	0x20000678
 80028a4:	40000400 	.word	0x40000400

080028a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a15      	ldr	r2, [pc, #84]	@ (800290c <HAL_TIM_Base_MspInit+0x64>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	4a13      	ldr	r2, [pc, #76]	@ (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028d6:	e012      	b.n	80028fe <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e0:	d10d      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <HAL_TIM_Base_MspInit+0x68>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	@ 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_TIM_IC_MspInit+0x94>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d133      	bne.n	800299e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <HAL_TIM_IC_MspInit+0x98>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_TIM_IC_MspInit+0x98>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6413      	str	r3, [r2, #64]	@ 0x40
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_TIM_IC_MspInit+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_TIM_IC_MspInit+0x98>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <HAL_TIM_IC_MspInit+0x98>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6313      	str	r3, [r2, #48]	@ 0x30
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_TIM_IC_MspInit+0x98>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800296e:	2340      	movs	r3, #64	@ 0x40
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800297e:	2302      	movs	r3, #2
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <HAL_TIM_IC_MspInit+0x9c>)
 800298a:	f000 ff5f 	bl	800384c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2105      	movs	r1, #5
 8002992:	201d      	movs	r0, #29
 8002994:	f000 fe9e 	bl	80036d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002998:	201d      	movs	r0, #29
 800299a:	f000 feb7 	bl	800370c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	@ 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020800 	.word	0x40020800

080029b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a25      	ldr	r2, [pc, #148]	@ (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d11f      	bne.n	8002a16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a23      	ldr	r2, [pc, #140]	@ (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4818      	ldr	r0, [pc, #96]	@ (8002a70 <HAL_TIM_MspPostInit+0xbc>)
 8002a10:	f000 ff1c 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a14:	e023      	b.n	8002a5e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1e:	d11e      	bne.n	8002a5e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <HAL_TIM_MspPostInit+0xbc>)
 8002a5a:	f000 fef7 	bl	800384c <HAL_GPIO_Init>
}
 8002a5e:	bf00      	nop
 8002a60:	3728      	adds	r7, #40	@ 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000

08002a74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ac4 <MX_USART1_UART_Init+0x50>)
 8002a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aaa:	4805      	ldr	r0, [pc, #20]	@ (8002ac0 <MX_USART1_UART_Init+0x4c>)
 8002aac:	f004 f874 	bl	8006b98 <HAL_UART_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ab6:	f7ff f92d 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200006c0 	.word	0x200006c0
 8002ac4:	40011000 	.word	0x40011000

08002ac8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <MX_USART2_UART_Init+0x50>)
 8002ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002aee:	220c      	movs	r2, #12
 8002af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002afe:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002b00:	f004 f84a 	bl	8006b98 <HAL_UART_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b0a:	f7ff f903 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000708 	.word	0x20000708
 8002b18:	40004400 	.word	0x40004400

08002b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	@ 0x30
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a36      	ldr	r2, [pc, #216]	@ (8002c14 <HAL_UART_MspInit+0xf8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d135      	bne.n	8002baa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	4b35      	ldr	r3, [pc, #212]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002b48:	f043 0310 	orr.w	r3, r3, #16
 8002b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4e:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b88:	2307      	movs	r3, #7
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	4619      	mov	r1, r3
 8002b92:	4822      	ldr	r0, [pc, #136]	@ (8002c1c <HAL_UART_MspInit+0x100>)
 8002b94:	f000 fe5a 	bl	800384c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2105      	movs	r1, #5
 8002b9c:	2025      	movs	r0, #37	@ 0x25
 8002b9e:	f000 fd99 	bl	80036d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ba2:	2025      	movs	r0, #37	@ 0x25
 8002ba4:	f000 fdb2 	bl	800370c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ba8:	e030      	b.n	8002c0c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1c      	ldr	r2, [pc, #112]	@ (8002c20 <HAL_UART_MspInit+0x104>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d12b      	bne.n	8002c0c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a16      	ldr	r2, [pc, #88]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc4:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <HAL_UART_MspInit+0xfc>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bec:	230c      	movs	r3, #12
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4805      	ldr	r0, [pc, #20]	@ (8002c1c <HAL_UART_MspInit+0x100>)
 8002c08:	f000 fe20 	bl	800384c <HAL_GPIO_Init>
}
 8002c0c:	bf00      	nop
 8002c0e:	3730      	adds	r7, #48	@ 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40004400 	.word	0x40004400

08002c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c28:	f7ff fcc0 	bl	80025ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c2c:	480c      	ldr	r0, [pc, #48]	@ (8002c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c2e:	490d      	ldr	r1, [pc, #52]	@ (8002c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c30:	4a0d      	ldr	r2, [pc, #52]	@ (8002c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c34:	e002      	b.n	8002c3c <LoopCopyDataInit>

08002c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3a:	3304      	adds	r3, #4

08002c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c40:	d3f9      	bcc.n	8002c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c42:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c44:	4c0a      	ldr	r4, [pc, #40]	@ (8002c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c48:	e001      	b.n	8002c4e <LoopFillZerobss>

08002c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c4c:	3204      	adds	r2, #4

08002c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c50:	d3fb      	bcc.n	8002c4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c52:	f008 fbaf 	bl	800b3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c56:	f7fe fbfb 	bl	8001450 <main>
  bx  lr    
 8002c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c68:	0800d728 	.word	0x0800d728
  ldr r2, =_sbss
 8002c6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c70:	200051f0 	.word	0x200051f0

08002c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC_IRQHandler>
	...

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb8 <HAL_Init+0x40>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <HAL_Init+0x40>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	@ (8002cb8 <HAL_Init+0x40>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 fd0c 	bl	80036be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f7ff fb42 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7ff fb14 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_IncTick+0x20>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_IncTick+0x24>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <HAL_IncTick+0x24>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000002c 	.word	0x2000002c
 8002ce0:	20000750 	.word	0x20000750

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000750 	.word	0x20000750

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff ffee 	bl	8002ce4 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d22:	bf00      	nop
 8002d24:	f7ff ffde 	bl	8002ce4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000002c 	.word	0x2000002c

08002d44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e033      	b.n	8002dc2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe f864 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d8a:	f023 0302 	bic.w	r3, r3, #2
 8002d8e:	f043 0202 	orr.w	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fae8 	bl	800336c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002db2:	e001      	b.n	8002db8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Start+0x1a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0b2      	b.n	8002f4c <HAL_ADC_Start+0x180>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d018      	beq.n	8002e2e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0c:	4b52      	ldr	r3, [pc, #328]	@ (8002f58 <HAL_ADC_Start+0x18c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a52      	ldr	r2, [pc, #328]	@ (8002f5c <HAL_ADC_Start+0x190>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9a      	lsrs	r2, r3, #18
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f9      	bne.n	8002e22 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d17a      	bne.n	8002f32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	f023 0206 	bic.w	r2, r3, #6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e88:	e002      	b.n	8002e90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e98:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <HAL_ADC_Start+0x194>)
 8002e9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ea4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d12a      	bne.n	8002f08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f64 <HAL_ADC_Start+0x198>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d015      	beq.n	8002ee8 <HAL_ADC_Start+0x11c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a29      	ldr	r2, [pc, #164]	@ (8002f68 <HAL_ADC_Start+0x19c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d105      	bne.n	8002ed2 <HAL_ADC_Start+0x106>
 8002ec6:	4b26      	ldr	r3, [pc, #152]	@ (8002f60 <HAL_ADC_Start+0x194>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	@ (8002f6c <HAL_ADC_Start+0x1a0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d136      	bne.n	8002f4a <HAL_ADC_Start+0x17e>
 8002edc:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_ADC_Start+0x194>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d130      	bne.n	8002f4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d129      	bne.n	8002f4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	e020      	b.n	8002f4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	@ (8002f64 <HAL_ADC_Start+0x198>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d11b      	bne.n	8002f4a <HAL_ADC_Start+0x17e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d114      	bne.n	8002f4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e00b      	b.n	8002f4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0210 	orr.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	20000024 	.word	0x20000024
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	40012300 	.word	0x40012300
 8002f64:	40012000 	.word	0x40012000
 8002f68:	40012100 	.word	0x40012100
 8002f6c:	40012200 	.word	0x40012200

08002f70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_Stop+0x16>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e021      	b.n	8002fca <HAL_ADC_Stop+0x5a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d113      	bne.n	800301c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003002:	d10b      	bne.n	800301c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e063      	b.n	80030e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800301c:	f7ff fe62 	bl	8002ce4 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003022:	e021      	b.n	8003068 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800302a:	d01d      	beq.n	8003068 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_ADC_PollForConversion+0x6c>
 8003032:	f7ff fe57 	bl	8002ce4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d212      	bcs.n	8003068 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d00b      	beq.n	8003068 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f043 0204 	orr.w	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e03d      	b.n	80030e4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d1d6      	bne.n	8003024 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0212 	mvn.w	r2, #18
 800307e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d123      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d111      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x1c>
 8003120:	2302      	movs	r3, #2
 8003122:	e113      	b.n	800334c <HAL_ADC_ConfigChannel+0x244>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b09      	cmp	r3, #9
 8003132:	d925      	bls.n	8003180 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68d9      	ldr	r1, [r3, #12]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	3b1e      	subs	r3, #30
 800314a:	2207      	movs	r2, #7
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43da      	mvns	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	400a      	ands	r2, r1
 8003158:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68d9      	ldr	r1, [r3, #12]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	4603      	mov	r3, r0
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4403      	add	r3, r0
 8003172:	3b1e      	subs	r3, #30
 8003174:	409a      	lsls	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	e022      	b.n	80031c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	2207      	movs	r2, #7
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	400a      	ands	r2, r1
 80031a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4618      	mov	r0, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4403      	add	r3, r0
 80031bc:	409a      	lsls	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d824      	bhi.n	8003218 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b05      	subs	r3, #5
 80031e0:	221f      	movs	r2, #31
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	400a      	ands	r2, r1
 80031ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b05      	subs	r3, #5
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	635a      	str	r2, [r3, #52]	@ 0x34
 8003216:	e04c      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d824      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b23      	subs	r3, #35	@ 0x23
 8003232:	221f      	movs	r2, #31
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43da      	mvns	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	400a      	ands	r2, r1
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	4618      	mov	r0, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3b23      	subs	r3, #35	@ 0x23
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
 8003268:	e023      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	3b41      	subs	r3, #65	@ 0x41
 800327c:	221f      	movs	r2, #31
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	400a      	ands	r2, r1
 800328a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	4618      	mov	r0, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	3b41      	subs	r3, #65	@ 0x41
 80032a6:	fa00 f203 	lsl.w	r2, r0, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b2:	4b29      	ldr	r3, [pc, #164]	@ (8003358 <HAL_ADC_ConfigChannel+0x250>)
 80032b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a28      	ldr	r2, [pc, #160]	@ (800335c <HAL_ADC_ConfigChannel+0x254>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10f      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d8>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b12      	cmp	r3, #18
 80032c6:	d10b      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <HAL_ADC_ConfigChannel+0x254>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d12b      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x23a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <HAL_ADC_ConfigChannel+0x258>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x1f4>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b11      	cmp	r3, #17
 80032fa:	d122      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <HAL_ADC_ConfigChannel+0x258>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d111      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331e:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <HAL_ADC_ConfigChannel+0x25c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <HAL_ADC_ConfigChannel+0x260>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	0c9a      	lsrs	r2, r3, #18
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003334:	e002      	b.n	800333c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3b01      	subs	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012300 	.word	0x40012300
 800335c:	40012000 	.word	0x40012000
 8003360:	10000012 	.word	0x10000012
 8003364:	20000024 	.word	0x20000024
 8003368:	431bde83 	.word	0x431bde83

0800336c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003374:	4b79      	ldr	r3, [pc, #484]	@ (800355c <ADC_Init+0x1f0>)
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	4a58      	ldr	r2, [pc, #352]	@ (8003560 <ADC_Init+0x1f4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	e00f      	b.n	800346a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003468:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0202 	bic.w	r2, r2, #2
 8003478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7e1b      	ldrb	r3, [r3, #24]
 8003484:	005a      	lsls	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	3b01      	subs	r3, #1
 80034c4:	035a      	lsls	r2, r3, #13
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	e007      	b.n	80034e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	051a      	lsls	r2, r3, #20
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003522:	025a      	lsls	r2, r3, #9
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	029a      	lsls	r2, r3, #10
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40012300 	.word	0x40012300
 8003560:	0f000001 	.word	0x0f000001

08003564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4907      	ldr	r1, [pc, #28]	@ (8003600 <__NVIC_EnableIRQ+0x38>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	@ (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	@ (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	@ 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	4313      	orrs	r3, r2
         );
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	@ 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff4c 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036e6:	f7ff ff61 	bl	80035ac <__NVIC_GetPriorityGrouping>
 80036ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f7ff ffb1 	bl	8003658 <NVIC_EncodePriority>
 80036f6:	4602      	mov	r2, r0
 80036f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff80 	bl	8003604 <__NVIC_SetPriority>
}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff54 	bl	80035c8 <__NVIC_EnableIRQ>
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003734:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003736:	f7ff fad5 	bl	8002ce4 <HAL_GetTick>
 800373a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d008      	beq.n	800375a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e052      	b.n	8003800 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0216 	bic.w	r2, r2, #22
 8003768:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003778:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_DMA_Abort+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0208 	bic.w	r2, r2, #8
 8003798:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037aa:	e013      	b.n	80037d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ac:	f7ff fa9a 	bl	8002ce4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d90c      	bls.n	80037d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2203      	movs	r2, #3
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e015      	b.n	8003800 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e4      	bne.n	80037ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e6:	223f      	movs	r2, #63	@ 0x3f
 80037e8:	409a      	lsls	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e00c      	b.n	8003840 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2205      	movs	r2, #5
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e165      	b.n	8003b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 8154 	bne.w	8003b2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	2b02      	cmp	r3, #2
 800389c:	d130      	bne.n	8003900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80ae 	beq.w	8003b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <HAL_GPIO_Init+0x300>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	4a5c      	ldr	r2, [pc, #368]	@ (8003b4c <HAL_GPIO_Init+0x300>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b4c <HAL_GPIO_Init+0x300>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ee:	4a58      	ldr	r2, [pc, #352]	@ (8003b50 <HAL_GPIO_Init+0x304>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4f      	ldr	r2, [pc, #316]	@ (8003b54 <HAL_GPIO_Init+0x308>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d025      	beq.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b58 <HAL_GPIO_Init+0x30c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <HAL_GPIO_Init+0x216>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4d      	ldr	r2, [pc, #308]	@ (8003b5c <HAL_GPIO_Init+0x310>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x212>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b60 <HAL_GPIO_Init+0x314>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	@ (8003b64 <HAL_GPIO_Init+0x318>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x20a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b68 <HAL_GPIO_Init+0x31c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x206>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a49      	ldr	r2, [pc, #292]	@ (8003b6c <HAL_GPIO_Init+0x320>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x202>
 8003a4a:	2306      	movs	r3, #6
 8003a4c:	e00c      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a4e:	2307      	movs	r3, #7
 8003a50:	e00a      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a52:	2305      	movs	r3, #5
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x21c>
 8003a66:	2300      	movs	r3, #0
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	@ (8003b50 <HAL_GPIO_Init+0x304>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b3a      	ldr	r3, [pc, #232]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aaa:	4a31      	ldr	r2, [pc, #196]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad4:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ada:	4b25      	ldr	r3, [pc, #148]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b04:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b28:	4a11      	ldr	r2, [pc, #68]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	f67f ae96 	bls.w	8003868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3724      	adds	r7, #36	@ 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40013c00 	.word	0x40013c00

08003b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	e001      	b.n	8003b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb4:	787b      	ldrb	r3, [r7, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc0:	e003      	b.n	8003bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	041a      	lsls	r2, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	619a      	str	r2, [r3, #24]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e12b      	b.n	8003e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fbc4 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	@ 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f000 fe8a 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a81      	ldr	r2, [pc, #516]	@ (8003e4c <HAL_I2C_Init+0x274>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d807      	bhi.n	8003c5c <HAL_I2C_Init+0x84>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a80      	ldr	r2, [pc, #512]	@ (8003e50 <HAL_I2C_Init+0x278>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	bf94      	ite	ls
 8003c54:	2301      	movls	r3, #1
 8003c56:	2300      	movhi	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e006      	b.n	8003c6a <HAL_I2C_Init+0x92>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e54 <HAL_I2C_Init+0x27c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	bf94      	ite	ls
 8003c64:	2301      	movls	r3, #1
 8003c66:	2300      	movhi	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0e7      	b.n	8003e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a78      	ldr	r2, [pc, #480]	@ (8003e58 <HAL_I2C_Init+0x280>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0c9b      	lsrs	r3, r3, #18
 8003c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e4c <HAL_I2C_Init+0x274>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d802      	bhi.n	8003cac <HAL_I2C_Init+0xd4>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	e009      	b.n	8003cc0 <HAL_I2C_Init+0xe8>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	4a69      	ldr	r2, [pc, #420]	@ (8003e5c <HAL_I2C_Init+0x284>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	099b      	lsrs	r3, r3, #6
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	495c      	ldr	r1, [pc, #368]	@ (8003e4c <HAL_I2C_Init+0x274>)
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	d819      	bhi.n	8003d14 <HAL_I2C_Init+0x13c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e59      	subs	r1, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cee:	1c59      	adds	r1, r3, #1
 8003cf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cf4:	400b      	ands	r3, r1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_I2C_Init+0x138>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e59      	subs	r1, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	e051      	b.n	8003db4 <HAL_I2C_Init+0x1dc>
 8003d10:	2304      	movs	r3, #4
 8003d12:	e04f      	b.n	8003db4 <HAL_I2C_Init+0x1dc>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d111      	bne.n	8003d40 <HAL_I2C_Init+0x168>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e58      	subs	r0, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	440b      	add	r3, r1
 8003d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e012      	b.n	8003d66 <HAL_I2C_Init+0x18e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	0099      	lsls	r1, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Init+0x196>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e022      	b.n	8003db4 <HAL_I2C_Init+0x1dc>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10e      	bne.n	8003d94 <HAL_I2C_Init+0x1bc>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1e58      	subs	r0, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	440b      	add	r3, r1
 8003d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d92:	e00f      	b.n	8003db4 <HAL_I2C_Init+0x1dc>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1e58      	subs	r0, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	0099      	lsls	r1, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	6809      	ldr	r1, [r1, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003de2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6911      	ldr	r1, [r2, #16]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68d2      	ldr	r2, [r2, #12]
 8003dee:	4311      	orrs	r1, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	000186a0 	.word	0x000186a0
 8003e50:	001e847f 	.word	0x001e847f
 8003e54:	003d08ff 	.word	0x003d08ff
 8003e58:	431bde83 	.word	0x431bde83
 8003e5c:	10624dd3 	.word	0x10624dd3

08003e60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	817b      	strh	r3, [r7, #10]
 8003e70:	4613      	mov	r3, r2
 8003e72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e74:	f7fe ff36 	bl	8002ce4 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	f040 80e0 	bne.w	8004048 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2319      	movs	r3, #25
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4970      	ldr	r1, [pc, #448]	@ (8004054 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa92 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0d3      	b.n	800404a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2C_Master_Transmit+0x50>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0cc      	b.n	800404a <HAL_I2C_Master_Transmit+0x1ea>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d007      	beq.n	8003ed6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ee4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2221      	movs	r2, #33	@ 0x21
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	893a      	ldrh	r2, [r7, #8]
 8003f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a50      	ldr	r2, [pc, #320]	@ (8004058 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f18:	8979      	ldrh	r1, [r7, #10]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f9ca 	bl	80042b8 <I2C_MasterRequestWrite>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e08d      	b.n	800404a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f44:	e066      	b.n	8004014 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fb50 	bl	80045f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d107      	bne.n	8003f6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06b      	b.n	800404a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d11b      	bne.n	8003fe8 <HAL_I2C_Master_Transmit+0x188>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	6a39      	ldr	r1, [r7, #32]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fb47 	bl	8004680 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d107      	bne.n	8004010 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e01a      	b.n	800404a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d194      	bne.n	8003f46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	00100002 	.word	0x00100002
 8004058:	ffff0000 	.word	0xffff0000

0800405c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	460b      	mov	r3, r1
 800406a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7fe fe3a 	bl	8002ce4 <HAL_GetTick>
 8004070:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	f040 8111 	bne.w	80042a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2319      	movs	r3, #25
 800408a:	2201      	movs	r2, #1
 800408c:	4988      	ldr	r1, [pc, #544]	@ (80042b0 <HAL_I2C_IsDeviceReady+0x254>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f994 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	e104      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_I2C_IsDeviceReady+0x50>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0fd      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d007      	beq.n	80040d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0201 	orr.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2224      	movs	r2, #36	@ 0x24
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a70      	ldr	r2, [pc, #448]	@ (80042b4 <HAL_I2C_IsDeviceReady+0x258>)
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004104:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f952 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412c:	d103      	bne.n	8004136 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0b6      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004148:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800414a:	f7fe fdcb 	bl	8002ce4 <HAL_GetTick>
 800414e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800417e:	e025      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fe fdb0 	bl	8002ce4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <HAL_I2C_IsDeviceReady+0x13a>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	22a0      	movs	r2, #160	@ 0xa0
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80041d6:	d005      	beq.n	80041e4 <HAL_I2C_IsDeviceReady+0x188>
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <HAL_I2C_IsDeviceReady+0x188>
 80041de:	7dbb      	ldrb	r3, [r7, #22]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0cd      	beq.n	8004180 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d129      	bne.n	800424e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2319      	movs	r3, #25
 8004226:	2201      	movs	r2, #1
 8004228:	4921      	ldr	r1, [pc, #132]	@ (80042b0 <HAL_I2C_IsDeviceReady+0x254>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8c6 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e036      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e02c      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004266:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2319      	movs	r3, #25
 800426e:	2201      	movs	r2, #1
 8004270:	490f      	ldr	r1, [pc, #60]	@ (80042b0 <HAL_I2C_IsDeviceReady+0x254>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f8a2 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e012      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3301      	adds	r3, #1
 8004286:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	f4ff af32 	bcc.w	80040f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00100002 	.word	0x00100002
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d006      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d003      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e0:	d108      	bne.n	80042f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00b      	b.n	800430c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d107      	bne.n	800430c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800430a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f84f 	bl	80043bc <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004332:	d103      	bne.n	800433c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e035      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004348:	d108      	bne.n	800435c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e01b      	b.n	8004394 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	11db      	asrs	r3, r3, #7
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f063 030f 	orn	r3, r3, #15
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <I2C_MasterRequestWrite+0xfc>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f898 	bl	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e010      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800438a:	897b      	ldrh	r3, [r7, #10]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4907      	ldr	r1, [pc, #28]	@ (80043b8 <I2C_MasterRequestWrite+0x100>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f888 	bl	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	00010008 	.word	0x00010008
 80043b8:	00010002 	.word	0x00010002

080043bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043cc:	e048      	b.n	8004460 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043d4:	d044      	beq.n	8004460 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fe fc85 	bl	8002ce4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d139      	bne.n	8004460 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10d      	bne.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	e00c      	b.n	800442c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	429a      	cmp	r2, r3
 8004430:	d116      	bne.n	8004460 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e023      	b.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10d      	bne.n	8004486 <I2C_WaitOnFlagUntilTimeout+0xca>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	43da      	mvns	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	e00c      	b.n	80044a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	43da      	mvns	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d093      	beq.n	80043ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044be:	e071      	b.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d123      	bne.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e067      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800451e:	d041      	beq.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fe fbe0 	bl	8002ce4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d136      	bne.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10c      	bne.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e00b      	b.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e021      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10c      	bne.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e00b      	b.n	80045e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	43da      	mvns	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f47f af6d 	bne.w	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045fc:	e034      	b.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f886 	bl	8004710 <I2C_IsAcknowledgeFailed>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e034      	b.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004614:	d028      	beq.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fe fb65 	bl	8002ce4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11d      	bne.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b80      	cmp	r3, #128	@ 0x80
 8004638:	d016      	beq.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e007      	b.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004672:	2b80      	cmp	r3, #128	@ 0x80
 8004674:	d1c3      	bne.n	80045fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800468c:	e034      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f83e 	bl	8004710 <I2C_IsAcknowledgeFailed>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e034      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a4:	d028      	beq.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fe fb1d 	bl	8002ce4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11d      	bne.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d016      	beq.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e007      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d1c3      	bne.n	800468e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004726:	d11b      	bne.n	8004760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0cc      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b68      	ldr	r3, [pc, #416]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d90c      	bls.n	80047ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b65      	ldr	r3, [pc, #404]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a58      	ldr	r2, [pc, #352]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a52      	ldr	r2, [pc, #328]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d044      	beq.n	8004890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d119      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	2b03      	cmp	r3, #3
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	4b3f      	ldr	r3, [pc, #252]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b3b      	ldr	r3, [pc, #236]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e067      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b37      	ldr	r3, [pc, #220]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4934      	ldr	r1, [pc, #208]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004860:	f7fe fa40 	bl	8002ce4 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fe fa3c 	bl	8002ce4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e04f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004890:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d20c      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b22      	ldr	r3, [pc, #136]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f887 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd fd0a 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023c00 	.word	0x40023c00
 800492c:	40023800 	.word	0x40023800
 8004930:	0800d6cc 	.word	0x0800d6cc
 8004934:	20000024 	.word	0x20000024
 8004938:	20000028 	.word	0x20000028

0800493c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <HAL_RCC_GetHCLKFreq+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000024 	.word	0x20000024

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004958:	f7ff fff0 	bl	800493c <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4903      	ldr	r1, [pc, #12]	@ (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	0800d6dc 	.word	0x0800d6dc

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004980:	f7ff ffdc 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0b5b      	lsrs	r3, r3, #13
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	0800d6dc 	.word	0x0800d6dc

080049a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	220f      	movs	r2, #15
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049b4:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0203 	and.w	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049d8:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	08db      	lsrs	r3, r3, #3
 80049de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049e6:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <HAL_RCC_GetClockConfig+0x60>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40023c00 	.word	0x40023c00

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b0ae      	sub	sp, #184	@ 0xb8
 8004a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	f200 8206 	bhi.w	8004e48 <HAL_RCC_GetSysClockFreq+0x440>
 8004a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004e49 	.word	0x08004e49
 8004a4c:	08004e49 	.word	0x08004e49
 8004a50:	08004e49 	.word	0x08004e49
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004e49 	.word	0x08004e49
 8004a5c:	08004e49 	.word	0x08004e49
 8004a60:	08004e49 	.word	0x08004e49
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004e49 	.word	0x08004e49
 8004a6c:	08004e49 	.word	0x08004e49
 8004a70:	08004e49 	.word	0x08004e49
 8004a74:	08004c79 	.word	0x08004c79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4bb9      	ldr	r3, [pc, #740]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004a7e:	e1e7      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a80:	4bb8      	ldr	r3, [pc, #736]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a86:	e1e3      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a88:	4bb4      	ldr	r3, [pc, #720]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a94:	4bb1      	ldr	r3, [pc, #708]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d071      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa0:	4bae      	ldr	r3, [pc, #696]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	462b      	mov	r3, r5
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4621      	mov	r1, r4
 8004ae0:	1a51      	subs	r1, r2, r1
 8004ae2:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004af8:	4649      	mov	r1, r9
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	4641      	mov	r1, r8
 8004afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b02:	4641      	mov	r1, r8
 8004b04:	018a      	lsls	r2, r1, #6
 8004b06:	4641      	mov	r1, r8
 8004b08:	1a51      	subs	r1, r2, r1
 8004b0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b20:	4649      	mov	r1, r9
 8004b22:	00cb      	lsls	r3, r1, #3
 8004b24:	4641      	mov	r1, r8
 8004b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	00ca      	lsls	r2, r1, #3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	4622      	mov	r2, r4
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b3a:	462b      	mov	r3, r5
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	eb42 0303 	adc.w	r3, r2, r3
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b50:	4629      	mov	r1, r5
 8004b52:	024b      	lsls	r3, r1, #9
 8004b54:	4621      	mov	r1, r4
 8004b56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	024a      	lsls	r2, r1, #9
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b74:	f7fb ff92 	bl	8000a9c <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b82:	e067      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b84:	4b75      	ldr	r3, [pc, #468]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b90:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ba2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	462b      	mov	r3, r5
 8004baa:	f04f 0000 	mov.w	r0, #0
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	0159      	lsls	r1, r3, #5
 8004bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb8:	0150      	lsls	r0, r2, #5
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	1a51      	subs	r1, r2, r1
 8004bc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004bd8:	4649      	mov	r1, r9
 8004bda:	018b      	lsls	r3, r1, #6
 8004bdc:	4641      	mov	r1, r8
 8004bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004be2:	4641      	mov	r1, r8
 8004be4:	018a      	lsls	r2, r1, #6
 8004be6:	4641      	mov	r1, r8
 8004be8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bec:	4649      	mov	r1, r9
 8004bee:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c06:	4692      	mov	sl, r2
 8004c08:	469b      	mov	fp, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	eb1a 0303 	adds.w	r3, sl, r3
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	462b      	mov	r3, r5
 8004c14:	eb4b 0303 	adc.w	r3, fp, r3
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c26:	4629      	mov	r1, r5
 8004c28:	028b      	lsls	r3, r1, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c30:	4621      	mov	r1, r4
 8004c32:	028a      	lsls	r2, r1, #10
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c40:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c46:	f7fb ff29 	bl	8000a9c <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4613      	mov	r3, r2
 8004c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c54:	4b41      	ldr	r3, [pc, #260]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c76:	e0eb      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c78:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c84:	4b35      	ldr	r3, [pc, #212]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d06b      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c90:	4b32      	ldr	r3, [pc, #200]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	099b      	lsrs	r3, r3, #6
 8004c96:	2200      	movs	r2, #0
 8004c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ca8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cac:	4622      	mov	r2, r4
 8004cae:	462b      	mov	r3, r5
 8004cb0:	f04f 0000 	mov.w	r0, #0
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	0159      	lsls	r1, r3, #5
 8004cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cbe:	0150      	lsls	r0, r2, #5
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	1a51      	subs	r1, r2, r1
 8004cc8:	61b9      	str	r1, [r7, #24]
 8004cca:	4629      	mov	r1, r5
 8004ccc:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cde:	4659      	mov	r1, fp
 8004ce0:	018b      	lsls	r3, r1, #6
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ce8:	4651      	mov	r1, sl
 8004cea:	018a      	lsls	r2, r1, #6
 8004cec:	4651      	mov	r1, sl
 8004cee:	ebb2 0801 	subs.w	r8, r2, r1
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	eb63 0901 	sbc.w	r9, r3, r1
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0c:	4690      	mov	r8, r2
 8004d0e:	4699      	mov	r9, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	eb18 0303 	adds.w	r3, r8, r3
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	462b      	mov	r3, r5
 8004d1a:	eb49 0303 	adc.w	r3, r9, r3
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	024b      	lsls	r3, r1, #9
 8004d30:	4621      	mov	r1, r4
 8004d32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d36:	4621      	mov	r1, r4
 8004d38:	024a      	lsls	r2, r1, #9
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d42:	2200      	movs	r2, #0
 8004d44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d4c:	f7fb fea6 	bl	8000a9c <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5a:	e065      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x420>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d68:	4b3d      	ldr	r3, [pc, #244]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	2200      	movs	r2, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	4611      	mov	r1, r2
 8004d74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d78:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d82:	4642      	mov	r2, r8
 8004d84:	464b      	mov	r3, r9
 8004d86:	f04f 0000 	mov.w	r0, #0
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	0159      	lsls	r1, r3, #5
 8004d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d94:	0150      	lsls	r0, r2, #5
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1a51      	subs	r1, r2, r1
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	4649      	mov	r1, r9
 8004da2:	eb63 0301 	sbc.w	r3, r3, r1
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004db4:	4659      	mov	r1, fp
 8004db6:	018b      	lsls	r3, r1, #6
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	018a      	lsls	r2, r1, #6
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	1a54      	subs	r4, r2, r1
 8004dc6:	4659      	mov	r1, fp
 8004dc8:	eb63 0501 	sbc.w	r5, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	464b      	mov	r3, r9
 8004de8:	eb45 0303 	adc.w	r3, r5, r3
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	028b      	lsls	r3, r1, #10
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e04:	4621      	mov	r1, r4
 8004e06:	028a      	lsls	r2, r1, #10
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e10:	2200      	movs	r2, #0
 8004e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e1a:	f7fb fe3f 	bl	8000a9c <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4613      	mov	r3, r2
 8004e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e28:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	0f1b      	lsrs	r3, r3, #28
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e46:	e003      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	37b8      	adds	r7, #184	@ 0xb8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e28d      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8083 	beq.w	8004f8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e88:	4b94      	ldr	r3, [pc, #592]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d019      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e94:	4b91      	ldr	r3, [pc, #580]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ea0:	4b8e      	ldr	r3, [pc, #568]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eac:	d00c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eae:	4b8b      	ldr	r3, [pc, #556]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004eb6:	2b0c      	cmp	r3, #12
 8004eb8:	d112      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b88      	ldr	r3, [pc, #544]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	4b84      	ldr	r3, [pc, #528]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x124>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d157      	bne.n	8004f8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e25a      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x90>
 8004eea:	4b7c      	ldr	r3, [pc, #496]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7b      	ldr	r2, [pc, #492]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xcc>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0xb4>
 8004f02:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a75      	ldr	r2, [pc, #468]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b73      	ldr	r3, [pc, #460]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a72      	ldr	r2, [pc, #456]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xcc>
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a6e      	ldr	r2, [pc, #440]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b6c      	ldr	r3, [pc, #432]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fed2 	bl	8002ce4 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fd fece 	bl	8002ce4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	@ 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e21f      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b61      	ldr	r3, [pc, #388]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xdc>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fd febe 	bl	8002ce4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fd feba 	bl	8002ce4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e20b      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	4b57      	ldr	r3, [pc, #348]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x104>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d06f      	beq.n	800507a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f9a:	4b50      	ldr	r3, [pc, #320]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d017      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d105      	bne.n	8004fbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b47      	ldr	r3, [pc, #284]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	d11c      	bne.n	8005004 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b44      	ldr	r3, [pc, #272]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	4b41      	ldr	r3, [pc, #260]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_RCC_OscConfig+0x186>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e1d3      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fee:	4b3b      	ldr	r3, [pc, #236]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4937      	ldr	r1, [pc, #220]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005002:	e03a      	b.n	800507a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800500c:	4b34      	ldr	r3, [pc, #208]	@ (80050e0 <HAL_RCC_OscConfig+0x278>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fd fe67 	bl	8002ce4 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501a:	f7fd fe63 	bl	8002ce4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e1b4      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502c:	4b2b      	ldr	r3, [pc, #172]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	4b28      	ldr	r3, [pc, #160]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4925      	ldr	r1, [pc, #148]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504e:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <HAL_RCC_OscConfig+0x278>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fd fe46 	bl	8002ce4 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800505c:	f7fd fe42 	bl	8002ce4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e193      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506e:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d036      	beq.n	80050f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508e:	4b15      	ldr	r3, [pc, #84]	@ (80050e4 <HAL_RCC_OscConfig+0x27c>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fd fe26 	bl	8002ce4 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509c:	f7fd fe22 	bl	8002ce4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e173      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ae:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCC_OscConfig+0x274>)
 80050b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x234>
 80050ba:	e01b      	b.n	80050f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050bc:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <HAL_RCC_OscConfig+0x27c>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fd fe0f 	bl	8002ce4 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c8:	e00e      	b.n	80050e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ca:	f7fd fe0b 	bl	8002ce4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d907      	bls.n	80050e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e15c      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	42470000 	.word	0x42470000
 80050e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80050ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ea      	bne.n	80050ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8097 	beq.w	8005230 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005106:	4b83      	ldr	r3, [pc, #524]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	4b7f      	ldr	r3, [pc, #508]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	4a7e      	ldr	r2, [pc, #504]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	@ 0x40
 8005122:	4b7c      	ldr	r3, [pc, #496]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005132:	4b79      	ldr	r3, [pc, #484]	@ (8005318 <HAL_RCC_OscConfig+0x4b0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d118      	bne.n	8005170 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513e:	4b76      	ldr	r3, [pc, #472]	@ (8005318 <HAL_RCC_OscConfig+0x4b0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a75      	ldr	r2, [pc, #468]	@ (8005318 <HAL_RCC_OscConfig+0x4b0>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fd fdcb 	bl	8002ce4 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005152:	f7fd fdc7 	bl	8002ce4 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e118      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005164:	4b6c      	ldr	r3, [pc, #432]	@ (8005318 <HAL_RCC_OscConfig+0x4b0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <HAL_RCC_OscConfig+0x31e>
 8005178:	4b66      	ldr	r3, [pc, #408]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517c:	4a65      	ldr	r2, [pc, #404]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	6713      	str	r3, [r2, #112]	@ 0x70
 8005184:	e01c      	b.n	80051c0 <HAL_RCC_OscConfig+0x358>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b05      	cmp	r3, #5
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x340>
 800518e:	4b61      	ldr	r3, [pc, #388]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	4a60      	ldr	r2, [pc, #384]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005194:	f043 0304 	orr.w	r3, r3, #4
 8005198:	6713      	str	r3, [r2, #112]	@ 0x70
 800519a:	4b5e      	ldr	r3, [pc, #376]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	4a5d      	ldr	r2, [pc, #372]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0x358>
 80051a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a59      	ldr	r2, [pc, #356]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b4:	4b57      	ldr	r3, [pc, #348]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	4a56      	ldr	r2, [pc, #344]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80051ba:	f023 0304 	bic.w	r3, r3, #4
 80051be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fd fd8c 	bl	8002ce4 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fd fd88 	bl	8002ce4 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e0d7      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0ee      	beq.n	80051d0 <HAL_RCC_OscConfig+0x368>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fd fd76 	bl	8002ce4 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fc:	f7fd fd72 	bl	8002ce4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e0c1      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005212:	4b40      	ldr	r3, [pc, #256]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1ee      	bne.n	80051fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d105      	bne.n	8005230 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005224:	4b3b      	ldr	r3, [pc, #236]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	4a3a      	ldr	r2, [pc, #232]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 800522a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800522e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80ad 	beq.w	8005394 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800523a:	4b36      	ldr	r3, [pc, #216]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b08      	cmp	r3, #8
 8005244:	d060      	beq.n	8005308 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d145      	bne.n	80052da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524e:	4b33      	ldr	r3, [pc, #204]	@ (800531c <HAL_RCC_OscConfig+0x4b4>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fd fd46 	bl	8002ce4 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525c:	f7fd fd42 	bl	8002ce4 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e093      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526e:	4b29      	ldr	r3, [pc, #164]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69da      	ldr	r2, [r3, #28]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	3b01      	subs	r3, #1
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	491b      	ldr	r1, [pc, #108]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x4b4>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b2:	f7fd fd17 	bl	8002ce4 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fd fd13 	bl	8002ce4 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e064      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052cc:	4b11      	ldr	r3, [pc, #68]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x452>
 80052d8:	e05c      	b.n	8005394 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052da:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCC_OscConfig+0x4b4>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd fd00 	bl	8002ce4 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fd fcfc 	bl	8002ce4 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e04d      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_RCC_OscConfig+0x4ac>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x480>
 8005306:	e045      	b.n	8005394 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e040      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
 8005314:	40023800 	.word	0x40023800
 8005318:	40007000 	.word	0x40007000
 800531c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005320:	4b1f      	ldr	r3, [pc, #124]	@ (80053a0 <HAL_RCC_OscConfig+0x538>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d030      	beq.n	8005390 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d129      	bne.n	8005390 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d122      	bne.n	8005390 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005358:	4293      	cmp	r3, r2
 800535a:	d119      	bne.n	8005390 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	3b01      	subs	r3, #1
 800536a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d10f      	bne.n	8005390 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d107      	bne.n	8005390 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800

080053a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e041      	b.n	800543a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fd fa6c 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 feb0 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e04e      	b.n	80054fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a23      	ldr	r2, [pc, #140]	@ (8005508 <HAL_TIM_Base_Start_IT+0xc4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d022      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005486:	d01d      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1f      	ldr	r2, [pc, #124]	@ (800550c <HAL_TIM_Base_Start_IT+0xc8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d018      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1e      	ldr	r2, [pc, #120]	@ (8005510 <HAL_TIM_Base_Start_IT+0xcc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <HAL_TIM_Base_Start_IT+0xd0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a19      	ldr	r2, [pc, #100]	@ (800551c <HAL_TIM_Base_Start_IT+0xd8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a18      	ldr	r2, [pc, #96]	@ (8005520 <HAL_TIM_Base_Start_IT+0xdc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d111      	bne.n	80054e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d010      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	e007      	b.n	80054f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40010400 	.word	0x40010400
 800551c:	40014000 	.word	0x40014000
 8005520:	40001800 	.word	0x40001800

08005524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f839 	bl	80055c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 fdf0 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_TIM_PWM_Start+0x24>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e022      	b.n	8005642 <HAL_TIM_PWM_Start+0x6a>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d109      	bne.n	8005616 <HAL_TIM_PWM_Start+0x3e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b01      	cmp	r3, #1
 800560c:	bf14      	ite	ne
 800560e:	2301      	movne	r3, #1
 8005610:	2300      	moveq	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	e015      	b.n	8005642 <HAL_TIM_PWM_Start+0x6a>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d109      	bne.n	8005630 <HAL_TIM_PWM_Start+0x58>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e008      	b.n	8005642 <HAL_TIM_PWM_Start+0x6a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07c      	b.n	8005744 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_TIM_PWM_Start+0x82>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005658:	e013      	b.n	8005682 <HAL_TIM_PWM_Start+0xaa>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0x92>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005668:	e00b      	b.n	8005682 <HAL_TIM_PWM_Start+0xaa>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d104      	bne.n	800567a <HAL_TIM_PWM_Start+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005678:	e003      	b.n	8005682 <HAL_TIM_PWM_Start+0xaa>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f97c 	bl	8006988 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2d      	ldr	r2, [pc, #180]	@ (800574c <HAL_TIM_PWM_Start+0x174>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIM_PWM_Start+0xcc>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2c      	ldr	r2, [pc, #176]	@ (8005750 <HAL_TIM_PWM_Start+0x178>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_TIM_PWM_Start+0xd0>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <HAL_TIM_PWM_Start+0xd2>
 80056a8:	2300      	movs	r3, #0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a22      	ldr	r2, [pc, #136]	@ (800574c <HAL_TIM_PWM_Start+0x174>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d0:	d01d      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <HAL_TIM_PWM_Start+0x17c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <HAL_TIM_PWM_Start+0x180>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <HAL_TIM_PWM_Start+0x184>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <HAL_TIM_PWM_Start+0x178>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a18      	ldr	r2, [pc, #96]	@ (8005760 <HAL_TIM_PWM_Start+0x188>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	@ (8005764 <HAL_TIM_PWM_Start+0x18c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b06      	cmp	r3, #6
 800571e:	d010      	beq.n	8005742 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	e007      	b.n	8005742 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40014000 	.word	0x40014000
 8005764:	40001800 	.word	0x40001800

08005768 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e041      	b.n	80057fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fd f8c0 	bl	8002914 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 fcce 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_TIM_IC_Start_IT+0x1e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e013      	b.n	800584e <HAL_TIM_IC_Start_IT+0x46>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d104      	bne.n	8005836 <HAL_TIM_IC_Start_IT+0x2e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005832:	b2db      	uxtb	r3, r3
 8005834:	e00b      	b.n	800584e <HAL_TIM_IC_Start_IT+0x46>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d104      	bne.n	8005846 <HAL_TIM_IC_Start_IT+0x3e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e003      	b.n	800584e <HAL_TIM_IC_Start_IT+0x46>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <HAL_TIM_IC_Start_IT+0x58>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e013      	b.n	8005888 <HAL_TIM_IC_Start_IT+0x80>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b04      	cmp	r3, #4
 8005864:	d104      	bne.n	8005870 <HAL_TIM_IC_Start_IT+0x68>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e00b      	b.n	8005888 <HAL_TIM_IC_Start_IT+0x80>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b08      	cmp	r3, #8
 8005874:	d104      	bne.n	8005880 <HAL_TIM_IC_Start_IT+0x78>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e003      	b.n	8005888 <HAL_TIM_IC_Start_IT+0x80>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005886:	b2db      	uxtb	r3, r3
 8005888:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800588a:	7bbb      	ldrb	r3, [r7, #14]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d102      	bne.n	8005896 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005890:	7b7b      	ldrb	r3, [r7, #13]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d001      	beq.n	800589a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e0cc      	b.n	8005a34 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_TIM_IC_Start_IT+0xa2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a8:	e013      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0xca>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_IC_Start_IT+0xb2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b8:	e00b      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0xca>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d104      	bne.n	80058ca <HAL_TIM_IC_Start_IT+0xc2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058c8:	e003      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0xca>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_IC_Start_IT+0xda>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e0:	e013      	b.n	800590a <HAL_TIM_IC_Start_IT+0x102>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_IC_Start_IT+0xea>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058f0:	e00b      	b.n	800590a <HAL_TIM_IC_Start_IT+0x102>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_IC_Start_IT+0xfa>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005900:	e003      	b.n	800590a <HAL_TIM_IC_Start_IT+0x102>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d841      	bhi.n	8005994 <HAL_TIM_IC_Start_IT+0x18c>
 8005910:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <HAL_TIM_IC_Start_IT+0x110>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800594d 	.word	0x0800594d
 800591c:	08005995 	.word	0x08005995
 8005920:	08005995 	.word	0x08005995
 8005924:	08005995 	.word	0x08005995
 8005928:	0800595f 	.word	0x0800595f
 800592c:	08005995 	.word	0x08005995
 8005930:	08005995 	.word	0x08005995
 8005934:	08005995 	.word	0x08005995
 8005938:	08005971 	.word	0x08005971
 800593c:	08005995 	.word	0x08005995
 8005940:	08005995 	.word	0x08005995
 8005944:	08005995 	.word	0x08005995
 8005948:	08005983 	.word	0x08005983
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0202 	orr.w	r2, r2, #2
 800595a:	60da      	str	r2, [r3, #12]
      break;
 800595c:	e01d      	b.n	800599a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0204 	orr.w	r2, r2, #4
 800596c:	60da      	str	r2, [r3, #12]
      break;
 800596e:	e014      	b.n	800599a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0208 	orr.w	r2, r2, #8
 800597e:	60da      	str	r2, [r3, #12]
      break;
 8005980:	e00b      	b.n	800599a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0210 	orr.w	r2, r2, #16
 8005990:	60da      	str	r2, [r3, #12]
      break;
 8005992:	e002      	b.n	800599a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      break;
 8005998:	bf00      	nop
  }

  if (status == HAL_OK)
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d148      	bne.n	8005a32 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ffed 	bl	8006988 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <HAL_TIM_IC_Start_IT+0x234>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c0:	d01d      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <HAL_TIM_IC_Start_IT+0x238>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a44 <HAL_TIM_IC_Start_IT+0x23c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1b      	ldr	r2, [pc, #108]	@ (8005a48 <HAL_TIM_IC_Start_IT+0x240>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <HAL_TIM_IC_Start_IT+0x244>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <HAL_TIM_IC_Start_IT+0x248>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0x1f6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a16      	ldr	r2, [pc, #88]	@ (8005a54 <HAL_TIM_IC_Start_IT+0x24c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d111      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	d010      	beq.n	8005a32 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a20:	e007      	b.n	8005a32 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40001800 	.word	0x40001800

08005a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d020      	beq.n	8005abc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0202 	mvn.w	r2, #2
 8005a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc f888 	bl	8001bb8 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb2e 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fb35 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d020      	beq.n	8005b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0204 	mvn.w	r2, #4
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc f862 	bl	8001bb8 <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fb08 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb0f 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0208 	mvn.w	r2, #8
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc f83c 	bl	8001bb8 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fae2 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fae9 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d020      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01b      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0210 	mvn.w	r2, #16
 8005b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2208      	movs	r2, #8
 8005b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fc f816 	bl	8001bb8 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fabc 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fac3 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0201 	mvn.w	r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb fda2 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00c      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 ffce 	bl	8006b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00c      	beq.n	8005c0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa94 	bl	8006134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00c      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d007      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0220 	mvn.w	r2, #32
 8005c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 ffa0 	bl	8006b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e088      	b.n	8005d68 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c74:	f000 fcc4 	bl	8006600 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 020c 	bic.w	r2, r2, #12
 8005c86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	619a      	str	r2, [r3, #24]
 8005c9a:	e060      	b.n	8005d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d11c      	bne.n	8005cdc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005cb2:	f000 fd48 	bl	8006746 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6999      	ldr	r1, [r3, #24]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	021a      	lsls	r2, r3, #8
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	619a      	str	r2, [r3, #24]
 8005cda:	e040      	b.n	8005d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d11b      	bne.n	8005d1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005cf2:	f000 fd95 	bl	8006820 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 020c 	bic.w	r2, r2, #12
 8005d04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69d9      	ldr	r1, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
 8005d18:	e021      	b.n	8005d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d11c      	bne.n	8005d5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d30:	f000 fdb2 	bl	8006898 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69d9      	ldr	r1, [r3, #28]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	61da      	str	r2, [r3, #28]
 8005d58:	e001      	b.n	8005d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0ae      	b.n	8005eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	f200 809f 	bhi.w	8005edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dd9 	.word	0x08005dd9
 8005da8:	08005edd 	.word	0x08005edd
 8005dac:	08005edd 	.word	0x08005edd
 8005db0:	08005edd 	.word	0x08005edd
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005edd 	.word	0x08005edd
 8005dbc:	08005edd 	.word	0x08005edd
 8005dc0:	08005edd 	.word	0x08005edd
 8005dc4:	08005e5b 	.word	0x08005e5b
 8005dc8:	08005edd 	.word	0x08005edd
 8005dcc:	08005edd 	.word	0x08005edd
 8005dd0:	08005edd 	.word	0x08005edd
 8005dd4:	08005e9b 	.word	0x08005e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fa5e 	bl	80062a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	619a      	str	r2, [r3, #24]
      break;
 8005e16:	e064      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 faae 	bl	8006380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]
      break;
 8005e58:	e043      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fb03 	bl	800646c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]
      break;
 8005e98:	e023      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb57 	bl	8006554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	61da      	str	r2, [r3, #28]
      break;
 8005eda:	e002      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_ConfigClockSource+0x1c>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0b4      	b.n	800607a <HAL_TIM_ConfigClockSource+0x186>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d03e      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4e:	f200 8087 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	f000 8086 	beq.w	8006066 <HAL_TIM_ConfigClockSource+0x172>
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5e:	d87f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d01a      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0xa6>
 8005f64:	2b70      	cmp	r3, #112	@ 0x70
 8005f66:	d87b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d050      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x11a>
 8005f6c:	2b60      	cmp	r3, #96	@ 0x60
 8005f6e:	d877      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d03c      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0xfa>
 8005f74:	2b50      	cmp	r3, #80	@ 0x50
 8005f76:	d873      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d058      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x13a>
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d86f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d064      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	2b30      	cmp	r3, #48	@ 0x30
 8005f86:	d86b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d060      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d867      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05c      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d05a      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	e062      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	f000 fccd 	bl	8006948 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
      break;
 8005fc6:	e04f      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	f000 fcb6 	bl	8006948 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fea:	609a      	str	r2, [r3, #8]
      break;
 8005fec:	e03c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 fb74 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2150      	movs	r1, #80	@ 0x50
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc83 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 800600c:	e02c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fbd0 	bl	80067c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2160      	movs	r1, #96	@ 0x60
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fc73 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 800602c:	e01c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	461a      	mov	r2, r3
 800603c:	f000 fb54 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2140      	movs	r1, #64	@ 0x40
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fc63 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 800604c:	e00c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f000 fc5a 	bl	8006912 <TIM_ITRx_SetConfig>
      break;
 800605e:	e003      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e000      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d831      	bhi.n	80060fc <HAL_TIM_ReadCapturedValue+0x78>
 8006098:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060df 	.word	0x080060df
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	080060fd 	.word	0x080060fd
 80060bc:	080060fd 	.word	0x080060fd
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	080060fd 	.word	0x080060fd
 80060d0:	080060f3 	.word	0x080060f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060da:	60fb      	str	r3, [r7, #12]

      break;
 80060dc:	e00f      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	60fb      	str	r3, [r7, #12]

      break;
 80060e6:	e00a      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ee:	60fb      	str	r3, [r7, #12]

      break;
 80060f0:	e005      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	60fb      	str	r3, [r7, #12]

      break;
 80060fa:	e000      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060fc:	bf00      	nop
  }

  return tmpreg;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a46      	ldr	r2, [pc, #280]	@ (8006274 <TIM_Base_SetConfig+0x12c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006166:	d00f      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a43      	ldr	r2, [pc, #268]	@ (8006278 <TIM_Base_SetConfig+0x130>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a42      	ldr	r2, [pc, #264]	@ (800627c <TIM_Base_SetConfig+0x134>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a41      	ldr	r2, [pc, #260]	@ (8006280 <TIM_Base_SetConfig+0x138>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a40      	ldr	r2, [pc, #256]	@ (8006284 <TIM_Base_SetConfig+0x13c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a35      	ldr	r2, [pc, #212]	@ (8006274 <TIM_Base_SetConfig+0x12c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a8:	d027      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a32      	ldr	r2, [pc, #200]	@ (8006278 <TIM_Base_SetConfig+0x130>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d023      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a31      	ldr	r2, [pc, #196]	@ (800627c <TIM_Base_SetConfig+0x134>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <TIM_Base_SetConfig+0x138>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006284 <TIM_Base_SetConfig+0x13c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006288 <TIM_Base_SetConfig+0x140>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2d      	ldr	r2, [pc, #180]	@ (800628c <TIM_Base_SetConfig+0x144>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006290 <TIM_Base_SetConfig+0x148>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006294 <TIM_Base_SetConfig+0x14c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006298 <TIM_Base_SetConfig+0x150>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a29      	ldr	r2, [pc, #164]	@ (800629c <TIM_Base_SetConfig+0x154>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a10      	ldr	r2, [pc, #64]	@ (8006274 <TIM_Base_SetConfig+0x12c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a12      	ldr	r2, [pc, #72]	@ (8006284 <TIM_Base_SetConfig+0x13c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d103      	bne.n	8006248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d105      	bne.n	8006266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]
  }
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010000 	.word	0x40010000
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800
 8006294:	40001800 	.word	0x40001800
 8006298:	40001c00 	.word	0x40001c00
 800629c:	40002000 	.word	0x40002000

080062a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	f023 0201 	bic.w	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 0302 	bic.w	r3, r3, #2
 80062e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a20      	ldr	r2, [pc, #128]	@ (8006378 <TIM_OC1_SetConfig+0xd8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC1_SetConfig+0x64>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a1f      	ldr	r2, [pc, #124]	@ (800637c <TIM_OC1_SetConfig+0xdc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d10c      	bne.n	800631e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0308 	bic.w	r3, r3, #8
 800630a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0304 	bic.w	r3, r3, #4
 800631c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a15      	ldr	r2, [pc, #84]	@ (8006378 <TIM_OC1_SetConfig+0xd8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC1_SetConfig+0x8e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a14      	ldr	r2, [pc, #80]	@ (800637c <TIM_OC1_SetConfig+0xdc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d111      	bne.n	8006352 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40010000 	.word	0x40010000
 800637c:	40010400 	.word	0x40010400

08006380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	f023 0210 	bic.w	r2, r3, #16
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0320 	bic.w	r3, r3, #32
 80063ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a22      	ldr	r2, [pc, #136]	@ (8006464 <TIM_OC2_SetConfig+0xe4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_OC2_SetConfig+0x68>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a21      	ldr	r2, [pc, #132]	@ (8006468 <TIM_OC2_SetConfig+0xe8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d10d      	bne.n	8006404 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <TIM_OC2_SetConfig+0xe4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC2_SetConfig+0x94>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <TIM_OC2_SetConfig+0xe8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d113      	bne.n	800643c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800641a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a21      	ldr	r2, [pc, #132]	@ (800654c <TIM_OC3_SetConfig+0xe0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC3_SetConfig+0x66>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a20      	ldr	r2, [pc, #128]	@ (8006550 <TIM_OC3_SetConfig+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10d      	bne.n	80064ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	@ (800654c <TIM_OC3_SetConfig+0xe0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC3_SetConfig+0x92>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <TIM_OC3_SetConfig+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d113      	bne.n	8006526 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800659e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	031b      	lsls	r3, r3, #12
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a12      	ldr	r2, [pc, #72]	@ (80065f8 <TIM_OC4_SetConfig+0xa4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_OC4_SetConfig+0x68>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a11      	ldr	r2, [pc, #68]	@ (80065fc <TIM_OC4_SetConfig+0xa8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d109      	bne.n	80065d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40010400 	.word	0x40010400

08006600 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0201 	bic.w	r2, r3, #1
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a28      	ldr	r2, [pc, #160]	@ (80066cc <TIM_TI1_SetConfig+0xcc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01b      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006634:	d017      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a25      	ldr	r2, [pc, #148]	@ (80066d0 <TIM_TI1_SetConfig+0xd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <TIM_TI1_SetConfig+0xd4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a23      	ldr	r2, [pc, #140]	@ (80066d8 <TIM_TI1_SetConfig+0xd8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4a22      	ldr	r2, [pc, #136]	@ (80066dc <TIM_TI1_SetConfig+0xdc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a21      	ldr	r2, [pc, #132]	@ (80066e0 <TIM_TI1_SetConfig+0xe0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_TI1_SetConfig+0x66>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a20      	ldr	r2, [pc, #128]	@ (80066e4 <TIM_TI1_SetConfig+0xe4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <TIM_TI1_SetConfig+0x6a>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <TIM_TI1_SetConfig+0x6c>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	e003      	b.n	800668a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	b2db      	uxtb	r3, r3
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f023 030a 	bic.w	r3, r3, #10
 80066a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f003 030a 	and.w	r3, r3, #10
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 030a 	bic.w	r3, r3, #10
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0210 	bic.w	r2, r3, #16
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	031b      	lsls	r3, r3, #12
 800678a:	b29b      	uxth	r3, r3
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006798:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	621a      	str	r2, [r3, #32]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0210 	bic.w	r2, r3, #16
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	031b      	lsls	r3, r3, #12
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	621a      	str	r2, [r3, #32]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800685c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	b2db      	uxtb	r3, r3
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006870:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	621a      	str	r2, [r3, #32]
}
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	031b      	lsls	r3, r3, #12
 80068dc:	b29b      	uxth	r3, r3
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80068ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	031b      	lsls	r3, r3, #12
 80068f0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	f043 0307 	orr.w	r3, r3, #7
 8006934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	609a      	str	r2, [r3, #8]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	021a      	lsls	r2, r3, #8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	431a      	orrs	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	609a      	str	r2, [r3, #8]
}
 800697c:	bf00      	nop
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2201      	movs	r2, #1
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	401a      	ands	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1a      	ldr	r2, [r3, #32]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	431a      	orrs	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e05a      	b.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	@ (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a38:	d01d      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1a      	ldr	r2, [pc, #104]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a18      	ldr	r2, [pc, #96]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a17      	ldr	r2, [pc, #92]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a15      	ldr	r2, [pc, #84]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d10c      	bne.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40010400 	.word	0x40010400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40001800 	.word	0x40001800

08006acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e03d      	b.n	8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e042      	b.n	8006c30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb ffac 	bl	8002b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fdff 	bl	80077e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d175      	bne.n	8006d44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Transmit+0x2c>
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e06e      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2221      	movs	r2, #33	@ 0x21
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c76:	f7fc f835 	bl	8002ce4 <HAL_GetTick>
 8006c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c90:	d108      	bne.n	8006ca4 <HAL_UART_Transmit+0x6c>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e003      	b.n	8006cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cac:	e02e      	b.n	8006d0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	@ 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fb9b 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e03a      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	3302      	adds	r3, #2
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e007      	b.n	8006cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1cb      	bne.n	8006cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2140      	movs	r1, #64	@ 0x40
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fb67 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e006      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e000      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d44:	2302      	movs	r3, #2
  }
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b08a      	sub	sp, #40	@ 0x28
 8006d52:	af02      	add	r7, sp, #8
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 8081 	bne.w	8006e72 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_UART_Receive+0x2e>
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e079      	b.n	8006e74 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2222      	movs	r2, #34	@ 0x22
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d94:	f7fb ffa6 	bl	8002ce4 <HAL_GetTick>
 8006d98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dae:	d108      	bne.n	8006dc2 <HAL_UART_Receive+0x74>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e003      	b.n	8006dca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006dca:	e047      	b.n	8006e5c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2120      	movs	r1, #32
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 fb0c 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e042      	b.n	8006e74 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10c      	bne.n	8006e0e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	3302      	adds	r3, #2
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	e01f      	b.n	8006e4e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e16:	d007      	beq.n	8006e28 <HAL_UART_Receive+0xda>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <HAL_UART_Receive+0xe8>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	e008      	b.n	8006e48 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1b2      	bne.n	8006dcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e000      	b.n	8006e74 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b0ba      	sub	sp, #232	@ 0xe8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10f      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x66>
 8006ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fbc2 	bl	8007664 <UART_Receive_IT>
      return;
 8006ee0:	e25b      	b.n	800739a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80de 	beq.w	80070a8 <HAL_UART_IRQHandler+0x22c>
 8006eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80d1 	beq.w	80070a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <HAL_UART_IRQHandler+0xae>
 8006f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f22:	f043 0201 	orr.w	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00b      	beq.n	8006f4e <HAL_UART_IRQHandler+0xd2>
 8006f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	f043 0202 	orr.w	r2, r3, #2
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
 8006f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	f043 0204 	orr.w	r2, r3, #4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d011      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x126>
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 81f2 	beq.w	8007390 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <HAL_UART_IRQHandler+0x14e>
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fb4d 	bl	8007664 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b40      	cmp	r3, #64	@ 0x40
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d103      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x17a>
 8006fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d04f      	beq.n	8007096 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa55 	bl	80074a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007006:	2b40      	cmp	r3, #64	@ 0x40
 8007008:	d141      	bne.n	800708e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3314      	adds	r3, #20
 8007032:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007036:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800703a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800704e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1d9      	bne.n	800700a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d013      	beq.n	8007086 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007062:	4a7e      	ldr	r2, [pc, #504]	@ (800725c <HAL_UART_IRQHandler+0x3e0>)
 8007064:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706a:	4618      	mov	r0, r3
 800706c:	f7fc fbcc 	bl	8003808 <HAL_DMA_Abort_IT>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d016      	beq.n	80070a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	e00e      	b.n	80070a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f99e 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	e00a      	b.n	80070a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f99a 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	e006      	b.n	80070a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f996 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070a2:	e175      	b.n	8007390 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a4:	bf00      	nop
    return;
 80070a6:	e173      	b.n	8007390 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f040 814f 	bne.w	8007350 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8148 	beq.w	8007350 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8141 	beq.w	8007350 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ee:	2b40      	cmp	r3, #64	@ 0x40
 80070f0:	f040 80b6 	bne.w	8007260 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8145 	beq.w	8007394 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800710e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007112:	429a      	cmp	r2, r3
 8007114:	f080 813e 	bcs.w	8007394 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800711e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800712a:	f000 8088 	beq.w	800723e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800714c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800715a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800715e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007166:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1d9      	bne.n	800712e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3314      	adds	r3, #20
 8007180:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800718a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800719e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e1      	bne.n	800717a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3314      	adds	r3, #20
 80071bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3314      	adds	r3, #20
 80071d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e3      	bne.n	80071b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800720c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800720e:	f023 0310 	bic.w	r3, r3, #16
 8007212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	330c      	adds	r3, #12
 800721c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007220:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007222:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007226:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800722e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e3      	bne.n	80071fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fa75 	bl	8003728 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800724c:	b29b      	uxth	r3, r3
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	b29b      	uxth	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f8c1 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800725a:	e09b      	b.n	8007394 <HAL_UART_IRQHandler+0x518>
 800725c:	0800756d 	.word	0x0800756d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007268:	b29b      	uxth	r3, r3
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 808e 	beq.w	8007398 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800727c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8089 	beq.w	8007398 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800729c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80072ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e3      	bne.n	8007286 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3314      	adds	r3, #20
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	623b      	str	r3, [r7, #32]
   return(result);
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3314      	adds	r3, #20
 80072de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80072e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e3      	bne.n	80072be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	330c      	adds	r3, #12
 800730a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	60fb      	str	r3, [r7, #12]
   return(result);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0310 	bic.w	r3, r3, #16
 800731a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007328:	61fa      	str	r2, [r7, #28]
 800732a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	69b9      	ldr	r1, [r7, #24]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	617b      	str	r3, [r7, #20]
   return(result);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e3      	bne.n	8007304 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f847 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800734e:	e023      	b.n	8007398 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007358:	2b00      	cmp	r3, #0
 800735a:	d009      	beq.n	8007370 <HAL_UART_IRQHandler+0x4f4>
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f913 	bl	8007594 <UART_Transmit_IT>
    return;
 800736e:	e014      	b.n	800739a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00e      	beq.n	800739a <HAL_UART_IRQHandler+0x51e>
 800737c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f953 	bl	8007634 <UART_EndTransmit_IT>
    return;
 800738e:	e004      	b.n	800739a <HAL_UART_IRQHandler+0x51e>
    return;
 8007390:	bf00      	nop
 8007392:	e002      	b.n	800739a <HAL_UART_IRQHandler+0x51e>
      return;
 8007394:	bf00      	nop
 8007396:	e000      	b.n	800739a <HAL_UART_IRQHandler+0x51e>
      return;
 8007398:	bf00      	nop
  }
}
 800739a:	37e8      	adds	r7, #232	@ 0xe8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007404:	e03b      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800740c:	d037      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fb fc69 	bl	8002ce4 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	6a3a      	ldr	r2, [r7, #32]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <UART_WaitOnFlagUntilTimeout+0x30>
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e03a      	b.n	800749e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d023      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b80      	cmp	r3, #128	@ 0x80
 800743a:	d020      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x8a>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d01d      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d116      	bne.n	800747e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007450:	2300      	movs	r3, #0
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f81d 	bl	80074a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2208      	movs	r2, #8
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e00f      	b.n	800749e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	429a      	cmp	r2, r3
 800748c:	bf0c      	ite	eq
 800748e:	2301      	moveq	r3, #1
 8007490:	2300      	movne	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	429a      	cmp	r2, r3
 800749a:	d0b4      	beq.n	8007406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b095      	sub	sp, #84	@ 0x54
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3314      	adds	r3, #20
 80074e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3314      	adds	r3, #20
 8007500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	2b01      	cmp	r3, #1
 800751c:	d119      	bne.n	8007552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	60bb      	str	r3, [r7, #8]
   return(result);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f023 0310 	bic.w	r3, r3, #16
 8007534:	647b      	str	r3, [r7, #68]	@ 0x44
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753e:	61ba      	str	r2, [r7, #24]
 8007540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	613b      	str	r3, [r7, #16]
   return(result);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007560:	bf00      	nop
 8007562:	3754      	adds	r7, #84	@ 0x54
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff ff1e 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b21      	cmp	r3, #33	@ 0x21
 80075a6:	d13e      	bne.n	8007626 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b0:	d114      	bne.n	80075dc <UART_Transmit_IT+0x48>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d110      	bne.n	80075dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]
 80075da:	e008      	b.n	80075ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	1c59      	adds	r1, r3, #1
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6211      	str	r1, [r2, #32]
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	4619      	mov	r1, r3
 80075fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10f      	bne.n	8007622 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800764a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fea3 	bl	80073a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	@ 0x30
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b22      	cmp	r3, #34	@ 0x22
 8007676:	f040 80ae 	bne.w	80077d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007682:	d117      	bne.n	80076b4 <UART_Receive_IT+0x50>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d113      	bne.n	80076b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	1c9a      	adds	r2, r3, #2
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80076b2:	e026      	b.n	8007702 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076c6:	d007      	beq.n	80076d8 <UART_Receive_IT+0x74>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <UART_Receive_IT+0x82>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e008      	b.n	80076f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29b      	uxth	r3, r3
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	4619      	mov	r1, r3
 8007710:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007712:	2b00      	cmp	r3, #0
 8007714:	d15d      	bne.n	80077d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0220 	bic.w	r2, r2, #32
 8007724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	695a      	ldr	r2, [r3, #20]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	2b01      	cmp	r3, #1
 800775a:	d135      	bne.n	80077c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	613b      	str	r3, [r7, #16]
   return(result);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f023 0310 	bic.w	r3, r3, #16
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007782:	623a      	str	r2, [r7, #32]
 8007784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	69f9      	ldr	r1, [r7, #28]
 8007788:	6a3a      	ldr	r2, [r7, #32]
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e5      	bne.n	8007762 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d10a      	bne.n	80077ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fe0b 	bl	80073dc <HAL_UARTEx_RxEventCallback>
 80077c6:	e002      	b.n	80077ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff fdf3 	bl	80073b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e002      	b.n	80077d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3730      	adds	r7, #48	@ 0x30
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e4:	b0c0      	sub	sp, #256	@ 0x100
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fc:	68d9      	ldr	r1, [r3, #12]
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	ea40 0301 	orr.w	r3, r0, r1
 8007808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	431a      	orrs	r2, r3
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	431a      	orrs	r2, r3
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007838:	f021 010c 	bic.w	r1, r1, #12
 800783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007846:	430b      	orrs	r3, r1
 8007848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785a:	6999      	ldr	r1, [r3, #24]
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	ea40 0301 	orr.w	r3, r0, r1
 8007866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b8f      	ldr	r3, [pc, #572]	@ (8007aac <UART_SetConfig+0x2cc>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d005      	beq.n	8007880 <UART_SetConfig+0xa0>
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ab0 <UART_SetConfig+0x2d0>)
 800787c:	429a      	cmp	r2, r3
 800787e:	d104      	bne.n	800788a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007880:	f7fd f87c 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8007884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007888:	e003      	b.n	8007892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800788a:	f7fd f863 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 800788e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800789c:	f040 810c 	bne.w	8007ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078b2:	4622      	mov	r2, r4
 80078b4:	462b      	mov	r3, r5
 80078b6:	1891      	adds	r1, r2, r2
 80078b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078ba:	415b      	adcs	r3, r3
 80078bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078c2:	4621      	mov	r1, r4
 80078c4:	eb12 0801 	adds.w	r8, r2, r1
 80078c8:	4629      	mov	r1, r5
 80078ca:	eb43 0901 	adc.w	r9, r3, r1
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078e2:	4690      	mov	r8, r2
 80078e4:	4699      	mov	r9, r3
 80078e6:	4623      	mov	r3, r4
 80078e8:	eb18 0303 	adds.w	r3, r8, r3
 80078ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078f0:	462b      	mov	r3, r5
 80078f2:	eb49 0303 	adc.w	r3, r9, r3
 80078f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800790a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800790e:	460b      	mov	r3, r1
 8007910:	18db      	adds	r3, r3, r3
 8007912:	653b      	str	r3, [r7, #80]	@ 0x50
 8007914:	4613      	mov	r3, r2
 8007916:	eb42 0303 	adc.w	r3, r2, r3
 800791a:	657b      	str	r3, [r7, #84]	@ 0x54
 800791c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007924:	f7f9 f8ba 	bl	8000a9c <__aeabi_uldivmod>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4b61      	ldr	r3, [pc, #388]	@ (8007ab4 <UART_SetConfig+0x2d4>)
 800792e:	fba3 2302 	umull	r2, r3, r3, r2
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	011c      	lsls	r4, r3, #4
 8007936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800793a:	2200      	movs	r2, #0
 800793c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	1891      	adds	r1, r2, r2
 800794e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007950:	415b      	adcs	r3, r3
 8007952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007958:	4641      	mov	r1, r8
 800795a:	eb12 0a01 	adds.w	sl, r2, r1
 800795e:	4649      	mov	r1, r9
 8007960:	eb43 0b01 	adc.w	fp, r3, r1
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007978:	4692      	mov	sl, r2
 800797a:	469b      	mov	fp, r3
 800797c:	4643      	mov	r3, r8
 800797e:	eb1a 0303 	adds.w	r3, sl, r3
 8007982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007986:	464b      	mov	r3, r9
 8007988:	eb4b 0303 	adc.w	r3, fp, r3
 800798c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800799c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079a4:	460b      	mov	r3, r1
 80079a6:	18db      	adds	r3, r3, r3
 80079a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80079aa:	4613      	mov	r3, r2
 80079ac:	eb42 0303 	adc.w	r3, r2, r3
 80079b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079ba:	f7f9 f86f 	bl	8000a9c <__aeabi_uldivmod>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ab4 <UART_SetConfig+0x2d4>)
 80079c6:	fba3 2301 	umull	r2, r3, r3, r1
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	2264      	movs	r2, #100	@ 0x64
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	1acb      	subs	r3, r1, r3
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80079da:	4b36      	ldr	r3, [pc, #216]	@ (8007ab4 <UART_SetConfig+0x2d4>)
 80079dc:	fba3 2302 	umull	r2, r3, r3, r2
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80079e8:	441c      	add	r4, r3
 80079ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80079f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	1891      	adds	r1, r2, r2
 8007a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a04:	415b      	adcs	r3, r3
 8007a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	1851      	adds	r1, r2, r1
 8007a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a12:	4649      	mov	r1, r9
 8007a14:	414b      	adcs	r3, r1
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a24:	4659      	mov	r1, fp
 8007a26:	00cb      	lsls	r3, r1, #3
 8007a28:	4651      	mov	r1, sl
 8007a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a2e:	4651      	mov	r1, sl
 8007a30:	00ca      	lsls	r2, r1, #3
 8007a32:	4610      	mov	r0, r2
 8007a34:	4619      	mov	r1, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	4642      	mov	r2, r8
 8007a3a:	189b      	adds	r3, r3, r2
 8007a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a40:	464b      	mov	r3, r9
 8007a42:	460a      	mov	r2, r1
 8007a44:	eb42 0303 	adc.w	r3, r2, r3
 8007a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a60:	460b      	mov	r3, r1
 8007a62:	18db      	adds	r3, r3, r3
 8007a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a66:	4613      	mov	r3, r2
 8007a68:	eb42 0303 	adc.w	r3, r2, r3
 8007a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a76:	f7f9 f811 	bl	8000a9c <__aeabi_uldivmod>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <UART_SetConfig+0x2d4>)
 8007a80:	fba3 1302 	umull	r1, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	2164      	movs	r1, #100	@ 0x64
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	3332      	adds	r3, #50	@ 0x32
 8007a92:	4a08      	ldr	r2, [pc, #32]	@ (8007ab4 <UART_SetConfig+0x2d4>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	f003 0207 	and.w	r2, r3, #7
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4422      	add	r2, r4
 8007aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007aa8:	e106      	b.n	8007cb8 <UART_SetConfig+0x4d8>
 8007aaa:	bf00      	nop
 8007aac:	40011000 	.word	0x40011000
 8007ab0:	40011400 	.word	0x40011400
 8007ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007aca:	4642      	mov	r2, r8
 8007acc:	464b      	mov	r3, r9
 8007ace:	1891      	adds	r1, r2, r2
 8007ad0:	6239      	str	r1, [r7, #32]
 8007ad2:	415b      	adcs	r3, r3
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ada:	4641      	mov	r1, r8
 8007adc:	1854      	adds	r4, r2, r1
 8007ade:	4649      	mov	r1, r9
 8007ae0:	eb43 0501 	adc.w	r5, r3, r1
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	00eb      	lsls	r3, r5, #3
 8007aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007af2:	00e2      	lsls	r2, r4, #3
 8007af4:	4614      	mov	r4, r2
 8007af6:	461d      	mov	r5, r3
 8007af8:	4643      	mov	r3, r8
 8007afa:	18e3      	adds	r3, r4, r3
 8007afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b00:	464b      	mov	r3, r9
 8007b02:	eb45 0303 	adc.w	r3, r5, r3
 8007b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b26:	4629      	mov	r1, r5
 8007b28:	008b      	lsls	r3, r1, #2
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b30:	4621      	mov	r1, r4
 8007b32:	008a      	lsls	r2, r1, #2
 8007b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b38:	f7f8 ffb0 	bl	8000a9c <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b60      	ldr	r3, [pc, #384]	@ (8007cc4 <UART_SetConfig+0x4e4>)
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	011c      	lsls	r4, r3, #4
 8007b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	61b9      	str	r1, [r7, #24]
 8007b64:	415b      	adcs	r3, r3
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	1851      	adds	r1, r2, r1
 8007b70:	6139      	str	r1, [r7, #16]
 8007b72:	4649      	mov	r1, r9
 8007b74:	414b      	adcs	r3, r1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b84:	4659      	mov	r1, fp
 8007b86:	00cb      	lsls	r3, r1, #3
 8007b88:	4651      	mov	r1, sl
 8007b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b8e:	4651      	mov	r1, sl
 8007b90:	00ca      	lsls	r2, r1, #3
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	4603      	mov	r3, r0
 8007b98:	4642      	mov	r2, r8
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	460a      	mov	r2, r1
 8007ba4:	eb42 0303 	adc.w	r3, r2, r3
 8007ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	008b      	lsls	r3, r1, #2
 8007bc8:	4641      	mov	r1, r8
 8007bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bce:	4641      	mov	r1, r8
 8007bd0:	008a      	lsls	r2, r1, #2
 8007bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007bd6:	f7f8 ff61 	bl	8000a9c <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4611      	mov	r1, r2
 8007be0:	4b38      	ldr	r3, [pc, #224]	@ (8007cc4 <UART_SetConfig+0x4e4>)
 8007be2:	fba3 2301 	umull	r2, r3, r3, r1
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	2264      	movs	r2, #100	@ 0x64
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	1acb      	subs	r3, r1, r3
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	3332      	adds	r3, #50	@ 0x32
 8007bf4:	4a33      	ldr	r2, [pc, #204]	@ (8007cc4 <UART_SetConfig+0x4e4>)
 8007bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c00:	441c      	add	r4, r3
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c06:	2200      	movs	r2, #0
 8007c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c20:	4641      	mov	r1, r8
 8007c22:	1851      	adds	r1, r2, r1
 8007c24:	6039      	str	r1, [r7, #0]
 8007c26:	4649      	mov	r1, r9
 8007c28:	414b      	adcs	r3, r1
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c38:	4659      	mov	r1, fp
 8007c3a:	00cb      	lsls	r3, r1, #3
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c42:	4651      	mov	r1, sl
 8007c44:	00ca      	lsls	r2, r1, #3
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c52:	464b      	mov	r3, r9
 8007c54:	460a      	mov	r2, r1
 8007c56:	eb42 0303 	adc.w	r3, r2, r3
 8007c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c74:	4649      	mov	r1, r9
 8007c76:	008b      	lsls	r3, r1, #2
 8007c78:	4641      	mov	r1, r8
 8007c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c7e:	4641      	mov	r1, r8
 8007c80:	008a      	lsls	r2, r1, #2
 8007c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c86:	f7f8 ff09 	bl	8000a9c <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <UART_SetConfig+0x4e4>)
 8007c90:	fba3 1302 	umull	r1, r3, r3, r2
 8007c94:	095b      	lsrs	r3, r3, #5
 8007c96:	2164      	movs	r1, #100	@ 0x64
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	3332      	adds	r3, #50	@ 0x32
 8007ca2:	4a08      	ldr	r2, [pc, #32]	@ (8007cc4 <UART_SetConfig+0x4e4>)
 8007ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	f003 020f 	and.w	r2, r3, #15
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4422      	add	r2, r4
 8007cb6:	609a      	str	r2, [r3, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cc4:	51eb851f 	.word	0x51eb851f

08007cc8 <__NVIC_SetPriority>:
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	db0a      	blt.n	8007cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	490c      	ldr	r1, [pc, #48]	@ (8007d14 <__NVIC_SetPriority+0x4c>)
 8007ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce6:	0112      	lsls	r2, r2, #4
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	440b      	add	r3, r1
 8007cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007cf0:	e00a      	b.n	8007d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	4908      	ldr	r1, [pc, #32]	@ (8007d18 <__NVIC_SetPriority+0x50>)
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	3b04      	subs	r3, #4
 8007d00:	0112      	lsls	r2, r2, #4
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	440b      	add	r3, r1
 8007d06:	761a      	strb	r2, [r3, #24]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	e000e100 	.word	0xe000e100
 8007d18:	e000ed00 	.word	0xe000ed00

08007d1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <SysTick_Handler+0x1c>)
 8007d22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d24:	f002 f852 	bl	8009dcc <xTaskGetSchedulerState>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d001      	beq.n	8007d32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d2e:	f002 ff4b 	bl	800abc8 <xPortSysTickHandler>
  }
}
 8007d32:	bf00      	nop
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	e000e010 	.word	0xe000e010

08007d3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d40:	2100      	movs	r1, #0
 8007d42:	f06f 0004 	mvn.w	r0, #4
 8007d46:	f7ff ffbf 	bl	8007cc8 <__NVIC_SetPriority>
#endif
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d56:	f3ef 8305 	mrs	r3, IPSR
 8007d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d62:	f06f 0305 	mvn.w	r3, #5
 8007d66:	607b      	str	r3, [r7, #4]
 8007d68:	e00c      	b.n	8007d84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d94 <osKernelInitialize+0x44>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d105      	bne.n	8007d7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d72:	4b08      	ldr	r3, [pc, #32]	@ (8007d94 <osKernelInitialize+0x44>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	607b      	str	r3, [r7, #4]
 8007d7c:	e002      	b.n	8007d84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d84:	687b      	ldr	r3, [r7, #4]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000754 	.word	0x20000754

08007d98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d9e:	f3ef 8305 	mrs	r3, IPSR
 8007da2:	603b      	str	r3, [r7, #0]
  return(result);
 8007da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007daa:	f06f 0305 	mvn.w	r3, #5
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	e010      	b.n	8007dd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007db2:	4b0b      	ldr	r3, [pc, #44]	@ (8007de0 <osKernelStart+0x48>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d109      	bne.n	8007dce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dba:	f7ff ffbf 	bl	8007d3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007dbe:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <osKernelStart+0x48>)
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007dc4:	f001 fba4 	bl	8009510 <vTaskStartScheduler>
      stat = osOK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	607b      	str	r3, [r7, #4]
 8007dcc:	e002      	b.n	8007dd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dd4:	687b      	ldr	r3, [r7, #4]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000754 	.word	0x20000754

08007de4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	@ 0x38
 8007de8:	af04      	add	r7, sp, #16
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007df4:	f3ef 8305 	mrs	r3, IPSR
 8007df8:	617b      	str	r3, [r7, #20]
  return(result);
 8007dfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d17e      	bne.n	8007efe <osThreadNew+0x11a>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d07b      	beq.n	8007efe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e06:	2380      	movs	r3, #128	@ 0x80
 8007e08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e0a:	2318      	movs	r3, #24
 8007e0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d045      	beq.n	8007eaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <osThreadNew+0x48>
        name = attr->name;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d008      	beq.n	8007e52 <osThreadNew+0x6e>
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b38      	cmp	r3, #56	@ 0x38
 8007e44:	d805      	bhi.n	8007e52 <osThreadNew+0x6e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <osThreadNew+0x72>
        return (NULL);
 8007e52:	2300      	movs	r3, #0
 8007e54:	e054      	b.n	8007f00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <osThreadNew+0xa8>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b5b      	cmp	r3, #91	@ 0x5b
 8007e74:	d90a      	bls.n	8007e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d006      	beq.n	8007e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <osThreadNew+0xa8>
        mem = 1;
 8007e86:	2301      	movs	r3, #1
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	e010      	b.n	8007eae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10c      	bne.n	8007eae <osThreadNew+0xca>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d108      	bne.n	8007eae <osThreadNew+0xca>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <osThreadNew+0xca>
          mem = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	e001      	b.n	8007eae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d110      	bne.n	8007ed6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ebc:	9202      	str	r2, [sp, #8]
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6a3a      	ldr	r2, [r7, #32]
 8007ec8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f001 f944 	bl	8009158 <xTaskCreateStatic>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	e013      	b.n	8007efe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d110      	bne.n	8007efe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	f107 0310 	add.w	r3, r7, #16
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 f992 	bl	8009218 <xTaskCreate>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d001      	beq.n	8007efe <osThreadNew+0x11a>
            hTask = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007efe:	693b      	ldr	r3, [r7, #16]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3728      	adds	r7, #40	@ 0x28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f10:	f3ef 8305 	mrs	r3, IPSR
 8007f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <osDelay+0x1c>
    stat = osErrorISR;
 8007f1c:	f06f 0305 	mvn.w	r3, #5
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e007      	b.n	8007f34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fab8 	bl	80094a4 <vTaskDelay>
    }
  }

  return (stat);
 8007f34:	68fb      	ldr	r3, [r7, #12]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b088      	sub	sp, #32
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f4a:	f3ef 8305 	mrs	r3, IPSR
 8007f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f50:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d174      	bne.n	8008040 <osMutexNew+0x102>
    if (attr != NULL) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	e001      	b.n	8007f68 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <osMutexNew+0x3a>
      rmtx = 1U;
 8007f72:	2301      	movs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e001      	b.n	8007f7c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d15c      	bne.n	8008040 <osMutexNew+0x102>
      mem = -1;
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f8a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <osMutexNew+0x6a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fa0:	d902      	bls.n	8007fa8 <osMutexNew+0x6a>
          mem = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	e00c      	b.n	8007fc2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d108      	bne.n	8007fc2 <osMutexNew+0x84>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d104      	bne.n	8007fc2 <osMutexNew+0x84>
            mem = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	e001      	b.n	8007fc2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d112      	bne.n	8007fee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	2004      	movs	r0, #4
 8007fd6:	f000 fb20 	bl	800861a <xQueueCreateMutexStatic>
 8007fda:	61f8      	str	r0, [r7, #28]
 8007fdc:	e016      	b.n	800800c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	f000 fb18 	bl	800861a <xQueueCreateMutexStatic>
 8007fea:	61f8      	str	r0, [r7, #28]
 8007fec:	e00e      	b.n	800800c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007ffa:	2004      	movs	r0, #4
 8007ffc:	f000 faf5 	bl	80085ea <xQueueCreateMutex>
 8008000:	61f8      	str	r0, [r7, #28]
 8008002:	e003      	b.n	800800c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008004:	2001      	movs	r0, #1
 8008006:	f000 faf0 	bl	80085ea <xQueueCreateMutex>
 800800a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00c      	beq.n	800802c <osMutexNew+0xee>
        if (attr != NULL) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <osMutexNew+0xe2>
          name = attr->name;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e001      	b.n	8008024 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008024:	68f9      	ldr	r1, [r7, #12]
 8008026:	69f8      	ldr	r0, [r7, #28]
 8008028:	f001 f838 	bl	800909c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d006      	beq.n	8008040 <osMutexNew+0x102>
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f043 0301 	orr.w	r3, r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008040:	69fb      	ldr	r3, [r7, #28]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800804a:	b580      	push	{r7, lr}
 800804c:	b086      	sub	sp, #24
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008068:	f3ef 8305 	mrs	r3, IPSR
 800806c:	60bb      	str	r3, [r7, #8]
  return(result);
 800806e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008074:	f06f 0305 	mvn.w	r3, #5
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e02c      	b.n	80080d6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008082:	f06f 0303 	mvn.w	r3, #3
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e025      	b.n	80080d6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d011      	beq.n	80080b4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6938      	ldr	r0, [r7, #16]
 8008094:	f000 fb11 	bl	80086ba <xQueueTakeMutexRecursive>
 8008098:	4603      	mov	r3, r0
 800809a:	2b01      	cmp	r3, #1
 800809c:	d01b      	beq.n	80080d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80080a4:	f06f 0301 	mvn.w	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	e014      	b.n	80080d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080ac:	f06f 0302 	mvn.w	r3, #2
 80080b0:	617b      	str	r3, [r7, #20]
 80080b2:	e010      	b.n	80080d6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6938      	ldr	r0, [r7, #16]
 80080b8:	f000 fdb8 	bl	8008c2c <xQueueSemaphoreTake>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d009      	beq.n	80080d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80080c8:	f06f 0301 	mvn.w	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e002      	b.n	80080d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080d0:	f06f 0302 	mvn.w	r3, #2
 80080d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80080d6:	697b      	ldr	r3, [r7, #20]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080fc:	f3ef 8305 	mrs	r3, IPSR
 8008100:	60bb      	str	r3, [r7, #8]
  return(result);
 8008102:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008108:	f06f 0305 	mvn.w	r3, #5
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	e01f      	b.n	8008150 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008116:	f06f 0303 	mvn.w	r3, #3
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e018      	b.n	8008150 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008124:	6938      	ldr	r0, [r7, #16]
 8008126:	f000 fa93 	bl	8008650 <xQueueGiveMutexRecursive>
 800812a:	4603      	mov	r3, r0
 800812c:	2b01      	cmp	r3, #1
 800812e:	d00f      	beq.n	8008150 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008130:	f06f 0302 	mvn.w	r3, #2
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	e00b      	b.n	8008150 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6938      	ldr	r0, [r7, #16]
 8008140:	f000 faf2 	bl	8008728 <xQueueGenericSend>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d002      	beq.n	8008150 <osMutexRelease+0x70>
        stat = osErrorResource;
 800814a:	f06f 0302 	mvn.w	r3, #2
 800814e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008150:	697b      	ldr	r3, [r7, #20]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4a07      	ldr	r2, [pc, #28]	@ (8008188 <vApplicationGetIdleTaskMemory+0x2c>)
 800816c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a06      	ldr	r2, [pc, #24]	@ (800818c <vApplicationGetIdleTaskMemory+0x30>)
 8008172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2280      	movs	r2, #128	@ 0x80
 8008178:	601a      	str	r2, [r3, #0]
}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000758 	.word	0x20000758
 800818c:	200007b4 	.word	0x200007b4

08008190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a07      	ldr	r2, [pc, #28]	@ (80081bc <vApplicationGetTimerTaskMemory+0x2c>)
 80081a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a06      	ldr	r2, [pc, #24]	@ (80081c0 <vApplicationGetTimerTaskMemory+0x30>)
 80081a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081ae:	601a      	str	r2, [r3, #0]
}
 80081b0:	bf00      	nop
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	200009b4 	.word	0x200009b4
 80081c0:	20000a10 	.word	0x20000a10

080081c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f103 0208 	add.w	r2, r3, #8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f103 0208 	add.w	r2, r3, #8
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f103 0208 	add.w	r2, r3, #8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800827c:	d103      	bne.n	8008286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e00c      	b.n	80082a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3308      	adds	r3, #8
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	e002      	b.n	8008294 <vListInsert+0x2e>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	429a      	cmp	r2, r3
 800829e:	d2f6      	bcs.n	800828e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6892      	ldr	r2, [r2, #8]
 80082ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6852      	ldr	r2, [r2, #4]
 80082f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d103      	bne.n	800830c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	1e5a      	subs	r2, r3, #1
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008358:	f002 fba6 	bl	800aaa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	441a      	add	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008388:	3b01      	subs	r3, #1
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	441a      	add	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	22ff      	movs	r2, #255	@ 0xff
 800839c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	22ff      	movs	r2, #255	@ 0xff
 80083a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d114      	bne.n	80083d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01a      	beq.n	80083ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3310      	adds	r3, #16
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fb36 	bl	8009a2c <xTaskRemoveFromEventList>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d012      	beq.n	80083ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <xQueueGenericReset+0xd0>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	e009      	b.n	80083ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3310      	adds	r3, #16
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fef1 	bl	80081c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3324      	adds	r3, #36	@ 0x24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff feec 	bl	80081c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083ec:	f002 fb8e 	bl	800ab0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083f0:	2301      	movs	r3, #1
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	e000ed04 	.word	0xe000ed04

08008400 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08e      	sub	sp, #56	@ 0x38
 8008404:	af02      	add	r7, sp, #8
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10b      	bne.n	800842c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	e7fd      	b.n	8008446 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <xQueueGenericCreateStatic+0x56>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <xQueueGenericCreateStatic+0x5a>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <xQueueGenericCreateStatic+0x5c>
 800845a:	2300      	movs	r3, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10b      	bne.n	8008478 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	623b      	str	r3, [r7, #32]
}
 8008472:	bf00      	nop
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <xQueueGenericCreateStatic+0x84>
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <xQueueGenericCreateStatic+0x88>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <xQueueGenericCreateStatic+0x8a>
 8008488:	2300      	movs	r3, #0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	61fb      	str	r3, [r7, #28]
}
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop
 80084a4:	e7fd      	b.n	80084a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084a6:	2350      	movs	r3, #80	@ 0x50
 80084a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b50      	cmp	r3, #80	@ 0x50
 80084ae:	d00b      	beq.n	80084c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	61bb      	str	r3, [r7, #24]
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00d      	beq.n	80084f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f840 	bl	8008570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3730      	adds	r7, #48	@ 0x30
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b08a      	sub	sp, #40	@ 0x28
 80084fe:	af02      	add	r7, sp, #8
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	4613      	mov	r3, r2
 8008506:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <xQueueGenericCreate+0x2c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	613b      	str	r3, [r7, #16]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	3350      	adds	r3, #80	@ 0x50
 8008534:	4618      	mov	r0, r3
 8008536:	f002 fbd9 	bl	800acec <pvPortMalloc>
 800853a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d011      	beq.n	8008566 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	3350      	adds	r3, #80	@ 0x50
 800854a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4613      	mov	r3, r2
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f805 	bl	8008570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008566:	69bb      	ldr	r3, [r7, #24]
	}
 8008568:	4618      	mov	r0, r3
 800856a:	3720      	adds	r7, #32
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e002      	b.n	8008592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800859e:	2101      	movs	r1, #1
 80085a0:	69b8      	ldr	r0, [r7, #24]
 80085a2:	f7ff fec3 	bl	800832c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085d6:	2300      	movs	r3, #0
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f8a3 	bl	8008728 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b086      	sub	sp, #24
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	4603      	mov	r3, r0
 80085f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	461a      	mov	r2, r3
 8008600:	6939      	ldr	r1, [r7, #16]
 8008602:	6978      	ldr	r0, [r7, #20]
 8008604:	f7ff ff79 	bl	80084fa <xQueueGenericCreate>
 8008608:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff ffd3 	bl	80085b6 <prvInitialiseMutex>

		return xNewQueue;
 8008610:	68fb      	ldr	r3, [r7, #12]
	}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800861a:	b580      	push	{r7, lr}
 800861c:	b088      	sub	sp, #32
 800861e:	af02      	add	r7, sp, #8
 8008620:	4603      	mov	r3, r0
 8008622:	6039      	str	r1, [r7, #0]
 8008624:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008626:	2301      	movs	r3, #1
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2200      	movs	r2, #0
 8008636:	6939      	ldr	r1, [r7, #16]
 8008638:	6978      	ldr	r0, [r7, #20]
 800863a:	f7ff fee1 	bl	8008400 <xQueueGenericCreateStatic>
 800863e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff ffb8 	bl	80085b6 <prvInitialiseMutex>

		return xNewQueue;
 8008646:	68fb      	ldr	r3, [r7, #12]
	}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60fb      	str	r3, [r7, #12]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	689c      	ldr	r4, [r3, #8]
 800867e:	f001 fb95 	bl	8009dac <xTaskGetCurrentTaskHandle>
 8008682:	4603      	mov	r3, r0
 8008684:	429c      	cmp	r4, r3
 8008686:	d111      	bne.n	80086ac <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800869a:	2300      	movs	r3, #0
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	6938      	ldr	r0, [r7, #16]
 80086a2:	f000 f841 	bl	8008728 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80086a6:	2301      	movs	r3, #1
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	e001      	b.n	80086b0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80086b0:	697b      	ldr	r3, [r7, #20]
	}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd90      	pop	{r4, r7, pc}

080086ba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80086ba:	b590      	push	{r4, r7, lr}
 80086bc:	b087      	sub	sp, #28
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	689c      	ldr	r4, [r3, #8]
 80086ea:	f001 fb5f 	bl	8009dac <xTaskGetCurrentTaskHandle>
 80086ee:	4603      	mov	r3, r0
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d107      	bne.n	8008704 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80086fe:	2301      	movs	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	e00c      	b.n	800871e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6938      	ldr	r0, [r7, #16]
 8008708:	f000 fa90 	bl	8008c2c <xQueueSemaphoreTake>
 800870c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800871e:	697b      	ldr	r3, [r7, #20]
	}
 8008720:	4618      	mov	r0, r3
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}

08008728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08e      	sub	sp, #56	@ 0x38
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008736:	2300      	movs	r3, #0
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <xQueueGenericSend+0x34>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d103      	bne.n	800876a <xQueueGenericSend+0x42>
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <xQueueGenericSend+0x46>
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <xQueueGenericSend+0x48>
 800876e:	2300      	movs	r3, #0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xQueueGenericSend+0x64>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d103      	bne.n	800879a <xQueueGenericSend+0x72>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <xQueueGenericSend+0x76>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <xQueueGenericSend+0x78>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <xQueueGenericSend+0x94>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	623b      	str	r3, [r7, #32]
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087bc:	f001 fb06 	bl	8009dcc <xTaskGetSchedulerState>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <xQueueGenericSend+0xa4>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <xQueueGenericSend+0xa8>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <xQueueGenericSend+0xaa>
 80087d0:	2300      	movs	r3, #0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <xQueueGenericSend+0xc6>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	61fb      	str	r3, [r7, #28]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ee:	f002 f95b 	bl	800aaa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <xQueueGenericSend+0xdc>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d129      	bne.n	8008858 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800880a:	f000 fb37 	bl	8008e7c <prvCopyDataToQueue>
 800880e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d010      	beq.n	800883a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	3324      	adds	r3, #36	@ 0x24
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f905 	bl	8009a2c <xTaskRemoveFromEventList>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d013      	beq.n	8008850 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008828:	4b3f      	ldr	r3, [pc, #252]	@ (8008928 <xQueueGenericSend+0x200>)
 800882a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	e00a      	b.n	8008850 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800883a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008840:	4b39      	ldr	r3, [pc, #228]	@ (8008928 <xQueueGenericSend+0x200>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008850:	f002 f95c 	bl	800ab0c <vPortExitCritical>
				return pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	e063      	b.n	8008920 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800885e:	f002 f955 	bl	800ab0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008862:	2300      	movs	r3, #0
 8008864:	e05c      	b.n	8008920 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4618      	mov	r0, r3
 8008872:	f001 f93f 	bl	8009af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800887a:	f002 f947 	bl	800ab0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800887e:	f000 feaf 	bl	80095e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008882:	f002 f911 	bl	800aaa8 <vPortEnterCritical>
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008892:	d103      	bne.n	800889c <xQueueGenericSend+0x174>
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a2:	b25b      	sxtb	r3, r3
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088a8:	d103      	bne.n	80088b2 <xQueueGenericSend+0x18a>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b2:	f002 f92b 	bl	800ab0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088b6:	1d3a      	adds	r2, r7, #4
 80088b8:	f107 0314 	add.w	r3, r7, #20
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 f92e 	bl	8009b20 <xTaskCheckForTimeOut>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d124      	bne.n	8008914 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088cc:	f000 fbce 	bl	800906c <prvIsQueueFull>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	3310      	adds	r3, #16
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 f852 	bl	8009988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088e6:	f000 fb59 	bl	8008f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ea:	f000 fe87 	bl	80095fc <xTaskResumeAll>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f47f af7c 	bne.w	80087ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008928 <xQueueGenericSend+0x200>)
 80088f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	e772      	b.n	80087ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800890a:	f000 fb47 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800890e:	f000 fe75 	bl	80095fc <xTaskResumeAll>
 8008912:	e76c      	b.n	80087ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008916:	f000 fb41 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800891a:	f000 fe6f 	bl	80095fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800891e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008920:	4618      	mov	r0, r3
 8008922:	3738      	adds	r7, #56	@ 0x38
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b090      	sub	sp, #64	@ 0x40
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <xQueueGenericSendFromISR+0x3e>
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <xQueueGenericSendFromISR+0x42>
 800896a:	2301      	movs	r3, #1
 800896c:	e000      	b.n	8008970 <xQueueGenericSendFromISR+0x44>
 800896e:	2300      	movs	r3, #0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d103      	bne.n	800899a <xQueueGenericSendFromISR+0x6e>
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <xQueueGenericSendFromISR+0x72>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueGenericSendFromISR+0x74>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	623b      	str	r3, [r7, #32]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089bc:	f002 f954 	bl	800ac68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089c0:	f3ef 8211 	mrs	r2, BASEPRI
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61fa      	str	r2, [r7, #28]
 80089d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d302      	bcc.n	80089ee <xQueueGenericSendFromISR+0xc2>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d12f      	bne.n	8008a4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a04:	f000 fa3a 	bl	8008e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a10:	d112      	bne.n	8008a38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d016      	beq.n	8008a48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	3324      	adds	r3, #36	@ 0x24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 f804 	bl	8009a2c <xTaskRemoveFromEventList>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00e      	beq.n	8008a48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e007      	b.n	8008a48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	b25a      	sxtb	r2, r3
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a4c:	e001      	b.n	8008a52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3740      	adds	r7, #64	@ 0x40
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08c      	sub	sp, #48	@ 0x30
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10b      	bne.n	8008a9a <xQueueReceive+0x32>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	623b      	str	r3, [r7, #32]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <xQueueReceive+0x40>
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <xQueueReceive+0x44>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <xQueueReceive+0x46>
 8008aac:	2300      	movs	r3, #0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <xQueueReceive+0x62>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	61fb      	str	r3, [r7, #28]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aca:	f001 f97f 	bl	8009dcc <xTaskGetSchedulerState>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <xQueueReceive+0x72>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <xQueueReceive+0x76>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <xQueueReceive+0x78>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xQueueReceive+0x94>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	61bb      	str	r3, [r7, #24]
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008afc:	f001 ffd4 	bl	800aaa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01f      	beq.n	8008b4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b10:	f000 fa1e 	bl	8008f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	1e5a      	subs	r2, r3, #1
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00f      	beq.n	8008b44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	3310      	adds	r3, #16
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ff7f 	bl	8009a2c <xTaskRemoveFromEventList>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d007      	beq.n	8008b44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b34:	4b3c      	ldr	r3, [pc, #240]	@ (8008c28 <xQueueReceive+0x1c0>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b44:	f001 ffe2 	bl	800ab0c <vPortExitCritical>
				return pdPASS;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e069      	b.n	8008c20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d103      	bne.n	8008b5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b52:	f001 ffdb 	bl	800ab0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e062      	b.n	8008c20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b60:	f107 0310 	add.w	r3, r7, #16
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 ffc5 	bl	8009af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b6e:	f001 ffcd 	bl	800ab0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b72:	f000 fd35 	bl	80095e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b76:	f001 ff97 	bl	800aaa8 <vPortEnterCritical>
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b86:	d103      	bne.n	8008b90 <xQueueReceive+0x128>
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b9c:	d103      	bne.n	8008ba6 <xQueueReceive+0x13e>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ba6:	f001 ffb1 	bl	800ab0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008baa:	1d3a      	adds	r2, r7, #4
 8008bac:	f107 0310 	add.w	r3, r7, #16
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 ffb4 	bl	8009b20 <xTaskCheckForTimeOut>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d123      	bne.n	8008c06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc0:	f000 fa3e 	bl	8009040 <prvIsQueueEmpty>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d017      	beq.n	8008bfa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	3324      	adds	r3, #36	@ 0x24
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fed8 	bl	8009988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bda:	f000 f9df 	bl	8008f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bde:	f000 fd0d 	bl	80095fc <xTaskResumeAll>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d189      	bne.n	8008afc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008be8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c28 <xQueueReceive+0x1c0>)
 8008bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	e780      	b.n	8008afc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bfc:	f000 f9ce 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c00:	f000 fcfc 	bl	80095fc <xTaskResumeAll>
 8008c04:	e77a      	b.n	8008afc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c08:	f000 f9c8 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c0c:	f000 fcf6 	bl	80095fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c12:	f000 fa15 	bl	8009040 <prvIsQueueEmpty>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f43f af6f 	beq.w	8008afc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3730      	adds	r7, #48	@ 0x30
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08e      	sub	sp, #56	@ 0x38
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	61fb      	str	r3, [r7, #28]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c80:	f001 f8a4 	bl	8009dcc <xTaskGetSchedulerState>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <xQueueSemaphoreTake+0x64>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <xQueueSemaphoreTake+0x68>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <xQueueSemaphoreTake+0x6a>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	61bb      	str	r3, [r7, #24]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cb2:	f001 fef9 	bl	800aaa8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d024      	beq.n	8008d0c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cd2:	f001 f9f5 	bl	800a0c0 <pvTaskIncrementMutexHeldCount>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00f      	beq.n	8008d04 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	3310      	adds	r3, #16
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fe9f 	bl	8009a2c <xTaskRemoveFromEventList>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cf4:	4b54      	ldr	r3, [pc, #336]	@ (8008e48 <xQueueSemaphoreTake+0x21c>)
 8008cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d04:	f001 ff02 	bl	800ab0c <vPortExitCritical>
				return pdPASS;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e098      	b.n	8008e3e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d112      	bne.n	8008d38 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	617b      	str	r3, [r7, #20]
}
 8008d2a:	bf00      	nop
 8008d2c:	bf00      	nop
 8008d2e:	e7fd      	b.n	8008d2c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d30:	f001 feec 	bl	800ab0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d34:	2300      	movs	r3, #0
 8008d36:	e082      	b.n	8008e3e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d3e:	f107 030c 	add.w	r3, r7, #12
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fed6 	bl	8009af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d4c:	f001 fede 	bl	800ab0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d50:	f000 fc46 	bl	80095e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d54:	f001 fea8 	bl	800aaa8 <vPortEnterCritical>
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d5e:	b25b      	sxtb	r3, r3
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d64:	d103      	bne.n	8008d6e <xQueueSemaphoreTake+0x142>
 8008d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d7a:	d103      	bne.n	8008d84 <xQueueSemaphoreTake+0x158>
 8008d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d84:	f001 fec2 	bl	800ab0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d88:	463a      	mov	r2, r7
 8008d8a:	f107 030c 	add.w	r3, r7, #12
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fec5 	bl	8009b20 <xTaskCheckForTimeOut>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d132      	bne.n	8008e02 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d9e:	f000 f94f 	bl	8009040 <prvIsQueueEmpty>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d026      	beq.n	8008df6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008db0:	f001 fe7a 	bl	800aaa8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 f825 	bl	8009e08 <xTaskPriorityInherit>
 8008dbe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008dc0:	f001 fea4 	bl	800ab0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	3324      	adds	r3, #36	@ 0x24
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fddb 	bl	8009988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dd4:	f000 f8e2 	bl	8008f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dd8:	f000 fc10 	bl	80095fc <xTaskResumeAll>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f47f af67 	bne.w	8008cb2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008de4:	4b18      	ldr	r3, [pc, #96]	@ (8008e48 <xQueueSemaphoreTake+0x21c>)
 8008de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	e75d      	b.n	8008cb2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008df6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008df8:	f000 f8d0 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dfc:	f000 fbfe 	bl	80095fc <xTaskResumeAll>
 8008e00:	e757      	b.n	8008cb2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e04:	f000 f8ca 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e08:	f000 fbf8 	bl	80095fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e0e:	f000 f917 	bl	8009040 <prvIsQueueEmpty>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f43f af4c 	beq.w	8008cb2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e20:	f001 fe42 	bl	800aaa8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e26:	f000 f811 	bl	8008e4c <prvGetDisinheritPriorityAfterTimeout>
 8008e2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 f8c0 	bl	8009fb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e38:	f001 fe68 	bl	800ab0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3738      	adds	r7, #56	@ 0x38
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e001      	b.n	8008e6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d14d      	bne.n	8008f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f001 f816 	bl	8009ed8 <xTaskPriorityDisinherit>
 8008eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	609a      	str	r2, [r3, #8]
 8008eb4:	e043      	b.n	8008f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d119      	bne.n	8008ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6858      	ldr	r0, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	f002 fa9b 	bl	800b402 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed4:	441a      	add	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d32b      	bcc.n	8008f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	e026      	b.n	8008f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68d8      	ldr	r0, [r3, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	f002 fa81 	bl	800b402 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f08:	425b      	negs	r3, r3
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d207      	bcs.n	8008f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f24:	425b      	negs	r3, r3
 8008f26:	441a      	add	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d105      	bne.n	8008f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f46:	697b      	ldr	r3, [r7, #20]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d018      	beq.n	8008f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d303      	bcc.n	8008f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68d9      	ldr	r1, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6838      	ldr	r0, [r7, #0]
 8008f90:	f002 fa37 	bl	800b402 <memcpy>
	}
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fa4:	f001 fd80 	bl	800aaa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fb0:	e011      	b.n	8008fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d012      	beq.n	8008fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3324      	adds	r3, #36	@ 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fd34 	bl	8009a2c <xTaskRemoveFromEventList>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fca:	f000 fe0d 	bl	8009be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dce9      	bgt.n	8008fb2 <prvUnlockQueue+0x16>
 8008fde:	e000      	b.n	8008fe2 <prvUnlockQueue+0x46>
					break;
 8008fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	22ff      	movs	r2, #255	@ 0xff
 8008fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fea:	f001 fd8f 	bl	800ab0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fee:	f001 fd5b 	bl	800aaa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ffa:	e011      	b.n	8009020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d012      	beq.n	800902a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3310      	adds	r3, #16
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fd0f 	bl	8009a2c <xTaskRemoveFromEventList>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009014:	f000 fde8 	bl	8009be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	3b01      	subs	r3, #1
 800901c:	b2db      	uxtb	r3, r3
 800901e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dce9      	bgt.n	8008ffc <prvUnlockQueue+0x60>
 8009028:	e000      	b.n	800902c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800902a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	22ff      	movs	r2, #255	@ 0xff
 8009030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009034:	f001 fd6a 	bl	800ab0c <vPortExitCritical>
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009048:	f001 fd2e 	bl	800aaa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e001      	b.n	800905e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800905e:	f001 fd55 	bl	800ab0c <vPortExitCritical>

	return xReturn;
 8009062:	68fb      	ldr	r3, [r7, #12]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009074:	f001 fd18 	bl	800aaa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009080:	429a      	cmp	r2, r3
 8009082:	d102      	bne.n	800908a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f001 fd3d 	bl	800ab0c <vPortExitCritical>

	return xReturn;
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e014      	b.n	80090d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090ac:	4a0f      	ldr	r2, [pc, #60]	@ (80090ec <vQueueAddToRegistry+0x50>)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090b8:	490c      	ldr	r1, [pc, #48]	@ (80090ec <vQueueAddToRegistry+0x50>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090c2:	4a0a      	ldr	r2, [pc, #40]	@ (80090ec <vQueueAddToRegistry+0x50>)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090ce:	e006      	b.n	80090de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b07      	cmp	r3, #7
 80090da:	d9e7      	bls.n	80090ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000e10 	.word	0x20000e10

080090f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009100:	f001 fcd2 	bl	800aaa8 <vPortEnterCritical>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800910a:	b25b      	sxtb	r3, r3
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009110:	d103      	bne.n	800911a <vQueueWaitForMessageRestricted+0x2a>
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009120:	b25b      	sxtb	r3, r3
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009126:	d103      	bne.n	8009130 <vQueueWaitForMessageRestricted+0x40>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009130:	f001 fcec 	bl	800ab0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	3324      	adds	r3, #36	@ 0x24
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fc45 	bl	80099d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800914a:	6978      	ldr	r0, [r7, #20]
 800914c:	f7ff ff26 	bl	8008f9c <prvUnlockQueue>
	}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	@ 0x38
 800915c:	af04      	add	r7, sp, #16
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <xTaskCreateStatic+0x2c>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	623b      	str	r3, [r7, #32]
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	e7fd      	b.n	8009180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10b      	bne.n	80091a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	61fb      	str	r3, [r7, #28]
}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	e7fd      	b.n	800919e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091a2:	235c      	movs	r3, #92	@ 0x5c
 80091a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80091aa:	d00b      	beq.n	80091c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	61bb      	str	r3, [r7, #24]
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	e7fd      	b.n	80091c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01e      	beq.n	800920a <xTaskCreateStatic+0xb2>
 80091cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d01b      	beq.n	800920a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091e4:	2300      	movs	r3, #0
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	f107 0314 	add.w	r3, r7, #20
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f850 	bl	80092a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009202:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009204:	f000 f8de 	bl	80093c4 <prvAddNewTaskToReadyList>
 8009208:	e001      	b.n	800920e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800920e:	697b      	ldr	r3, [r7, #20]
	}
 8009210:	4618      	mov	r0, r3
 8009212:	3728      	adds	r7, #40	@ 0x28
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08c      	sub	sp, #48	@ 0x30
 800921c:	af04      	add	r7, sp, #16
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	4613      	mov	r3, r2
 8009226:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f001 fd5d 	bl	800acec <pvPortMalloc>
 8009232:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800923a:	205c      	movs	r0, #92	@ 0x5c
 800923c:	f001 fd56 	bl	800acec <pvPortMalloc>
 8009240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	631a      	str	r2, [r3, #48]	@ 0x30
 800924e:	e005      	b.n	800925c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009250:	6978      	ldr	r0, [r7, #20]
 8009252:	f001 fe19 	bl	800ae88 <vPortFree>
 8009256:	e001      	b.n	800925c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d017      	beq.n	8009292 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800926a:	88fa      	ldrh	r2, [r7, #6]
 800926c:	2300      	movs	r3, #0
 800926e:	9303      	str	r3, [sp, #12]
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	9302      	str	r3, [sp, #8]
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f80e 	bl	80092a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009286:	69f8      	ldr	r0, [r7, #28]
 8009288:	f000 f89c 	bl	80093c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800928c:	2301      	movs	r3, #1
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	e002      	b.n	8009298 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009296:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009298:	69bb      	ldr	r3, [r7, #24]
	}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b088      	sub	sp, #32
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	607a      	str	r2, [r7, #4]
 80092ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	461a      	mov	r2, r3
 80092ba:	21a5      	movs	r1, #165	@ 0xa5
 80092bc:	f002 f86c 	bl	800b398 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092ca:	3b01      	subs	r3, #1
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f023 0307 	bic.w	r3, r3, #7
 80092d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	617b      	str	r3, [r7, #20]
}
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
 80092fa:	e7fd      	b.n	80092f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01f      	beq.n	8009342 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009302:	2300      	movs	r3, #0
 8009304:	61fb      	str	r3, [r7, #28]
 8009306:	e012      	b.n	800932e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	7819      	ldrb	r1, [r3, #0]
 8009310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	3334      	adds	r3, #52	@ 0x34
 8009318:	460a      	mov	r2, r1
 800931a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d006      	beq.n	8009336 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	3301      	adds	r3, #1
 800932c:	61fb      	str	r3, [r7, #28]
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	2b0f      	cmp	r3, #15
 8009332:	d9e9      	bls.n	8009308 <prvInitialiseNewTask+0x66>
 8009334:	e000      	b.n	8009338 <prvInitialiseNewTask+0x96>
			{
				break;
 8009336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009340:	e003      	b.n	800934a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	2b37      	cmp	r3, #55	@ 0x37
 800934e:	d901      	bls.n	8009354 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009350:	2337      	movs	r3, #55	@ 0x37
 8009352:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009358:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800935e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	2200      	movs	r2, #0
 8009364:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	3304      	adds	r3, #4
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe ff4a 	bl	8008204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	3318      	adds	r3, #24
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe ff45 	bl	8008204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800937e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	2200      	movs	r2, #0
 8009394:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	68f9      	ldr	r1, [r7, #12]
 80093a2:	69b8      	ldr	r0, [r7, #24]
 80093a4:	f001 fa4e 	bl	800a844 <pxPortInitialiseStack>
 80093a8:	4602      	mov	r2, r0
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ba:	bf00      	nop
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093cc:	f001 fb6c 	bl	800aaa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009488 <prvAddNewTaskToReadyList+0xc4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3301      	adds	r3, #1
 80093d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009488 <prvAddNewTaskToReadyList+0xc4>)
 80093d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093da:	4b2c      	ldr	r3, [pc, #176]	@ (800948c <prvAddNewTaskToReadyList+0xc8>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093e2:	4a2a      	ldr	r2, [pc, #168]	@ (800948c <prvAddNewTaskToReadyList+0xc8>)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093e8:	4b27      	ldr	r3, [pc, #156]	@ (8009488 <prvAddNewTaskToReadyList+0xc4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d110      	bne.n	8009412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093f0:	f000 fc1e 	bl	8009c30 <prvInitialiseTaskLists>
 80093f4:	e00d      	b.n	8009412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093f6:	4b26      	ldr	r3, [pc, #152]	@ (8009490 <prvAddNewTaskToReadyList+0xcc>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093fe:	4b23      	ldr	r3, [pc, #140]	@ (800948c <prvAddNewTaskToReadyList+0xc8>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009408:	429a      	cmp	r2, r3
 800940a:	d802      	bhi.n	8009412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800940c:	4a1f      	ldr	r2, [pc, #124]	@ (800948c <prvAddNewTaskToReadyList+0xc8>)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009412:	4b20      	ldr	r3, [pc, #128]	@ (8009494 <prvAddNewTaskToReadyList+0xd0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3301      	adds	r3, #1
 8009418:	4a1e      	ldr	r2, [pc, #120]	@ (8009494 <prvAddNewTaskToReadyList+0xd0>)
 800941a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800941c:	4b1d      	ldr	r3, [pc, #116]	@ (8009494 <prvAddNewTaskToReadyList+0xd0>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009428:	4b1b      	ldr	r3, [pc, #108]	@ (8009498 <prvAddNewTaskToReadyList+0xd4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d903      	bls.n	8009438 <prvAddNewTaskToReadyList+0x74>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	4a18      	ldr	r2, [pc, #96]	@ (8009498 <prvAddNewTaskToReadyList+0xd4>)
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943c:	4613      	mov	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4a15      	ldr	r2, [pc, #84]	@ (800949c <prvAddNewTaskToReadyList+0xd8>)
 8009446:	441a      	add	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7fe fee5 	bl	800821e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009454:	f001 fb5a 	bl	800ab0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009458:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <prvAddNewTaskToReadyList+0xcc>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00e      	beq.n	800947e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009460:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <prvAddNewTaskToReadyList+0xc8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946a:	429a      	cmp	r2, r3
 800946c:	d207      	bcs.n	800947e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800946e:	4b0c      	ldr	r3, [pc, #48]	@ (80094a0 <prvAddNewTaskToReadyList+0xdc>)
 8009470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20001324 	.word	0x20001324
 800948c:	20000e50 	.word	0x20000e50
 8009490:	20001330 	.word	0x20001330
 8009494:	20001340 	.word	0x20001340
 8009498:	2000132c 	.word	0x2000132c
 800949c:	20000e54 	.word	0x20000e54
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d018      	beq.n	80094e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094b6:	4b14      	ldr	r3, [pc, #80]	@ (8009508 <vTaskDelay+0x64>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <vTaskDelay+0x32>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60bb      	str	r3, [r7, #8]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094d6:	f000 f883 	bl	80095e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fe03 	bl	800a0e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094e2:	f000 f88b 	bl	80095fc <xTaskResumeAll>
 80094e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d107      	bne.n	80094fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094ee:	4b07      	ldr	r3, [pc, #28]	@ (800950c <vTaskDelay+0x68>)
 80094f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	2000134c 	.word	0x2000134c
 800950c:	e000ed04 	.word	0xe000ed04

08009510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	@ 0x28
 8009514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800951e:	463a      	mov	r2, r7
 8009520:	1d39      	adds	r1, r7, #4
 8009522:	f107 0308 	add.w	r3, r7, #8
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe fe18 	bl	800815c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	9202      	str	r2, [sp, #8]
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	2300      	movs	r3, #0
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	2300      	movs	r3, #0
 800953c:	460a      	mov	r2, r1
 800953e:	4922      	ldr	r1, [pc, #136]	@ (80095c8 <vTaskStartScheduler+0xb8>)
 8009540:	4822      	ldr	r0, [pc, #136]	@ (80095cc <vTaskStartScheduler+0xbc>)
 8009542:	f7ff fe09 	bl	8009158 <xTaskCreateStatic>
 8009546:	4603      	mov	r3, r0
 8009548:	4a21      	ldr	r2, [pc, #132]	@ (80095d0 <vTaskStartScheduler+0xc0>)
 800954a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800954c:	4b20      	ldr	r3, [pc, #128]	@ (80095d0 <vTaskStartScheduler+0xc0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	e001      	b.n	800955e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d102      	bne.n	800956a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009564:	f000 fe14 	bl	800a190 <xTimerCreateTimerTask>
 8009568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d116      	bne.n	800959e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
}
 8009582:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009584:	4b13      	ldr	r3, [pc, #76]	@ (80095d4 <vTaskStartScheduler+0xc4>)
 8009586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800958a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800958c:	4b12      	ldr	r3, [pc, #72]	@ (80095d8 <vTaskStartScheduler+0xc8>)
 800958e:	2201      	movs	r2, #1
 8009590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009592:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <vTaskStartScheduler+0xcc>)
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009598:	f001 f9e2 	bl	800a960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800959c:	e00f      	b.n	80095be <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095a4:	d10b      	bne.n	80095be <vTaskStartScheduler+0xae>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	60fb      	str	r3, [r7, #12]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <vTaskStartScheduler+0xaa>
}
 80095be:	bf00      	nop
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	0800c7bc 	.word	0x0800c7bc
 80095cc:	08009c01 	.word	0x08009c01
 80095d0:	20001348 	.word	0x20001348
 80095d4:	20001344 	.word	0x20001344
 80095d8:	20001330 	.word	0x20001330
 80095dc:	20001328 	.word	0x20001328

080095e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095e4:	4b04      	ldr	r3, [pc, #16]	@ (80095f8 <vTaskSuspendAll+0x18>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	4a03      	ldr	r2, [pc, #12]	@ (80095f8 <vTaskSuspendAll+0x18>)
 80095ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095ee:	bf00      	nop
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	2000134c 	.word	0x2000134c

080095fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009606:	2300      	movs	r3, #0
 8009608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800960a:	4b42      	ldr	r3, [pc, #264]	@ (8009714 <xTaskResumeAll+0x118>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10b      	bne.n	800962a <xTaskResumeAll+0x2e>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	603b      	str	r3, [r7, #0]
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	e7fd      	b.n	8009626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800962a:	f001 fa3d 	bl	800aaa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800962e:	4b39      	ldr	r3, [pc, #228]	@ (8009714 <xTaskResumeAll+0x118>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3b01      	subs	r3, #1
 8009634:	4a37      	ldr	r2, [pc, #220]	@ (8009714 <xTaskResumeAll+0x118>)
 8009636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009638:	4b36      	ldr	r3, [pc, #216]	@ (8009714 <xTaskResumeAll+0x118>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d162      	bne.n	8009706 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009640:	4b35      	ldr	r3, [pc, #212]	@ (8009718 <xTaskResumeAll+0x11c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d05e      	beq.n	8009706 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009648:	e02f      	b.n	80096aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964a:	4b34      	ldr	r3, [pc, #208]	@ (800971c <xTaskResumeAll+0x120>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3318      	adds	r3, #24
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fe3e 	bl	80082d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3304      	adds	r3, #4
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fe39 	bl	80082d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966a:	4b2d      	ldr	r3, [pc, #180]	@ (8009720 <xTaskResumeAll+0x124>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	429a      	cmp	r2, r3
 8009670:	d903      	bls.n	800967a <xTaskResumeAll+0x7e>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009676:	4a2a      	ldr	r2, [pc, #168]	@ (8009720 <xTaskResumeAll+0x124>)
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4a27      	ldr	r2, [pc, #156]	@ (8009724 <xTaskResumeAll+0x128>)
 8009688:	441a      	add	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f7fe fdc4 	bl	800821e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800969a:	4b23      	ldr	r3, [pc, #140]	@ (8009728 <xTaskResumeAll+0x12c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d302      	bcc.n	80096aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096a4:	4b21      	ldr	r3, [pc, #132]	@ (800972c <xTaskResumeAll+0x130>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096aa:	4b1c      	ldr	r3, [pc, #112]	@ (800971c <xTaskResumeAll+0x120>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1cb      	bne.n	800964a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096b8:	f000 fb58 	bl	8009d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009730 <xTaskResumeAll+0x134>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d010      	beq.n	80096ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096c8:	f000 f846 	bl	8009758 <xTaskIncrementTick>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096d2:	4b16      	ldr	r3, [pc, #88]	@ (800972c <xTaskResumeAll+0x130>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3b01      	subs	r3, #1
 80096dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1f1      	bne.n	80096c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80096e4:	4b12      	ldr	r3, [pc, #72]	@ (8009730 <xTaskResumeAll+0x134>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096ea:	4b10      	ldr	r3, [pc, #64]	@ (800972c <xTaskResumeAll+0x130>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d009      	beq.n	8009706 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096f2:	2301      	movs	r3, #1
 80096f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009734 <xTaskResumeAll+0x138>)
 80096f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009706:	f001 fa01 	bl	800ab0c <vPortExitCritical>

	return xAlreadyYielded;
 800970a:	68bb      	ldr	r3, [r7, #8]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	2000134c 	.word	0x2000134c
 8009718:	20001324 	.word	0x20001324
 800971c:	200012e4 	.word	0x200012e4
 8009720:	2000132c 	.word	0x2000132c
 8009724:	20000e54 	.word	0x20000e54
 8009728:	20000e50 	.word	0x20000e50
 800972c:	20001338 	.word	0x20001338
 8009730:	20001334 	.word	0x20001334
 8009734:	e000ed04 	.word	0xe000ed04

08009738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800973e:	4b05      	ldr	r3, [pc, #20]	@ (8009754 <xTaskGetTickCount+0x1c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009744:	687b      	ldr	r3, [r7, #4]
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20001328 	.word	0x20001328

08009758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009762:	4b4f      	ldr	r3, [pc, #316]	@ (80098a0 <xTaskIncrementTick+0x148>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f040 8090 	bne.w	800988c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800976c:	4b4d      	ldr	r3, [pc, #308]	@ (80098a4 <xTaskIncrementTick+0x14c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009774:	4a4b      	ldr	r2, [pc, #300]	@ (80098a4 <xTaskIncrementTick+0x14c>)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d121      	bne.n	80097c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009780:	4b49      	ldr	r3, [pc, #292]	@ (80098a8 <xTaskIncrementTick+0x150>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <xTaskIncrementTick+0x46>
 80097a2:	4b41      	ldr	r3, [pc, #260]	@ (80098a8 <xTaskIncrementTick+0x150>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	4b40      	ldr	r3, [pc, #256]	@ (80098ac <xTaskIncrementTick+0x154>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a3e      	ldr	r2, [pc, #248]	@ (80098a8 <xTaskIncrementTick+0x150>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	4a3e      	ldr	r2, [pc, #248]	@ (80098ac <xTaskIncrementTick+0x154>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	4b3e      	ldr	r3, [pc, #248]	@ (80098b0 <xTaskIncrementTick+0x158>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	4a3c      	ldr	r2, [pc, #240]	@ (80098b0 <xTaskIncrementTick+0x158>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	f000 fad4 	bl	8009d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097c4:	4b3b      	ldr	r3, [pc, #236]	@ (80098b4 <xTaskIncrementTick+0x15c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d349      	bcc.n	8009862 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ce:	4b36      	ldr	r3, [pc, #216]	@ (80098a8 <xTaskIncrementTick+0x150>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d8:	4b36      	ldr	r3, [pc, #216]	@ (80098b4 <xTaskIncrementTick+0x15c>)
 80097da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097de:	601a      	str	r2, [r3, #0]
					break;
 80097e0:	e03f      	b.n	8009862 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e2:	4b31      	ldr	r3, [pc, #196]	@ (80098a8 <xTaskIncrementTick+0x150>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d203      	bcs.n	8009802 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097fa:	4a2e      	ldr	r2, [pc, #184]	@ (80098b4 <xTaskIncrementTick+0x15c>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009800:	e02f      	b.n	8009862 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	3304      	adds	r3, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fd66 	bl	80082d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	3318      	adds	r3, #24
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fd5d 	bl	80082d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009822:	4b25      	ldr	r3, [pc, #148]	@ (80098b8 <xTaskIncrementTick+0x160>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d903      	bls.n	8009832 <xTaskIncrementTick+0xda>
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982e:	4a22      	ldr	r2, [pc, #136]	@ (80098b8 <xTaskIncrementTick+0x160>)
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4a1f      	ldr	r2, [pc, #124]	@ (80098bc <xTaskIncrementTick+0x164>)
 8009840:	441a      	add	r2, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	3304      	adds	r3, #4
 8009846:	4619      	mov	r1, r3
 8009848:	4610      	mov	r0, r2
 800984a:	f7fe fce8 	bl	800821e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009852:	4b1b      	ldr	r3, [pc, #108]	@ (80098c0 <xTaskIncrementTick+0x168>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009858:	429a      	cmp	r2, r3
 800985a:	d3b8      	bcc.n	80097ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009860:	e7b5      	b.n	80097ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009862:	4b17      	ldr	r3, [pc, #92]	@ (80098c0 <xTaskIncrementTick+0x168>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009868:	4914      	ldr	r1, [pc, #80]	@ (80098bc <xTaskIncrementTick+0x164>)
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d901      	bls.n	800987e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800987a:	2301      	movs	r3, #1
 800987c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800987e:	4b11      	ldr	r3, [pc, #68]	@ (80098c4 <xTaskIncrementTick+0x16c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d007      	beq.n	8009896 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009886:	2301      	movs	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e004      	b.n	8009896 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800988c:	4b0e      	ldr	r3, [pc, #56]	@ (80098c8 <xTaskIncrementTick+0x170>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	4a0d      	ldr	r2, [pc, #52]	@ (80098c8 <xTaskIncrementTick+0x170>)
 8009894:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009896:	697b      	ldr	r3, [r7, #20]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	2000134c 	.word	0x2000134c
 80098a4:	20001328 	.word	0x20001328
 80098a8:	200012dc 	.word	0x200012dc
 80098ac:	200012e0 	.word	0x200012e0
 80098b0:	2000133c 	.word	0x2000133c
 80098b4:	20001344 	.word	0x20001344
 80098b8:	2000132c 	.word	0x2000132c
 80098bc:	20000e54 	.word	0x20000e54
 80098c0:	20000e50 	.word	0x20000e50
 80098c4:	20001338 	.word	0x20001338
 80098c8:	20001334 	.word	0x20001334

080098cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098d2:	4b28      	ldr	r3, [pc, #160]	@ (8009974 <vTaskSwitchContext+0xa8>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098da:	4b27      	ldr	r3, [pc, #156]	@ (8009978 <vTaskSwitchContext+0xac>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098e0:	e042      	b.n	8009968 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80098e2:	4b25      	ldr	r3, [pc, #148]	@ (8009978 <vTaskSwitchContext+0xac>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e8:	4b24      	ldr	r3, [pc, #144]	@ (800997c <vTaskSwitchContext+0xb0>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	e011      	b.n	8009914 <vTaskSwitchContext+0x48>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <vTaskSwitchContext+0x42>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	607b      	str	r3, [r7, #4]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <vTaskSwitchContext+0x3e>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b01      	subs	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	491a      	ldr	r1, [pc, #104]	@ (8009980 <vTaskSwitchContext+0xb4>)
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0e3      	beq.n	80098f0 <vTaskSwitchContext+0x24>
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4613      	mov	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4a13      	ldr	r2, [pc, #76]	@ (8009980 <vTaskSwitchContext+0xb4>)
 8009934:	4413      	add	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	3308      	adds	r3, #8
 800994a:	429a      	cmp	r2, r3
 800994c:	d104      	bne.n	8009958 <vTaskSwitchContext+0x8c>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	4a09      	ldr	r2, [pc, #36]	@ (8009984 <vTaskSwitchContext+0xb8>)
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	4a06      	ldr	r2, [pc, #24]	@ (800997c <vTaskSwitchContext+0xb0>)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6013      	str	r3, [r2, #0]
}
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	2000134c 	.word	0x2000134c
 8009978:	20001338 	.word	0x20001338
 800997c:	2000132c 	.word	0x2000132c
 8009980:	20000e54 	.word	0x20000e54
 8009984:	20000e50 	.word	0x20000e50

08009988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10b      	bne.n	80099b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	60fb      	str	r3, [r7, #12]
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	e7fd      	b.n	80099ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099b0:	4b07      	ldr	r3, [pc, #28]	@ (80099d0 <vTaskPlaceOnEventList+0x48>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3318      	adds	r3, #24
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7fe fc54 	bl	8008266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099be:	2101      	movs	r1, #1
 80099c0:	6838      	ldr	r0, [r7, #0]
 80099c2:	f000 fb91 	bl	800a0e8 <prvAddCurrentTaskToDelayedList>
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000e50 	.word	0x20000e50

080099d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10b      	bne.n	80099fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	617b      	str	r3, [r7, #20]
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	e7fd      	b.n	80099fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009a28 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3318      	adds	r3, #24
 8009a04:	4619      	mov	r1, r3
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7fe fc09 	bl	800821e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	68b8      	ldr	r0, [r7, #8]
 8009a1c:	f000 fb64 	bl	800a0e8 <prvAddCurrentTaskToDelayedList>
	}
 8009a20:	bf00      	nop
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20000e50 	.word	0x20000e50

08009a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	60fb      	str	r3, [r7, #12]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3318      	adds	r3, #24
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe fc3a 	bl	80082d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a64:	4b1d      	ldr	r3, [pc, #116]	@ (8009adc <xTaskRemoveFromEventList+0xb0>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11d      	bne.n	8009aa8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fc31 	bl	80082d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7a:	4b19      	ldr	r3, [pc, #100]	@ (8009ae0 <xTaskRemoveFromEventList+0xb4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d903      	bls.n	8009a8a <xTaskRemoveFromEventList+0x5e>
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a86:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <xTaskRemoveFromEventList+0xb4>)
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4a13      	ldr	r2, [pc, #76]	@ (8009ae4 <xTaskRemoveFromEventList+0xb8>)
 8009a98:	441a      	add	r2, r3
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f7fe fbbc 	bl	800821e <vListInsertEnd>
 8009aa6:	e005      	b.n	8009ab4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	3318      	adds	r3, #24
 8009aac:	4619      	mov	r1, r3
 8009aae:	480e      	ldr	r0, [pc, #56]	@ (8009ae8 <xTaskRemoveFromEventList+0xbc>)
 8009ab0:	f7fe fbb5 	bl	800821e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8009aec <xTaskRemoveFromEventList+0xc0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d905      	bls.n	8009ace <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8009af0 <xTaskRemoveFromEventList+0xc4>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	e001      	b.n	8009ad2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ad2:	697b      	ldr	r3, [r7, #20]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	2000134c 	.word	0x2000134c
 8009ae0:	2000132c 	.word	0x2000132c
 8009ae4:	20000e54 	.word	0x20000e54
 8009ae8:	200012e4 	.word	0x200012e4
 8009aec:	20000e50 	.word	0x20000e50
 8009af0:	20001338 	.word	0x20001338

08009af4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009afc:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <vTaskInternalSetTimeOutState+0x24>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b04:	4b05      	ldr	r3, [pc, #20]	@ (8009b1c <vTaskInternalSetTimeOutState+0x28>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	605a      	str	r2, [r3, #4]
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	2000133c 	.word	0x2000133c
 8009b1c:	20001328 	.word	0x20001328

08009b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10b      	bne.n	8009b48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	613b      	str	r3, [r7, #16]
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	e7fd      	b.n	8009b44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b66:	f000 ff9f 	bl	800aaa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009be0 <xTaskCheckForTimeOut+0xc0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b82:	d102      	bne.n	8009b8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e023      	b.n	8009bd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b15      	ldr	r3, [pc, #84]	@ (8009be4 <xTaskCheckForTimeOut+0xc4>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d007      	beq.n	8009ba6 <xTaskCheckForTimeOut+0x86>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	e015      	b.n	8009bd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d20b      	bcs.n	8009bc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	1ad2      	subs	r2, r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff99 	bl	8009af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61fb      	str	r3, [r7, #28]
 8009bc6:	e004      	b.n	8009bd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bd2:	f000 ff9b 	bl	800ab0c <vPortExitCritical>

	return xReturn;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20001328 	.word	0x20001328
 8009be4:	2000133c 	.word	0x2000133c

08009be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bec:	4b03      	ldr	r3, [pc, #12]	@ (8009bfc <vTaskMissedYield+0x14>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
}
 8009bf2:	bf00      	nop
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	20001338 	.word	0x20001338

08009c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c08:	f000 f852 	bl	8009cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c0c:	4b06      	ldr	r3, [pc, #24]	@ (8009c28 <prvIdleTask+0x28>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d9f9      	bls.n	8009c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c14:	4b05      	ldr	r3, [pc, #20]	@ (8009c2c <prvIdleTask+0x2c>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c24:	e7f0      	b.n	8009c08 <prvIdleTask+0x8>
 8009c26:	bf00      	nop
 8009c28:	20000e54 	.word	0x20000e54
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c36:	2300      	movs	r3, #0
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	e00c      	b.n	8009c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4a12      	ldr	r2, [pc, #72]	@ (8009c90 <prvInitialiseTaskLists+0x60>)
 8009c48:	4413      	add	r3, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe faba 	bl	80081c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3301      	adds	r3, #1
 8009c54:	607b      	str	r3, [r7, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b37      	cmp	r3, #55	@ 0x37
 8009c5a:	d9ef      	bls.n	8009c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c5c:	480d      	ldr	r0, [pc, #52]	@ (8009c94 <prvInitialiseTaskLists+0x64>)
 8009c5e:	f7fe fab1 	bl	80081c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c62:	480d      	ldr	r0, [pc, #52]	@ (8009c98 <prvInitialiseTaskLists+0x68>)
 8009c64:	f7fe faae 	bl	80081c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c68:	480c      	ldr	r0, [pc, #48]	@ (8009c9c <prvInitialiseTaskLists+0x6c>)
 8009c6a:	f7fe faab 	bl	80081c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c6e:	480c      	ldr	r0, [pc, #48]	@ (8009ca0 <prvInitialiseTaskLists+0x70>)
 8009c70:	f7fe faa8 	bl	80081c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c74:	480b      	ldr	r0, [pc, #44]	@ (8009ca4 <prvInitialiseTaskLists+0x74>)
 8009c76:	f7fe faa5 	bl	80081c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca8 <prvInitialiseTaskLists+0x78>)
 8009c7c:	4a05      	ldr	r2, [pc, #20]	@ (8009c94 <prvInitialiseTaskLists+0x64>)
 8009c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c80:	4b0a      	ldr	r3, [pc, #40]	@ (8009cac <prvInitialiseTaskLists+0x7c>)
 8009c82:	4a05      	ldr	r2, [pc, #20]	@ (8009c98 <prvInitialiseTaskLists+0x68>)
 8009c84:	601a      	str	r2, [r3, #0]
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000e54 	.word	0x20000e54
 8009c94:	200012b4 	.word	0x200012b4
 8009c98:	200012c8 	.word	0x200012c8
 8009c9c:	200012e4 	.word	0x200012e4
 8009ca0:	200012f8 	.word	0x200012f8
 8009ca4:	20001310 	.word	0x20001310
 8009ca8:	200012dc 	.word	0x200012dc
 8009cac:	200012e0 	.word	0x200012e0

08009cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb6:	e019      	b.n	8009cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cb8:	f000 fef6 	bl	800aaa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cbc:	4b10      	ldr	r3, [pc, #64]	@ (8009d00 <prvCheckTasksWaitingTermination+0x50>)
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fb05 	bl	80082d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cce:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <prvCheckTasksWaitingTermination+0x54>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8009d04 <prvCheckTasksWaitingTermination+0x54>)
 8009cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009d08 <prvCheckTasksWaitingTermination+0x58>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4a0a      	ldr	r2, [pc, #40]	@ (8009d08 <prvCheckTasksWaitingTermination+0x58>)
 8009ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ce2:	f000 ff13 	bl	800ab0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f810 	bl	8009d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cec:	4b06      	ldr	r3, [pc, #24]	@ (8009d08 <prvCheckTasksWaitingTermination+0x58>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e1      	bne.n	8009cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	200012f8 	.word	0x200012f8
 8009d04:	20001324 	.word	0x20001324
 8009d08:	2000130c 	.word	0x2000130c

08009d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d108      	bne.n	8009d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 f8b0 	bl	800ae88 <vPortFree>
				vPortFree( pxTCB );
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 f8ad 	bl	800ae88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d2e:	e019      	b.n	8009d64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d103      	bne.n	8009d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 f8a4 	bl	800ae88 <vPortFree>
	}
 8009d40:	e010      	b.n	8009d64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d00b      	beq.n	8009d64 <prvDeleteTCB+0x58>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	60fb      	str	r3, [r7, #12]
}
 8009d5e:	bf00      	nop
 8009d60:	bf00      	nop
 8009d62:	e7fd      	b.n	8009d60 <prvDeleteTCB+0x54>
	}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d72:	4b0c      	ldr	r3, [pc, #48]	@ (8009da4 <prvResetNextTaskUnblockTime+0x38>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d104      	bne.n	8009d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009da8 <prvResetNextTaskUnblockTime+0x3c>)
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d84:	e008      	b.n	8009d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d86:	4b07      	ldr	r3, [pc, #28]	@ (8009da4 <prvResetNextTaskUnblockTime+0x38>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	4a04      	ldr	r2, [pc, #16]	@ (8009da8 <prvResetNextTaskUnblockTime+0x3c>)
 8009d96:	6013      	str	r3, [r2, #0]
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	200012dc 	.word	0x200012dc
 8009da8:	20001344 	.word	0x20001344

08009dac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009db2:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <xTaskGetCurrentTaskHandle+0x1c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009db8:	687b      	ldr	r3, [r7, #4]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	20000e50 	.word	0x20000e50

08009dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <xTaskGetSchedulerState+0x34>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d102      	bne.n	8009de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	e008      	b.n	8009df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de0:	4b08      	ldr	r3, [pc, #32]	@ (8009e04 <xTaskGetSchedulerState+0x38>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009de8:	2302      	movs	r3, #2
 8009dea:	607b      	str	r3, [r7, #4]
 8009dec:	e001      	b.n	8009df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dee:	2300      	movs	r3, #0
 8009df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009df2:	687b      	ldr	r3, [r7, #4]
	}
 8009df4:	4618      	mov	r0, r3
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20001330 	.word	0x20001330
 8009e04:	2000134c 	.word	0x2000134c

08009e08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d051      	beq.n	8009ec2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e22:	4b2a      	ldr	r3, [pc, #168]	@ (8009ecc <xTaskPriorityInherit+0xc4>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d241      	bcs.n	8009eb0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	db06      	blt.n	8009e42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e34:	4b25      	ldr	r3, [pc, #148]	@ (8009ecc <xTaskPriorityInherit+0xc4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6959      	ldr	r1, [r3, #20]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4a1f      	ldr	r2, [pc, #124]	@ (8009ed0 <xTaskPriorityInherit+0xc8>)
 8009e54:	4413      	add	r3, r2
 8009e56:	4299      	cmp	r1, r3
 8009e58:	d122      	bne.n	8009ea0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fa3a 	bl	80082d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e64:	4b19      	ldr	r3, [pc, #100]	@ (8009ecc <xTaskPriorityInherit+0xc4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e72:	4b18      	ldr	r3, [pc, #96]	@ (8009ed4 <xTaskPriorityInherit+0xcc>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d903      	bls.n	8009e82 <xTaskPriorityInherit+0x7a>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7e:	4a15      	ldr	r2, [pc, #84]	@ (8009ed4 <xTaskPriorityInherit+0xcc>)
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4a10      	ldr	r2, [pc, #64]	@ (8009ed0 <xTaskPriorityInherit+0xc8>)
 8009e90:	441a      	add	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7fe f9c0 	bl	800821e <vListInsertEnd>
 8009e9e:	e004      	b.n	8009eaa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8009ecc <xTaskPriorityInherit+0xc4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e008      	b.n	8009ec2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009eb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ecc <xTaskPriorityInherit+0xc4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d201      	bcs.n	8009ec2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20000e50 	.word	0x20000e50
 8009ed0:	20000e54 	.word	0x20000e54
 8009ed4:	2000132c 	.word	0x2000132c

08009ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d058      	beq.n	8009fa0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009eee:	4b2f      	ldr	r3, [pc, #188]	@ (8009fac <xTaskPriorityDisinherit+0xd4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d00b      	beq.n	8009f10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60fb      	str	r3, [r7, #12]
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10b      	bne.n	8009f30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	60bb      	str	r3, [r7, #8]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f34:	1e5a      	subs	r2, r3, #1
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d02c      	beq.n	8009fa0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d128      	bne.n	8009fa0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe f9c0 	bl	80082d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f70:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb0 <xTaskPriorityDisinherit+0xd8>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d903      	bls.n	8009f80 <xTaskPriorityDisinherit+0xa8>
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8009fb0 <xTaskPriorityDisinherit+0xd8>)
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4a09      	ldr	r2, [pc, #36]	@ (8009fb4 <xTaskPriorityDisinherit+0xdc>)
 8009f8e:	441a      	add	r2, r3
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4619      	mov	r1, r3
 8009f96:	4610      	mov	r0, r2
 8009f98:	f7fe f941 	bl	800821e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fa0:	697b      	ldr	r3, [r7, #20]
	}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000e50 	.word	0x20000e50
 8009fb0:	2000132c 	.word	0x2000132c
 8009fb4:	20000e54 	.word	0x20000e54

08009fb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d06c      	beq.n	800a0aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	60fb      	str	r3, [r7, #12]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d902      	bls.n	800a000 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	e002      	b.n	800a006 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a004:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d04c      	beq.n	800a0aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	429a      	cmp	r2, r3
 800a018:	d147      	bne.n	800a0aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a01a:	4b26      	ldr	r3, [pc, #152]	@ (800a0b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	429a      	cmp	r2, r3
 800a022:	d10b      	bne.n	800a03c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	60bb      	str	r3, [r7, #8]
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	e7fd      	b.n	800a038 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a040:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	db04      	blt.n	800a05a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	6959      	ldr	r1, [r3, #20]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4a13      	ldr	r2, [pc, #76]	@ (800a0b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a06a:	4413      	add	r3, r2
 800a06c:	4299      	cmp	r1, r3
 800a06e:	d11c      	bne.n	800a0aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	3304      	adds	r3, #4
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe f92f 	bl	80082d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07e:	4b0f      	ldr	r3, [pc, #60]	@ (800a0bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d903      	bls.n	800a08e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08a:	4a0c      	ldr	r2, [pc, #48]	@ (800a0bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4a07      	ldr	r2, [pc, #28]	@ (800a0b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a09c:	441a      	add	r2, r3
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	f7fe f8ba 	bl	800821e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0aa:	bf00      	nop
 800a0ac:	3720      	adds	r7, #32
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000e50 	.word	0x20000e50
 800a0b8:	20000e54 	.word	0x20000e54
 800a0bc:	2000132c 	.word	0x2000132c

0800a0c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0c4:	4b07      	ldr	r3, [pc, #28]	@ (800a0e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d004      	beq.n	800a0d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0cc:	4b05      	ldr	r3, [pc, #20]	@ (800a0e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0d2:	3201      	adds	r2, #1
 800a0d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a0d6:	4b03      	ldr	r3, [pc, #12]	@ (800a0e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
	}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	20000e50 	.word	0x20000e50

0800a0e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0f2:	4b21      	ldr	r3, [pc, #132]	@ (800a178 <prvAddCurrentTaskToDelayedList+0x90>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0f8:	4b20      	ldr	r3, [pc, #128]	@ (800a17c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe f8ea 	bl	80082d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a10a:	d10a      	bne.n	800a122 <prvAddCurrentTaskToDelayedList+0x3a>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d007      	beq.n	800a122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a112:	4b1a      	ldr	r3, [pc, #104]	@ (800a17c <prvAddCurrentTaskToDelayedList+0x94>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3304      	adds	r3, #4
 800a118:	4619      	mov	r1, r3
 800a11a:	4819      	ldr	r0, [pc, #100]	@ (800a180 <prvAddCurrentTaskToDelayedList+0x98>)
 800a11c:	f7fe f87f 	bl	800821e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a120:	e026      	b.n	800a170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4413      	add	r3, r2
 800a128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a12a:	4b14      	ldr	r3, [pc, #80]	@ (800a17c <prvAddCurrentTaskToDelayedList+0x94>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	429a      	cmp	r2, r3
 800a138:	d209      	bcs.n	800a14e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a13a:	4b12      	ldr	r3, [pc, #72]	@ (800a184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	4b0f      	ldr	r3, [pc, #60]	@ (800a17c <prvAddCurrentTaskToDelayedList+0x94>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7fe f88d 	bl	8008266 <vListInsert>
}
 800a14c:	e010      	b.n	800a170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a14e:	4b0e      	ldr	r3, [pc, #56]	@ (800a188 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b0a      	ldr	r3, [pc, #40]	@ (800a17c <prvAddCurrentTaskToDelayedList+0x94>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3304      	adds	r3, #4
 800a158:	4619      	mov	r1, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	f7fe f883 	bl	8008266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a160:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	429a      	cmp	r2, r3
 800a168:	d202      	bcs.n	800a170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a16a:	4a08      	ldr	r2, [pc, #32]	@ (800a18c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	6013      	str	r3, [r2, #0]
}
 800a170:	bf00      	nop
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	20001328 	.word	0x20001328
 800a17c:	20000e50 	.word	0x20000e50
 800a180:	20001310 	.word	0x20001310
 800a184:	200012e0 	.word	0x200012e0
 800a188:	200012dc 	.word	0x200012dc
 800a18c:	20001344 	.word	0x20001344

0800a190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	@ 0x28
 800a194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a19a:	f000 fb13 	bl	800a7c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a19e:	4b1d      	ldr	r3, [pc, #116]	@ (800a214 <xTimerCreateTimerTask+0x84>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d021      	beq.n	800a1ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1ae:	1d3a      	adds	r2, r7, #4
 800a1b0:	f107 0108 	add.w	r1, r7, #8
 800a1b4:	f107 030c 	add.w	r3, r7, #12
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fd ffe9 	bl	8008190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	9202      	str	r2, [sp, #8]
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	460a      	mov	r2, r1
 800a1d0:	4911      	ldr	r1, [pc, #68]	@ (800a218 <xTimerCreateTimerTask+0x88>)
 800a1d2:	4812      	ldr	r0, [pc, #72]	@ (800a21c <xTimerCreateTimerTask+0x8c>)
 800a1d4:	f7fe ffc0 	bl	8009158 <xTaskCreateStatic>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	4a11      	ldr	r2, [pc, #68]	@ (800a220 <xTimerCreateTimerTask+0x90>)
 800a1dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1de:	4b10      	ldr	r3, [pc, #64]	@ (800a220 <xTimerCreateTimerTask+0x90>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10b      	bne.n	800a208 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
}
 800a202:	bf00      	nop
 800a204:	bf00      	nop
 800a206:	e7fd      	b.n	800a204 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a208:	697b      	ldr	r3, [r7, #20]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20001380 	.word	0x20001380
 800a218:	0800c7c4 	.word	0x0800c7c4
 800a21c:	0800a35d 	.word	0x0800a35d
 800a220:	20001384 	.word	0x20001384

0800a224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08a      	sub	sp, #40	@ 0x28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a232:	2300      	movs	r3, #0
 800a234:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <xTimerGenericCommand+0x30>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	623b      	str	r3, [r7, #32]
}
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	e7fd      	b.n	800a250 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a254:	4b19      	ldr	r3, [pc, #100]	@ (800a2bc <xTimerGenericCommand+0x98>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d02a      	beq.n	800a2b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	dc18      	bgt.n	800a2a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a26e:	f7ff fdad 	bl	8009dcc <xTaskGetSchedulerState>
 800a272:	4603      	mov	r3, r0
 800a274:	2b02      	cmp	r3, #2
 800a276:	d109      	bne.n	800a28c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a278:	4b10      	ldr	r3, [pc, #64]	@ (800a2bc <xTimerGenericCommand+0x98>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	f107 0110 	add.w	r1, r7, #16
 800a280:	2300      	movs	r3, #0
 800a282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a284:	f7fe fa50 	bl	8008728 <xQueueGenericSend>
 800a288:	6278      	str	r0, [r7, #36]	@ 0x24
 800a28a:	e012      	b.n	800a2b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a28c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2bc <xTimerGenericCommand+0x98>)
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	f107 0110 	add.w	r1, r7, #16
 800a294:	2300      	movs	r3, #0
 800a296:	2200      	movs	r2, #0
 800a298:	f7fe fa46 	bl	8008728 <xQueueGenericSend>
 800a29c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a29e:	e008      	b.n	800a2b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2a0:	4b06      	ldr	r3, [pc, #24]	@ (800a2bc <xTimerGenericCommand+0x98>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	f107 0110 	add.w	r1, r7, #16
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	f7fe fb3e 	bl	800892c <xQueueGenericSendFromISR>
 800a2b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3728      	adds	r7, #40	@ 0x28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20001380 	.word	0x20001380

0800a2c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ca:	4b23      	ldr	r3, [pc, #140]	@ (800a358 <prvProcessExpiredTimer+0x98>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fd fffd 	bl	80082d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d023      	beq.n	800a334 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	18d1      	adds	r1, r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	6978      	ldr	r0, [r7, #20]
 800a2fa:	f000 f8d5 	bl	800a4a8 <prvInsertTimerInActiveList>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d020      	beq.n	800a346 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a304:	2300      	movs	r3, #0
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2300      	movs	r3, #0
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	2100      	movs	r1, #0
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f7ff ff88 	bl	800a224 <xTimerGenericCommand>
 800a314:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d114      	bne.n	800a346 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60fb      	str	r3, [r7, #12]
}
 800a32e:	bf00      	nop
 800a330:	bf00      	nop
 800a332:	e7fd      	b.n	800a330 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	6978      	ldr	r0, [r7, #20]
 800a34c:	4798      	blx	r3
}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001378 	.word	0x20001378

0800a35c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a364:	f107 0308 	add.w	r3, r7, #8
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 f859 	bl	800a420 <prvGetNextExpireTime>
 800a36e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4619      	mov	r1, r3
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 f805 	bl	800a384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a37a:	f000 f8d7 	bl	800a52c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a37e:	bf00      	nop
 800a380:	e7f0      	b.n	800a364 <prvTimerTask+0x8>
	...

0800a384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a38e:	f7ff f927 	bl	80095e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a392:	f107 0308 	add.w	r3, r7, #8
 800a396:	4618      	mov	r0, r3
 800a398:	f000 f866 	bl	800a468 <prvSampleTimeNow>
 800a39c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d130      	bne.n	800a406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10a      	bne.n	800a3c0 <prvProcessTimerOrBlockTask+0x3c>
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d806      	bhi.n	800a3c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3b2:	f7ff f923 	bl	80095fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3b6:	68f9      	ldr	r1, [r7, #12]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7ff ff81 	bl	800a2c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3be:	e024      	b.n	800a40a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3c6:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <prvProcessTimerOrBlockTask+0x90>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <prvProcessTimerOrBlockTask+0x50>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e000      	b.n	800a3d6 <prvProcessTimerOrBlockTask+0x52>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a418 <prvProcessTimerOrBlockTask+0x94>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f7fe fe83 	bl	80090f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3ea:	f7ff f907 	bl	80095fc <xTaskResumeAll>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3f4:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <prvProcessTimerOrBlockTask+0x98>)
 800a3f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	f3bf 8f6f 	isb	sy
}
 800a404:	e001      	b.n	800a40a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a406:	f7ff f8f9 	bl	80095fc <xTaskResumeAll>
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	2000137c 	.word	0x2000137c
 800a418:	20001380 	.word	0x20001380
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a428:	4b0e      	ldr	r3, [pc, #56]	@ (800a464 <prvGetNextExpireTime+0x44>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <prvGetNextExpireTime+0x16>
 800a432:	2201      	movs	r2, #1
 800a434:	e000      	b.n	800a438 <prvGetNextExpireTime+0x18>
 800a436:	2200      	movs	r2, #0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d105      	bne.n	800a450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a444:	4b07      	ldr	r3, [pc, #28]	@ (800a464 <prvGetNextExpireTime+0x44>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e001      	b.n	800a454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a454:	68fb      	ldr	r3, [r7, #12]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20001378 	.word	0x20001378

0800a468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a470:	f7ff f962 	bl	8009738 <xTaskGetTickCount>
 800a474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a476:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a4 <prvSampleTimeNow+0x3c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d205      	bcs.n	800a48c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a480:	f000 f93a 	bl	800a6f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	e002      	b.n	800a492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a492:	4a04      	ldr	r2, [pc, #16]	@ (800a4a4 <prvSampleTimeNow+0x3c>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a498:	68fb      	ldr	r3, [r7, #12]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20001388 	.word	0x20001388

0800a4a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d812      	bhi.n	800a4f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	1ad2      	subs	r2, r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d302      	bcc.n	800a4e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	617b      	str	r3, [r7, #20]
 800a4e0:	e01b      	b.n	800a51a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4e2:	4b10      	ldr	r3, [pc, #64]	@ (800a524 <prvInsertTimerInActiveList+0x7c>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fd feba 	bl	8008266 <vListInsert>
 800a4f2:	e012      	b.n	800a51a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d206      	bcs.n	800a50a <prvInsertTimerInActiveList+0x62>
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d302      	bcc.n	800a50a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	e007      	b.n	800a51a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a50a:	4b07      	ldr	r3, [pc, #28]	@ (800a528 <prvInsertTimerInActiveList+0x80>)
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7fd fea6 	bl	8008266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a51a:	697b      	ldr	r3, [r7, #20]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	2000137c 	.word	0x2000137c
 800a528:	20001378 	.word	0x20001378

0800a52c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08e      	sub	sp, #56	@ 0x38
 800a530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a532:	e0ce      	b.n	800a6d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	da19      	bge.n	800a56e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a53a:	1d3b      	adds	r3, r7, #4
 800a53c:	3304      	adds	r3, #4
 800a53e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10b      	bne.n	800a55e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	61fb      	str	r3, [r7, #28]
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	e7fd      	b.n	800a55a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a564:	6850      	ldr	r0, [r2, #4]
 800a566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a568:	6892      	ldr	r2, [r2, #8]
 800a56a:	4611      	mov	r1, r2
 800a56c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f2c0 80ae 	blt.w	800a6d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d004      	beq.n	800a58c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	3304      	adds	r3, #4
 800a586:	4618      	mov	r0, r3
 800a588:	f7fd fea6 	bl	80082d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a58c:	463b      	mov	r3, r7
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff ff6a 	bl	800a468 <prvSampleTimeNow>
 800a594:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b09      	cmp	r3, #9
 800a59a:	f200 8097 	bhi.w	800a6cc <prvProcessReceivedCommands+0x1a0>
 800a59e:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a4 <prvProcessReceivedCommands+0x78>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5cd 	.word	0x0800a5cd
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5cd 	.word	0x0800a5cd
 800a5b0:	0800a643 	.word	0x0800a643
 800a5b4:	0800a657 	.word	0x0800a657
 800a5b8:	0800a6a3 	.word	0x0800a6a3
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5cd 	.word	0x0800a5cd
 800a5c4:	0800a643 	.word	0x0800a643
 800a5c8:	0800a657 	.word	0x0800a657
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5d2:	f043 0301 	orr.w	r3, r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	18d1      	adds	r1, r2, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ec:	f7ff ff5c 	bl	800a4a8 <prvInsertTimerInActiveList>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d06c      	beq.n	800a6d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d061      	beq.n	800a6d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	441a      	add	r2, r3
 800a614:	2300      	movs	r3, #0
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	2300      	movs	r3, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a61e:	f7ff fe01 	bl	800a224 <xTimerGenericCommand>
 800a622:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d152      	bne.n	800a6d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	61bb      	str	r3, [r7, #24]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a648:	f023 0301 	bic.w	r3, r3, #1
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a650:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a654:	e03d      	b.n	800a6d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a65c:	f043 0301 	orr.w	r3, r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	617b      	str	r3, [r7, #20]
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	e7fd      	b.n	800a68a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	18d1      	adds	r1, r2, r3
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a69a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a69c:	f7ff ff04 	bl	800a4a8 <prvInsertTimerInActiveList>
					break;
 800a6a0:	e017      	b.n	800a6d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6b2:	f000 fbe9 	bl	800ae88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6b6:	e00c      	b.n	800a6d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6ca:	e002      	b.n	800a6d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a6cc:	bf00      	nop
 800a6ce:	e000      	b.n	800a6d2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a6d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6d2:	4b08      	ldr	r3, [pc, #32]	@ (800a6f4 <prvProcessReceivedCommands+0x1c8>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	1d39      	adds	r1, r7, #4
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe f9c4 	bl	8008a68 <xQueueReceive>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f47f af26 	bne.w	800a534 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	3730      	adds	r7, #48	@ 0x30
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20001380 	.word	0x20001380

0800a6f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b088      	sub	sp, #32
 800a6fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6fe:	e049      	b.n	800a794 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a700:	4b2e      	ldr	r3, [pc, #184]	@ (800a7bc <prvSwitchTimerLists+0xc4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a70a:	4b2c      	ldr	r3, [pc, #176]	@ (800a7bc <prvSwitchTimerLists+0xc4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3304      	adds	r3, #4
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fd fddd 	bl	80082d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b00      	cmp	r3, #0
 800a732:	d02f      	beq.n	800a794 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4413      	add	r3, r2
 800a73c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	429a      	cmp	r2, r3
 800a744:	d90e      	bls.n	800a764 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a752:	4b1a      	ldr	r3, [pc, #104]	@ (800a7bc <prvSwitchTimerLists+0xc4>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3304      	adds	r3, #4
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7fd fd82 	bl	8008266 <vListInsert>
 800a762:	e017      	b.n	800a794 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a764:	2300      	movs	r3, #0
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	2300      	movs	r3, #0
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	2100      	movs	r1, #0
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff fd58 	bl	800a224 <xTimerGenericCommand>
 800a774:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	603b      	str	r3, [r7, #0]
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	e7fd      	b.n	800a790 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a794:	4b09      	ldr	r3, [pc, #36]	@ (800a7bc <prvSwitchTimerLists+0xc4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1b0      	bne.n	800a700 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a79e:	4b07      	ldr	r3, [pc, #28]	@ (800a7bc <prvSwitchTimerLists+0xc4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	@ (800a7c0 <prvSwitchTimerLists+0xc8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a04      	ldr	r2, [pc, #16]	@ (800a7bc <prvSwitchTimerLists+0xc4>)
 800a7aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7ac:	4a04      	ldr	r2, [pc, #16]	@ (800a7c0 <prvSwitchTimerLists+0xc8>)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6013      	str	r3, [r2, #0]
}
 800a7b2:	bf00      	nop
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20001378 	.word	0x20001378
 800a7c0:	2000137c 	.word	0x2000137c

0800a7c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7ca:	f000 f96d 	bl	800aaa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d120      	bne.n	800a818 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7d6:	4814      	ldr	r0, [pc, #80]	@ (800a828 <prvCheckForValidListAndQueue+0x64>)
 800a7d8:	f7fd fcf4 	bl	80081c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7dc:	4813      	ldr	r0, [pc, #76]	@ (800a82c <prvCheckForValidListAndQueue+0x68>)
 800a7de:	f7fd fcf1 	bl	80081c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7e2:	4b13      	ldr	r3, [pc, #76]	@ (800a830 <prvCheckForValidListAndQueue+0x6c>)
 800a7e4:	4a10      	ldr	r2, [pc, #64]	@ (800a828 <prvCheckForValidListAndQueue+0x64>)
 800a7e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7e8:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <prvCheckForValidListAndQueue+0x70>)
 800a7ea:	4a10      	ldr	r2, [pc, #64]	@ (800a82c <prvCheckForValidListAndQueue+0x68>)
 800a7ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	4b11      	ldr	r3, [pc, #68]	@ (800a838 <prvCheckForValidListAndQueue+0x74>)
 800a7f4:	4a11      	ldr	r2, [pc, #68]	@ (800a83c <prvCheckForValidListAndQueue+0x78>)
 800a7f6:	2110      	movs	r1, #16
 800a7f8:	200a      	movs	r0, #10
 800a7fa:	f7fd fe01 	bl	8008400 <xQueueGenericCreateStatic>
 800a7fe:	4603      	mov	r3, r0
 800a800:	4a08      	ldr	r2, [pc, #32]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a802:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a804:	4b07      	ldr	r3, [pc, #28]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a80c:	4b05      	ldr	r3, [pc, #20]	@ (800a824 <prvCheckForValidListAndQueue+0x60>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	490b      	ldr	r1, [pc, #44]	@ (800a840 <prvCheckForValidListAndQueue+0x7c>)
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fc42 	bl	800909c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a818:	f000 f978 	bl	800ab0c <vPortExitCritical>
}
 800a81c:	bf00      	nop
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20001380 	.word	0x20001380
 800a828:	20001350 	.word	0x20001350
 800a82c:	20001364 	.word	0x20001364
 800a830:	20001378 	.word	0x20001378
 800a834:	2000137c 	.word	0x2000137c
 800a838:	2000142c 	.word	0x2000142c
 800a83c:	2000138c 	.word	0x2000138c
 800a840:	0800c7cc 	.word	0x0800c7cc

0800a844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3b04      	subs	r3, #4
 800a854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a85c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3b04      	subs	r3, #4
 800a862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f023 0201 	bic.w	r2, r3, #1
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b04      	subs	r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a874:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a8 <pxPortInitialiseStack+0x64>)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3b14      	subs	r3, #20
 800a87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b04      	subs	r3, #4
 800a88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f06f 0202 	mvn.w	r2, #2
 800a892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3b20      	subs	r3, #32
 800a898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a89a:	68fb      	ldr	r3, [r7, #12]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	0800a8ad 	.word	0x0800a8ad

0800a8ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8b6:	4b13      	ldr	r3, [pc, #76]	@ (800a904 <prvTaskExitError+0x58>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8be:	d00b      	beq.n	800a8d8 <prvTaskExitError+0x2c>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60fb      	str	r3, [r7, #12]
}
 800a8d2:	bf00      	nop
 800a8d4:	bf00      	nop
 800a8d6:	e7fd      	b.n	800a8d4 <prvTaskExitError+0x28>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	60bb      	str	r3, [r7, #8]
}
 800a8ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8ec:	bf00      	nop
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0fc      	beq.n	800a8ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20000030 	.word	0x20000030
	...

0800a910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	20000e50 	.word	0x20000e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a938:	4808      	ldr	r0, [pc, #32]	@ (800a95c <prvPortStartFirstTask+0x24>)
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f380 8808 	msr	MSP, r0
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8814 	msr	CONTROL, r0
 800a94a:	b662      	cpsie	i
 800a94c:	b661      	cpsie	f
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	df00      	svc	0
 800a958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a95a:	bf00      	nop
 800a95c:	e000ed08 	.word	0xe000ed08

0800a960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a966:	4b47      	ldr	r3, [pc, #284]	@ (800aa84 <xPortStartScheduler+0x124>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a47      	ldr	r2, [pc, #284]	@ (800aa88 <xPortStartScheduler+0x128>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d10b      	bne.n	800a988 <xPortStartScheduler+0x28>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a988:	4b3e      	ldr	r3, [pc, #248]	@ (800aa84 <xPortStartScheduler+0x124>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa8c <xPortStartScheduler+0x12c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d10b      	bne.n	800a9aa <xPortStartScheduler+0x4a>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	60fb      	str	r3, [r7, #12]
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9aa:	4b39      	ldr	r3, [pc, #228]	@ (800aa90 <xPortStartScheduler+0x130>)
 800a9ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	22ff      	movs	r2, #255	@ 0xff
 800a9ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	4b31      	ldr	r3, [pc, #196]	@ (800aa94 <xPortStartScheduler+0x134>)
 800a9d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9d2:	4b31      	ldr	r3, [pc, #196]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9d4:	2207      	movs	r2, #7
 800a9d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9d8:	e009      	b.n	800a9ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9da:	4b2f      	ldr	r3, [pc, #188]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	4a2d      	ldr	r2, [pc, #180]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9f6:	2b80      	cmp	r3, #128	@ 0x80
 800a9f8:	d0ef      	beq.n	800a9da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9fa:	4b27      	ldr	r3, [pc, #156]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f1c3 0307 	rsb	r3, r3, #7
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d00b      	beq.n	800aa1e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60bb      	str	r3, [r7, #8]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa1e:	4b1e      	ldr	r3, [pc, #120]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	4a1c      	ldr	r2, [pc, #112]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa28:	4b1b      	ldr	r3, [pc, #108]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa30:	4a19      	ldr	r2, [pc, #100]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa3c:	4b17      	ldr	r3, [pc, #92]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a16      	ldr	r2, [pc, #88]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa48:	4b14      	ldr	r3, [pc, #80]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a13      	ldr	r2, [pc, #76]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa54:	f000 f8da 	bl	800ac0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa58:	4b11      	ldr	r3, [pc, #68]	@ (800aaa0 <xPortStartScheduler+0x140>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa5e:	f000 f8f9 	bl	800ac54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa62:	4b10      	ldr	r3, [pc, #64]	@ (800aaa4 <xPortStartScheduler+0x144>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a0f      	ldr	r2, [pc, #60]	@ (800aaa4 <xPortStartScheduler+0x144>)
 800aa68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa6e:	f7ff ff63 	bl	800a938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa72:	f7fe ff2b 	bl	80098cc <vTaskSwitchContext>
	prvTaskExitError();
 800aa76:	f7ff ff19 	bl	800a8ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	e000ed00 	.word	0xe000ed00
 800aa88:	410fc271 	.word	0x410fc271
 800aa8c:	410fc270 	.word	0x410fc270
 800aa90:	e000e400 	.word	0xe000e400
 800aa94:	2000147c 	.word	0x2000147c
 800aa98:	20001480 	.word	0x20001480
 800aa9c:	e000ed20 	.word	0xe000ed20
 800aaa0:	20000030 	.word	0x20000030
 800aaa4:	e000ef34 	.word	0xe000ef34

0800aaa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	607b      	str	r3, [r7, #4]
}
 800aac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aac2:	4b10      	ldr	r3, [pc, #64]	@ (800ab04 <vPortEnterCritical+0x5c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3301      	adds	r3, #1
 800aac8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab04 <vPortEnterCritical+0x5c>)
 800aaca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aacc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <vPortEnterCritical+0x5c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d110      	bne.n	800aaf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aad4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab08 <vPortEnterCritical+0x60>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	603b      	str	r3, [r7, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <vPortEnterCritical+0x4a>
	}
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20000030 	.word	0x20000030
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab12:	4b12      	ldr	r3, [pc, #72]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10b      	bne.n	800ab32 <vPortExitCritical+0x26>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	607b      	str	r3, [r7, #4]
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	e7fd      	b.n	800ab2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab32:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	4a08      	ldr	r2, [pc, #32]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab3c:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <vPortExitCritical+0x44>
 800ab44:	2300      	movs	r3, #0
 800ab46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f383 8811 	msr	BASEPRI, r3
}
 800ab4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000030 	.word	0x20000030

0800ab60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab60:	f3ef 8009 	mrs	r0, PSP
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4b15      	ldr	r3, [pc, #84]	@ (800abc0 <pxCurrentTCBConst>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f01e 0f10 	tst.w	lr, #16
 800ab70:	bf08      	it	eq
 800ab72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab84:	f380 8811 	msr	BASEPRI, r0
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f7fe fe9c 	bl	80098cc <vTaskSwitchContext>
 800ab94:	f04f 0000 	mov.w	r0, #0
 800ab98:	f380 8811 	msr	BASEPRI, r0
 800ab9c:	bc09      	pop	{r0, r3}
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	6808      	ldr	r0, [r1, #0]
 800aba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	f01e 0f10 	tst.w	lr, #16
 800abaa:	bf08      	it	eq
 800abac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abb0:	f380 8809 	msr	PSP, r0
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst>:
 800abc0:	20000e50 	.word	0x20000e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	607b      	str	r3, [r7, #4]
}
 800abe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abe2:	f7fe fdb9 	bl	8009758 <xTaskIncrementTick>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abec:	4b06      	ldr	r3, [pc, #24]	@ (800ac08 <xPortSysTickHandler+0x40>)
 800abee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f383 8811 	msr	BASEPRI, r3
}
 800abfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac10:	4b0b      	ldr	r3, [pc, #44]	@ (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <vPortSetupTimerInterrupt+0x38>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <vPortSetupTimerInterrupt+0x3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a0a      	ldr	r2, [pc, #40]	@ (800ac4c <vPortSetupTimerInterrupt+0x40>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	4a09      	ldr	r2, [pc, #36]	@ (800ac50 <vPortSetupTimerInterrupt+0x44>)
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac2e:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	601a      	str	r2, [r3, #0]
}
 800ac34:	bf00      	nop
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e010 	.word	0xe000e010
 800ac44:	e000e018 	.word	0xe000e018
 800ac48:	20000024 	.word	0x20000024
 800ac4c:	10624dd3 	.word	0x10624dd3
 800ac50:	e000e014 	.word	0xe000e014

0800ac54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac64 <vPortEnableVFP+0x10>
 800ac58:	6801      	ldr	r1, [r0, #0]
 800ac5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac62:	bf00      	nop
 800ac64:	e000ed88 	.word	0xe000ed88

0800ac68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac6e:	f3ef 8305 	mrs	r3, IPSR
 800ac72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b0f      	cmp	r3, #15
 800ac78:	d915      	bls.n	800aca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac7a:	4a18      	ldr	r2, [pc, #96]	@ (800acdc <vPortValidateInterruptPriority+0x74>)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac84:	4b16      	ldr	r3, [pc, #88]	@ (800ace0 <vPortValidateInterruptPriority+0x78>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	7afa      	ldrb	r2, [r7, #11]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d20b      	bcs.n	800aca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
 800aca2:	bf00      	nop
 800aca4:	e7fd      	b.n	800aca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aca6:	4b0f      	ldr	r3, [pc, #60]	@ (800ace4 <vPortValidateInterruptPriority+0x7c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acae:	4b0e      	ldr	r3, [pc, #56]	@ (800ace8 <vPortValidateInterruptPriority+0x80>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d90b      	bls.n	800acce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	603b      	str	r3, [r7, #0]
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	e7fd      	b.n	800acca <vPortValidateInterruptPriority+0x62>
	}
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	e000e3f0 	.word	0xe000e3f0
 800ace0:	2000147c 	.word	0x2000147c
 800ace4:	e000ed0c 	.word	0xe000ed0c
 800ace8:	20001480 	.word	0x20001480

0800acec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	@ 0x28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acf4:	2300      	movs	r3, #0
 800acf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acf8:	f7fe fc72 	bl	80095e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ae70 <pvPortMalloc+0x184>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad04:	f000 f924 	bl	800af50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad08:	4b5a      	ldr	r3, [pc, #360]	@ (800ae74 <pvPortMalloc+0x188>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4013      	ands	r3, r2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f040 8095 	bne.w	800ae40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01e      	beq.n	800ad5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad1c:	2208      	movs	r2, #8
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d015      	beq.n	800ad5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f023 0307 	bic.w	r3, r3, #7
 800ad34:	3308      	adds	r3, #8
 800ad36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00b      	beq.n	800ad5a <pvPortMalloc+0x6e>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	617b      	str	r3, [r7, #20]
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	e7fd      	b.n	800ad56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d06f      	beq.n	800ae40 <pvPortMalloc+0x154>
 800ad60:	4b45      	ldr	r3, [pc, #276]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d86a      	bhi.n	800ae40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad6a:	4b44      	ldr	r3, [pc, #272]	@ (800ae7c <pvPortMalloc+0x190>)
 800ad6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad6e:	4b43      	ldr	r3, [pc, #268]	@ (800ae7c <pvPortMalloc+0x190>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad74:	e004      	b.n	800ad80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d903      	bls.n	800ad92 <pvPortMalloc+0xa6>
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f1      	bne.n	800ad76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad92:	4b37      	ldr	r3, [pc, #220]	@ (800ae70 <pvPortMalloc+0x184>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d051      	beq.n	800ae40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2208      	movs	r2, #8
 800ada2:	4413      	add	r3, r2
 800ada4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	1ad2      	subs	r2, r2, r3
 800adb6:	2308      	movs	r3, #8
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	429a      	cmp	r2, r3
 800adbc:	d920      	bls.n	800ae00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4413      	add	r3, r2
 800adc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00b      	beq.n	800ade8 <pvPortMalloc+0xfc>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	613b      	str	r3, [r7, #16]
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	e7fd      	b.n	800ade4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ade8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adfa:	69b8      	ldr	r0, [r7, #24]
 800adfc:	f000 f90a 	bl	800b014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae00:	4b1d      	ldr	r3, [pc, #116]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	4b1b      	ldr	r3, [pc, #108]	@ (800ae80 <pvPortMalloc+0x194>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d203      	bcs.n	800ae22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae1a:	4b17      	ldr	r3, [pc, #92]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a18      	ldr	r2, [pc, #96]	@ (800ae80 <pvPortMalloc+0x194>)
 800ae20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	4b13      	ldr	r3, [pc, #76]	@ (800ae74 <pvPortMalloc+0x188>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <pvPortMalloc+0x198>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	4a11      	ldr	r2, [pc, #68]	@ (800ae84 <pvPortMalloc+0x198>)
 800ae3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae40:	f7fe fbdc 	bl	80095fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <pvPortMalloc+0x17a>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	60fb      	str	r3, [r7, #12]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <pvPortMalloc+0x176>
	return pvReturn;
 800ae66:	69fb      	ldr	r3, [r7, #28]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3728      	adds	r7, #40	@ 0x28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	2000508c 	.word	0x2000508c
 800ae74:	200050a0 	.word	0x200050a0
 800ae78:	20005090 	.word	0x20005090
 800ae7c:	20005084 	.word	0x20005084
 800ae80:	20005094 	.word	0x20005094
 800ae84:	20005098 	.word	0x20005098

0800ae88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d04f      	beq.n	800af3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	425b      	negs	r3, r3
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	4413      	add	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	4b25      	ldr	r3, [pc, #148]	@ (800af44 <vPortFree+0xbc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10b      	bne.n	800aece <vPortFree+0x46>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	60fb      	str	r3, [r7, #12]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <vPortFree+0x66>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	60bb      	str	r3, [r7, #8]
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	e7fd      	b.n	800aeea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	4b14      	ldr	r3, [pc, #80]	@ (800af44 <vPortFree+0xbc>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4013      	ands	r3, r2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01e      	beq.n	800af3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d11a      	bne.n	800af3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	4b0e      	ldr	r3, [pc, #56]	@ (800af44 <vPortFree+0xbc>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	43db      	mvns	r3, r3
 800af0e:	401a      	ands	r2, r3
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af14:	f7fe fb64 	bl	80095e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	4b0a      	ldr	r3, [pc, #40]	@ (800af48 <vPortFree+0xc0>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4413      	add	r3, r2
 800af22:	4a09      	ldr	r2, [pc, #36]	@ (800af48 <vPortFree+0xc0>)
 800af24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af26:	6938      	ldr	r0, [r7, #16]
 800af28:	f000 f874 	bl	800b014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af2c:	4b07      	ldr	r3, [pc, #28]	@ (800af4c <vPortFree+0xc4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	4a06      	ldr	r2, [pc, #24]	@ (800af4c <vPortFree+0xc4>)
 800af34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af36:	f7fe fb61 	bl	80095fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af3a:	bf00      	nop
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200050a0 	.word	0x200050a0
 800af48:	20005090 	.word	0x20005090
 800af4c:	2000509c 	.word	0x2000509c

0800af50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af5c:	4b27      	ldr	r3, [pc, #156]	@ (800affc <prvHeapInit+0xac>)
 800af5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00c      	beq.n	800af84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3307      	adds	r3, #7
 800af6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0307 	bic.w	r3, r3, #7
 800af76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	4a1f      	ldr	r2, [pc, #124]	@ (800affc <prvHeapInit+0xac>)
 800af80:	4413      	add	r3, r2
 800af82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af88:	4a1d      	ldr	r2, [pc, #116]	@ (800b000 <prvHeapInit+0xb0>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af8e:	4b1c      	ldr	r3, [pc, #112]	@ (800b000 <prvHeapInit+0xb0>)
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	4413      	add	r3, r2
 800af9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af9c:	2208      	movs	r2, #8
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <prvHeapInit+0xb4>)
 800afb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afb2:	4b14      	ldr	r3, [pc, #80]	@ (800b004 <prvHeapInit+0xb4>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2200      	movs	r2, #0
 800afb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afba:	4b12      	ldr	r3, [pc, #72]	@ (800b004 <prvHeapInit+0xb4>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afd0:	4b0c      	ldr	r3, [pc, #48]	@ (800b004 <prvHeapInit+0xb4>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	4a0a      	ldr	r2, [pc, #40]	@ (800b008 <prvHeapInit+0xb8>)
 800afde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	4a09      	ldr	r2, [pc, #36]	@ (800b00c <prvHeapInit+0xbc>)
 800afe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afe8:	4b09      	ldr	r3, [pc, #36]	@ (800b010 <prvHeapInit+0xc0>)
 800afea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20001484 	.word	0x20001484
 800b000:	20005084 	.word	0x20005084
 800b004:	2000508c 	.word	0x2000508c
 800b008:	20005094 	.word	0x20005094
 800b00c:	20005090 	.word	0x20005090
 800b010:	200050a0 	.word	0x200050a0

0800b014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b01c:	4b28      	ldr	r3, [pc, #160]	@ (800b0c0 <prvInsertBlockIntoFreeList+0xac>)
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e002      	b.n	800b028 <prvInsertBlockIntoFreeList+0x14>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d8f7      	bhi.n	800b022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	4413      	add	r3, r2
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	429a      	cmp	r2, r3
 800b042:	d108      	bne.n	800b056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	441a      	add	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	441a      	add	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d118      	bne.n	800b09c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4b15      	ldr	r3, [pc, #84]	@ (800b0c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d00d      	beq.n	800b092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	441a      	add	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	e008      	b.n	800b0a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b092:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	e003      	b.n	800b0a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d002      	beq.n	800b0b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	20005084 	.word	0x20005084
 800b0c4:	2000508c 	.word	0x2000508c

0800b0c8 <siprintf>:
 800b0c8:	b40e      	push	{r1, r2, r3}
 800b0ca:	b500      	push	{lr}
 800b0cc:	b09c      	sub	sp, #112	@ 0x70
 800b0ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0d0:	9002      	str	r0, [sp, #8]
 800b0d2:	9006      	str	r0, [sp, #24]
 800b0d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0d8:	4809      	ldr	r0, [pc, #36]	@ (800b100 <siprintf+0x38>)
 800b0da:	9107      	str	r1, [sp, #28]
 800b0dc:	9104      	str	r1, [sp, #16]
 800b0de:	4909      	ldr	r1, [pc, #36]	@ (800b104 <siprintf+0x3c>)
 800b0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e4:	9105      	str	r1, [sp, #20]
 800b0e6:	6800      	ldr	r0, [r0, #0]
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	a902      	add	r1, sp, #8
 800b0ec:	f000 f9f2 	bl	800b4d4 <_svfiprintf_r>
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	701a      	strb	r2, [r3, #0]
 800b0f6:	b01c      	add	sp, #112	@ 0x70
 800b0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0fc:	b003      	add	sp, #12
 800b0fe:	4770      	bx	lr
 800b100:	20000040 	.word	0x20000040
 800b104:	ffff0208 	.word	0xffff0208

0800b108 <std>:
 800b108:	2300      	movs	r3, #0
 800b10a:	b510      	push	{r4, lr}
 800b10c:	4604      	mov	r4, r0
 800b10e:	e9c0 3300 	strd	r3, r3, [r0]
 800b112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b116:	6083      	str	r3, [r0, #8]
 800b118:	8181      	strh	r1, [r0, #12]
 800b11a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b11c:	81c2      	strh	r2, [r0, #14]
 800b11e:	6183      	str	r3, [r0, #24]
 800b120:	4619      	mov	r1, r3
 800b122:	2208      	movs	r2, #8
 800b124:	305c      	adds	r0, #92	@ 0x5c
 800b126:	f000 f937 	bl	800b398 <memset>
 800b12a:	4b0d      	ldr	r3, [pc, #52]	@ (800b160 <std+0x58>)
 800b12c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b12e:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <std+0x5c>)
 800b130:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b132:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <std+0x60>)
 800b134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b136:	4b0d      	ldr	r3, [pc, #52]	@ (800b16c <std+0x64>)
 800b138:	6323      	str	r3, [r4, #48]	@ 0x30
 800b13a:	4b0d      	ldr	r3, [pc, #52]	@ (800b170 <std+0x68>)
 800b13c:	6224      	str	r4, [r4, #32]
 800b13e:	429c      	cmp	r4, r3
 800b140:	d006      	beq.n	800b150 <std+0x48>
 800b142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b146:	4294      	cmp	r4, r2
 800b148:	d002      	beq.n	800b150 <std+0x48>
 800b14a:	33d0      	adds	r3, #208	@ 0xd0
 800b14c:	429c      	cmp	r4, r3
 800b14e:	d105      	bne.n	800b15c <std+0x54>
 800b150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b158:	f000 b950 	b.w	800b3fc <__retarget_lock_init_recursive>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	bf00      	nop
 800b160:	0800bf21 	.word	0x0800bf21
 800b164:	0800bf43 	.word	0x0800bf43
 800b168:	0800bf7b 	.word	0x0800bf7b
 800b16c:	0800bf9f 	.word	0x0800bf9f
 800b170:	200050a4 	.word	0x200050a4

0800b174 <stdio_exit_handler>:
 800b174:	4a02      	ldr	r2, [pc, #8]	@ (800b180 <stdio_exit_handler+0xc>)
 800b176:	4903      	ldr	r1, [pc, #12]	@ (800b184 <stdio_exit_handler+0x10>)
 800b178:	4803      	ldr	r0, [pc, #12]	@ (800b188 <stdio_exit_handler+0x14>)
 800b17a:	f000 b869 	b.w	800b250 <_fwalk_sglue>
 800b17e:	bf00      	nop
 800b180:	20000034 	.word	0x20000034
 800b184:	0800beb9 	.word	0x0800beb9
 800b188:	20000044 	.word	0x20000044

0800b18c <cleanup_stdio>:
 800b18c:	6841      	ldr	r1, [r0, #4]
 800b18e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1c0 <cleanup_stdio+0x34>)
 800b190:	4299      	cmp	r1, r3
 800b192:	b510      	push	{r4, lr}
 800b194:	4604      	mov	r4, r0
 800b196:	d001      	beq.n	800b19c <cleanup_stdio+0x10>
 800b198:	f000 fe8e 	bl	800beb8 <_fflush_r>
 800b19c:	68a1      	ldr	r1, [r4, #8]
 800b19e:	4b09      	ldr	r3, [pc, #36]	@ (800b1c4 <cleanup_stdio+0x38>)
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	d002      	beq.n	800b1aa <cleanup_stdio+0x1e>
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f000 fe87 	bl	800beb8 <_fflush_r>
 800b1aa:	68e1      	ldr	r1, [r4, #12]
 800b1ac:	4b06      	ldr	r3, [pc, #24]	@ (800b1c8 <cleanup_stdio+0x3c>)
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	d004      	beq.n	800b1bc <cleanup_stdio+0x30>
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b8:	f000 be7e 	b.w	800beb8 <_fflush_r>
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	200050a4 	.word	0x200050a4
 800b1c4:	2000510c 	.word	0x2000510c
 800b1c8:	20005174 	.word	0x20005174

0800b1cc <global_stdio_init.part.0>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b1fc <global_stdio_init.part.0+0x30>)
 800b1d0:	4c0b      	ldr	r4, [pc, #44]	@ (800b200 <global_stdio_init.part.0+0x34>)
 800b1d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b204 <global_stdio_init.part.0+0x38>)
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2104      	movs	r1, #4
 800b1dc:	f7ff ff94 	bl	800b108 <std>
 800b1e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	2109      	movs	r1, #9
 800b1e8:	f7ff ff8e 	bl	800b108 <std>
 800b1ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f6:	2112      	movs	r1, #18
 800b1f8:	f7ff bf86 	b.w	800b108 <std>
 800b1fc:	200051dc 	.word	0x200051dc
 800b200:	200050a4 	.word	0x200050a4
 800b204:	0800b175 	.word	0x0800b175

0800b208 <__sfp_lock_acquire>:
 800b208:	4801      	ldr	r0, [pc, #4]	@ (800b210 <__sfp_lock_acquire+0x8>)
 800b20a:	f000 b8f8 	b.w	800b3fe <__retarget_lock_acquire_recursive>
 800b20e:	bf00      	nop
 800b210:	200051e1 	.word	0x200051e1

0800b214 <__sfp_lock_release>:
 800b214:	4801      	ldr	r0, [pc, #4]	@ (800b21c <__sfp_lock_release+0x8>)
 800b216:	f000 b8f3 	b.w	800b400 <__retarget_lock_release_recursive>
 800b21a:	bf00      	nop
 800b21c:	200051e1 	.word	0x200051e1

0800b220 <__sinit>:
 800b220:	b510      	push	{r4, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	f7ff fff0 	bl	800b208 <__sfp_lock_acquire>
 800b228:	6a23      	ldr	r3, [r4, #32]
 800b22a:	b11b      	cbz	r3, 800b234 <__sinit+0x14>
 800b22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b230:	f7ff bff0 	b.w	800b214 <__sfp_lock_release>
 800b234:	4b04      	ldr	r3, [pc, #16]	@ (800b248 <__sinit+0x28>)
 800b236:	6223      	str	r3, [r4, #32]
 800b238:	4b04      	ldr	r3, [pc, #16]	@ (800b24c <__sinit+0x2c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1f5      	bne.n	800b22c <__sinit+0xc>
 800b240:	f7ff ffc4 	bl	800b1cc <global_stdio_init.part.0>
 800b244:	e7f2      	b.n	800b22c <__sinit+0xc>
 800b246:	bf00      	nop
 800b248:	0800b18d 	.word	0x0800b18d
 800b24c:	200051dc 	.word	0x200051dc

0800b250 <_fwalk_sglue>:
 800b250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b254:	4607      	mov	r7, r0
 800b256:	4688      	mov	r8, r1
 800b258:	4614      	mov	r4, r2
 800b25a:	2600      	movs	r6, #0
 800b25c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b260:	f1b9 0901 	subs.w	r9, r9, #1
 800b264:	d505      	bpl.n	800b272 <_fwalk_sglue+0x22>
 800b266:	6824      	ldr	r4, [r4, #0]
 800b268:	2c00      	cmp	r4, #0
 800b26a:	d1f7      	bne.n	800b25c <_fwalk_sglue+0xc>
 800b26c:	4630      	mov	r0, r6
 800b26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b272:	89ab      	ldrh	r3, [r5, #12]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d907      	bls.n	800b288 <_fwalk_sglue+0x38>
 800b278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b27c:	3301      	adds	r3, #1
 800b27e:	d003      	beq.n	800b288 <_fwalk_sglue+0x38>
 800b280:	4629      	mov	r1, r5
 800b282:	4638      	mov	r0, r7
 800b284:	47c0      	blx	r8
 800b286:	4306      	orrs	r6, r0
 800b288:	3568      	adds	r5, #104	@ 0x68
 800b28a:	e7e9      	b.n	800b260 <_fwalk_sglue+0x10>

0800b28c <iprintf>:
 800b28c:	b40f      	push	{r0, r1, r2, r3}
 800b28e:	b507      	push	{r0, r1, r2, lr}
 800b290:	4906      	ldr	r1, [pc, #24]	@ (800b2ac <iprintf+0x20>)
 800b292:	ab04      	add	r3, sp, #16
 800b294:	6808      	ldr	r0, [r1, #0]
 800b296:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29a:	6881      	ldr	r1, [r0, #8]
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	f000 fa3f 	bl	800b720 <_vfiprintf_r>
 800b2a2:	b003      	add	sp, #12
 800b2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2a8:	b004      	add	sp, #16
 800b2aa:	4770      	bx	lr
 800b2ac:	20000040 	.word	0x20000040

0800b2b0 <_puts_r>:
 800b2b0:	6a03      	ldr	r3, [r0, #32]
 800b2b2:	b570      	push	{r4, r5, r6, lr}
 800b2b4:	6884      	ldr	r4, [r0, #8]
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	460e      	mov	r6, r1
 800b2ba:	b90b      	cbnz	r3, 800b2c0 <_puts_r+0x10>
 800b2bc:	f7ff ffb0 	bl	800b220 <__sinit>
 800b2c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2c2:	07db      	lsls	r3, r3, #31
 800b2c4:	d405      	bmi.n	800b2d2 <_puts_r+0x22>
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	0598      	lsls	r0, r3, #22
 800b2ca:	d402      	bmi.n	800b2d2 <_puts_r+0x22>
 800b2cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ce:	f000 f896 	bl	800b3fe <__retarget_lock_acquire_recursive>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	0719      	lsls	r1, r3, #28
 800b2d6:	d502      	bpl.n	800b2de <_puts_r+0x2e>
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d135      	bne.n	800b34a <_puts_r+0x9a>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f000 fecd 	bl	800c080 <__swsetup_r>
 800b2e6:	b380      	cbz	r0, 800b34a <_puts_r+0x9a>
 800b2e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b2ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ee:	07da      	lsls	r2, r3, #31
 800b2f0:	d405      	bmi.n	800b2fe <_puts_r+0x4e>
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	059b      	lsls	r3, r3, #22
 800b2f6:	d402      	bmi.n	800b2fe <_puts_r+0x4e>
 800b2f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2fa:	f000 f881 	bl	800b400 <__retarget_lock_release_recursive>
 800b2fe:	4628      	mov	r0, r5
 800b300:	bd70      	pop	{r4, r5, r6, pc}
 800b302:	2b00      	cmp	r3, #0
 800b304:	da04      	bge.n	800b310 <_puts_r+0x60>
 800b306:	69a2      	ldr	r2, [r4, #24]
 800b308:	429a      	cmp	r2, r3
 800b30a:	dc17      	bgt.n	800b33c <_puts_r+0x8c>
 800b30c:	290a      	cmp	r1, #10
 800b30e:	d015      	beq.n	800b33c <_puts_r+0x8c>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	6022      	str	r2, [r4, #0]
 800b316:	7019      	strb	r1, [r3, #0]
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b31e:	3b01      	subs	r3, #1
 800b320:	60a3      	str	r3, [r4, #8]
 800b322:	2900      	cmp	r1, #0
 800b324:	d1ed      	bne.n	800b302 <_puts_r+0x52>
 800b326:	2b00      	cmp	r3, #0
 800b328:	da11      	bge.n	800b34e <_puts_r+0x9e>
 800b32a:	4622      	mov	r2, r4
 800b32c:	210a      	movs	r1, #10
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 fe67 	bl	800c002 <__swbuf_r>
 800b334:	3001      	adds	r0, #1
 800b336:	d0d7      	beq.n	800b2e8 <_puts_r+0x38>
 800b338:	250a      	movs	r5, #10
 800b33a:	e7d7      	b.n	800b2ec <_puts_r+0x3c>
 800b33c:	4622      	mov	r2, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 fe5f 	bl	800c002 <__swbuf_r>
 800b344:	3001      	adds	r0, #1
 800b346:	d1e7      	bne.n	800b318 <_puts_r+0x68>
 800b348:	e7ce      	b.n	800b2e8 <_puts_r+0x38>
 800b34a:	3e01      	subs	r6, #1
 800b34c:	e7e4      	b.n	800b318 <_puts_r+0x68>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	6022      	str	r2, [r4, #0]
 800b354:	220a      	movs	r2, #10
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	e7ee      	b.n	800b338 <_puts_r+0x88>
	...

0800b35c <puts>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	@ (800b368 <puts+0xc>)
 800b35e:	4601      	mov	r1, r0
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	f7ff bfa5 	b.w	800b2b0 <_puts_r>
 800b366:	bf00      	nop
 800b368:	20000040 	.word	0x20000040

0800b36c <strstr>:
 800b36c:	780a      	ldrb	r2, [r1, #0]
 800b36e:	b570      	push	{r4, r5, r6, lr}
 800b370:	b96a      	cbnz	r2, 800b38e <strstr+0x22>
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	429a      	cmp	r2, r3
 800b376:	d109      	bne.n	800b38c <strstr+0x20>
 800b378:	460c      	mov	r4, r1
 800b37a:	4605      	mov	r5, r0
 800b37c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0f6      	beq.n	800b372 <strstr+0x6>
 800b384:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b388:	429e      	cmp	r6, r3
 800b38a:	d0f7      	beq.n	800b37c <strstr+0x10>
 800b38c:	3001      	adds	r0, #1
 800b38e:	7803      	ldrb	r3, [r0, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1ef      	bne.n	800b374 <strstr+0x8>
 800b394:	4618      	mov	r0, r3
 800b396:	e7ec      	b.n	800b372 <strstr+0x6>

0800b398 <memset>:
 800b398:	4402      	add	r2, r0
 800b39a:	4603      	mov	r3, r0
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d100      	bne.n	800b3a2 <memset+0xa>
 800b3a0:	4770      	bx	lr
 800b3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3a6:	e7f9      	b.n	800b39c <memset+0x4>

0800b3a8 <__errno>:
 800b3a8:	4b01      	ldr	r3, [pc, #4]	@ (800b3b0 <__errno+0x8>)
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20000040 	.word	0x20000040

0800b3b4 <__libc_init_array>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	4d0d      	ldr	r5, [pc, #52]	@ (800b3ec <__libc_init_array+0x38>)
 800b3b8:	4c0d      	ldr	r4, [pc, #52]	@ (800b3f0 <__libc_init_array+0x3c>)
 800b3ba:	1b64      	subs	r4, r4, r5
 800b3bc:	10a4      	asrs	r4, r4, #2
 800b3be:	2600      	movs	r6, #0
 800b3c0:	42a6      	cmp	r6, r4
 800b3c2:	d109      	bne.n	800b3d8 <__libc_init_array+0x24>
 800b3c4:	4d0b      	ldr	r5, [pc, #44]	@ (800b3f4 <__libc_init_array+0x40>)
 800b3c6:	4c0c      	ldr	r4, [pc, #48]	@ (800b3f8 <__libc_init_array+0x44>)
 800b3c8:	f000 fff6 	bl	800c3b8 <_init>
 800b3cc:	1b64      	subs	r4, r4, r5
 800b3ce:	10a4      	asrs	r4, r4, #2
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	42a6      	cmp	r6, r4
 800b3d4:	d105      	bne.n	800b3e2 <__libc_init_array+0x2e>
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3dc:	4798      	blx	r3
 800b3de:	3601      	adds	r6, #1
 800b3e0:	e7ee      	b.n	800b3c0 <__libc_init_array+0xc>
 800b3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e6:	4798      	blx	r3
 800b3e8:	3601      	adds	r6, #1
 800b3ea:	e7f2      	b.n	800b3d2 <__libc_init_array+0x1e>
 800b3ec:	0800d720 	.word	0x0800d720
 800b3f0:	0800d720 	.word	0x0800d720
 800b3f4:	0800d720 	.word	0x0800d720
 800b3f8:	0800d724 	.word	0x0800d724

0800b3fc <__retarget_lock_init_recursive>:
 800b3fc:	4770      	bx	lr

0800b3fe <__retarget_lock_acquire_recursive>:
 800b3fe:	4770      	bx	lr

0800b400 <__retarget_lock_release_recursive>:
 800b400:	4770      	bx	lr

0800b402 <memcpy>:
 800b402:	440a      	add	r2, r1
 800b404:	4291      	cmp	r1, r2
 800b406:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b40a:	d100      	bne.n	800b40e <memcpy+0xc>
 800b40c:	4770      	bx	lr
 800b40e:	b510      	push	{r4, lr}
 800b410:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b414:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b418:	4291      	cmp	r1, r2
 800b41a:	d1f9      	bne.n	800b410 <memcpy+0xe>
 800b41c:	bd10      	pop	{r4, pc}

0800b41e <__ssputs_r>:
 800b41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b422:	688e      	ldr	r6, [r1, #8]
 800b424:	461f      	mov	r7, r3
 800b426:	42be      	cmp	r6, r7
 800b428:	680b      	ldr	r3, [r1, #0]
 800b42a:	4682      	mov	sl, r0
 800b42c:	460c      	mov	r4, r1
 800b42e:	4690      	mov	r8, r2
 800b430:	d82d      	bhi.n	800b48e <__ssputs_r+0x70>
 800b432:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b436:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b43a:	d026      	beq.n	800b48a <__ssputs_r+0x6c>
 800b43c:	6965      	ldr	r5, [r4, #20]
 800b43e:	6909      	ldr	r1, [r1, #16]
 800b440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b444:	eba3 0901 	sub.w	r9, r3, r1
 800b448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b44c:	1c7b      	adds	r3, r7, #1
 800b44e:	444b      	add	r3, r9
 800b450:	106d      	asrs	r5, r5, #1
 800b452:	429d      	cmp	r5, r3
 800b454:	bf38      	it	cc
 800b456:	461d      	movcc	r5, r3
 800b458:	0553      	lsls	r3, r2, #21
 800b45a:	d527      	bpl.n	800b4ac <__ssputs_r+0x8e>
 800b45c:	4629      	mov	r1, r5
 800b45e:	f000 fa99 	bl	800b994 <_malloc_r>
 800b462:	4606      	mov	r6, r0
 800b464:	b360      	cbz	r0, 800b4c0 <__ssputs_r+0xa2>
 800b466:	6921      	ldr	r1, [r4, #16]
 800b468:	464a      	mov	r2, r9
 800b46a:	f7ff ffca 	bl	800b402 <memcpy>
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b478:	81a3      	strh	r3, [r4, #12]
 800b47a:	6126      	str	r6, [r4, #16]
 800b47c:	6165      	str	r5, [r4, #20]
 800b47e:	444e      	add	r6, r9
 800b480:	eba5 0509 	sub.w	r5, r5, r9
 800b484:	6026      	str	r6, [r4, #0]
 800b486:	60a5      	str	r5, [r4, #8]
 800b488:	463e      	mov	r6, r7
 800b48a:	42be      	cmp	r6, r7
 800b48c:	d900      	bls.n	800b490 <__ssputs_r+0x72>
 800b48e:	463e      	mov	r6, r7
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	4632      	mov	r2, r6
 800b494:	4641      	mov	r1, r8
 800b496:	f000 feab 	bl	800c1f0 <memmove>
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	1b9b      	subs	r3, r3, r6
 800b49e:	60a3      	str	r3, [r4, #8]
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	4433      	add	r3, r6
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ac:	462a      	mov	r2, r5
 800b4ae:	f000 fd7a 	bl	800bfa6 <_realloc_r>
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d1e0      	bne.n	800b47a <__ssputs_r+0x5c>
 800b4b8:	6921      	ldr	r1, [r4, #16]
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	f000 ff2a 	bl	800c314 <_free_r>
 800b4c0:	230c      	movs	r3, #12
 800b4c2:	f8ca 3000 	str.w	r3, [sl]
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4d2:	e7e9      	b.n	800b4a8 <__ssputs_r+0x8a>

0800b4d4 <_svfiprintf_r>:
 800b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	4698      	mov	r8, r3
 800b4da:	898b      	ldrh	r3, [r1, #12]
 800b4dc:	061b      	lsls	r3, r3, #24
 800b4de:	b09d      	sub	sp, #116	@ 0x74
 800b4e0:	4607      	mov	r7, r0
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	d510      	bpl.n	800b50a <_svfiprintf_r+0x36>
 800b4e8:	690b      	ldr	r3, [r1, #16]
 800b4ea:	b973      	cbnz	r3, 800b50a <_svfiprintf_r+0x36>
 800b4ec:	2140      	movs	r1, #64	@ 0x40
 800b4ee:	f000 fa51 	bl	800b994 <_malloc_r>
 800b4f2:	6028      	str	r0, [r5, #0]
 800b4f4:	6128      	str	r0, [r5, #16]
 800b4f6:	b930      	cbnz	r0, 800b506 <_svfiprintf_r+0x32>
 800b4f8:	230c      	movs	r3, #12
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b500:	b01d      	add	sp, #116	@ 0x74
 800b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b506:	2340      	movs	r3, #64	@ 0x40
 800b508:	616b      	str	r3, [r5, #20]
 800b50a:	2300      	movs	r3, #0
 800b50c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50e:	2320      	movs	r3, #32
 800b510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b514:	f8cd 800c 	str.w	r8, [sp, #12]
 800b518:	2330      	movs	r3, #48	@ 0x30
 800b51a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6b8 <_svfiprintf_r+0x1e4>
 800b51e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b522:	f04f 0901 	mov.w	r9, #1
 800b526:	4623      	mov	r3, r4
 800b528:	469a      	mov	sl, r3
 800b52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b52e:	b10a      	cbz	r2, 800b534 <_svfiprintf_r+0x60>
 800b530:	2a25      	cmp	r2, #37	@ 0x25
 800b532:	d1f9      	bne.n	800b528 <_svfiprintf_r+0x54>
 800b534:	ebba 0b04 	subs.w	fp, sl, r4
 800b538:	d00b      	beq.n	800b552 <_svfiprintf_r+0x7e>
 800b53a:	465b      	mov	r3, fp
 800b53c:	4622      	mov	r2, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	4638      	mov	r0, r7
 800b542:	f7ff ff6c 	bl	800b41e <__ssputs_r>
 800b546:	3001      	adds	r0, #1
 800b548:	f000 80a7 	beq.w	800b69a <_svfiprintf_r+0x1c6>
 800b54c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b54e:	445a      	add	r2, fp
 800b550:	9209      	str	r2, [sp, #36]	@ 0x24
 800b552:	f89a 3000 	ldrb.w	r3, [sl]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 809f 	beq.w	800b69a <_svfiprintf_r+0x1c6>
 800b55c:	2300      	movs	r3, #0
 800b55e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b566:	f10a 0a01 	add.w	sl, sl, #1
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	9307      	str	r3, [sp, #28]
 800b56e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b572:	931a      	str	r3, [sp, #104]	@ 0x68
 800b574:	4654      	mov	r4, sl
 800b576:	2205      	movs	r2, #5
 800b578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57c:	484e      	ldr	r0, [pc, #312]	@ (800b6b8 <_svfiprintf_r+0x1e4>)
 800b57e:	f7f4 fe4f 	bl	8000220 <memchr>
 800b582:	9a04      	ldr	r2, [sp, #16]
 800b584:	b9d8      	cbnz	r0, 800b5be <_svfiprintf_r+0xea>
 800b586:	06d0      	lsls	r0, r2, #27
 800b588:	bf44      	itt	mi
 800b58a:	2320      	movmi	r3, #32
 800b58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b590:	0711      	lsls	r1, r2, #28
 800b592:	bf44      	itt	mi
 800b594:	232b      	movmi	r3, #43	@ 0x2b
 800b596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b59a:	f89a 3000 	ldrb.w	r3, [sl]
 800b59e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5a0:	d015      	beq.n	800b5ce <_svfiprintf_r+0xfa>
 800b5a2:	9a07      	ldr	r2, [sp, #28]
 800b5a4:	4654      	mov	r4, sl
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	f04f 0c0a 	mov.w	ip, #10
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5b2:	3b30      	subs	r3, #48	@ 0x30
 800b5b4:	2b09      	cmp	r3, #9
 800b5b6:	d94b      	bls.n	800b650 <_svfiprintf_r+0x17c>
 800b5b8:	b1b0      	cbz	r0, 800b5e8 <_svfiprintf_r+0x114>
 800b5ba:	9207      	str	r2, [sp, #28]
 800b5bc:	e014      	b.n	800b5e8 <_svfiprintf_r+0x114>
 800b5be:	eba0 0308 	sub.w	r3, r0, r8
 800b5c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	46a2      	mov	sl, r4
 800b5cc:	e7d2      	b.n	800b574 <_svfiprintf_r+0xa0>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	1d19      	adds	r1, r3, #4
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	9103      	str	r1, [sp, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	bfbb      	ittet	lt
 800b5da:	425b      	neglt	r3, r3
 800b5dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b5e0:	9307      	strge	r3, [sp, #28]
 800b5e2:	9307      	strlt	r3, [sp, #28]
 800b5e4:	bfb8      	it	lt
 800b5e6:	9204      	strlt	r2, [sp, #16]
 800b5e8:	7823      	ldrb	r3, [r4, #0]
 800b5ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5ec:	d10a      	bne.n	800b604 <_svfiprintf_r+0x130>
 800b5ee:	7863      	ldrb	r3, [r4, #1]
 800b5f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f2:	d132      	bne.n	800b65a <_svfiprintf_r+0x186>
 800b5f4:	9b03      	ldr	r3, [sp, #12]
 800b5f6:	1d1a      	adds	r2, r3, #4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	9203      	str	r2, [sp, #12]
 800b5fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b600:	3402      	adds	r4, #2
 800b602:	9305      	str	r3, [sp, #20]
 800b604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6c8 <_svfiprintf_r+0x1f4>
 800b608:	7821      	ldrb	r1, [r4, #0]
 800b60a:	2203      	movs	r2, #3
 800b60c:	4650      	mov	r0, sl
 800b60e:	f7f4 fe07 	bl	8000220 <memchr>
 800b612:	b138      	cbz	r0, 800b624 <_svfiprintf_r+0x150>
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	eba0 000a 	sub.w	r0, r0, sl
 800b61a:	2240      	movs	r2, #64	@ 0x40
 800b61c:	4082      	lsls	r2, r0
 800b61e:	4313      	orrs	r3, r2
 800b620:	3401      	adds	r4, #1
 800b622:	9304      	str	r3, [sp, #16]
 800b624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b628:	4824      	ldr	r0, [pc, #144]	@ (800b6bc <_svfiprintf_r+0x1e8>)
 800b62a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b62e:	2206      	movs	r2, #6
 800b630:	f7f4 fdf6 	bl	8000220 <memchr>
 800b634:	2800      	cmp	r0, #0
 800b636:	d036      	beq.n	800b6a6 <_svfiprintf_r+0x1d2>
 800b638:	4b21      	ldr	r3, [pc, #132]	@ (800b6c0 <_svfiprintf_r+0x1ec>)
 800b63a:	bb1b      	cbnz	r3, 800b684 <_svfiprintf_r+0x1b0>
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	3307      	adds	r3, #7
 800b640:	f023 0307 	bic.w	r3, r3, #7
 800b644:	3308      	adds	r3, #8
 800b646:	9303      	str	r3, [sp, #12]
 800b648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64a:	4433      	add	r3, r6
 800b64c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b64e:	e76a      	b.n	800b526 <_svfiprintf_r+0x52>
 800b650:	fb0c 3202 	mla	r2, ip, r2, r3
 800b654:	460c      	mov	r4, r1
 800b656:	2001      	movs	r0, #1
 800b658:	e7a8      	b.n	800b5ac <_svfiprintf_r+0xd8>
 800b65a:	2300      	movs	r3, #0
 800b65c:	3401      	adds	r4, #1
 800b65e:	9305      	str	r3, [sp, #20]
 800b660:	4619      	mov	r1, r3
 800b662:	f04f 0c0a 	mov.w	ip, #10
 800b666:	4620      	mov	r0, r4
 800b668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b66c:	3a30      	subs	r2, #48	@ 0x30
 800b66e:	2a09      	cmp	r2, #9
 800b670:	d903      	bls.n	800b67a <_svfiprintf_r+0x1a6>
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0c6      	beq.n	800b604 <_svfiprintf_r+0x130>
 800b676:	9105      	str	r1, [sp, #20]
 800b678:	e7c4      	b.n	800b604 <_svfiprintf_r+0x130>
 800b67a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b67e:	4604      	mov	r4, r0
 800b680:	2301      	movs	r3, #1
 800b682:	e7f0      	b.n	800b666 <_svfiprintf_r+0x192>
 800b684:	ab03      	add	r3, sp, #12
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	462a      	mov	r2, r5
 800b68a:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c4 <_svfiprintf_r+0x1f0>)
 800b68c:	a904      	add	r1, sp, #16
 800b68e:	4638      	mov	r0, r7
 800b690:	f3af 8000 	nop.w
 800b694:	1c42      	adds	r2, r0, #1
 800b696:	4606      	mov	r6, r0
 800b698:	d1d6      	bne.n	800b648 <_svfiprintf_r+0x174>
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	065b      	lsls	r3, r3, #25
 800b69e:	f53f af2d 	bmi.w	800b4fc <_svfiprintf_r+0x28>
 800b6a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6a4:	e72c      	b.n	800b500 <_svfiprintf_r+0x2c>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4b05      	ldr	r3, [pc, #20]	@ (800b6c4 <_svfiprintf_r+0x1f0>)
 800b6ae:	a904      	add	r1, sp, #16
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f000 fa5d 	bl	800bb70 <_printf_i>
 800b6b6:	e7ed      	b.n	800b694 <_svfiprintf_r+0x1c0>
 800b6b8:	0800d6e4 	.word	0x0800d6e4
 800b6bc:	0800d6ee 	.word	0x0800d6ee
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	0800b41f 	.word	0x0800b41f
 800b6c8:	0800d6ea 	.word	0x0800d6ea

0800b6cc <__sfputc_r>:
 800b6cc:	6893      	ldr	r3, [r2, #8]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	b410      	push	{r4}
 800b6d4:	6093      	str	r3, [r2, #8]
 800b6d6:	da08      	bge.n	800b6ea <__sfputc_r+0x1e>
 800b6d8:	6994      	ldr	r4, [r2, #24]
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	db01      	blt.n	800b6e2 <__sfputc_r+0x16>
 800b6de:	290a      	cmp	r1, #10
 800b6e0:	d103      	bne.n	800b6ea <__sfputc_r+0x1e>
 800b6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e6:	f000 bc8c 	b.w	800c002 <__swbuf_r>
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	1c58      	adds	r0, r3, #1
 800b6ee:	6010      	str	r0, [r2, #0]
 800b6f0:	7019      	strb	r1, [r3, #0]
 800b6f2:	4608      	mov	r0, r1
 800b6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <__sfputs_r>:
 800b6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	4614      	mov	r4, r2
 800b702:	18d5      	adds	r5, r2, r3
 800b704:	42ac      	cmp	r4, r5
 800b706:	d101      	bne.n	800b70c <__sfputs_r+0x12>
 800b708:	2000      	movs	r0, #0
 800b70a:	e007      	b.n	800b71c <__sfputs_r+0x22>
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	463a      	mov	r2, r7
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff ffda 	bl	800b6cc <__sfputc_r>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d1f3      	bne.n	800b704 <__sfputs_r+0xa>
 800b71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b720 <_vfiprintf_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	460d      	mov	r5, r1
 800b726:	b09d      	sub	sp, #116	@ 0x74
 800b728:	4614      	mov	r4, r2
 800b72a:	4698      	mov	r8, r3
 800b72c:	4606      	mov	r6, r0
 800b72e:	b118      	cbz	r0, 800b738 <_vfiprintf_r+0x18>
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	b90b      	cbnz	r3, 800b738 <_vfiprintf_r+0x18>
 800b734:	f7ff fd74 	bl	800b220 <__sinit>
 800b738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b73a:	07d9      	lsls	r1, r3, #31
 800b73c:	d405      	bmi.n	800b74a <_vfiprintf_r+0x2a>
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	059a      	lsls	r2, r3, #22
 800b742:	d402      	bmi.n	800b74a <_vfiprintf_r+0x2a>
 800b744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b746:	f7ff fe5a 	bl	800b3fe <__retarget_lock_acquire_recursive>
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	071b      	lsls	r3, r3, #28
 800b74e:	d501      	bpl.n	800b754 <_vfiprintf_r+0x34>
 800b750:	692b      	ldr	r3, [r5, #16]
 800b752:	b99b      	cbnz	r3, 800b77c <_vfiprintf_r+0x5c>
 800b754:	4629      	mov	r1, r5
 800b756:	4630      	mov	r0, r6
 800b758:	f000 fc92 	bl	800c080 <__swsetup_r>
 800b75c:	b170      	cbz	r0, 800b77c <_vfiprintf_r+0x5c>
 800b75e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b760:	07dc      	lsls	r4, r3, #31
 800b762:	d504      	bpl.n	800b76e <_vfiprintf_r+0x4e>
 800b764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b768:	b01d      	add	sp, #116	@ 0x74
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	0598      	lsls	r0, r3, #22
 800b772:	d4f7      	bmi.n	800b764 <_vfiprintf_r+0x44>
 800b774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b776:	f7ff fe43 	bl	800b400 <__retarget_lock_release_recursive>
 800b77a:	e7f3      	b.n	800b764 <_vfiprintf_r+0x44>
 800b77c:	2300      	movs	r3, #0
 800b77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b780:	2320      	movs	r3, #32
 800b782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b786:	f8cd 800c 	str.w	r8, [sp, #12]
 800b78a:	2330      	movs	r3, #48	@ 0x30
 800b78c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b93c <_vfiprintf_r+0x21c>
 800b790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b794:	f04f 0901 	mov.w	r9, #1
 800b798:	4623      	mov	r3, r4
 800b79a:	469a      	mov	sl, r3
 800b79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a0:	b10a      	cbz	r2, 800b7a6 <_vfiprintf_r+0x86>
 800b7a2:	2a25      	cmp	r2, #37	@ 0x25
 800b7a4:	d1f9      	bne.n	800b79a <_vfiprintf_r+0x7a>
 800b7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7aa:	d00b      	beq.n	800b7c4 <_vfiprintf_r+0xa4>
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f7ff ffa1 	bl	800b6fa <__sfputs_r>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f000 80a7 	beq.w	800b90c <_vfiprintf_r+0x1ec>
 800b7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c0:	445a      	add	r2, fp
 800b7c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 809f 	beq.w	800b90c <_vfiprintf_r+0x1ec>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d8:	f10a 0a01 	add.w	sl, sl, #1
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e6:	4654      	mov	r4, sl
 800b7e8:	2205      	movs	r2, #5
 800b7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ee:	4853      	ldr	r0, [pc, #332]	@ (800b93c <_vfiprintf_r+0x21c>)
 800b7f0:	f7f4 fd16 	bl	8000220 <memchr>
 800b7f4:	9a04      	ldr	r2, [sp, #16]
 800b7f6:	b9d8      	cbnz	r0, 800b830 <_vfiprintf_r+0x110>
 800b7f8:	06d1      	lsls	r1, r2, #27
 800b7fa:	bf44      	itt	mi
 800b7fc:	2320      	movmi	r3, #32
 800b7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b802:	0713      	lsls	r3, r2, #28
 800b804:	bf44      	itt	mi
 800b806:	232b      	movmi	r3, #43	@ 0x2b
 800b808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b80c:	f89a 3000 	ldrb.w	r3, [sl]
 800b810:	2b2a      	cmp	r3, #42	@ 0x2a
 800b812:	d015      	beq.n	800b840 <_vfiprintf_r+0x120>
 800b814:	9a07      	ldr	r2, [sp, #28]
 800b816:	4654      	mov	r4, sl
 800b818:	2000      	movs	r0, #0
 800b81a:	f04f 0c0a 	mov.w	ip, #10
 800b81e:	4621      	mov	r1, r4
 800b820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b824:	3b30      	subs	r3, #48	@ 0x30
 800b826:	2b09      	cmp	r3, #9
 800b828:	d94b      	bls.n	800b8c2 <_vfiprintf_r+0x1a2>
 800b82a:	b1b0      	cbz	r0, 800b85a <_vfiprintf_r+0x13a>
 800b82c:	9207      	str	r2, [sp, #28]
 800b82e:	e014      	b.n	800b85a <_vfiprintf_r+0x13a>
 800b830:	eba0 0308 	sub.w	r3, r0, r8
 800b834:	fa09 f303 	lsl.w	r3, r9, r3
 800b838:	4313      	orrs	r3, r2
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	46a2      	mov	sl, r4
 800b83e:	e7d2      	b.n	800b7e6 <_vfiprintf_r+0xc6>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	1d19      	adds	r1, r3, #4
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	9103      	str	r1, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfbb      	ittet	lt
 800b84c:	425b      	neglt	r3, r3
 800b84e:	f042 0202 	orrlt.w	r2, r2, #2
 800b852:	9307      	strge	r3, [sp, #28]
 800b854:	9307      	strlt	r3, [sp, #28]
 800b856:	bfb8      	it	lt
 800b858:	9204      	strlt	r2, [sp, #16]
 800b85a:	7823      	ldrb	r3, [r4, #0]
 800b85c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b85e:	d10a      	bne.n	800b876 <_vfiprintf_r+0x156>
 800b860:	7863      	ldrb	r3, [r4, #1]
 800b862:	2b2a      	cmp	r3, #42	@ 0x2a
 800b864:	d132      	bne.n	800b8cc <_vfiprintf_r+0x1ac>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	1d1a      	adds	r2, r3, #4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	9203      	str	r2, [sp, #12]
 800b86e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b872:	3402      	adds	r4, #2
 800b874:	9305      	str	r3, [sp, #20]
 800b876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b94c <_vfiprintf_r+0x22c>
 800b87a:	7821      	ldrb	r1, [r4, #0]
 800b87c:	2203      	movs	r2, #3
 800b87e:	4650      	mov	r0, sl
 800b880:	f7f4 fcce 	bl	8000220 <memchr>
 800b884:	b138      	cbz	r0, 800b896 <_vfiprintf_r+0x176>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	eba0 000a 	sub.w	r0, r0, sl
 800b88c:	2240      	movs	r2, #64	@ 0x40
 800b88e:	4082      	lsls	r2, r0
 800b890:	4313      	orrs	r3, r2
 800b892:	3401      	adds	r4, #1
 800b894:	9304      	str	r3, [sp, #16]
 800b896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89a:	4829      	ldr	r0, [pc, #164]	@ (800b940 <_vfiprintf_r+0x220>)
 800b89c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8a0:	2206      	movs	r2, #6
 800b8a2:	f7f4 fcbd 	bl	8000220 <memchr>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d03f      	beq.n	800b92a <_vfiprintf_r+0x20a>
 800b8aa:	4b26      	ldr	r3, [pc, #152]	@ (800b944 <_vfiprintf_r+0x224>)
 800b8ac:	bb1b      	cbnz	r3, 800b8f6 <_vfiprintf_r+0x1d6>
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	f023 0307 	bic.w	r3, r3, #7
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	9303      	str	r3, [sp, #12]
 800b8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8bc:	443b      	add	r3, r7
 800b8be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c0:	e76a      	b.n	800b798 <_vfiprintf_r+0x78>
 800b8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	e7a8      	b.n	800b81e <_vfiprintf_r+0xfe>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	3401      	adds	r4, #1
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f04f 0c0a 	mov.w	ip, #10
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8de:	3a30      	subs	r2, #48	@ 0x30
 800b8e0:	2a09      	cmp	r2, #9
 800b8e2:	d903      	bls.n	800b8ec <_vfiprintf_r+0x1cc>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d0c6      	beq.n	800b876 <_vfiprintf_r+0x156>
 800b8e8:	9105      	str	r1, [sp, #20]
 800b8ea:	e7c4      	b.n	800b876 <_vfiprintf_r+0x156>
 800b8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e7f0      	b.n	800b8d8 <_vfiprintf_r+0x1b8>
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4b12      	ldr	r3, [pc, #72]	@ (800b948 <_vfiprintf_r+0x228>)
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	4630      	mov	r0, r6
 800b902:	f3af 8000 	nop.w
 800b906:	4607      	mov	r7, r0
 800b908:	1c78      	adds	r0, r7, #1
 800b90a:	d1d6      	bne.n	800b8ba <_vfiprintf_r+0x19a>
 800b90c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b90e:	07d9      	lsls	r1, r3, #31
 800b910:	d405      	bmi.n	800b91e <_vfiprintf_r+0x1fe>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	059a      	lsls	r2, r3, #22
 800b916:	d402      	bmi.n	800b91e <_vfiprintf_r+0x1fe>
 800b918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b91a:	f7ff fd71 	bl	800b400 <__retarget_lock_release_recursive>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	065b      	lsls	r3, r3, #25
 800b922:	f53f af1f 	bmi.w	800b764 <_vfiprintf_r+0x44>
 800b926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b928:	e71e      	b.n	800b768 <_vfiprintf_r+0x48>
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	462a      	mov	r2, r5
 800b930:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <_vfiprintf_r+0x228>)
 800b932:	a904      	add	r1, sp, #16
 800b934:	4630      	mov	r0, r6
 800b936:	f000 f91b 	bl	800bb70 <_printf_i>
 800b93a:	e7e4      	b.n	800b906 <_vfiprintf_r+0x1e6>
 800b93c:	0800d6e4 	.word	0x0800d6e4
 800b940:	0800d6ee 	.word	0x0800d6ee
 800b944:	00000000 	.word	0x00000000
 800b948:	0800b6fb 	.word	0x0800b6fb
 800b94c:	0800d6ea 	.word	0x0800d6ea

0800b950 <sbrk_aligned>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	4e0f      	ldr	r6, [pc, #60]	@ (800b990 <sbrk_aligned+0x40>)
 800b954:	460c      	mov	r4, r1
 800b956:	6831      	ldr	r1, [r6, #0]
 800b958:	4605      	mov	r5, r0
 800b95a:	b911      	cbnz	r1, 800b962 <sbrk_aligned+0x12>
 800b95c:	f000 fcb8 	bl	800c2d0 <_sbrk_r>
 800b960:	6030      	str	r0, [r6, #0]
 800b962:	4621      	mov	r1, r4
 800b964:	4628      	mov	r0, r5
 800b966:	f000 fcb3 	bl	800c2d0 <_sbrk_r>
 800b96a:	1c43      	adds	r3, r0, #1
 800b96c:	d103      	bne.n	800b976 <sbrk_aligned+0x26>
 800b96e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b972:	4620      	mov	r0, r4
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	1cc4      	adds	r4, r0, #3
 800b978:	f024 0403 	bic.w	r4, r4, #3
 800b97c:	42a0      	cmp	r0, r4
 800b97e:	d0f8      	beq.n	800b972 <sbrk_aligned+0x22>
 800b980:	1a21      	subs	r1, r4, r0
 800b982:	4628      	mov	r0, r5
 800b984:	f000 fca4 	bl	800c2d0 <_sbrk_r>
 800b988:	3001      	adds	r0, #1
 800b98a:	d1f2      	bne.n	800b972 <sbrk_aligned+0x22>
 800b98c:	e7ef      	b.n	800b96e <sbrk_aligned+0x1e>
 800b98e:	bf00      	nop
 800b990:	200051e4 	.word	0x200051e4

0800b994 <_malloc_r>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	1ccd      	adds	r5, r1, #3
 800b99a:	f025 0503 	bic.w	r5, r5, #3
 800b99e:	3508      	adds	r5, #8
 800b9a0:	2d0c      	cmp	r5, #12
 800b9a2:	bf38      	it	cc
 800b9a4:	250c      	movcc	r5, #12
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	db01      	blt.n	800b9b0 <_malloc_r+0x1c>
 800b9ac:	42a9      	cmp	r1, r5
 800b9ae:	d904      	bls.n	800b9ba <_malloc_r+0x26>
 800b9b0:	230c      	movs	r3, #12
 800b9b2:	6033      	str	r3, [r6, #0]
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba90 <_malloc_r+0xfc>
 800b9be:	f000 faa3 	bl	800bf08 <__malloc_lock>
 800b9c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c6:	461c      	mov	r4, r3
 800b9c8:	bb44      	cbnz	r4, 800ba1c <_malloc_r+0x88>
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff ffbf 	bl	800b950 <sbrk_aligned>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	d158      	bne.n	800ba8a <_malloc_r+0xf6>
 800b9d8:	f8d8 4000 	ldr.w	r4, [r8]
 800b9dc:	4627      	mov	r7, r4
 800b9de:	2f00      	cmp	r7, #0
 800b9e0:	d143      	bne.n	800ba6a <_malloc_r+0xd6>
 800b9e2:	2c00      	cmp	r4, #0
 800b9e4:	d04b      	beq.n	800ba7e <_malloc_r+0xea>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	eb04 0903 	add.w	r9, r4, r3
 800b9f0:	f000 fc6e 	bl	800c2d0 <_sbrk_r>
 800b9f4:	4581      	cmp	r9, r0
 800b9f6:	d142      	bne.n	800ba7e <_malloc_r+0xea>
 800b9f8:	6821      	ldr	r1, [r4, #0]
 800b9fa:	1a6d      	subs	r5, r5, r1
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7ff ffa6 	bl	800b950 <sbrk_aligned>
 800ba04:	3001      	adds	r0, #1
 800ba06:	d03a      	beq.n	800ba7e <_malloc_r+0xea>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	442b      	add	r3, r5
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	bb62      	cbnz	r2, 800ba70 <_malloc_r+0xdc>
 800ba16:	f8c8 7000 	str.w	r7, [r8]
 800ba1a:	e00f      	b.n	800ba3c <_malloc_r+0xa8>
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	1b52      	subs	r2, r2, r5
 800ba20:	d420      	bmi.n	800ba64 <_malloc_r+0xd0>
 800ba22:	2a0b      	cmp	r2, #11
 800ba24:	d917      	bls.n	800ba56 <_malloc_r+0xc2>
 800ba26:	1961      	adds	r1, r4, r5
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	6025      	str	r5, [r4, #0]
 800ba2c:	bf18      	it	ne
 800ba2e:	6059      	strne	r1, [r3, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	bf08      	it	eq
 800ba34:	f8c8 1000 	streq.w	r1, [r8]
 800ba38:	5162      	str	r2, [r4, r5]
 800ba3a:	604b      	str	r3, [r1, #4]
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f000 fa69 	bl	800bf14 <__malloc_unlock>
 800ba42:	f104 000b 	add.w	r0, r4, #11
 800ba46:	1d23      	adds	r3, r4, #4
 800ba48:	f020 0007 	bic.w	r0, r0, #7
 800ba4c:	1ac2      	subs	r2, r0, r3
 800ba4e:	bf1c      	itt	ne
 800ba50:	1a1b      	subne	r3, r3, r0
 800ba52:	50a3      	strne	r3, [r4, r2]
 800ba54:	e7af      	b.n	800b9b6 <_malloc_r+0x22>
 800ba56:	6862      	ldr	r2, [r4, #4]
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	bf0c      	ite	eq
 800ba5c:	f8c8 2000 	streq.w	r2, [r8]
 800ba60:	605a      	strne	r2, [r3, #4]
 800ba62:	e7eb      	b.n	800ba3c <_malloc_r+0xa8>
 800ba64:	4623      	mov	r3, r4
 800ba66:	6864      	ldr	r4, [r4, #4]
 800ba68:	e7ae      	b.n	800b9c8 <_malloc_r+0x34>
 800ba6a:	463c      	mov	r4, r7
 800ba6c:	687f      	ldr	r7, [r7, #4]
 800ba6e:	e7b6      	b.n	800b9de <_malloc_r+0x4a>
 800ba70:	461a      	mov	r2, r3
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	42a3      	cmp	r3, r4
 800ba76:	d1fb      	bne.n	800ba70 <_malloc_r+0xdc>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	6053      	str	r3, [r2, #4]
 800ba7c:	e7de      	b.n	800ba3c <_malloc_r+0xa8>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	6033      	str	r3, [r6, #0]
 800ba82:	4630      	mov	r0, r6
 800ba84:	f000 fa46 	bl	800bf14 <__malloc_unlock>
 800ba88:	e794      	b.n	800b9b4 <_malloc_r+0x20>
 800ba8a:	6005      	str	r5, [r0, #0]
 800ba8c:	e7d6      	b.n	800ba3c <_malloc_r+0xa8>
 800ba8e:	bf00      	nop
 800ba90:	200051e8 	.word	0x200051e8

0800ba94 <_printf_common>:
 800ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	4616      	mov	r6, r2
 800ba9a:	4698      	mov	r8, r3
 800ba9c:	688a      	ldr	r2, [r1, #8]
 800ba9e:	690b      	ldr	r3, [r1, #16]
 800baa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800baa4:	4293      	cmp	r3, r2
 800baa6:	bfb8      	it	lt
 800baa8:	4613      	movlt	r3, r2
 800baaa:	6033      	str	r3, [r6, #0]
 800baac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bab0:	4607      	mov	r7, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	b10a      	cbz	r2, 800baba <_printf_common+0x26>
 800bab6:	3301      	adds	r3, #1
 800bab8:	6033      	str	r3, [r6, #0]
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	0699      	lsls	r1, r3, #26
 800babe:	bf42      	ittt	mi
 800bac0:	6833      	ldrmi	r3, [r6, #0]
 800bac2:	3302      	addmi	r3, #2
 800bac4:	6033      	strmi	r3, [r6, #0]
 800bac6:	6825      	ldr	r5, [r4, #0]
 800bac8:	f015 0506 	ands.w	r5, r5, #6
 800bacc:	d106      	bne.n	800badc <_printf_common+0x48>
 800bace:	f104 0a19 	add.w	sl, r4, #25
 800bad2:	68e3      	ldr	r3, [r4, #12]
 800bad4:	6832      	ldr	r2, [r6, #0]
 800bad6:	1a9b      	subs	r3, r3, r2
 800bad8:	42ab      	cmp	r3, r5
 800bada:	dc26      	bgt.n	800bb2a <_printf_common+0x96>
 800badc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bae0:	6822      	ldr	r2, [r4, #0]
 800bae2:	3b00      	subs	r3, #0
 800bae4:	bf18      	it	ne
 800bae6:	2301      	movne	r3, #1
 800bae8:	0692      	lsls	r2, r2, #26
 800baea:	d42b      	bmi.n	800bb44 <_printf_common+0xb0>
 800baec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800baf0:	4641      	mov	r1, r8
 800baf2:	4638      	mov	r0, r7
 800baf4:	47c8      	blx	r9
 800baf6:	3001      	adds	r0, #1
 800baf8:	d01e      	beq.n	800bb38 <_printf_common+0xa4>
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	6922      	ldr	r2, [r4, #16]
 800bafe:	f003 0306 	and.w	r3, r3, #6
 800bb02:	2b04      	cmp	r3, #4
 800bb04:	bf02      	ittt	eq
 800bb06:	68e5      	ldreq	r5, [r4, #12]
 800bb08:	6833      	ldreq	r3, [r6, #0]
 800bb0a:	1aed      	subeq	r5, r5, r3
 800bb0c:	68a3      	ldr	r3, [r4, #8]
 800bb0e:	bf0c      	ite	eq
 800bb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb14:	2500      	movne	r5, #0
 800bb16:	4293      	cmp	r3, r2
 800bb18:	bfc4      	itt	gt
 800bb1a:	1a9b      	subgt	r3, r3, r2
 800bb1c:	18ed      	addgt	r5, r5, r3
 800bb1e:	2600      	movs	r6, #0
 800bb20:	341a      	adds	r4, #26
 800bb22:	42b5      	cmp	r5, r6
 800bb24:	d11a      	bne.n	800bb5c <_printf_common+0xc8>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e008      	b.n	800bb3c <_printf_common+0xa8>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4652      	mov	r2, sl
 800bb2e:	4641      	mov	r1, r8
 800bb30:	4638      	mov	r0, r7
 800bb32:	47c8      	blx	r9
 800bb34:	3001      	adds	r0, #1
 800bb36:	d103      	bne.n	800bb40 <_printf_common+0xac>
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb40:	3501      	adds	r5, #1
 800bb42:	e7c6      	b.n	800bad2 <_printf_common+0x3e>
 800bb44:	18e1      	adds	r1, r4, r3
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	2030      	movs	r0, #48	@ 0x30
 800bb4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb4e:	4422      	add	r2, r4
 800bb50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb58:	3302      	adds	r3, #2
 800bb5a:	e7c7      	b.n	800baec <_printf_common+0x58>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4641      	mov	r1, r8
 800bb62:	4638      	mov	r0, r7
 800bb64:	47c8      	blx	r9
 800bb66:	3001      	adds	r0, #1
 800bb68:	d0e6      	beq.n	800bb38 <_printf_common+0xa4>
 800bb6a:	3601      	adds	r6, #1
 800bb6c:	e7d9      	b.n	800bb22 <_printf_common+0x8e>
	...

0800bb70 <_printf_i>:
 800bb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb74:	7e0f      	ldrb	r7, [r1, #24]
 800bb76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb78:	2f78      	cmp	r7, #120	@ 0x78
 800bb7a:	4691      	mov	r9, r2
 800bb7c:	4680      	mov	r8, r0
 800bb7e:	460c      	mov	r4, r1
 800bb80:	469a      	mov	sl, r3
 800bb82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb86:	d807      	bhi.n	800bb98 <_printf_i+0x28>
 800bb88:	2f62      	cmp	r7, #98	@ 0x62
 800bb8a:	d80a      	bhi.n	800bba2 <_printf_i+0x32>
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	f000 80d2 	beq.w	800bd36 <_printf_i+0x1c6>
 800bb92:	2f58      	cmp	r7, #88	@ 0x58
 800bb94:	f000 80b9 	beq.w	800bd0a <_printf_i+0x19a>
 800bb98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bba0:	e03a      	b.n	800bc18 <_printf_i+0xa8>
 800bba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bba6:	2b15      	cmp	r3, #21
 800bba8:	d8f6      	bhi.n	800bb98 <_printf_i+0x28>
 800bbaa:	a101      	add	r1, pc, #4	@ (adr r1, 800bbb0 <_printf_i+0x40>)
 800bbac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbb0:	0800bc09 	.word	0x0800bc09
 800bbb4:	0800bc1d 	.word	0x0800bc1d
 800bbb8:	0800bb99 	.word	0x0800bb99
 800bbbc:	0800bb99 	.word	0x0800bb99
 800bbc0:	0800bb99 	.word	0x0800bb99
 800bbc4:	0800bb99 	.word	0x0800bb99
 800bbc8:	0800bc1d 	.word	0x0800bc1d
 800bbcc:	0800bb99 	.word	0x0800bb99
 800bbd0:	0800bb99 	.word	0x0800bb99
 800bbd4:	0800bb99 	.word	0x0800bb99
 800bbd8:	0800bb99 	.word	0x0800bb99
 800bbdc:	0800bd1d 	.word	0x0800bd1d
 800bbe0:	0800bc47 	.word	0x0800bc47
 800bbe4:	0800bcd7 	.word	0x0800bcd7
 800bbe8:	0800bb99 	.word	0x0800bb99
 800bbec:	0800bb99 	.word	0x0800bb99
 800bbf0:	0800bd3f 	.word	0x0800bd3f
 800bbf4:	0800bb99 	.word	0x0800bb99
 800bbf8:	0800bc47 	.word	0x0800bc47
 800bbfc:	0800bb99 	.word	0x0800bb99
 800bc00:	0800bb99 	.word	0x0800bb99
 800bc04:	0800bcdf 	.word	0x0800bcdf
 800bc08:	6833      	ldr	r3, [r6, #0]
 800bc0a:	1d1a      	adds	r2, r3, #4
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6032      	str	r2, [r6, #0]
 800bc10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e09d      	b.n	800bd58 <_printf_i+0x1e8>
 800bc1c:	6833      	ldr	r3, [r6, #0]
 800bc1e:	6820      	ldr	r0, [r4, #0]
 800bc20:	1d19      	adds	r1, r3, #4
 800bc22:	6031      	str	r1, [r6, #0]
 800bc24:	0606      	lsls	r6, r0, #24
 800bc26:	d501      	bpl.n	800bc2c <_printf_i+0xbc>
 800bc28:	681d      	ldr	r5, [r3, #0]
 800bc2a:	e003      	b.n	800bc34 <_printf_i+0xc4>
 800bc2c:	0645      	lsls	r5, r0, #25
 800bc2e:	d5fb      	bpl.n	800bc28 <_printf_i+0xb8>
 800bc30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	da03      	bge.n	800bc40 <_printf_i+0xd0>
 800bc38:	232d      	movs	r3, #45	@ 0x2d
 800bc3a:	426d      	negs	r5, r5
 800bc3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc40:	4859      	ldr	r0, [pc, #356]	@ (800bda8 <_printf_i+0x238>)
 800bc42:	230a      	movs	r3, #10
 800bc44:	e011      	b.n	800bc6a <_printf_i+0xfa>
 800bc46:	6821      	ldr	r1, [r4, #0]
 800bc48:	6833      	ldr	r3, [r6, #0]
 800bc4a:	0608      	lsls	r0, r1, #24
 800bc4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc50:	d402      	bmi.n	800bc58 <_printf_i+0xe8>
 800bc52:	0649      	lsls	r1, r1, #25
 800bc54:	bf48      	it	mi
 800bc56:	b2ad      	uxthmi	r5, r5
 800bc58:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc5a:	4853      	ldr	r0, [pc, #332]	@ (800bda8 <_printf_i+0x238>)
 800bc5c:	6033      	str	r3, [r6, #0]
 800bc5e:	bf14      	ite	ne
 800bc60:	230a      	movne	r3, #10
 800bc62:	2308      	moveq	r3, #8
 800bc64:	2100      	movs	r1, #0
 800bc66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc6a:	6866      	ldr	r6, [r4, #4]
 800bc6c:	60a6      	str	r6, [r4, #8]
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	bfa2      	ittt	ge
 800bc72:	6821      	ldrge	r1, [r4, #0]
 800bc74:	f021 0104 	bicge.w	r1, r1, #4
 800bc78:	6021      	strge	r1, [r4, #0]
 800bc7a:	b90d      	cbnz	r5, 800bc80 <_printf_i+0x110>
 800bc7c:	2e00      	cmp	r6, #0
 800bc7e:	d04b      	beq.n	800bd18 <_printf_i+0x1a8>
 800bc80:	4616      	mov	r6, r2
 800bc82:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc86:	fb03 5711 	mls	r7, r3, r1, r5
 800bc8a:	5dc7      	ldrb	r7, [r0, r7]
 800bc8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc90:	462f      	mov	r7, r5
 800bc92:	42bb      	cmp	r3, r7
 800bc94:	460d      	mov	r5, r1
 800bc96:	d9f4      	bls.n	800bc82 <_printf_i+0x112>
 800bc98:	2b08      	cmp	r3, #8
 800bc9a:	d10b      	bne.n	800bcb4 <_printf_i+0x144>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	07df      	lsls	r7, r3, #31
 800bca0:	d508      	bpl.n	800bcb4 <_printf_i+0x144>
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	6861      	ldr	r1, [r4, #4]
 800bca6:	4299      	cmp	r1, r3
 800bca8:	bfde      	ittt	le
 800bcaa:	2330      	movle	r3, #48	@ 0x30
 800bcac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcb0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bcb4:	1b92      	subs	r2, r2, r6
 800bcb6:	6122      	str	r2, [r4, #16]
 800bcb8:	f8cd a000 	str.w	sl, [sp]
 800bcbc:	464b      	mov	r3, r9
 800bcbe:	aa03      	add	r2, sp, #12
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	f7ff fee6 	bl	800ba94 <_printf_common>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d14a      	bne.n	800bd62 <_printf_i+0x1f2>
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcd0:	b004      	add	sp, #16
 800bcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	f043 0320 	orr.w	r3, r3, #32
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	4833      	ldr	r0, [pc, #204]	@ (800bdac <_printf_i+0x23c>)
 800bce0:	2778      	movs	r7, #120	@ 0x78
 800bce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	6831      	ldr	r1, [r6, #0]
 800bcea:	061f      	lsls	r7, r3, #24
 800bcec:	f851 5b04 	ldr.w	r5, [r1], #4
 800bcf0:	d402      	bmi.n	800bcf8 <_printf_i+0x188>
 800bcf2:	065f      	lsls	r7, r3, #25
 800bcf4:	bf48      	it	mi
 800bcf6:	b2ad      	uxthmi	r5, r5
 800bcf8:	6031      	str	r1, [r6, #0]
 800bcfa:	07d9      	lsls	r1, r3, #31
 800bcfc:	bf44      	itt	mi
 800bcfe:	f043 0320 	orrmi.w	r3, r3, #32
 800bd02:	6023      	strmi	r3, [r4, #0]
 800bd04:	b11d      	cbz	r5, 800bd0e <_printf_i+0x19e>
 800bd06:	2310      	movs	r3, #16
 800bd08:	e7ac      	b.n	800bc64 <_printf_i+0xf4>
 800bd0a:	4827      	ldr	r0, [pc, #156]	@ (800bda8 <_printf_i+0x238>)
 800bd0c:	e7e9      	b.n	800bce2 <_printf_i+0x172>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	f023 0320 	bic.w	r3, r3, #32
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	e7f6      	b.n	800bd06 <_printf_i+0x196>
 800bd18:	4616      	mov	r6, r2
 800bd1a:	e7bd      	b.n	800bc98 <_printf_i+0x128>
 800bd1c:	6833      	ldr	r3, [r6, #0]
 800bd1e:	6825      	ldr	r5, [r4, #0]
 800bd20:	6961      	ldr	r1, [r4, #20]
 800bd22:	1d18      	adds	r0, r3, #4
 800bd24:	6030      	str	r0, [r6, #0]
 800bd26:	062e      	lsls	r6, r5, #24
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	d501      	bpl.n	800bd30 <_printf_i+0x1c0>
 800bd2c:	6019      	str	r1, [r3, #0]
 800bd2e:	e002      	b.n	800bd36 <_printf_i+0x1c6>
 800bd30:	0668      	lsls	r0, r5, #25
 800bd32:	d5fb      	bpl.n	800bd2c <_printf_i+0x1bc>
 800bd34:	8019      	strh	r1, [r3, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	4616      	mov	r6, r2
 800bd3c:	e7bc      	b.n	800bcb8 <_printf_i+0x148>
 800bd3e:	6833      	ldr	r3, [r6, #0]
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	6032      	str	r2, [r6, #0]
 800bd44:	681e      	ldr	r6, [r3, #0]
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7f4 fa68 	bl	8000220 <memchr>
 800bd50:	b108      	cbz	r0, 800bd56 <_printf_i+0x1e6>
 800bd52:	1b80      	subs	r0, r0, r6
 800bd54:	6060      	str	r0, [r4, #4]
 800bd56:	6863      	ldr	r3, [r4, #4]
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd60:	e7aa      	b.n	800bcb8 <_printf_i+0x148>
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	4632      	mov	r2, r6
 800bd66:	4649      	mov	r1, r9
 800bd68:	4640      	mov	r0, r8
 800bd6a:	47d0      	blx	sl
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d0ad      	beq.n	800bccc <_printf_i+0x15c>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	079b      	lsls	r3, r3, #30
 800bd74:	d413      	bmi.n	800bd9e <_printf_i+0x22e>
 800bd76:	68e0      	ldr	r0, [r4, #12]
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	4298      	cmp	r0, r3
 800bd7c:	bfb8      	it	lt
 800bd7e:	4618      	movlt	r0, r3
 800bd80:	e7a6      	b.n	800bcd0 <_printf_i+0x160>
 800bd82:	2301      	movs	r3, #1
 800bd84:	4632      	mov	r2, r6
 800bd86:	4649      	mov	r1, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	47d0      	blx	sl
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d09d      	beq.n	800bccc <_printf_i+0x15c>
 800bd90:	3501      	adds	r5, #1
 800bd92:	68e3      	ldr	r3, [r4, #12]
 800bd94:	9903      	ldr	r1, [sp, #12]
 800bd96:	1a5b      	subs	r3, r3, r1
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	dcf2      	bgt.n	800bd82 <_printf_i+0x212>
 800bd9c:	e7eb      	b.n	800bd76 <_printf_i+0x206>
 800bd9e:	2500      	movs	r5, #0
 800bda0:	f104 0619 	add.w	r6, r4, #25
 800bda4:	e7f5      	b.n	800bd92 <_printf_i+0x222>
 800bda6:	bf00      	nop
 800bda8:	0800d6f5 	.word	0x0800d6f5
 800bdac:	0800d706 	.word	0x0800d706

0800bdb0 <__sflush_r>:
 800bdb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb8:	0716      	lsls	r6, r2, #28
 800bdba:	4605      	mov	r5, r0
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	d454      	bmi.n	800be6a <__sflush_r+0xba>
 800bdc0:	684b      	ldr	r3, [r1, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dc02      	bgt.n	800bdcc <__sflush_r+0x1c>
 800bdc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dd48      	ble.n	800be5e <__sflush_r+0xae>
 800bdcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	d045      	beq.n	800be5e <__sflush_r+0xae>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdd8:	682f      	ldr	r7, [r5, #0]
 800bdda:	6a21      	ldr	r1, [r4, #32]
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	d030      	beq.n	800be42 <__sflush_r+0x92>
 800bde0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	0759      	lsls	r1, r3, #29
 800bde6:	d505      	bpl.n	800bdf4 <__sflush_r+0x44>
 800bde8:	6863      	ldr	r3, [r4, #4]
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdee:	b10b      	cbz	r3, 800bdf4 <__sflush_r+0x44>
 800bdf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdf2:	1ad2      	subs	r2, r2, r3
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdf8:	6a21      	ldr	r1, [r4, #32]
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	47b0      	blx	r6
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	d106      	bne.n	800be12 <__sflush_r+0x62>
 800be04:	6829      	ldr	r1, [r5, #0]
 800be06:	291d      	cmp	r1, #29
 800be08:	d82b      	bhi.n	800be62 <__sflush_r+0xb2>
 800be0a:	4a2a      	ldr	r2, [pc, #168]	@ (800beb4 <__sflush_r+0x104>)
 800be0c:	410a      	asrs	r2, r1
 800be0e:	07d6      	lsls	r6, r2, #31
 800be10:	d427      	bmi.n	800be62 <__sflush_r+0xb2>
 800be12:	2200      	movs	r2, #0
 800be14:	6062      	str	r2, [r4, #4]
 800be16:	04d9      	lsls	r1, r3, #19
 800be18:	6922      	ldr	r2, [r4, #16]
 800be1a:	6022      	str	r2, [r4, #0]
 800be1c:	d504      	bpl.n	800be28 <__sflush_r+0x78>
 800be1e:	1c42      	adds	r2, r0, #1
 800be20:	d101      	bne.n	800be26 <__sflush_r+0x76>
 800be22:	682b      	ldr	r3, [r5, #0]
 800be24:	b903      	cbnz	r3, 800be28 <__sflush_r+0x78>
 800be26:	6560      	str	r0, [r4, #84]	@ 0x54
 800be28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be2a:	602f      	str	r7, [r5, #0]
 800be2c:	b1b9      	cbz	r1, 800be5e <__sflush_r+0xae>
 800be2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be32:	4299      	cmp	r1, r3
 800be34:	d002      	beq.n	800be3c <__sflush_r+0x8c>
 800be36:	4628      	mov	r0, r5
 800be38:	f000 fa6c 	bl	800c314 <_free_r>
 800be3c:	2300      	movs	r3, #0
 800be3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be40:	e00d      	b.n	800be5e <__sflush_r+0xae>
 800be42:	2301      	movs	r3, #1
 800be44:	4628      	mov	r0, r5
 800be46:	47b0      	blx	r6
 800be48:	4602      	mov	r2, r0
 800be4a:	1c50      	adds	r0, r2, #1
 800be4c:	d1c9      	bne.n	800bde2 <__sflush_r+0x32>
 800be4e:	682b      	ldr	r3, [r5, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0c6      	beq.n	800bde2 <__sflush_r+0x32>
 800be54:	2b1d      	cmp	r3, #29
 800be56:	d001      	beq.n	800be5c <__sflush_r+0xac>
 800be58:	2b16      	cmp	r3, #22
 800be5a:	d11e      	bne.n	800be9a <__sflush_r+0xea>
 800be5c:	602f      	str	r7, [r5, #0]
 800be5e:	2000      	movs	r0, #0
 800be60:	e022      	b.n	800bea8 <__sflush_r+0xf8>
 800be62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be66:	b21b      	sxth	r3, r3
 800be68:	e01b      	b.n	800bea2 <__sflush_r+0xf2>
 800be6a:	690f      	ldr	r7, [r1, #16]
 800be6c:	2f00      	cmp	r7, #0
 800be6e:	d0f6      	beq.n	800be5e <__sflush_r+0xae>
 800be70:	0793      	lsls	r3, r2, #30
 800be72:	680e      	ldr	r6, [r1, #0]
 800be74:	bf08      	it	eq
 800be76:	694b      	ldreq	r3, [r1, #20]
 800be78:	600f      	str	r7, [r1, #0]
 800be7a:	bf18      	it	ne
 800be7c:	2300      	movne	r3, #0
 800be7e:	eba6 0807 	sub.w	r8, r6, r7
 800be82:	608b      	str	r3, [r1, #8]
 800be84:	f1b8 0f00 	cmp.w	r8, #0
 800be88:	dde9      	ble.n	800be5e <__sflush_r+0xae>
 800be8a:	6a21      	ldr	r1, [r4, #32]
 800be8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be8e:	4643      	mov	r3, r8
 800be90:	463a      	mov	r2, r7
 800be92:	4628      	mov	r0, r5
 800be94:	47b0      	blx	r6
 800be96:	2800      	cmp	r0, #0
 800be98:	dc08      	bgt.n	800beac <__sflush_r+0xfc>
 800be9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bea2:	81a3      	strh	r3, [r4, #12]
 800bea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beac:	4407      	add	r7, r0
 800beae:	eba8 0800 	sub.w	r8, r8, r0
 800beb2:	e7e7      	b.n	800be84 <__sflush_r+0xd4>
 800beb4:	dfbffffe 	.word	0xdfbffffe

0800beb8 <_fflush_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	690b      	ldr	r3, [r1, #16]
 800bebc:	4605      	mov	r5, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	b913      	cbnz	r3, 800bec8 <_fflush_r+0x10>
 800bec2:	2500      	movs	r5, #0
 800bec4:	4628      	mov	r0, r5
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	b118      	cbz	r0, 800bed2 <_fflush_r+0x1a>
 800beca:	6a03      	ldr	r3, [r0, #32]
 800becc:	b90b      	cbnz	r3, 800bed2 <_fflush_r+0x1a>
 800bece:	f7ff f9a7 	bl	800b220 <__sinit>
 800bed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0f3      	beq.n	800bec2 <_fflush_r+0xa>
 800beda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bedc:	07d0      	lsls	r0, r2, #31
 800bede:	d404      	bmi.n	800beea <_fflush_r+0x32>
 800bee0:	0599      	lsls	r1, r3, #22
 800bee2:	d402      	bmi.n	800beea <_fflush_r+0x32>
 800bee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bee6:	f7ff fa8a 	bl	800b3fe <__retarget_lock_acquire_recursive>
 800beea:	4628      	mov	r0, r5
 800beec:	4621      	mov	r1, r4
 800beee:	f7ff ff5f 	bl	800bdb0 <__sflush_r>
 800bef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bef4:	07da      	lsls	r2, r3, #31
 800bef6:	4605      	mov	r5, r0
 800bef8:	d4e4      	bmi.n	800bec4 <_fflush_r+0xc>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	059b      	lsls	r3, r3, #22
 800befe:	d4e1      	bmi.n	800bec4 <_fflush_r+0xc>
 800bf00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf02:	f7ff fa7d 	bl	800b400 <__retarget_lock_release_recursive>
 800bf06:	e7dd      	b.n	800bec4 <_fflush_r+0xc>

0800bf08 <__malloc_lock>:
 800bf08:	4801      	ldr	r0, [pc, #4]	@ (800bf10 <__malloc_lock+0x8>)
 800bf0a:	f7ff ba78 	b.w	800b3fe <__retarget_lock_acquire_recursive>
 800bf0e:	bf00      	nop
 800bf10:	200051e0 	.word	0x200051e0

0800bf14 <__malloc_unlock>:
 800bf14:	4801      	ldr	r0, [pc, #4]	@ (800bf1c <__malloc_unlock+0x8>)
 800bf16:	f7ff ba73 	b.w	800b400 <__retarget_lock_release_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	200051e0 	.word	0x200051e0

0800bf20 <__sread>:
 800bf20:	b510      	push	{r4, lr}
 800bf22:	460c      	mov	r4, r1
 800bf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf28:	f000 f9c0 	bl	800c2ac <_read_r>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	bfab      	itete	ge
 800bf30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf32:	89a3      	ldrhlt	r3, [r4, #12]
 800bf34:	181b      	addge	r3, r3, r0
 800bf36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf3a:	bfac      	ite	ge
 800bf3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf3e:	81a3      	strhlt	r3, [r4, #12]
 800bf40:	bd10      	pop	{r4, pc}

0800bf42 <__swrite>:
 800bf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf46:	461f      	mov	r7, r3
 800bf48:	898b      	ldrh	r3, [r1, #12]
 800bf4a:	05db      	lsls	r3, r3, #23
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	4616      	mov	r6, r2
 800bf52:	d505      	bpl.n	800bf60 <__swrite+0x1e>
 800bf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf58:	2302      	movs	r3, #2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f000 f994 	bl	800c288 <_lseek_r>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	463b      	mov	r3, r7
 800bf70:	4628      	mov	r0, r5
 800bf72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	f000 b9bb 	b.w	800c2f0 <_write_r>

0800bf7a <__sseek>:
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf82:	f000 f981 	bl	800c288 <_lseek_r>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	bf15      	itete	ne
 800bf8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf96:	81a3      	strheq	r3, [r4, #12]
 800bf98:	bf18      	it	ne
 800bf9a:	81a3      	strhne	r3, [r4, #12]
 800bf9c:	bd10      	pop	{r4, pc}

0800bf9e <__sclose>:
 800bf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa2:	f000 b93f 	b.w	800c224 <_close_r>

0800bfa6 <_realloc_r>:
 800bfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfaa:	4680      	mov	r8, r0
 800bfac:	4615      	mov	r5, r2
 800bfae:	460c      	mov	r4, r1
 800bfb0:	b921      	cbnz	r1, 800bfbc <_realloc_r+0x16>
 800bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	f7ff bcec 	b.w	800b994 <_malloc_r>
 800bfbc:	b92a      	cbnz	r2, 800bfca <_realloc_r+0x24>
 800bfbe:	f000 f9a9 	bl	800c314 <_free_r>
 800bfc2:	2400      	movs	r4, #0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfca:	f000 f9ed 	bl	800c3a8 <_malloc_usable_size_r>
 800bfce:	4285      	cmp	r5, r0
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	d802      	bhi.n	800bfda <_realloc_r+0x34>
 800bfd4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bfd8:	d8f4      	bhi.n	800bfc4 <_realloc_r+0x1e>
 800bfda:	4629      	mov	r1, r5
 800bfdc:	4640      	mov	r0, r8
 800bfde:	f7ff fcd9 	bl	800b994 <_malloc_r>
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d0ec      	beq.n	800bfc2 <_realloc_r+0x1c>
 800bfe8:	42b5      	cmp	r5, r6
 800bfea:	462a      	mov	r2, r5
 800bfec:	4621      	mov	r1, r4
 800bfee:	bf28      	it	cs
 800bff0:	4632      	movcs	r2, r6
 800bff2:	f7ff fa06 	bl	800b402 <memcpy>
 800bff6:	4621      	mov	r1, r4
 800bff8:	4640      	mov	r0, r8
 800bffa:	f000 f98b 	bl	800c314 <_free_r>
 800bffe:	463c      	mov	r4, r7
 800c000:	e7e0      	b.n	800bfc4 <_realloc_r+0x1e>

0800c002 <__swbuf_r>:
 800c002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c004:	460e      	mov	r6, r1
 800c006:	4614      	mov	r4, r2
 800c008:	4605      	mov	r5, r0
 800c00a:	b118      	cbz	r0, 800c014 <__swbuf_r+0x12>
 800c00c:	6a03      	ldr	r3, [r0, #32]
 800c00e:	b90b      	cbnz	r3, 800c014 <__swbuf_r+0x12>
 800c010:	f7ff f906 	bl	800b220 <__sinit>
 800c014:	69a3      	ldr	r3, [r4, #24]
 800c016:	60a3      	str	r3, [r4, #8]
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	071a      	lsls	r2, r3, #28
 800c01c:	d501      	bpl.n	800c022 <__swbuf_r+0x20>
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	b943      	cbnz	r3, 800c034 <__swbuf_r+0x32>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f82b 	bl	800c080 <__swsetup_r>
 800c02a:	b118      	cbz	r0, 800c034 <__swbuf_r+0x32>
 800c02c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c030:	4638      	mov	r0, r7
 800c032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	6922      	ldr	r2, [r4, #16]
 800c038:	1a98      	subs	r0, r3, r2
 800c03a:	6963      	ldr	r3, [r4, #20]
 800c03c:	b2f6      	uxtb	r6, r6
 800c03e:	4283      	cmp	r3, r0
 800c040:	4637      	mov	r7, r6
 800c042:	dc05      	bgt.n	800c050 <__swbuf_r+0x4e>
 800c044:	4621      	mov	r1, r4
 800c046:	4628      	mov	r0, r5
 800c048:	f7ff ff36 	bl	800beb8 <_fflush_r>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d1ed      	bne.n	800c02c <__swbuf_r+0x2a>
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	3b01      	subs	r3, #1
 800c054:	60a3      	str	r3, [r4, #8]
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	6022      	str	r2, [r4, #0]
 800c05c:	701e      	strb	r6, [r3, #0]
 800c05e:	6962      	ldr	r2, [r4, #20]
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	429a      	cmp	r2, r3
 800c064:	d004      	beq.n	800c070 <__swbuf_r+0x6e>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	07db      	lsls	r3, r3, #31
 800c06a:	d5e1      	bpl.n	800c030 <__swbuf_r+0x2e>
 800c06c:	2e0a      	cmp	r6, #10
 800c06e:	d1df      	bne.n	800c030 <__swbuf_r+0x2e>
 800c070:	4621      	mov	r1, r4
 800c072:	4628      	mov	r0, r5
 800c074:	f7ff ff20 	bl	800beb8 <_fflush_r>
 800c078:	2800      	cmp	r0, #0
 800c07a:	d0d9      	beq.n	800c030 <__swbuf_r+0x2e>
 800c07c:	e7d6      	b.n	800c02c <__swbuf_r+0x2a>
	...

0800c080 <__swsetup_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4b29      	ldr	r3, [pc, #164]	@ (800c128 <__swsetup_r+0xa8>)
 800c084:	4605      	mov	r5, r0
 800c086:	6818      	ldr	r0, [r3, #0]
 800c088:	460c      	mov	r4, r1
 800c08a:	b118      	cbz	r0, 800c094 <__swsetup_r+0x14>
 800c08c:	6a03      	ldr	r3, [r0, #32]
 800c08e:	b90b      	cbnz	r3, 800c094 <__swsetup_r+0x14>
 800c090:	f7ff f8c6 	bl	800b220 <__sinit>
 800c094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c098:	0719      	lsls	r1, r3, #28
 800c09a:	d422      	bmi.n	800c0e2 <__swsetup_r+0x62>
 800c09c:	06da      	lsls	r2, r3, #27
 800c09e:	d407      	bmi.n	800c0b0 <__swsetup_r+0x30>
 800c0a0:	2209      	movs	r2, #9
 800c0a2:	602a      	str	r2, [r5, #0]
 800c0a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a8:	81a3      	strh	r3, [r4, #12]
 800c0aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0ae:	e033      	b.n	800c118 <__swsetup_r+0x98>
 800c0b0:	0758      	lsls	r0, r3, #29
 800c0b2:	d512      	bpl.n	800c0da <__swsetup_r+0x5a>
 800c0b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0b6:	b141      	cbz	r1, 800c0ca <__swsetup_r+0x4a>
 800c0b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d002      	beq.n	800c0c6 <__swsetup_r+0x46>
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 f927 	bl	800c314 <_free_r>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0d0:	81a3      	strh	r3, [r4, #12]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6063      	str	r3, [r4, #4]
 800c0d6:	6923      	ldr	r3, [r4, #16]
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f043 0308 	orr.w	r3, r3, #8
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	b94b      	cbnz	r3, 800c0fa <__swsetup_r+0x7a>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0f0:	d003      	beq.n	800c0fa <__swsetup_r+0x7a>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f000 f83f 	bl	800c178 <__smakebuf_r>
 800c0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fe:	f013 0201 	ands.w	r2, r3, #1
 800c102:	d00a      	beq.n	800c11a <__swsetup_r+0x9a>
 800c104:	2200      	movs	r2, #0
 800c106:	60a2      	str	r2, [r4, #8]
 800c108:	6962      	ldr	r2, [r4, #20]
 800c10a:	4252      	negs	r2, r2
 800c10c:	61a2      	str	r2, [r4, #24]
 800c10e:	6922      	ldr	r2, [r4, #16]
 800c110:	b942      	cbnz	r2, 800c124 <__swsetup_r+0xa4>
 800c112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c116:	d1c5      	bne.n	800c0a4 <__swsetup_r+0x24>
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	0799      	lsls	r1, r3, #30
 800c11c:	bf58      	it	pl
 800c11e:	6962      	ldrpl	r2, [r4, #20]
 800c120:	60a2      	str	r2, [r4, #8]
 800c122:	e7f4      	b.n	800c10e <__swsetup_r+0x8e>
 800c124:	2000      	movs	r0, #0
 800c126:	e7f7      	b.n	800c118 <__swsetup_r+0x98>
 800c128:	20000040 	.word	0x20000040

0800c12c <__swhatbuf_r>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	460c      	mov	r4, r1
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	2900      	cmp	r1, #0
 800c136:	b096      	sub	sp, #88	@ 0x58
 800c138:	4615      	mov	r5, r2
 800c13a:	461e      	mov	r6, r3
 800c13c:	da0d      	bge.n	800c15a <__swhatbuf_r+0x2e>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c144:	f04f 0100 	mov.w	r1, #0
 800c148:	bf14      	ite	ne
 800c14a:	2340      	movne	r3, #64	@ 0x40
 800c14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c150:	2000      	movs	r0, #0
 800c152:	6031      	str	r1, [r6, #0]
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	b016      	add	sp, #88	@ 0x58
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	466a      	mov	r2, sp
 800c15c:	f000 f872 	bl	800c244 <_fstat_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	dbec      	blt.n	800c13e <__swhatbuf_r+0x12>
 800c164:	9901      	ldr	r1, [sp, #4]
 800c166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c16e:	4259      	negs	r1, r3
 800c170:	4159      	adcs	r1, r3
 800c172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c176:	e7eb      	b.n	800c150 <__swhatbuf_r+0x24>

0800c178 <__smakebuf_r>:
 800c178:	898b      	ldrh	r3, [r1, #12]
 800c17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c17c:	079d      	lsls	r5, r3, #30
 800c17e:	4606      	mov	r6, r0
 800c180:	460c      	mov	r4, r1
 800c182:	d507      	bpl.n	800c194 <__smakebuf_r+0x1c>
 800c184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	2301      	movs	r3, #1
 800c18e:	6163      	str	r3, [r4, #20]
 800c190:	b003      	add	sp, #12
 800c192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c194:	ab01      	add	r3, sp, #4
 800c196:	466a      	mov	r2, sp
 800c198:	f7ff ffc8 	bl	800c12c <__swhatbuf_r>
 800c19c:	9f00      	ldr	r7, [sp, #0]
 800c19e:	4605      	mov	r5, r0
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7ff fbf6 	bl	800b994 <_malloc_r>
 800c1a8:	b948      	cbnz	r0, 800c1be <__smakebuf_r+0x46>
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	059a      	lsls	r2, r3, #22
 800c1b0:	d4ee      	bmi.n	800c190 <__smakebuf_r+0x18>
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	f043 0302 	orr.w	r3, r3, #2
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	e7e2      	b.n	800c184 <__smakebuf_r+0xc>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	6020      	str	r0, [r4, #0]
 800c1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ce:	b15b      	cbz	r3, 800c1e8 <__smakebuf_r+0x70>
 800c1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 f847 	bl	800c268 <_isatty_r>
 800c1da:	b128      	cbz	r0, 800c1e8 <__smakebuf_r+0x70>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f023 0303 	bic.w	r3, r3, #3
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	431d      	orrs	r5, r3
 800c1ec:	81a5      	strh	r5, [r4, #12]
 800c1ee:	e7cf      	b.n	800c190 <__smakebuf_r+0x18>

0800c1f0 <memmove>:
 800c1f0:	4288      	cmp	r0, r1
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	eb01 0402 	add.w	r4, r1, r2
 800c1f8:	d902      	bls.n	800c200 <memmove+0x10>
 800c1fa:	4284      	cmp	r4, r0
 800c1fc:	4623      	mov	r3, r4
 800c1fe:	d807      	bhi.n	800c210 <memmove+0x20>
 800c200:	1e43      	subs	r3, r0, #1
 800c202:	42a1      	cmp	r1, r4
 800c204:	d008      	beq.n	800c218 <memmove+0x28>
 800c206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c20a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c20e:	e7f8      	b.n	800c202 <memmove+0x12>
 800c210:	4402      	add	r2, r0
 800c212:	4601      	mov	r1, r0
 800c214:	428a      	cmp	r2, r1
 800c216:	d100      	bne.n	800c21a <memmove+0x2a>
 800c218:	bd10      	pop	{r4, pc}
 800c21a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c21e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c222:	e7f7      	b.n	800c214 <memmove+0x24>

0800c224 <_close_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d06      	ldr	r5, [pc, #24]	@ (800c240 <_close_r+0x1c>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	f7f6 f951 	bl	80024d6 <_close>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_close_r+0x1a>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_close_r+0x1a>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	200051ec 	.word	0x200051ec

0800c244 <_fstat_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d07      	ldr	r5, [pc, #28]	@ (800c264 <_fstat_r+0x20>)
 800c248:	2300      	movs	r3, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	4611      	mov	r1, r2
 800c250:	602b      	str	r3, [r5, #0]
 800c252:	f7f6 f94c 	bl	80024ee <_fstat>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d102      	bne.n	800c260 <_fstat_r+0x1c>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	b103      	cbz	r3, 800c260 <_fstat_r+0x1c>
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	bd38      	pop	{r3, r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	200051ec 	.word	0x200051ec

0800c268 <_isatty_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d06      	ldr	r5, [pc, #24]	@ (800c284 <_isatty_r+0x1c>)
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f7f6 f94b 	bl	800250e <_isatty>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_isatty_r+0x1a>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_isatty_r+0x1a>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	200051ec 	.word	0x200051ec

0800c288 <_lseek_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	@ (800c2a8 <_lseek_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f7f6 f944 	bl	8002524 <_lseek>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_lseek_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_lseek_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	200051ec 	.word	0x200051ec

0800c2ac <_read_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d07      	ldr	r5, [pc, #28]	@ (800c2cc <_read_r+0x20>)
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	4608      	mov	r0, r1
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	602a      	str	r2, [r5, #0]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f7f6 f8ee 	bl	800249c <_read>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	d102      	bne.n	800c2ca <_read_r+0x1e>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	b103      	cbz	r3, 800c2ca <_read_r+0x1e>
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	200051ec 	.word	0x200051ec

0800c2d0 <_sbrk_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d06      	ldr	r5, [pc, #24]	@ (800c2ec <_sbrk_r+0x1c>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	f7f6 f930 	bl	8002540 <_sbrk>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_sbrk_r+0x1a>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_sbrk_r+0x1a>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	200051ec 	.word	0x200051ec

0800c2f0 <_write_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d07      	ldr	r5, [pc, #28]	@ (800c310 <_write_r+0x20>)
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	602a      	str	r2, [r5, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f7f5 fd0e 	bl	8001d20 <_write>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_write_r+0x1e>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_write_r+0x1e>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	200051ec 	.word	0x200051ec

0800c314 <_free_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	2900      	cmp	r1, #0
 800c31a:	d041      	beq.n	800c3a0 <_free_r+0x8c>
 800c31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c320:	1f0c      	subs	r4, r1, #4
 800c322:	2b00      	cmp	r3, #0
 800c324:	bfb8      	it	lt
 800c326:	18e4      	addlt	r4, r4, r3
 800c328:	f7ff fdee 	bl	800bf08 <__malloc_lock>
 800c32c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a4 <_free_r+0x90>)
 800c32e:	6813      	ldr	r3, [r2, #0]
 800c330:	b933      	cbnz	r3, 800c340 <_free_r+0x2c>
 800c332:	6063      	str	r3, [r4, #4]
 800c334:	6014      	str	r4, [r2, #0]
 800c336:	4628      	mov	r0, r5
 800c338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33c:	f7ff bdea 	b.w	800bf14 <__malloc_unlock>
 800c340:	42a3      	cmp	r3, r4
 800c342:	d908      	bls.n	800c356 <_free_r+0x42>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	1821      	adds	r1, r4, r0
 800c348:	428b      	cmp	r3, r1
 800c34a:	bf01      	itttt	eq
 800c34c:	6819      	ldreq	r1, [r3, #0]
 800c34e:	685b      	ldreq	r3, [r3, #4]
 800c350:	1809      	addeq	r1, r1, r0
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	e7ed      	b.n	800c332 <_free_r+0x1e>
 800c356:	461a      	mov	r2, r3
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	b10b      	cbz	r3, 800c360 <_free_r+0x4c>
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d9fa      	bls.n	800c356 <_free_r+0x42>
 800c360:	6811      	ldr	r1, [r2, #0]
 800c362:	1850      	adds	r0, r2, r1
 800c364:	42a0      	cmp	r0, r4
 800c366:	d10b      	bne.n	800c380 <_free_r+0x6c>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	4401      	add	r1, r0
 800c36c:	1850      	adds	r0, r2, r1
 800c36e:	4283      	cmp	r3, r0
 800c370:	6011      	str	r1, [r2, #0]
 800c372:	d1e0      	bne.n	800c336 <_free_r+0x22>
 800c374:	6818      	ldr	r0, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	6053      	str	r3, [r2, #4]
 800c37a:	4408      	add	r0, r1
 800c37c:	6010      	str	r0, [r2, #0]
 800c37e:	e7da      	b.n	800c336 <_free_r+0x22>
 800c380:	d902      	bls.n	800c388 <_free_r+0x74>
 800c382:	230c      	movs	r3, #12
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	e7d6      	b.n	800c336 <_free_r+0x22>
 800c388:	6820      	ldr	r0, [r4, #0]
 800c38a:	1821      	adds	r1, r4, r0
 800c38c:	428b      	cmp	r3, r1
 800c38e:	bf04      	itt	eq
 800c390:	6819      	ldreq	r1, [r3, #0]
 800c392:	685b      	ldreq	r3, [r3, #4]
 800c394:	6063      	str	r3, [r4, #4]
 800c396:	bf04      	itt	eq
 800c398:	1809      	addeq	r1, r1, r0
 800c39a:	6021      	streq	r1, [r4, #0]
 800c39c:	6054      	str	r4, [r2, #4]
 800c39e:	e7ca      	b.n	800c336 <_free_r+0x22>
 800c3a0:	bd38      	pop	{r3, r4, r5, pc}
 800c3a2:	bf00      	nop
 800c3a4:	200051e8 	.word	0x200051e8

0800c3a8 <_malloc_usable_size_r>:
 800c3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ac:	1f18      	subs	r0, r3, #4
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	bfbc      	itt	lt
 800c3b2:	580b      	ldrlt	r3, [r1, r0]
 800c3b4:	18c0      	addlt	r0, r0, r3
 800c3b6:	4770      	bx	lr

0800c3b8 <_init>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	bf00      	nop
 800c3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3be:	bc08      	pop	{r3}
 800c3c0:	469e      	mov	lr, r3
 800c3c2:	4770      	bx	lr

0800c3c4 <_fini>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr
