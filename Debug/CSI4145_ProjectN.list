
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000131c  0800b130  0800b130  0000c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c44c  0800c44c  0000e090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c44c  0800c44c  0000d44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c454  0800c454  0000e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c454  0800c454  0000d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c458  0800c458  0000d458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800c45c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005104  20000090  0800c4ec  0000e090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005194  0800c4ec  0000e194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204ba  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d2f  00000000  00000000  0002e57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  000332b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000157a  00000000  00000000  00034e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002831f  00000000  00000000  000363ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b94  00000000  00000000  0005e6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed007  00000000  00000000  0008127d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e284  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c90  00000000  00000000  0016e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00175f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b118 	.word	0x0800b118

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800b118 	.word	0x0800b118

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0xa0>)
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000612:	f001 fdc3 	bl	800219c <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 fe54 	bl	80012c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000628:	2305      	movs	r3, #5
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000632:	f001 ff95 	bl	8002560 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 fe44 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000ac 	.word	0x200000ac
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_ADC_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d127      	bne.n	80006c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <HAL_ADC_MspInit+0x84>)
 80006c2:	f002 faef 	bl	8002ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000

080006dc <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <send_AT_command+0x48>)
 80006ec:	f009 fc7e 	bl	8009fec <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <send_AT_command+0x4c>)
 8000702:	f005 f94d 	bl	80059a0 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f000 f811 	bl	8000730 <waitFor>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <send_AT_command+0x50>)
 8000718:	f009 fc68 	bl	8009fec <iprintf>
    }
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	0800b130 	.word	0x0800b130
 8000728:	20000664 	.word	0x20000664
 800072c:	0800b13c 	.word	0x0800b13c

08000730 <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b6      	sub	sp, #216	@ 0xd8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	22c4      	movs	r2, #196	@ 0xc4
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f009 fcd6 	bl	800a0f8 <memset>
    uint32_t startTick = HAL_GetTick();
 800074c:	f001 fcf6 	bl	800213c <HAL_GetTick>
 8000750:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 800075a:	e044      	b.n	80007e6 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 800075c:	f107 0208 	add.w	r2, r7, #8
 8000760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000764:	18d1      	adds	r1, r2, r3
 8000766:	2364      	movs	r3, #100	@ 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	4828      	ldr	r0, [pc, #160]	@ (800080c <waitFor+0xdc>)
 800076c:	f005 f9a3 	bl	8005ab6 <HAL_UART_Receive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d137      	bne.n	80007e6 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d007      	beq.n	8000796 <waitFor+0x66>
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0d      	cmp	r3, #13
 8000794:	d11b      	bne.n	80007ce <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800079e:	4413      	add	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 fc8e 	bl	800a0cc <strstr>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4814      	ldr	r0, [pc, #80]	@ (8000810 <waitFor+0xe0>)
 80007be:	f009 fc15 	bl	8009fec <iprintf>
                    return 1;  // Found the expected response
 80007c2:	2301      	movs	r3, #1
 80007c4:	e01d      	b.n	8000802 <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80007cc:	e00b      	b.n	80007e6 <waitFor+0xb6>
            } else {
                index++;
 80007ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 80007d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007dc:	2bc6      	cmp	r3, #198	@ 0xc6
 80007de:	d902      	bls.n	80007e6 <waitFor+0xb6>
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 80007e6:	f001 fca9 	bl	800213c <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8b1      	bhi.n	800075c <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <waitFor+0xe4>)
 80007fc:	f009 fbf6 	bl	8009fec <iprintf>
    return 0;  // Timeout reached without expected response
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	37d8      	adds	r7, #216	@ 0xd8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000664 	.word	0x20000664
 8000810:	0800b160 	.word	0x0800b160
 8000814:	0800b174 	.word	0x0800b174

08000818 <ESP_Server_Init>:
void ESP_Server_Init(const char *ssid, const char *password) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	@ 0x70
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
    char cmdBuffer[100];  // Buffer for AT commands

    printf("RESETTING ESP8266...\n");
 8000822:	4821      	ldr	r0, [pc, #132]	@ (80008a8 <ESP_Server_Init+0x90>)
 8000824:	f009 fc4a 	bl	800a0bc <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8000828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800082c:	491f      	ldr	r1, [pc, #124]	@ (80008ac <ESP_Server_Init+0x94>)
 800082e:	4820      	ldr	r0, [pc, #128]	@ (80008b0 <ESP_Server_Init+0x98>)
 8000830:	f7ff ff54 	bl	80006dc <send_AT_command>

    printf("Testing AT Command...\n");
 8000834:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <ESP_Server_Init+0x9c>)
 8000836:	f009 fc41 	bl	800a0bc <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 800083a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800083e:	491b      	ldr	r1, [pc, #108]	@ (80008ac <ESP_Server_Init+0x94>)
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <ESP_Server_Init+0xa0>)
 8000842:	f7ff ff4b 	bl	80006dc <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8000846:	481d      	ldr	r0, [pc, #116]	@ (80008bc <ESP_Server_Init+0xa4>)
 8000848:	f009 fc38 	bl	800a0bc <puts>
    sprintf(cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 800084c:	f107 000c 	add.w	r0, r7, #12
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	491a      	ldr	r1, [pc, #104]	@ (80008c0 <ESP_Server_Init+0xa8>)
 8000856:	f009 fae7 	bl	8009e28 <siprintf>
    send_AT_command(cmdBuffer, "WIFI CONNECTED", 15000);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000862:	4918      	ldr	r1, [pc, #96]	@ (80008c4 <ESP_Server_Init+0xac>)
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff39 	bl	80006dc <send_AT_command>

    printf("Checking assigned IP address...\n");
 800086a:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <ESP_Server_Init+0xb0>)
 800086c:	f009 fc26 	bl	800a0bc <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 8000870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000874:	4915      	ldr	r1, [pc, #84]	@ (80008cc <ESP_Server_Init+0xb4>)
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <ESP_Server_Init+0xb8>)
 8000878:	f7ff ff30 	bl	80006dc <send_AT_command>

    printf("Enabling single connections...\n");
 800087c:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <ESP_Server_Init+0xbc>)
 800087e:	f009 fc1d 	bl	800a0bc <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 8000882:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000886:	4909      	ldr	r1, [pc, #36]	@ (80008ac <ESP_Server_Init+0x94>)
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <ESP_Server_Init+0xc0>)
 800088a:	f7ff ff27 	bl	80006dc <send_AT_command>

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <ESP_Server_Init+0xc4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <ESP_Server_Init+0xc4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f042 0220 	orr.w	r2, r2, #32
 800089c:	60da      	str	r2, [r3, #12]
}
 800089e:	bf00      	nop
 80008a0:	3770      	adds	r7, #112	@ 0x70
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	0800b190 	.word	0x0800b190
 80008ac:	0800b1a8 	.word	0x0800b1a8
 80008b0:	0800b1ac 	.word	0x0800b1ac
 80008b4:	0800b1b8 	.word	0x0800b1b8
 80008b8:	0800b1d0 	.word	0x0800b1d0
 80008bc:	0800b1d8 	.word	0x0800b1d8
 80008c0:	0800b1f0 	.word	0x0800b1f0
 80008c4:	0800b208 	.word	0x0800b208
 80008c8:	0800b218 	.word	0x0800b218
 80008cc:	0800b238 	.word	0x0800b238
 80008d0:	0800b240 	.word	0x0800b240
 80008d4:	0800b24c 	.word	0x0800b24c
 80008d8:	0800b26c 	.word	0x0800b26c
 80008dc:	20000664 	.word	0x20000664

080008e0 <sendHTMLToLocalServer>:

void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80008e6:	af02      	add	r7, sp, #8
 80008e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80008f0:	6018      	str	r0, [r3, #0]
 80008f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008f6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80008fa:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80008fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000900:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8000904:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	492b      	ldr	r1, [pc, #172]	@ (80009b8 <sendHTMLToLocalServer+0xd8>)
 800090c:	f009 fa8c 	bl	8009e28 <siprintf>
    send_AT_command(cmdBuffer, "OK", 2000);
 8000910:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000914:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000918:	4928      	ldr	r1, [pc, #160]	@ (80009bc <sendHTMLToLocalServer+0xdc>)
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fede 	bl	80006dc <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 8000920:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000924:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	f7ff fc71 	bl	8000210 <strlen>
 800092e:	4601      	mov	r1, r0
 8000930:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000934:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8000938:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800093c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000940:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	460b      	mov	r3, r1
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	491c      	ldr	r1, [pc, #112]	@ (80009c0 <sendHTMLToLocalServer+0xe0>)
 800094e:	f009 fa6b 	bl	8009e28 <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 8000952:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc5a 	bl	8000210 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 800096a:	4916      	ldr	r1, [pc, #88]	@ (80009c4 <sendHTMLToLocalServer+0xe4>)
 800096c:	4618      	mov	r0, r3
 800096e:	f009 fa5b 	bl	8009e28 <siprintf>
    send_AT_command(responseBuffer, ">", 500);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800097a:	4913      	ldr	r1, [pc, #76]	@ (80009c8 <sendHTMLToLocalServer+0xe8>)
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fead 	bl	80006dc <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 1000);
 8000982:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800098a:	4910      	ldr	r1, [pc, #64]	@ (80009cc <sendHTMLToLocalServer+0xec>)
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fea5 	bl	80006dc <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 500);
 8000992:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000996:	4909      	ldr	r1, [pc, #36]	@ (80009bc <sendHTMLToLocalServer+0xdc>)
 8000998:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <sendHTMLToLocalServer+0xf0>)
 800099a:	f7ff fe9f 	bl	80006dc <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 800099e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80009a2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <sendHTMLToLocalServer+0xf4>)
 80009aa:	f009 fb1f 	bl	8009fec <iprintf>
}
 80009ae:	bf00      	nop
 80009b0:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	0800b27c 	.word	0x0800b27c
 80009bc:	0800b1a8 	.word	0x0800b1a8
 80009c0:	0800b29c 	.word	0x0800b29c
 80009c4:	0800b2f8 	.word	0x0800b2f8
 80009c8:	0800b308 	.word	0x0800b308
 80009cc:	0800b30c 	.word	0x0800b30c
 80009d0:	0800b314 	.word	0x0800b314
 80009d4:	0800b324 	.word	0x0800b324

080009d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <MX_FREERTOS_Init+0x18>)
 80009de:	2100      	movs	r1, #0
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_FREERTOS_Init+0x1c>)
 80009e2:	f006 f8b3 	bl	8006b4c <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a03      	ldr	r2, [pc, #12]	@ (80009f8 <MX_FREERTOS_Init+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	0800c288 	.word	0x0800c288
 80009f4:	080009fd 	.word	0x080009fd
 80009f8:	200000f4 	.word	0x200000f4

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f006 f933 	bl	8006c70 <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <StartDefaultTask+0x8>

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b3d      	ldr	r3, [pc, #244]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b3a      	ldr	r3, [pc, #232]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a35      	ldr	r2, [pc, #212]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b33      	ldr	r3, [pc, #204]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a2e      	ldr	r2, [pc, #184]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|System_state_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2160      	movs	r1, #96	@ 0x60
 8000a96:	4822      	ldr	r0, [pc, #136]	@ (8000b20 <MX_GPIO_Init+0x114>)
 8000a98:	f002 fab0 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	4820      	ldr	r0, [pc, #128]	@ (8000b24 <MX_GPIO_Init+0x118>)
 8000aa2:	f002 faab 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	481a      	ldr	r0, [pc, #104]	@ (8000b28 <MX_GPIO_Init+0x11c>)
 8000abe:	f002 f8f1 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|System_state_Pin;
 8000ac2:	2360      	movs	r3, #96	@ 0x60
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <MX_GPIO_Init+0x114>)
 8000ada:	f002 f8e3 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = control_System_Pin;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(control_System_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0x11c>)
 8000af2:	f002 f8d7 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 8000af6:	2303      	movs	r3, #3
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_GPIO_Init+0x118>)
 8000b0e:	f002 f8c9 	bl	8002ca4 <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800

08000b2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f002 fa61 	bl	8003030 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fba8 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000f8 	.word	0x200000f8
 8000b80:	40005400 	.word	0x40005400
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_I2C_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc6:	23c0      	movs	r3, #192	@ 0xc0
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <HAL_I2C_MspInit+0x8c>)
 8000be2:	f002 f85f 	bl	8002ca4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000c1c:	f001 fa58 	bl	80020d0 <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 8000c20:	f000 f8d2 	bl	8000dc8 <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 8000c24:	f7ff fef2 	bl	8000a0c <MX_GPIO_Init>
MX_USART2_UART_Init();
 8000c28:	f001 f97a 	bl	8001f20 <MX_USART2_UART_Init>
MX_USART1_UART_Init();
 8000c2c:	f001 f94e 	bl	8001ecc <MX_USART1_UART_Init>
MX_I2C1_Init();
 8000c30:	f7ff ff7c 	bl	8000b2c <MX_I2C1_Init>
MX_ADC1_Init();
 8000c34:	f7ff fcbc 	bl	80005b0 <MX_ADC1_Init>
MX_TIM2_Init();
 8000c38:	f001 f83c 	bl	8001cb4 <MX_TIM2_Init>
MX_TIM1_Init();
 8000c3c:	f000 ff98 	bl	8001b70 <MX_TIM1_Init>
/* USER CODE BEGIN 2 */
SSD1306_Init(); // Initialize OLED display
 8000c40:	f000 fb5e 	bl	8001300 <SSD1306_Init>
SSD1306_Clear(); // Clear the display
 8000c44:	f000 fd7f 	bl	8001746 <SSD1306_Clear>
SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 8000c48:	210a      	movs	r1, #10
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fcc2 	bl	80015d4 <SSD1306_GotoXY>
SSD1306_Puts("Nope", &Font_11x18, 1); // Display simple message
 8000c50:	2201      	movs	r2, #1
 8000c52:	4939      	ldr	r1, [pc, #228]	@ (8000d38 <main+0x120>)
 8000c54:	4839      	ldr	r0, [pc, #228]	@ (8000d3c <main+0x124>)
 8000c56:	f000 fd51 	bl	80016fc <SSD1306_Puts>
SSD1306_UpdateScreen(); // Update the screen
 8000c5a:	f000 fc15 	bl	8001488 <SSD1306_UpdateScreen>
// test_Laser();
// test_Buzzer();
// test_LED();
// test_Servo();
// test_ESP8266();
ESP_Server_Init(username, pwd);
 8000c5e:	4b38      	ldr	r3, [pc, #224]	@ (8000d40 <main+0x128>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a38      	ldr	r2, [pc, #224]	@ (8000d44 <main+0x12c>)
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdd5 	bl	8000818 <ESP_Server_Init>

sendHTMLToLocalServer(localIP, regularHTML);
 8000c6e:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <main+0x130>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a36      	ldr	r2, [pc, #216]	@ (8000d4c <main+0x134>)
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fe31 	bl	80008e0 <sendHTMLToLocalServer>
systemStateMutex = osMutexNew(&systemStateMutex_attributes);
 8000c7e:	4834      	ldr	r0, [pc, #208]	@ (8000d50 <main+0x138>)
 8000c80:	f006 f811 	bl	8006ca6 <osMutexNew>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a33      	ldr	r2, [pc, #204]	@ (8000d54 <main+0x13c>)
 8000c88:	6013      	str	r3, [r2, #0]
if (systemStateMutex == NULL) {
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <main+0x13c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <main+0x80>
    printf("Failed to create system state mutex\n");
 8000c92:	4831      	ldr	r0, [pc, #196]	@ (8000d58 <main+0x140>)
 8000c94:	f009 fa12 	bl	800a0bc <puts>
}
// test_Button();
/* USER CODE END 2 */
/* Init scheduler */
osKernelInitialize();
 8000c98:	f005 ff0e 	bl	8006ab8 <osKernelInitialize>
/* Call init function for freertos objects (in freertos.c) */
MX_FREERTOS_Init();
 8000c9c:	f7ff fe9c 	bl	80009d8 <MX_FREERTOS_Init>
TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 8000ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8000d5c <main+0x144>)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	482e      	ldr	r0, [pc, #184]	@ (8000d60 <main+0x148>)
 8000ca6:	f005 ff51 	bl	8006b4c <osThreadNew>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a2d      	ldr	r2, [pc, #180]	@ (8000d64 <main+0x14c>)
 8000cae:	6013      	str	r3, [r2, #0]
TaskSystemButtonHandle = osThreadNew(StartTaskSystemButton, NULL, &TaskSystemButton_attributes);
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8000d68 <main+0x150>)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	482d      	ldr	r0, [pc, #180]	@ (8000d6c <main+0x154>)
 8000cb6:	f005 ff49 	bl	8006b4c <osThreadNew>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8000d70 <main+0x158>)
 8000cbe:	6013      	str	r3, [r2, #0]
TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 8000cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8000d74 <main+0x15c>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <main+0x160>)
 8000cc6:	f005 ff41 	bl	8006b4c <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <main+0x164>)
 8000cce:	6013      	str	r3, [r2, #0]
//laser
TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <main+0x168>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	482b      	ldr	r0, [pc, #172]	@ (8000d84 <main+0x16c>)
 8000cd6:	f005 ff39 	bl	8006b4c <osThreadNew>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8000d88 <main+0x170>)
 8000cde:	6013      	str	r3, [r2, #0]
TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d8c <main+0x174>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	482a      	ldr	r0, [pc, #168]	@ (8000d90 <main+0x178>)
 8000ce6:	f005 ff31 	bl	8006b4c <osThreadNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a29      	ldr	r2, [pc, #164]	@ (8000d94 <main+0x17c>)
 8000cee:	6013      	str	r3, [r2, #0]
TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 8000cf0:	4a29      	ldr	r2, [pc, #164]	@ (8000d98 <main+0x180>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <main+0x184>)
 8000cf6:	f005 ff29 	bl	8006b4c <osThreadNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a28      	ldr	r2, [pc, #160]	@ (8000da0 <main+0x188>)
 8000cfe:	6013      	str	r3, [r2, #0]
TaskLedSystemHandle = osThreadNew(StartTaskSystemLed, NULL, &StartTaskSystemLed_attributes);
 8000d00:	4a28      	ldr	r2, [pc, #160]	@ (8000da4 <main+0x18c>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4828      	ldr	r0, [pc, #160]	@ (8000da8 <main+0x190>)
 8000d06:	f005 ff21 	bl	8006b4c <osThreadNew>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a27      	ldr	r2, [pc, #156]	@ (8000dac <main+0x194>)
 8000d0e:	6013      	str	r3, [r2, #0]
TaskLaserHandle = osThreadNew(StartTaskLaser, NULL, &StartTaskLaser_attributes);
 8000d10:	4a27      	ldr	r2, [pc, #156]	@ (8000db0 <main+0x198>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4827      	ldr	r0, [pc, #156]	@ (8000db4 <main+0x19c>)
 8000d16:	f005 ff19 	bl	8006b4c <osThreadNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <main+0x1a0>)
 8000d1e:	6013      	str	r3, [r2, #0]
TaskUpdateWebHandle = osThreadNew(StartTaskUpdateWeb, NULL, &StartTaskUpdateWeb_attributes);
 8000d20:	4a26      	ldr	r2, [pc, #152]	@ (8000dbc <main+0x1a4>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4826      	ldr	r0, [pc, #152]	@ (8000dc0 <main+0x1a8>)
 8000d26:	f005 ff11 	bl	8006b4c <osThreadNew>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a25      	ldr	r2, [pc, #148]	@ (8000dc4 <main+0x1ac>)
 8000d2e:	6013      	str	r3, [r2, #0]
/* Start scheduler */
osKernelStart();
 8000d30:	f005 fee6 	bl	8006b00 <osKernelStart>
/* We should never get here as control is now taken by the scheduler */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <main+0x11c>
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	0800b4a4 	.word	0x0800b4a4
 8000d40:	20000020 	.word	0x20000020
 8000d44:	2000001c 	.word	0x2000001c
 8000d48:	20000018 	.word	0x20000018
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	0800c3f0 	.word	0x0800c3f0
 8000d54:	2000017c 	.word	0x2000017c
 8000d58:	0800b4ac 	.word	0x0800b4ac
 8000d5c:	0800c2ac 	.word	0x0800c2ac
 8000d60:	08000ec9 	.word	0x08000ec9
 8000d64:	20000158 	.word	0x20000158
 8000d68:	0800c2d0 	.word	0x0800c2d0
 8000d6c:	08001025 	.word	0x08001025
 8000d70:	2000015c 	.word	0x2000015c
 8000d74:	0800c2f4 	.word	0x0800c2f4
 8000d78:	080010a5 	.word	0x080010a5
 8000d7c:	20000160 	.word	0x20000160
 8000d80:	0800c318 	.word	0x0800c318
 8000d84:	08001179 	.word	0x08001179
 8000d88:	20000164 	.word	0x20000164
 8000d8c:	0800c33c 	.word	0x0800c33c
 8000d90:	080011b9 	.word	0x080011b9
 8000d94:	20000168 	.word	0x20000168
 8000d98:	0800c360 	.word	0x0800c360
 8000d9c:	08001221 	.word	0x08001221
 8000da0:	2000016c 	.word	0x2000016c
 8000da4:	0800c384 	.word	0x0800c384
 8000da8:	080011e9 	.word	0x080011e9
 8000dac:	20000170 	.word	0x20000170
 8000db0:	0800c3a8 	.word	0x0800c3a8
 8000db4:	08001141 	.word	0x08001141
 8000db8:	20000174 	.word	0x20000174
 8000dbc:	0800c3cc 	.word	0x0800c3cc
 8000dc0:	08000f1d 	.word	0x08000f1d
 8000dc4:	20000178 	.word	0x20000178

08000dc8 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	@ 0x50
 8000dcc:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2234      	movs	r2, #52	@ 0x34
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f009 f98e 	bl	800a0f8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <SystemClock_Config+0xd4>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a29      	ldr	r2, [pc, #164]	@ (8000e9c <SystemClock_Config+0xd4>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <SystemClock_Config+0xd4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <SystemClock_Config+0xd8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e14:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <SystemClock_Config+0xd8>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <SystemClock_Config+0xd8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2310      	movs	r3, #16
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e34:	2302      	movs	r3, #2
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 16;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 336;
 8000e40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e44:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e46:	2304      	movs	r3, #4
 8000e48:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fa32 	bl	80042c0 <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x9e>
{
  Error_Handler();
 8000e62:	f000 fa31 	bl	80012c8 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e66:	230f      	movs	r3, #15
 8000e68:	60bb      	str	r3, [r7, #8]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e76:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fea0 	bl	8003bc8 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xca>
{
  Error_Handler();
 8000e8e:	f000 fa1b 	bl	80012c8 <Error_Handler>
}
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	@ 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */
/* USER CODE END Callback 0 */
if (htim->Instance == TIM6) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x16>
  HAL_IncTick();
 8000eb6:	f001 f92d 	bl	8002114 <HAL_IncTick>
}
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40001000 	.word	0x40001000

08000ec8 <StartTaskButton>:
void StartTaskButton(void *argument) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8000ed0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed4:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <StartTaskButton+0x48>)
 8000ed6:	f002 f879 	bl	8002fcc <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f7      	bne.n	8000ed0 <StartTaskButton+0x8>
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <StartTaskButton+0x4c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d1f3      	bne.n	8000ed0 <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 8000ee8:	2032      	movs	r0, #50	@ 0x32
 8000eea:	f001 f933 	bl	8002154 <HAL_Delay>
			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <StartTaskButton+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET);
 8000ef4:	bf00      	nop
 8000ef6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <StartTaskButton+0x48>)
 8000efc:	f002 f866 	bl	8002fcc <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f7      	beq.n	8000ef6 <StartTaskButton+0x2e>
			HAL_Delay(50); // Prevent multiple triggers
 8000f06:	2032      	movs	r0, #50	@ 0x32
 8000f08:	f001 f924 	bl	8002154 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8000f0c:	e7e0      	b.n	8000ed0 <StartTaskButton+0x8>
 8000f0e:	bf00      	nop
 8000f10:	40020800 	.word	0x40020800
 8000f14:	20000150 	.word	0x20000150
 8000f18:	2000014c 	.word	0x2000014c

08000f1c <StartTaskUpdateWeb>:
		}
	}
}

void StartTaskUpdateWeb(void *argument) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    int prev_alarm_state = ALARM_OFF;  // Track previous state && prev_alarm_state == ALARM_OFF
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
    int prev_system_state = SYSTEM_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]

    for (;;) {
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8000f2c:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4835      	ldr	r0, [pc, #212]	@ (800100c <StartTaskUpdateWeb+0xf0>)
 8000f36:	f009 f859 	bl	8009fec <iprintf>

        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8000f3a:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10b      	bne.n	8000f5a <StartTaskUpdateWeb+0x3e>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d108      	bne.n	8000f5a <StartTaskUpdateWeb+0x3e>
            // Alarm just turned ON
            sendHTMLToLocalServer(localIP, intrusionHTML);
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <StartTaskUpdateWeb+0xf4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a31      	ldr	r2, [pc, #196]	@ (8001014 <StartTaskUpdateWeb+0xf8>)
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fcc4 	bl	80008e0 <sendHTMLToLocalServer>
        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8000f58:	e04a      	b.n	8000ff0 <StartTaskUpdateWeb+0xd4>
        }
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <StartTaskUpdateWeb+0x66>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10c      	bne.n	8000f82 <StartTaskUpdateWeb+0x66>
 8000f68:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <StartTaskUpdateWeb+0xfc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d108      	bne.n	8000f82 <StartTaskUpdateWeb+0x66>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <StartTaskUpdateWeb+0xf4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a29      	ldr	r2, [pc, #164]	@ (800101c <StartTaskUpdateWeb+0x100>)
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fcb0 	bl	80008e0 <sendHTMLToLocalServer>
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8000f80:	e036      	b.n	8000ff0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10f      	bne.n	8000faa <StartTaskUpdateWeb+0x8e>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d10c      	bne.n	8000faa <StartTaskUpdateWeb+0x8e>
 8000f90:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <StartTaskUpdateWeb+0xfc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d108      	bne.n	8000faa <StartTaskUpdateWeb+0x8e>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <StartTaskUpdateWeb+0xf4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <StartTaskUpdateWeb+0x100>)
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fc9c 	bl	80008e0 <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8000fa8:	e022      	b.n	8000ff0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10b      	bne.n	8000fca <StartTaskUpdateWeb+0xae>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d108      	bne.n	8000fca <StartTaskUpdateWeb+0xae>
        	sendHTMLToLocalServer(localIP, regularHTML);
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <StartTaskUpdateWeb+0xf4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a18      	ldr	r2, [pc, #96]	@ (8001020 <StartTaskUpdateWeb+0x104>)
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fc8c 	bl	80008e0 <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 8000fc8:	e012      	b.n	8000ff0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state == SYSTEM_OFF && system_state== SYSTEM_ON){
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10e      	bne.n	8000ff0 <StartTaskUpdateWeb+0xd4>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10b      	bne.n	8000ff0 <StartTaskUpdateWeb+0xd4>
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <StartTaskUpdateWeb+0xfc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <StartTaskUpdateWeb+0xd4>
        	sendHTMLToLocalServer(localIP, regularHTML);
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <StartTaskUpdateWeb+0xf4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <StartTaskUpdateWeb+0x104>)
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fc78 	bl	80008e0 <sendHTMLToLocalServer>
        }

        // Update previous state
        prev_alarm_state = alarm_state;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <StartTaskUpdateWeb+0xec>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
        prev_system_state = system_state;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <StartTaskUpdateWeb+0xfc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60bb      	str	r3, [r7, #8]

        osDelay(1000);  // Delay before checking again
 8000ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001000:	f005 fe36 	bl	8006c70 <osDelay>
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8001004:	e792      	b.n	8000f2c <StartTaskUpdateWeb+0x10>
 8001006:	bf00      	nop
 8001008:	2000014c 	.word	0x2000014c
 800100c:	0800b4d0 	.word	0x0800b4d0
 8001010:	20000018 	.word	0x20000018
 8001014:	2000000c 	.word	0x2000000c
 8001018:	20000150 	.word	0x20000150
 800101c:	20000014 	.word	0x20000014
 8001020:	20000010 	.word	0x20000010

08001024 <StartTaskSystemButton>:
    }
}

void StartTaskSystemButton(void *argument) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
   for (;;) {
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 800102c:	2110      	movs	r1, #16
 800102e:	4819      	ldr	r0, [pc, #100]	@ (8001094 <StartTaskSystemButton+0x70>)
 8001030:	f001 ffcc 	bl	8002fcc <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f8      	bne.n	800102c <StartTaskSystemButton+0x8>
           HAL_Delay(50); // Debounce delay
 800103a:	2032      	movs	r0, #50	@ 0x32
 800103c:	f001 f88a 	bl	8002154 <HAL_Delay>
           osMutexAcquire(systemStateMutex, osWaitForever); // Lock mutex
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <StartTaskSystemButton+0x74>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001048:	4618      	mov	r0, r3
 800104a:	f005 feb2 	bl	8006db2 <osMutexAcquire>
           system_state = !system_state;
 800104e:	4b13      	ldr	r3, [pc, #76]	@ (800109c <StartTaskSystemButton+0x78>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf0c      	ite	eq
 8001056:	2301      	moveq	r3, #1
 8001058:	2300      	movne	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <StartTaskSystemButton+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
           if (system_state == SYSTEM_OFF){
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <StartTaskSystemButton+0x78>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <StartTaskSystemButton+0x4c>
               alarm_state = ALARM_OFF;
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <StartTaskSystemButton+0x7c>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
           }
           osMutexRelease(systemStateMutex); // Release mutex
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <StartTaskSystemButton+0x74>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f005 fee7 	bl	8006e48 <osMutexRelease>
           // Wait for button release
           while (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET);
 800107a:	bf00      	nop
 800107c:	2110      	movs	r1, #16
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <StartTaskSystemButton+0x70>)
 8001080:	f001 ffa4 	bl	8002fcc <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f8      	beq.n	800107c <StartTaskSystemButton+0x58>
           HAL_Delay(50); // Prevent multiple triggers
 800108a:	2032      	movs	r0, #50	@ 0x32
 800108c:	f001 f862 	bl	8002154 <HAL_Delay>
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001090:	e7cc      	b.n	800102c <StartTaskSystemButton+0x8>
 8001092:	bf00      	nop
 8001094:	40020800 	.word	0x40020800
 8001098:	2000017c 	.word	0x2000017c
 800109c:	20000150 	.word	0x20000150
 80010a0:	2000014c 	.word	0x2000014c

080010a4 <StartTaskLDR>:
       }
   }
}
void StartTaskLDR(void *argument) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
   int local_system_state = SYSTEM_OFF;  // Track the last known state
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
   for (;;) {
       // Acquire mutex before reading system_state
       osMutexAcquire(systemStateMutex, osWaitForever);
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <StartTaskLDR+0x88>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 fe7a 	bl	8006db2 <osMutexAcquire>
       int current_system_state = system_state;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <StartTaskLDR+0x8c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
       osMutexRelease(systemStateMutex);
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <StartTaskLDR+0x88>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 febd 	bl	8006e48 <osMutexRelease>
       // Check if system just turned ON
       if (current_system_state == SYSTEM_ON && local_system_state == SYSTEM_OFF) {
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d106      	bne.n	80010e2 <StartTaskLDR+0x3e>
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <StartTaskLDR+0x3e>
           osDelay(2000);  // Delay before first LDR reading
 80010da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010de:	f005 fdc7 	bl	8006c70 <osDelay>
       }
       // Update local state
       local_system_state = current_system_state;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	617b      	str	r3, [r7, #20]
       if (current_system_state == SYSTEM_ON) {
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d119      	bne.n	8001120 <StartTaskLDR+0x7c>
           uint32_t adcValue;
           HAL_ADC_Start(&hadc1);
 80010ec:	4811      	ldr	r0, [pc, #68]	@ (8001134 <StartTaskLDR+0x90>)
 80010ee:	f001 f899 	bl	8002224 <HAL_ADC_Start>
           HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f6:	480f      	ldr	r0, [pc, #60]	@ (8001134 <StartTaskLDR+0x90>)
 80010f8:	f001 f999 	bl	800242e <HAL_ADC_PollForConversion>
           adcValue = HAL_ADC_GetValue(&hadc1);
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <StartTaskLDR+0x90>)
 80010fe:	f001 fa21 	bl	8002544 <HAL_ADC_GetValue>
 8001102:	60f8      	str	r0, [r7, #12]
           HAL_ADC_Stop(&hadc1);
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <StartTaskLDR+0x90>)
 8001106:	f001 f95f 	bl	80023c8 <HAL_ADC_Stop>
           light_value = adcValue;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <StartTaskLDR+0x94>)
 800110e:	6013      	str	r3, [r2, #0]
           if (adcValue < 1500) {
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001116:	4293      	cmp	r3, r2
 8001118:	d802      	bhi.n	8001120 <StartTaskLDR+0x7c>
               alarm_state = ALARM_ON;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <StartTaskLDR+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

           }
       }
       osDelay(500);  // Regular delay between reads
 8001120:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001124:	f005 fda4 	bl	8006c70 <osDelay>
   for (;;) {
 8001128:	e7c2      	b.n	80010b0 <StartTaskLDR+0xc>
 800112a:	bf00      	nop
 800112c:	2000017c 	.word	0x2000017c
 8001130:	20000150 	.word	0x20000150
 8001134:	200000ac 	.word	0x200000ac
 8001138:	20000008 	.word	0x20000008
 800113c:	2000014c 	.word	0x2000014c

08001140 <StartTaskLaser>:
	        SSD1306_Puts(buffer, &Font_11x18, 1);  // Display the light value
	        SSD1306_UpdateScreen();  // Update screen
	        osDelay(1000);  // Add delay to prevent flickering
	    }
}
void StartTaskLaser(void *argument) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <StartTaskLaser+0x30>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d105      	bne.n	800115c <StartTaskLaser+0x1c>
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <StartTaskLaser+0x34>)
 8001156:	f001 ff51 	bl	8002ffc <HAL_GPIO_WritePin>
 800115a:	e004      	b.n	8001166 <StartTaskLaser+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2102      	movs	r1, #2
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <StartTaskLaser+0x34>)
 8001162:	f001 ff4b 	bl	8002ffc <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001166:	2064      	movs	r0, #100	@ 0x64
 8001168:	f005 fd82 	bl	8006c70 <osDelay>
       if (system_state == SYSTEM_ON) {
 800116c:	e7ec      	b.n	8001148 <StartTaskLaser+0x8>
 800116e:	bf00      	nop
 8001170:	20000150 	.word	0x20000150
 8001174:	40020400 	.word	0x40020400

08001178 <StartTaskBuzzer>:
   }
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <StartTaskBuzzer+0x38>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d1fb      	bne.n	8001180 <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8001188:	2201      	movs	r2, #1
 800118a:	2101      	movs	r1, #1
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <StartTaskBuzzer+0x3c>)
 800118e:	f001 ff35 	bl	8002ffc <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001192:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001196:	f000 ffdd 	bl	8002154 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 800119a:	2200      	movs	r2, #0
 800119c:	2101      	movs	r1, #1
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <StartTaskBuzzer+0x3c>)
 80011a0:	f001 ff2c 	bl	8002ffc <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80011a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a8:	f000 ffd4 	bl	8002154 <HAL_Delay>
		if(alarm_state == ALARM_ON){
 80011ac:	e7e8      	b.n	8001180 <StartTaskBuzzer+0x8>
 80011ae:	bf00      	nop
 80011b0:	2000014c 	.word	0x2000014c
 80011b4:	40020400 	.word	0x40020400

080011b8 <StartTaskLed>:
		}
// Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	for(;;){
		if(alarm_state==ALARM_ON){
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <StartTaskLed+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <StartTaskLed+0x1c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2120      	movs	r1, #32
 80011cc:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <StartTaskLed+0x2c>)
 80011ce:	f001 ff15 	bl	8002ffc <HAL_GPIO_WritePin>
 80011d2:	e7f5      	b.n	80011c0 <StartTaskLed+0x8>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2120      	movs	r1, #32
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <StartTaskLed+0x2c>)
 80011da:	f001 ff0f 	bl	8002ffc <HAL_GPIO_WritePin>
		if(alarm_state==ALARM_ON){
 80011de:	e7ef      	b.n	80011c0 <StartTaskLed+0x8>
 80011e0:	2000014c 	.word	0x2000014c
 80011e4:	40020000 	.word	0x40020000

080011e8 <StartTaskSystemLed>:
		}
		  // LED ON
	}
}
void StartTaskSystemLed(void *argument) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <StartTaskSystemLed+0x30>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <StartTaskSystemLed+0x1c>
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2140      	movs	r1, #64	@ 0x40
 80011fc:	4807      	ldr	r0, [pc, #28]	@ (800121c <StartTaskSystemLed+0x34>)
 80011fe:	f001 fefd 	bl	8002ffc <HAL_GPIO_WritePin>
 8001202:	e004      	b.n	800120e <StartTaskSystemLed+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <StartTaskSystemLed+0x34>)
 800120a:	f001 fef7 	bl	8002ffc <HAL_GPIO_WritePin>
       }
       osDelay(100);
 800120e:	2064      	movs	r0, #100	@ 0x64
 8001210:	f005 fd2e 	bl	8006c70 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001214:	e7ec      	b.n	80011f0 <StartTaskSystemLed+0x8>
 8001216:	bf00      	nop
 8001218:	20000150 	.word	0x20000150
 800121c:	40020000 	.word	0x40020000

08001220 <StartTaskServo>:
   }
}
void StartTaskServo(void *argument) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		osDelay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122c:	f005 fd20 	bl	8006c70 <osDelay>
		 if(alarm_state == ALARM_ON && door_state == DOOR_OPEN) {
 8001230:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <StartTaskServo+0x98>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11d      	bne.n	8001274 <StartTaskServo+0x54>
 8001238:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <StartTaskServo+0x9c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d119      	bne.n	8001274 <StartTaskServo+0x54>
		            // Move both servos 90° to the left
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001240:	2100      	movs	r1, #0
 8001242:	481f      	ldr	r0, [pc, #124]	@ (80012c0 <StartTaskServo+0xa0>)
 8001244:	f003 fbf4 	bl	8004a30 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001248:	2100      	movs	r1, #0
 800124a:	481e      	ldr	r0, [pc, #120]	@ (80012c4 <StartTaskServo+0xa4>)
 800124c:	f003 fbf0 	bl	8004a30 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);  // 90° for first servo
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <StartTaskServo+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001258:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);  // 90° for second servo (same direction)
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <StartTaskServo+0xa4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001262:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001264:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001268:	f000 ff74 	bl	8002154 <HAL_Delay>
		            door_state = DOOR_CLOSED;
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <StartTaskServo+0x9c>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e020      	b.n	80012b6 <StartTaskServo+0x96>
		        }
		        else if(alarm_state == ALARM_OFF && door_state == DOOR_CLOSED) {
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <StartTaskServo+0x98>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1d5      	bne.n	8001228 <StartTaskServo+0x8>
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <StartTaskServo+0x9c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d1d1      	bne.n	8001228 <StartTaskServo+0x8>
		            // Move both servos back to 0° (neutral)
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <StartTaskServo+0xa0>)
 8001288:	f003 fbd2 	bl	8004a30 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <StartTaskServo+0xa4>)
 8001290:	f003 fbce 	bl	8004a30 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);  // Back to 0° for first servo
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <StartTaskServo+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800129c:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2500);   // Back to 0° for second servo (same direction)
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <StartTaskServo+0xa4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 80012a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012ac:	f000 ff52 	bl	8002154 <HAL_Delay>
		            door_state = DOOR_OPEN;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <StartTaskServo+0x9c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 80012b6:	e7b7      	b.n	8001228 <StartTaskServo+0x8>
 80012b8:	2000014c 	.word	0x2000014c
 80012bc:	20000154 	.word	0x20000154
 80012c0:	2000061c 	.word	0x2000061c
 80012c4:	200005d4 	.word	0x200005d4

080012c8 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <_write>:
{
}
/* USER CODE END Error_Handler_Debug */
}
int _write(int file, char *ptr, int len) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	4804      	ldr	r0, [pc, #16]	@ (80012fc <_write+0x28>)
 80012ec:	f004 fb58 	bl	80059a0 <HAL_UART_Transmit>
  return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200006ac 	.word	0x200006ac

08001300 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001306:	f000 fa27 	bl	8001758 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800130a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800130e:	2201      	movs	r2, #1
 8001310:	2178      	movs	r1, #120	@ 0x78
 8001312:	485b      	ldr	r0, [pc, #364]	@ (8001480 <SSD1306_Init+0x180>)
 8001314:	f002 f8ce 	bl	80034b4 <HAL_I2C_IsDeviceReady>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800131e:	2300      	movs	r3, #0
 8001320:	e0a9      	b.n	8001476 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001322:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001326:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001328:	e002      	b.n	8001330 <SSD1306_Init+0x30>
		p--;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3b01      	subs	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f9      	bne.n	800132a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001336:	22ae      	movs	r2, #174	@ 0xae
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	@ 0x78
 800133c:	f000 fa88 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001340:	2220      	movs	r2, #32
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	@ 0x78
 8001346:	f000 fa83 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800134a:	2210      	movs	r2, #16
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	@ 0x78
 8001350:	f000 fa7e 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001354:	22b0      	movs	r2, #176	@ 0xb0
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	@ 0x78
 800135a:	f000 fa79 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800135e:	22c8      	movs	r2, #200	@ 0xc8
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	@ 0x78
 8001364:	f000 fa74 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	@ 0x78
 800136e:	f000 fa6f 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001372:	2210      	movs	r2, #16
 8001374:	2100      	movs	r1, #0
 8001376:	2078      	movs	r0, #120	@ 0x78
 8001378:	f000 fa6a 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	2100      	movs	r1, #0
 8001380:	2078      	movs	r0, #120	@ 0x78
 8001382:	f000 fa65 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001386:	2281      	movs	r2, #129	@ 0x81
 8001388:	2100      	movs	r1, #0
 800138a:	2078      	movs	r0, #120	@ 0x78
 800138c:	f000 fa60 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001390:	22ff      	movs	r2, #255	@ 0xff
 8001392:	2100      	movs	r1, #0
 8001394:	2078      	movs	r0, #120	@ 0x78
 8001396:	f000 fa5b 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800139a:	22a1      	movs	r2, #161	@ 0xa1
 800139c:	2100      	movs	r1, #0
 800139e:	2078      	movs	r0, #120	@ 0x78
 80013a0:	f000 fa56 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013a4:	22a6      	movs	r2, #166	@ 0xa6
 80013a6:	2100      	movs	r1, #0
 80013a8:	2078      	movs	r0, #120	@ 0x78
 80013aa:	f000 fa51 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013ae:	22a8      	movs	r2, #168	@ 0xa8
 80013b0:	2100      	movs	r1, #0
 80013b2:	2078      	movs	r0, #120	@ 0x78
 80013b4:	f000 fa4c 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013b8:	223f      	movs	r2, #63	@ 0x3f
 80013ba:	2100      	movs	r1, #0
 80013bc:	2078      	movs	r0, #120	@ 0x78
 80013be:	f000 fa47 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013c2:	22a4      	movs	r2, #164	@ 0xa4
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	@ 0x78
 80013c8:	f000 fa42 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013cc:	22d3      	movs	r2, #211	@ 0xd3
 80013ce:	2100      	movs	r1, #0
 80013d0:	2078      	movs	r0, #120	@ 0x78
 80013d2:	f000 fa3d 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	@ 0x78
 80013dc:	f000 fa38 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80013e0:	22d5      	movs	r2, #213	@ 0xd5
 80013e2:	2100      	movs	r1, #0
 80013e4:	2078      	movs	r0, #120	@ 0x78
 80013e6:	f000 fa33 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80013ea:	22f0      	movs	r2, #240	@ 0xf0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2078      	movs	r0, #120	@ 0x78
 80013f0:	f000 fa2e 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80013f4:	22d9      	movs	r2, #217	@ 0xd9
 80013f6:	2100      	movs	r1, #0
 80013f8:	2078      	movs	r0, #120	@ 0x78
 80013fa:	f000 fa29 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80013fe:	2222      	movs	r2, #34	@ 0x22
 8001400:	2100      	movs	r1, #0
 8001402:	2078      	movs	r0, #120	@ 0x78
 8001404:	f000 fa24 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001408:	22da      	movs	r2, #218	@ 0xda
 800140a:	2100      	movs	r1, #0
 800140c:	2078      	movs	r0, #120	@ 0x78
 800140e:	f000 fa1f 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001412:	2212      	movs	r2, #18
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	@ 0x78
 8001418:	f000 fa1a 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800141c:	22db      	movs	r2, #219	@ 0xdb
 800141e:	2100      	movs	r1, #0
 8001420:	2078      	movs	r0, #120	@ 0x78
 8001422:	f000 fa15 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001426:	2220      	movs	r2, #32
 8001428:	2100      	movs	r1, #0
 800142a:	2078      	movs	r0, #120	@ 0x78
 800142c:	f000 fa10 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001430:	228d      	movs	r2, #141	@ 0x8d
 8001432:	2100      	movs	r1, #0
 8001434:	2078      	movs	r0, #120	@ 0x78
 8001436:	f000 fa0b 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800143a:	2214      	movs	r2, #20
 800143c:	2100      	movs	r1, #0
 800143e:	2078      	movs	r0, #120	@ 0x78
 8001440:	f000 fa06 	bl	8001850 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001444:	22af      	movs	r2, #175	@ 0xaf
 8001446:	2100      	movs	r1, #0
 8001448:	2078      	movs	r0, #120	@ 0x78
 800144a:	f000 fa01 	bl	8001850 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800144e:	222e      	movs	r2, #46	@ 0x2e
 8001450:	2100      	movs	r1, #0
 8001452:	2078      	movs	r0, #120	@ 0x78
 8001454:	f000 f9fc 	bl	8001850 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001458:	2000      	movs	r0, #0
 800145a:	f000 f843 	bl	80014e4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800145e:	f000 f813 	bl	8001488 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <SSD1306_Init+0x184>)
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <SSD1306_Init+0x184>)
 800146a:	2200      	movs	r2, #0
 800146c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800146e:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SSD1306_Init+0x184>)
 8001470:	2201      	movs	r2, #1
 8001472:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000f8 	.word	0x200000f8
 8001484:	20000580 	.word	0x20000580

08001488 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800148e:	2300      	movs	r3, #0
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	e01d      	b.n	80014d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	3b50      	subs	r3, #80	@ 0x50
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	2100      	movs	r1, #0
 800149e:	2078      	movs	r0, #120	@ 0x78
 80014a0:	f000 f9d6 	bl	8001850 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2078      	movs	r0, #120	@ 0x78
 80014aa:	f000 f9d1 	bl	8001850 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014ae:	2210      	movs	r2, #16
 80014b0:	2100      	movs	r1, #0
 80014b2:	2078      	movs	r0, #120	@ 0x78
 80014b4:	f000 f9cc 	bl	8001850 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	01db      	lsls	r3, r3, #7
 80014bc:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <SSD1306_UpdateScreen+0x58>)
 80014be:	441a      	add	r2, r3
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	2140      	movs	r1, #64	@ 0x40
 80014c4:	2078      	movs	r0, #120	@ 0x78
 80014c6:	f000 f95d 	bl	8001784 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	3301      	adds	r3, #1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	d9de      	bls.n	8001494 <SSD1306_UpdateScreen+0xc>
	}
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000180 	.word	0x20000180

080014e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <SSD1306_Fill+0x14>
 80014f4:	2300      	movs	r3, #0
 80014f6:	e000      	b.n	80014fa <SSD1306_Fill+0x16>
 80014f8:	23ff      	movs	r3, #255	@ 0xff
 80014fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fe:	4619      	mov	r1, r3
 8001500:	4803      	ldr	r0, [pc, #12]	@ (8001510 <SSD1306_Fill+0x2c>)
 8001502:	f008 fdf9 	bl	800a0f8 <memset>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000180 	.word	0x20000180

08001514 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	460b      	mov	r3, r1
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	70fb      	strb	r3, [r7, #3]
	if (
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b7f      	cmp	r3, #127	@ 0x7f
 800152a:	d848      	bhi.n	80015be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001530:	d845      	bhi.n	80015be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <SSD1306_DrawPixel+0xb8>)
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d11a      	bne.n	8001584 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	b298      	uxth	r0, r3
 8001556:	4603      	mov	r3, r0
 8001558:	01db      	lsls	r3, r3, #7
 800155a:	4413      	add	r3, r2
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <SSD1306_DrawPixel+0xbc>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	b25a      	sxtb	r2, r3
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	b25b      	sxtb	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b259      	sxtb	r1, r3
 8001574:	88fa      	ldrh	r2, [r7, #6]
 8001576:	4603      	mov	r3, r0
 8001578:	01db      	lsls	r3, r3, #7
 800157a:	4413      	add	r3, r2
 800157c:	b2c9      	uxtb	r1, r1
 800157e:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <SSD1306_DrawPixel+0xbc>)
 8001580:	54d1      	strb	r1, [r2, r3]
 8001582:	e01d      	b.n	80015c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	b298      	uxth	r0, r3
 800158c:	4603      	mov	r3, r0
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	4413      	add	r3, r2
 8001592:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <SSD1306_DrawPixel+0xbc>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	b25a      	sxtb	r2, r3
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	4013      	ands	r3, r2
 80015ac:	b259      	sxtb	r1, r3
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	4603      	mov	r3, r0
 80015b2:	01db      	lsls	r3, r3, #7
 80015b4:	4413      	add	r3, r2
 80015b6:	b2c9      	uxtb	r1, r1
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <SSD1306_DrawPixel+0xbc>)
 80015ba:	54d1      	strb	r1, [r2, r3]
 80015bc:	e000      	b.n	80015c0 <SSD1306_DrawPixel+0xac>
		return;
 80015be:	bf00      	nop
	}
}
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000580 	.word	0x20000580
 80015d0:	20000180 	.word	0x20000180

080015d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	80fb      	strh	r3, [r7, #6]
 80015e0:	4613      	mov	r3, r2
 80015e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015e4:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SSD1306_GotoXY+0x28>)
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80015ea:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <SSD1306_GotoXY+0x28>)
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	8053      	strh	r3, [r2, #2]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	20000580 	.word	0x20000580

08001600 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4613      	mov	r3, r2
 800160e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <SSD1306_Putc+0xf8>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
	if (
 800161c:	2b7f      	cmp	r3, #127	@ 0x7f
 800161e:	dc07      	bgt.n	8001630 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001620:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <SSD1306_Putc+0xf8>)
 8001622:	885b      	ldrh	r3, [r3, #2]
 8001624:	461a      	mov	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800162c:	2b3f      	cmp	r3, #63	@ 0x3f
 800162e:	dd01      	ble.n	8001634 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001630:	2300      	movs	r3, #0
 8001632:	e05d      	b.n	80016f0 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e04b      	b.n	80016d2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3b20      	subs	r3, #32
 8001642:	6839      	ldr	r1, [r7, #0]
 8001644:	7849      	ldrb	r1, [r1, #1]
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4619      	mov	r1, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	440b      	add	r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	e030      	b.n	80016c0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d010      	beq.n	8001690 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800166e:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <SSD1306_Putc+0xf8>)
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b298      	uxth	r0, r3
 800167a:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <SSD1306_Putc+0xf8>)
 800167c:	885a      	ldrh	r2, [r3, #2]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29b      	uxth	r3, r3
 8001686:	79ba      	ldrb	r2, [r7, #6]
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff ff43 	bl	8001514 <SSD1306_DrawPixel>
 800168e:	e014      	b.n	80016ba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <SSD1306_Putc+0xf8>)
 8001692:	881a      	ldrh	r2, [r3, #0]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4413      	add	r3, r2
 800169a:	b298      	uxth	r0, r3
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <SSD1306_Putc+0xf8>)
 800169e:	885a      	ldrh	r2, [r3, #2]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	b299      	uxth	r1, r3
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf0c      	ite	eq
 80016ae:	2301      	moveq	r3, #1
 80016b0:	2300      	movne	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	f7ff ff2d 	bl	8001514 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3301      	adds	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d3c8      	bcc.n	800165e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	461a      	mov	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4293      	cmp	r3, r2
 80016dc:	d3ad      	bcc.n	800163a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SSD1306_Putc+0xf8>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <SSD1306_Putc+0xf8>)
 80016ec:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80016ee:	79fb      	ldrb	r3, [r7, #7]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000580 	.word	0x20000580

080016fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800170a:	e012      	b.n	8001732 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff73 	bl	8001600 <SSD1306_Putc>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d002      	beq.n	800172c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	e008      	b.n	800173e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1e8      	bne.n	800170c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	781b      	ldrb	r3, [r3, #0]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff feca 	bl	80014e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001750:	f7ff fe9a 	bl	8001488 <SSD1306_UpdateScreen>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <ssd1306_I2C_Init+0x28>)
 8001760:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001762:	e002      	b.n	800176a <ssd1306_I2C_Init+0x12>
		p--;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	607b      	str	r3, [r7, #4]
	while(p>0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	0003d090 	.word	0x0003d090

08001784 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b0c7      	sub	sp, #284	@ 0x11c
 8001788:	af02      	add	r7, sp, #8
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001792:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001796:	600a      	str	r2, [r1, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800179e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017a2:	4622      	mov	r2, r4
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017aa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017ae:	4602      	mov	r2, r0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017ba:	460a      	mov	r2, r1
 80017bc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017ca:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80017d8:	e015      	b.n	8001806 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80017da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	441a      	add	r2, r3
 80017ea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017ee:	3301      	adds	r3, #1
 80017f0:	7811      	ldrb	r1, [r2, #0]
 80017f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017f6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80017fa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80017fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001800:	3301      	adds	r3, #1
 8001802:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001806:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800180a:	b29b      	uxth	r3, r3
 800180c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001810:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001814:	8812      	ldrh	r2, [r2, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d8df      	bhi.n	80017da <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800181a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800181e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b299      	uxth	r1, r3
 8001826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800182a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b29b      	uxth	r3, r3
 8001834:	f107 020c 	add.w	r2, r7, #12
 8001838:	200a      	movs	r0, #10
 800183a:	9000      	str	r0, [sp, #0]
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <ssd1306_I2C_WriteMulti+0xc8>)
 800183e:	f001 fd3b 	bl	80032b8 <HAL_I2C_Master_Transmit>
}
 8001842:	bf00      	nop
 8001844:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	200000f8 	.word	0x200000f8

08001850 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af02      	add	r7, sp, #8
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	460b      	mov	r3, r1
 800185c:	71bb      	strb	r3, [r7, #6]
 800185e:	4613      	mov	r3, r2
 8001860:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001866:	797b      	ldrb	r3, [r7, #5]
 8001868:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	b299      	uxth	r1, r3
 800186e:	f107 020c 	add.w	r2, r7, #12
 8001872:	230a      	movs	r3, #10
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2302      	movs	r3, #2
 8001878:	4803      	ldr	r0, [pc, #12]	@ (8001888 <ssd1306_I2C_Write+0x38>)
 800187a:	f001 fd1d 	bl	80032b8 <HAL_I2C_Master_Transmit>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200000f8 	.word	0x200000f8

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_MspInit+0x54>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <HAL_MspInit+0x54>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_MspInit+0x54>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_MspInit+0x54>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_MspInit+0x54>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_MspInit+0x54>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	210f      	movs	r1, #15
 80018ce:	f06f 0001 	mvn.w	r0, #1
 80018d2:	f001 f92b 	bl	8002b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	@ 0x38
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <HAL_InitTick+0xe4>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	4a32      	ldr	r2, [pc, #200]	@ (80019c8 <HAL_InitTick+0xe4>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <HAL_InitTick+0xe4>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001910:	f107 0210 	add.w	r2, r7, #16
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fa6e 	bl	8003dfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800192a:	f002 fa3f 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 800192e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001930:	e004      	b.n	800193c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001932:	f002 fa3b 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8001936:	4603      	mov	r3, r0
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <HAL_InitTick+0xe8>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	3b01      	subs	r3, #1
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_InitTick+0xec>)
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_InitTick+0xf0>)
 800194e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_InitTick+0xec>)
 8001952:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001956:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001958:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_InitTick+0xec>)
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_InitTick+0xec>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_InitTick+0xec>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_InitTick+0xec>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001970:	4817      	ldr	r0, [pc, #92]	@ (80019d0 <HAL_InitTick+0xec>)
 8001972:	f002 ff43 	bl	80047fc <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800197c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001980:	2b00      	cmp	r3, #0
 8001982:	d11b      	bne.n	80019bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <HAL_InitTick+0xec>)
 8001986:	f002 ff89 	bl	800489c <HAL_TIM_Base_Start_IT>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001998:	2036      	movs	r0, #54	@ 0x36
 800199a:	f001 f8e3 	bl	8002b64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d808      	bhi.n	80019b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	2036      	movs	r0, #54	@ 0x36
 80019aa:	f001 f8bf 	bl	8002b2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_InitTick+0xf4>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e002      	b.n	80019bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3738      	adds	r7, #56	@ 0x38
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	20000588 	.word	0x20000588
 80019d4:	40001000 	.word	0x40001000
 80019d8:	20000028 	.word	0x20000028

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <NMI_Handler+0x4>

080019e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <MemManage_Handler+0x4>

080019f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <USART1_IRQHandler+0x10>)
 8001a1a:	f004 f8e3 	bl	8005be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000664 	.word	0x20000664

08001a28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <TIM6_DAC_IRQHandler+0x10>)
 8001a2e:	f003 f8c7 	bl	8004bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000588 	.word	0x20000588

08001a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e00a      	b.n	8001a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4e:	f3af 8000 	nop.w
 8001a52:	4601      	mov	r1, r0
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	b2ca      	uxtb	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf0      	blt.n	8001a4e <_read+0x12>
  }

  return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f008 fafa 	bl	800a108 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20020000 	.word	0x20020000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200005d0 	.word	0x200005d0
 8001b48:	20005198 	.word	0x20005198

08001b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b096      	sub	sp, #88	@ 0x58
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f008 faa5 	bl	800a0f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bae:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8001cb0 <MX_TIM1_Init+0x140>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bb6:	2253      	movs	r2, #83	@ 0x53
 8001bb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bc2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bce:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bda:	4834      	ldr	r0, [pc, #208]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bdc:	f002 fe0e 	bl	80047fc <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001be6:	f7ff fb6f 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bf0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	482d      	ldr	r0, [pc, #180]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001bf8:	f003 f994 	bl	8004f24 <HAL_TIM_ConfigClockSource>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c02:	f7ff fb61 	bl	80012c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c06:	4829      	ldr	r0, [pc, #164]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001c08:	f002 feb8 	bl	800497c <HAL_TIM_PWM_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c12:	f7ff fb59 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c22:	4619      	mov	r1, r3
 8001c24:	4821      	ldr	r0, [pc, #132]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001c26:	f003 fd89 	bl	800573c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c30:	f7ff fb4a 	bl	80012c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c34:	2360      	movs	r3, #96	@ 0x60
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 8001c38:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4814      	ldr	r0, [pc, #80]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001c5c:	f003 f8a0 	bl	8004da0 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001c66:	f7ff fb2f 	bl	80012c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001c8e:	f003 fdd1 	bl	8005834 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001c98:	f7ff fb16 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c9c:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM1_Init+0x13c>)
 8001c9e:	f000 f8b5 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3758      	adds	r7, #88	@ 0x58
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200005d4 	.word	0x200005d4
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	@ 0x38
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001ce6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001cec:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001cee:	2253      	movs	r2, #83	@ 0x53
 8001cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001cf8:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001cfa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001cfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0c:	4823      	ldr	r0, [pc, #140]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d0e:	f002 fd75 	bl	80047fc <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d18:	f7ff fad6 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d26:	4619      	mov	r1, r3
 8001d28:	481c      	ldr	r0, [pc, #112]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d2a:	f003 f8fb 	bl	8004f24 <HAL_TIM_ConfigClockSource>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d34:	f7ff fac8 	bl	80012c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d38:	4818      	ldr	r0, [pc, #96]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d3a:	f002 fe1f 	bl	800497c <HAL_TIM_PWM_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d44:	f7ff fac0 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	4619      	mov	r1, r3
 8001d56:	4811      	ldr	r0, [pc, #68]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d58:	f003 fcf0 	bl	800573c <HAL_TIMEx_MasterConfigSynchronization>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d62:	f7ff fab1 	bl	80012c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	@ 0x60
 8001d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001d6a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4807      	ldr	r0, [pc, #28]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d80:	f003 f80e 	bl	8004da0 <HAL_TIM_PWM_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d8a:	f7ff fa9d 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d8e:	4803      	ldr	r0, [pc, #12]	@ (8001d9c <MX_TIM2_Init+0xe8>)
 8001d90:	f000 f83c 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	@ 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000061c 	.word	0x2000061c

08001da0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a15      	ldr	r2, [pc, #84]	@ (8001e04 <HAL_TIM_Base_MspInit+0x64>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_TIM_Base_MspInit+0x68>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a13      	ldr	r2, [pc, #76]	@ (8001e08 <HAL_TIM_Base_MspInit+0x68>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_TIM_Base_MspInit+0x68>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dce:	e012      	b.n	8001df6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd8:	d10d      	bne.n	8001df6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_TIM_Base_MspInit+0x68>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <HAL_TIM_Base_MspInit+0x68>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <HAL_TIM_Base_MspInit+0x68>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a25      	ldr	r2, [pc, #148]	@ (8001ec0 <HAL_TIM_MspPostInit+0xb4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d11f      	bne.n	8001e6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_TIM_MspPostInit+0xb8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <HAL_TIM_MspPostInit+0xb8>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_TIM_MspPostInit+0xb8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4818      	ldr	r0, [pc, #96]	@ (8001ec8 <HAL_TIM_MspPostInit+0xbc>)
 8001e68:	f000 ff1c 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e6c:	e023      	b.n	8001eb6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e76:	d11e      	bne.n	8001eb6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_TIM_MspPostInit+0xb8>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_TIM_MspPostInit+0xb8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_TIM_MspPostInit+0xb8>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <HAL_TIM_MspPostInit+0xbc>)
 8001eb2:	f000 fef7 	bl	8002ca4 <HAL_GPIO_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <MX_USART1_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f003 fcfc 	bl	8005900 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f7ff f9db 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000664 	.word	0x20000664
 8001f1c:	40011000 	.word	0x40011000

08001f20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <MX_USART2_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f58:	f003 fcd2 	bl	8005900 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f62:	f7ff f9b1 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200006ac 	.word	0x200006ac
 8001f70:	40004400 	.word	0x40004400

08001f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	@ 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a36      	ldr	r2, [pc, #216]	@ (800206c <HAL_UART_MspInit+0xf8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d135      	bne.n	8002002 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	4b35      	ldr	r3, [pc, #212]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a34      	ldr	r2, [pc, #208]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a2d      	ldr	r2, [pc, #180]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4822      	ldr	r0, [pc, #136]	@ (8002074 <HAL_UART_MspInit+0x100>)
 8001fec:	f000 fe5a 	bl	8002ca4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2105      	movs	r1, #5
 8001ff4:	2025      	movs	r0, #37	@ 0x25
 8001ff6:	f000 fd99 	bl	8002b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffa:	2025      	movs	r0, #37	@ 0x25
 8001ffc:	f000 fdb2 	bl	8002b64 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002000:	e030      	b.n	8002064 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_UART_MspInit+0x104>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d12b      	bne.n	8002064 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	4a16      	ldr	r2, [pc, #88]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201a:	6413      	str	r3, [r2, #64]	@ 0x40
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6313      	str	r3, [r2, #48]	@ 0x30
 8002038:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <HAL_UART_MspInit+0xfc>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002044:	230c      	movs	r3, #12
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002054:	2307      	movs	r3, #7
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <HAL_UART_MspInit+0x100>)
 8002060:	f000 fe20 	bl	8002ca4 <HAL_GPIO_Init>
}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	@ 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40011000 	.word	0x40011000
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000
 8002078:	40004400 	.word	0x40004400

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002080:	f7ff fd64 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f008 f833 	bl	800a114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7fe fdb3 	bl	8000c18 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80020c0:	0800c45c 	.word	0x0800c45c
  ldr r2, =_sbss
 80020c4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80020c8:	20005194 	.word	0x20005194

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 fd0c 	bl	8002b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f7ff fbf0 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fbc2 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000002c 	.word	0x2000002c
 8002138:	200006f4 	.word	0x200006f4

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200006f4 	.word	0x200006f4

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000002c 	.word	0x2000002c

0800219c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e033      	b.n	800221a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fa4a 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d118      	bne.n	800220c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021e2:	f023 0302 	bic.w	r3, r3, #2
 80021e6:	f043 0202 	orr.w	r2, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fae8 	bl	80027c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
 800220a:	e001      	b.n	8002210 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADC_Start+0x1a>
 800223a:	2302      	movs	r3, #2
 800223c:	e0b2      	b.n	80023a4 <HAL_ADC_Start+0x180>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d018      	beq.n	8002286 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002264:	4b52      	ldr	r3, [pc, #328]	@ (80023b0 <HAL_ADC_Start+0x18c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_ADC_Start+0x190>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0c9a      	lsrs	r2, r3, #18
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002278:	e002      	b.n	8002280 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3b01      	subs	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f9      	bne.n	800227a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d17a      	bne.n	800238a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d2:	d106      	bne.n	80022e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	f023 0206 	bic.w	r2, r3, #6
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	645a      	str	r2, [r3, #68]	@ 0x44
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_ADC_Start+0x194>)
 80022f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022fc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12a      	bne.n	8002360 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2b      	ldr	r2, [pc, #172]	@ (80023bc <HAL_ADC_Start+0x198>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d015      	beq.n	8002340 <HAL_ADC_Start+0x11c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a29      	ldr	r2, [pc, #164]	@ (80023c0 <HAL_ADC_Start+0x19c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d105      	bne.n	800232a <HAL_ADC_Start+0x106>
 800231e:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <HAL_ADC_Start+0x194>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_ADC_Start+0x1a0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d136      	bne.n	80023a2 <HAL_ADC_Start+0x17e>
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_ADC_Start+0x194>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d130      	bne.n	80023a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d129      	bne.n	80023a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	e020      	b.n	80023a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a15      	ldr	r2, [pc, #84]	@ (80023bc <HAL_ADC_Start+0x198>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11b      	bne.n	80023a2 <HAL_ADC_Start+0x17e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d114      	bne.n	80023a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e00b      	b.n	80023a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	20000024 	.word	0x20000024
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	40012300 	.word	0x40012300
 80023bc:	40012000 	.word	0x40012000
 80023c0:	40012100 	.word	0x40012100
 80023c4:	40012200 	.word	0x40012200

080023c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Stop+0x16>
 80023da:	2302      	movs	r3, #2
 80023dc:	e021      	b.n	8002422 <HAL_ADC_Stop+0x5a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244a:	d113      	bne.n	8002474 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e063      	b.n	800253c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002474:	f7ff fe62 	bl	800213c <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247a:	e021      	b.n	80024c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002482:	d01d      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_ADC_PollForConversion+0x6c>
 800248a:	f7ff fe57 	bl	800213c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d212      	bcs.n	80024c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d00b      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f043 0204 	orr.w	r2, r3, #4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e03d      	b.n	800253c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d1d6      	bne.n	800247c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0212 	mvn.w	r2, #18
 80024d6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d123      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11f      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002512:	2b00      	cmp	r3, #0
 8002514:	d111      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e113      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x244>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	d925      	bls.n	80025d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	2207      	movs	r2, #7
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43da      	mvns	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	400a      	ands	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68d9      	ldr	r1, [r3, #12]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4403      	add	r3, r0
 80025ca:	3b1e      	subs	r3, #30
 80025cc:	409a      	lsls	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	e022      	b.n	800261e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	2207      	movs	r2, #7
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	4603      	mov	r3, r0
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4403      	add	r3, r0
 8002614:	409a      	lsls	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d824      	bhi.n	8002670 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b05      	subs	r3, #5
 8002638:	221f      	movs	r2, #31
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b05      	subs	r3, #5
 8002662:	fa00 f203 	lsl.w	r2, r0, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	635a      	str	r2, [r3, #52]	@ 0x34
 800266e:	e04c      	b.n	800270a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d824      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	@ 0x23
 800268a:	221f      	movs	r2, #31
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43da      	mvns	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	400a      	ands	r2, r1
 8002698:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b23      	subs	r3, #35	@ 0x23
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c0:	e023      	b.n	800270a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b41      	subs	r3, #65	@ 0x41
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b41      	subs	r3, #65	@ 0x41
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270a:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <HAL_ADC_ConfigChannel+0x250>)
 800270c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a28      	ldr	r2, [pc, #160]	@ (80027b4 <HAL_ADC_ConfigChannel+0x254>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1d8>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b12      	cmp	r3, #18
 800271e:	d10b      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1d      	ldr	r2, [pc, #116]	@ (80027b4 <HAL_ADC_ConfigChannel+0x254>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d12b      	bne.n	800279a <HAL_ADC_ConfigChannel+0x23a>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <HAL_ADC_ConfigChannel+0x258>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <HAL_ADC_ConfigChannel+0x1f4>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b11      	cmp	r3, #17
 8002752:	d122      	bne.n	800279a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a11      	ldr	r2, [pc, #68]	@ (80027b8 <HAL_ADC_ConfigChannel+0x258>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d111      	bne.n	800279a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_ADC_ConfigChannel+0x25c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <HAL_ADC_ConfigChannel+0x260>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9a      	lsrs	r2, r3, #18
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800278c:	e002      	b.n	8002794 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3b01      	subs	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40012300 	.word	0x40012300
 80027b4:	40012000 	.word	0x40012000
 80027b8:	10000012 	.word	0x10000012
 80027bc:	20000024 	.word	0x20000024
 80027c0:	431bde83 	.word	0x431bde83

080027c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027cc:	4b79      	ldr	r3, [pc, #484]	@ (80029b4 <ADC_Init+0x1f0>)
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	021a      	lsls	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800281c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800283e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <ADC_Init+0x1f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800286a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800288c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e00f      	b.n	80028c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0202 	bic.w	r2, r2, #2
 80028d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7e1b      	ldrb	r3, [r3, #24]
 80028dc:	005a      	lsls	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800290e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	3b01      	subs	r3, #1
 800291c:	035a      	lsls	r2, r3, #13
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e007      	b.n	8002938 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	3b01      	subs	r3, #1
 8002954:	051a      	lsls	r2, r3, #20
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800296c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800297a:	025a      	lsls	r2, r3, #9
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	029a      	lsls	r2, r3, #10
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40012300 	.word	0x40012300
 80029b8:	0f000001 	.word	0x0f000001

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	@ (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	@ (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	@ (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	@ 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ff4c 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3e:	f7ff ff61 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	6978      	ldr	r0, [r7, #20]
 8002b4a:	f7ff ffb1 	bl	8002ab0 <NVIC_EncodePriority>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff80 	bl	8002a5c <__NVIC_SetPriority>
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff54 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b8e:	f7ff fad5 	bl	800213c <HAL_GetTick>
 8002b92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d008      	beq.n	8002bb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e052      	b.n	8002c58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0216 	bic.w	r2, r2, #22
 8002bc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <HAL_DMA_Abort+0x62>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0208 	bic.w	r2, r2, #8
 8002bf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c02:	e013      	b.n	8002c2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c04:	f7ff fa9a 	bl	800213c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d90c      	bls.n	8002c2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e015      	b.n	8002c58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e4      	bne.n	8002c04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	223f      	movs	r2, #63	@ 0x3f
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d004      	beq.n	8002c7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	@ 0x80
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00c      	b.n	8002c98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2205      	movs	r2, #5
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e165      	b.n	8002f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f040 8154 	bne.w	8002f86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d005      	beq.n	8002cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d130      	bne.n	8002d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0201 	and.w	r2, r3, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d017      	beq.n	8002d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d123      	bne.n	8002de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80ae 	beq.w	8002f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa4 <HAL_GPIO_Init+0x300>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa4 <HAL_GPIO_Init+0x300>)
 8002e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa4 <HAL_GPIO_Init+0x300>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e46:	4a58      	ldr	r2, [pc, #352]	@ (8002fa8 <HAL_GPIO_Init+0x304>)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fac <HAL_GPIO_Init+0x308>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d025      	beq.n	8002ebe <HAL_GPIO_Init+0x21a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb0 <HAL_GPIO_Init+0x30c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01f      	beq.n	8002eba <HAL_GPIO_Init+0x216>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb4 <HAL_GPIO_Init+0x310>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d019      	beq.n	8002eb6 <HAL_GPIO_Init+0x212>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb8 <HAL_GPIO_Init+0x314>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_GPIO_Init+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fbc <HAL_GPIO_Init+0x318>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00d      	beq.n	8002eae <HAL_GPIO_Init+0x20a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc0 <HAL_GPIO_Init+0x31c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x206>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a49      	ldr	r2, [pc, #292]	@ (8002fc4 <HAL_GPIO_Init+0x320>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_GPIO_Init+0x202>
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	e00c      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e00a      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002eaa:	2305      	movs	r3, #5
 8002eac:	e008      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e004      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e002      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_GPIO_Init+0x21c>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f002 0203 	and.w	r2, r2, #3
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4093      	lsls	r3, r2
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed0:	4935      	ldr	r1, [pc, #212]	@ (8002fa8 <HAL_GPIO_Init+0x304>)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a26      	ldr	r2, [pc, #152]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f32:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f56:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f80:	4a11      	ldr	r2, [pc, #68]	@ (8002fc8 <HAL_GPIO_Init+0x324>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	f67f ae96 	bls.w	8002cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3724      	adds	r7, #36	@ 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40021400 	.word	0x40021400
 8002fc4:	40021800 	.word	0x40021800
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e001      	b.n	8002fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
 8003008:	4613      	mov	r3, r2
 800300a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800300c:	787b      	ldrb	r3, [r7, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003018:	e003      	b.n	8003022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e12b      	b.n	800329a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fd96 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003094:	f000 fe8a 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a81      	ldr	r2, [pc, #516]	@ (80032a4 <HAL_I2C_Init+0x274>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d807      	bhi.n	80030b4 <HAL_I2C_Init+0x84>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a80      	ldr	r2, [pc, #512]	@ (80032a8 <HAL_I2C_Init+0x278>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e006      	b.n	80030c2 <HAL_I2C_Init+0x92>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a7d      	ldr	r2, [pc, #500]	@ (80032ac <HAL_I2C_Init+0x27c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0e7      	b.n	800329a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a78      	ldr	r2, [pc, #480]	@ (80032b0 <HAL_I2C_Init+0x280>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a6a      	ldr	r2, [pc, #424]	@ (80032a4 <HAL_I2C_Init+0x274>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d802      	bhi.n	8003104 <HAL_I2C_Init+0xd4>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3301      	adds	r3, #1
 8003102:	e009      	b.n	8003118 <HAL_I2C_Init+0xe8>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <HAL_I2C_Init+0x284>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	3301      	adds	r3, #1
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800312a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	495c      	ldr	r1, [pc, #368]	@ (80032a4 <HAL_I2C_Init+0x274>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d819      	bhi.n	800316c <HAL_I2C_Init+0x13c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e59      	subs	r1, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fbb1 f3f3 	udiv	r3, r1, r3
 8003146:	1c59      	adds	r1, r3, #1
 8003148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800314c:	400b      	ands	r3, r1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_I2C_Init+0x138>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e59      	subs	r1, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	e051      	b.n	800320c <HAL_I2C_Init+0x1dc>
 8003168:	2304      	movs	r3, #4
 800316a:	e04f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d111      	bne.n	8003198 <HAL_I2C_Init+0x168>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e012      	b.n	80031be <HAL_I2C_Init+0x18e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x196>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <HAL_I2C_Init+0x1bc>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e58      	subs	r0, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ea:	e00f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6809      	ldr	r1, [r1, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800323a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6911      	ldr	r1, [r2, #16]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	430b      	orrs	r3, r1
 800324e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	000186a0 	.word	0x000186a0
 80032a8:	001e847f 	.word	0x001e847f
 80032ac:	003d08ff 	.word	0x003d08ff
 80032b0:	431bde83 	.word	0x431bde83
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	817b      	strh	r3, [r7, #10]
 80032c8:	4613      	mov	r3, r2
 80032ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7fe ff36 	bl	800213c <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f040 80e0 	bne.w	80034a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2319      	movs	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	4970      	ldr	r1, [pc, #448]	@ (80034ac <HAL_I2C_Master_Transmit+0x1f4>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fa92 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e0d3      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_I2C_Master_Transmit+0x50>
 8003304:	2302      	movs	r3, #2
 8003306:	e0cc      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d007      	beq.n	800332e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2221      	movs	r2, #33	@ 0x21
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2210      	movs	r2, #16
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	893a      	ldrh	r2, [r7, #8]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a50      	ldr	r2, [pc, #320]	@ (80034b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800336e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f9ca 	bl	8003710 <I2C_MasterRequestWrite>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e08d      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800339c:	e066      	b.n	800346c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	6a39      	ldr	r1, [r7, #32]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fb50 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d107      	bne.n	80033c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11b      	bne.n	8003440 <HAL_I2C_Master_Transmit+0x188>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d017      	beq.n	8003440 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb47 	bl	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	2b04      	cmp	r3, #4
 8003456:	d107      	bne.n	8003468 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003466:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01a      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d194      	bne.n	800339e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	00100002 	.word	0x00100002
 80034b0:	ffff0000 	.word	0xffff0000

080034b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034c4:	f7fe fe3a 	bl	800213c <HAL_GetTick>
 80034c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	f040 8111 	bne.w	80036fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2319      	movs	r3, #25
 80034e2:	2201      	movs	r2, #1
 80034e4:	4988      	ldr	r1, [pc, #544]	@ (8003708 <HAL_I2C_IsDeviceReady+0x254>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f994 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	e104      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_IsDeviceReady+0x50>
 8003500:	2302      	movs	r3, #2
 8003502:	e0fd      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d007      	beq.n	800352a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003538:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2224      	movs	r2, #36	@ 0x24
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a70      	ldr	r2, [pc, #448]	@ (800370c <HAL_I2C_IsDeviceReady+0x258>)
 800354c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800355c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2200      	movs	r2, #0
 8003566:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f952 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003584:	d103      	bne.n	800358e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0b6      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035a2:	f7fe fdcb 	bl	800213c <HAL_GetTick>
 80035a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035d6:	e025      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035d8:	f7fe fdb0 	bl	800213c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <HAL_I2C_IsDeviceReady+0x13a>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	22a0      	movs	r2, #160	@ 0xa0
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2ba0      	cmp	r3, #160	@ 0xa0
 800362e:	d005      	beq.n	800363c <HAL_I2C_IsDeviceReady+0x188>
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_I2C_IsDeviceReady+0x188>
 8003636:	7dbb      	ldrb	r3, [r7, #22]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0cd      	beq.n	80035d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d129      	bne.n	80036a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003660:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2319      	movs	r3, #25
 800367e:	2201      	movs	r2, #1
 8003680:	4921      	ldr	r1, [pc, #132]	@ (8003708 <HAL_I2C_IsDeviceReady+0x254>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f8c6 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e036      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e02c      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	490f      	ldr	r1, [pc, #60]	@ (8003708 <HAL_I2C_IsDeviceReady+0x254>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8a2 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e012      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3301      	adds	r3, #1
 80036de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f4ff af32 	bcc.w	800354e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000

08003710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d006      	beq.n	800373a <I2C_MasterRequestWrite+0x2a>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d003      	beq.n	800373a <I2C_MasterRequestWrite+0x2a>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003738:	d108      	bne.n	800374c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e00b      	b.n	8003764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	2b12      	cmp	r3, #18
 8003752:	d107      	bne.n	8003764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f84f 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800378a:	d103      	bne.n	8003794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e035      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a0:	d108      	bne.n	80037b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	e01b      	b.n	80037ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	11db      	asrs	r3, r3, #7
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0306 	and.w	r3, r3, #6
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f063 030f 	orn	r3, r3, #15
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	490e      	ldr	r1, [pc, #56]	@ (800380c <I2C_MasterRequestWrite+0xfc>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f898 	bl	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e010      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4907      	ldr	r1, [pc, #28]	@ (8003810 <I2C_MasterRequestWrite+0x100>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f888 	bl	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	00010008 	.word	0x00010008
 8003810:	00010002 	.word	0x00010002

08003814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003824:	e048      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800382c:	d044      	beq.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fe fc85 	bl	800213c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d139      	bne.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	0c1b      	lsrs	r3, r3, #16
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d10d      	bne.n	800386a <I2C_WaitOnFlagUntilTimeout+0x56>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	43da      	mvns	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	e00c      	b.n	8003884 <I2C_WaitOnFlagUntilTimeout+0x70>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	43da      	mvns	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	429a      	cmp	r2, r3
 8003888:	d116      	bne.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e023      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d10d      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0xca>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	e00c      	b.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d093      	beq.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003916:	e071      	b.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003926:	d123      	bne.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003936:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f043 0204 	orr.w	r2, r3, #4
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e067      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003976:	d041      	beq.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003978:	f7fe fbe0 	bl	800213c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d302      	bcc.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d136      	bne.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10c      	bne.n	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e00b      	b.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e021      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10c      	bne.n	8003a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e00b      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f af6d 	bne.w	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a54:	e034      	b.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f886 	bl	8003b68 <I2C_IsAcknowledgeFailed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e034      	b.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a6c:	d028      	beq.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fb65 	bl	800213c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	2b80      	cmp	r3, #128	@ 0x80
 8003a90:	d016      	beq.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d1c3      	bne.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ae4:	e034      	b.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f83e 	bl	8003b68 <I2C_IsAcknowledgeFailed>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e034      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003afc:	d028      	beq.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fb1d 	bl	800213c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11d      	bne.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d016      	beq.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e007      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d1c3      	bne.n	8003ae6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d11b      	bne.n	8003bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cc      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b68      	ldr	r3, [pc, #416]	@ (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d90c      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b65      	ldr	r3, [pc, #404]	@ (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	@ (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0b8      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c1c:	4b59      	ldr	r3, [pc, #356]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a58      	ldr	r2, [pc, #352]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4b53      	ldr	r3, [pc, #332]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a52      	ldr	r2, [pc, #328]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b50      	ldr	r3, [pc, #320]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	494d      	ldr	r1, [pc, #308]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d044      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b47      	ldr	r3, [pc, #284]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d119      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	4b3b      	ldr	r3, [pc, #236]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e067      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b37      	ldr	r3, [pc, #220]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4934      	ldr	r1, [pc, #208]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7fe fa40 	bl	800213c <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fe fa3c 	bl	800213c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e04f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d20c      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b22      	ldr	r3, [pc, #136]	@ (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e032      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4916      	ldr	r1, [pc, #88]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3a:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490e      	ldr	r1, [pc, #56]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4e:	f000 f887 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490a      	ldr	r1, [pc, #40]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fdb8 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00
 8003d84:	40023800 	.word	0x40023800
 8003d88:	0800c400 	.word	0x0800c400
 8003d8c:	20000024 	.word	0x20000024
 8003d90:	20000028 	.word	0x20000028

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000024 	.word	0x20000024

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800c410 	.word	0x0800c410

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	@ (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	0800c410 	.word	0x0800c410

08003dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	220f      	movs	r2, #15
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e0c:	4b12      	ldr	r3, [pc, #72]	@ (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e18:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e24:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e30:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <HAL_RCC_GetClockConfig+0x60>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40023c00 	.word	0x40023c00

08003e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e64:	b0ae      	sub	sp, #184	@ 0xb8
 8003e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e86:	4bcb      	ldr	r3, [pc, #812]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	f200 8206 	bhi.w	80042a0 <HAL_RCC_GetSysClockFreq+0x440>
 8003e94:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ed1 	.word	0x08003ed1
 8003ea0:	080042a1 	.word	0x080042a1
 8003ea4:	080042a1 	.word	0x080042a1
 8003ea8:	080042a1 	.word	0x080042a1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	080042a1 	.word	0x080042a1
 8003eb4:	080042a1 	.word	0x080042a1
 8003eb8:	080042a1 	.word	0x080042a1
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	080042a1 	.word	0x080042a1
 8003ec4:	080042a1 	.word	0x080042a1
 8003ec8:	080042a1 	.word	0x080042a1
 8003ecc:	080040d1 	.word	0x080040d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ed0:	4bb9      	ldr	r3, [pc, #740]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003ed6:	e1e7      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ed8:	4bb8      	ldr	r3, [pc, #736]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ede:	e1e3      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee0:	4bb4      	ldr	r3, [pc, #720]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eec:	4bb1      	ldr	r3, [pc, #708]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d071      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef8:	4bae      	ldr	r3, [pc, #696]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4621      	mov	r1, r4
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f50:	4649      	mov	r1, r9
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4641      	mov	r1, r8
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1a51      	subs	r1, r2, r1
 8003f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f64:	4649      	mov	r1, r9
 8003f66:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f78:	4649      	mov	r1, r9
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4641      	mov	r1, r8
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f92:	462b      	mov	r3, r5
 8003f94:	460a      	mov	r2, r1
 8003f96:	eb42 0303 	adc.w	r3, r2, r3
 8003f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fa8:	4629      	mov	r1, r5
 8003faa:	024b      	lsls	r3, r1, #9
 8003fac:	4621      	mov	r1, r4
 8003fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	024a      	lsls	r2, r1, #9
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fcc:	f7fc f978 	bl	80002c0 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fda:	e067      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fdc:	4b75      	ldr	r3, [pc, #468]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fe8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ffa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	0159      	lsls	r1, r3, #5
 800400c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004010:	0150      	lsls	r0, r2, #5
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4621      	mov	r1, r4
 8004018:	1a51      	subs	r1, r2, r1
 800401a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800401c:	4629      	mov	r1, r5
 800401e:	eb63 0301 	sbc.w	r3, r3, r1
 8004022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004030:	4649      	mov	r1, r9
 8004032:	018b      	lsls	r3, r1, #6
 8004034:	4641      	mov	r1, r8
 8004036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800403a:	4641      	mov	r1, r8
 800403c:	018a      	lsls	r2, r1, #6
 800403e:	4641      	mov	r1, r8
 8004040:	ebb2 0a01 	subs.w	sl, r2, r1
 8004044:	4649      	mov	r1, r9
 8004046:	eb63 0b01 	sbc.w	fp, r3, r1
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800405a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405e:	4692      	mov	sl, r2
 8004060:	469b      	mov	fp, r3
 8004062:	4623      	mov	r3, r4
 8004064:	eb1a 0303 	adds.w	r3, sl, r3
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	462b      	mov	r3, r5
 800406c:	eb4b 0303 	adc.w	r3, fp, r3
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800407e:	4629      	mov	r1, r5
 8004080:	028b      	lsls	r3, r1, #10
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004088:	4621      	mov	r1, r4
 800408a:	028a      	lsls	r2, r1, #10
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004094:	2200      	movs	r2, #0
 8004096:	673b      	str	r3, [r7, #112]	@ 0x70
 8004098:	677a      	str	r2, [r7, #116]	@ 0x74
 800409a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800409e:	f7fc f90f 	bl	80002c0 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4613      	mov	r3, r2
 80040a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ac:	4b41      	ldr	r3, [pc, #260]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80040be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ce:	e0eb      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d0:	4b38      	ldr	r3, [pc, #224]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040dc:	4b35      	ldr	r3, [pc, #212]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d06b      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e8:	4b32      	ldr	r3, [pc, #200]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	2200      	movs	r2, #0
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80040fc:	2300      	movs	r3, #0
 80040fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004100:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004104:	4622      	mov	r2, r4
 8004106:	462b      	mov	r3, r5
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004116:	0150      	lsls	r0, r2, #5
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4621      	mov	r1, r4
 800411e:	1a51      	subs	r1, r2, r1
 8004120:	61b9      	str	r1, [r7, #24]
 8004122:	4629      	mov	r1, r5
 8004124:	eb63 0301 	sbc.w	r3, r3, r1
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004136:	4659      	mov	r1, fp
 8004138:	018b      	lsls	r3, r1, #6
 800413a:	4651      	mov	r1, sl
 800413c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004140:	4651      	mov	r1, sl
 8004142:	018a      	lsls	r2, r1, #6
 8004144:	4651      	mov	r1, sl
 8004146:	ebb2 0801 	subs.w	r8, r2, r1
 800414a:	4659      	mov	r1, fp
 800414c:	eb63 0901 	sbc.w	r9, r3, r1
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800415c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004160:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004164:	4690      	mov	r8, r2
 8004166:	4699      	mov	r9, r3
 8004168:	4623      	mov	r3, r4
 800416a:	eb18 0303 	adds.w	r3, r8, r3
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	462b      	mov	r3, r5
 8004172:	eb49 0303 	adc.w	r3, r9, r3
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004184:	4629      	mov	r1, r5
 8004186:	024b      	lsls	r3, r1, #9
 8004188:	4621      	mov	r1, r4
 800418a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800418e:	4621      	mov	r1, r4
 8004190:	024a      	lsls	r2, r1, #9
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800419a:	2200      	movs	r2, #0
 800419c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800419e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80041a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041a4:	f7fc f88c 	bl	80002c0 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041b2:	e065      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x420>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c0:	4b3d      	ldr	r3, [pc, #244]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	2200      	movs	r2, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	4611      	mov	r1, r2
 80041cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d2:	2300      	movs	r3, #0
 80041d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80041d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80041da:	4642      	mov	r2, r8
 80041dc:	464b      	mov	r3, r9
 80041de:	f04f 0000 	mov.w	r0, #0
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	0159      	lsls	r1, r3, #5
 80041e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ec:	0150      	lsls	r0, r2, #5
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4641      	mov	r1, r8
 80041f4:	1a51      	subs	r1, r2, r1
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	4649      	mov	r1, r9
 80041fa:	eb63 0301 	sbc.w	r3, r3, r1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800420c:	4659      	mov	r1, fp
 800420e:	018b      	lsls	r3, r1, #6
 8004210:	4651      	mov	r1, sl
 8004212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004216:	4651      	mov	r1, sl
 8004218:	018a      	lsls	r2, r1, #6
 800421a:	4651      	mov	r1, sl
 800421c:	1a54      	subs	r4, r2, r1
 800421e:	4659      	mov	r1, fp
 8004220:	eb63 0501 	sbc.w	r5, r3, r1
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	00eb      	lsls	r3, r5, #3
 800422e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004232:	00e2      	lsls	r2, r4, #3
 8004234:	4614      	mov	r4, r2
 8004236:	461d      	mov	r5, r3
 8004238:	4643      	mov	r3, r8
 800423a:	18e3      	adds	r3, r4, r3
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	464b      	mov	r3, r9
 8004240:	eb45 0303 	adc.w	r3, r5, r3
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004252:	4629      	mov	r1, r5
 8004254:	028b      	lsls	r3, r1, #10
 8004256:	4621      	mov	r1, r4
 8004258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800425c:	4621      	mov	r1, r4
 800425e:	028a      	lsls	r2, r1, #10
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004268:	2200      	movs	r2, #0
 800426a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800426c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800426e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004272:	f7fc f825 	bl	80002c0 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4613      	mov	r3, r2
 800427c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004280:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0f1b      	lsrs	r3, r3, #28
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800428e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800429e:	e003      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80042a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	37b8      	adds	r7, #184	@ 0xb8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	00f42400 	.word	0x00f42400

080042c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e28d      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8083 	beq.w	80043e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042e0:	4b94      	ldr	r3, [pc, #592]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d019      	beq.n	8004320 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ec:	4b91      	ldr	r3, [pc, #580]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004304:	d00c      	beq.n	8004320 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004306:	4b8b      	ldr	r3, [pc, #556]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d112      	bne.n	8004338 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b88      	ldr	r3, [pc, #544]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431e:	d10b      	bne.n	8004338 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	4b84      	ldr	r3, [pc, #528]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05b      	beq.n	80043e4 <HAL_RCC_OscConfig+0x124>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d157      	bne.n	80043e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e25a      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x90>
 8004342:	4b7c      	ldr	r3, [pc, #496]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7b      	ldr	r2, [pc, #492]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e01d      	b.n	800438c <HAL_RCC_OscConfig+0xcc>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0xb4>
 800435a:	4b76      	ldr	r3, [pc, #472]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a75      	ldr	r2, [pc, #468]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b73      	ldr	r3, [pc, #460]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a72      	ldr	r2, [pc, #456]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0xcc>
 8004374:	4b6f      	ldr	r3, [pc, #444]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6e      	ldr	r2, [pc, #440]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 800437a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b6c      	ldr	r3, [pc, #432]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6b      	ldr	r2, [pc, #428]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800438a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fed2 	bl	800213c <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fd fece 	bl	800213c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e21f      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b61      	ldr	r3, [pc, #388]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0xdc>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd febe 	bl	800213c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fd feba 	bl	800213c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e20b      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	4b57      	ldr	r3, [pc, #348]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x104>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06f      	beq.n	80044d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043f2:	4b50      	ldr	r3, [pc, #320]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004406:	2b08      	cmp	r3, #8
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d11c      	bne.n	800445c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b44      	ldr	r3, [pc, #272]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_RCC_OscConfig+0x186>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e1d3      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004446:	4b3b      	ldr	r3, [pc, #236]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4937      	ldr	r1, [pc, #220]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	e03a      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004464:	4b34      	ldr	r3, [pc, #208]	@ (8004538 <HAL_RCC_OscConfig+0x278>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd fe67 	bl	800213c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004472:	f7fd fe63 	bl	800213c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1b4      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	4b2b      	ldr	r3, [pc, #172]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4925      	ldr	r1, [pc, #148]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
 80044a4:	e015      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a6:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <HAL_RCC_OscConfig+0x278>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd fe46 	bl	800213c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fd fe42 	bl	800213c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e193      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d036      	beq.n	800454c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_RCC_OscConfig+0x27c>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd fe26 	bl	800213c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fd fe22 	bl	800213c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e173      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_OscConfig+0x274>)
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x234>
 8004512:	e01b      	b.n	800454c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004514:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_RCC_OscConfig+0x27c>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fd fe0f 	bl	800213c <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	e00e      	b.n	8004540 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004522:	f7fd fe0b 	bl	800213c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d907      	bls.n	8004540 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e15c      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
 8004534:	40023800 	.word	0x40023800
 8004538:	42470000 	.word	0x42470000
 800453c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	4b8a      	ldr	r3, [pc, #552]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ea      	bne.n	8004522 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8097 	beq.w	8004688 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455e:	4b83      	ldr	r3, [pc, #524]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	4b7f      	ldr	r3, [pc, #508]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	4a7e      	ldr	r2, [pc, #504]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004578:	6413      	str	r3, [r2, #64]	@ 0x40
 800457a:	4b7c      	ldr	r3, [pc, #496]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	4b79      	ldr	r3, [pc, #484]	@ (8004770 <HAL_RCC_OscConfig+0x4b0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d118      	bne.n	80045c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004596:	4b76      	ldr	r3, [pc, #472]	@ (8004770 <HAL_RCC_OscConfig+0x4b0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	@ (8004770 <HAL_RCC_OscConfig+0x4b0>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a2:	f7fd fdcb 	bl	800213c <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fd fdc7 	bl	800213c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e118      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <HAL_RCC_OscConfig+0x4b0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x31e>
 80045d0:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	4a65      	ldr	r2, [pc, #404]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	@ 0x70
 80045dc:	e01c      	b.n	8004618 <HAL_RCC_OscConfig+0x358>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x340>
 80045e6:	4b61      	ldr	r3, [pc, #388]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ea:	4a60      	ldr	r2, [pc, #384]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f2:	4b5e      	ldr	r3, [pc, #376]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x358>
 8004600:	4b5a      	ldr	r3, [pc, #360]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4a59      	ldr	r2, [pc, #356]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	@ 0x70
 800460c:	4b57      	ldr	r3, [pc, #348]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	4a56      	ldr	r2, [pc, #344]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004612:	f023 0304 	bic.w	r3, r3, #4
 8004616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fd fd8c 	bl	800213c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd fd88 	bl	800213c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0d7      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463e:	4b4b      	ldr	r3, [pc, #300]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ee      	beq.n	8004628 <HAL_RCC_OscConfig+0x368>
 800464a:	e014      	b.n	8004676 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fd fd76 	bl	800213c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fd fd72 	bl	800213c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0c1      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466a:	4b40      	ldr	r3, [pc, #256]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ee      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b3b      	ldr	r3, [pc, #236]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	4a3a      	ldr	r2, [pc, #232]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80ad 	beq.w	80047ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004692:	4b36      	ldr	r3, [pc, #216]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b08      	cmp	r3, #8
 800469c:	d060      	beq.n	8004760 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d145      	bne.n	8004732 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b33      	ldr	r3, [pc, #204]	@ (8004774 <HAL_RCC_OscConfig+0x4b4>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fd fd46 	bl	800213c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fd fd42 	bl	800213c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e093      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	071b      	lsls	r3, r3, #28
 80046fe:	491b      	ldr	r1, [pc, #108]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x4b4>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fd fd17 	bl	800213c <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004712:	f7fd fd13 	bl	800213c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e064      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x452>
 8004730:	e05c      	b.n	80047ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_RCC_OscConfig+0x4b4>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd fd00 	bl	800213c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd fcfc 	bl	800213c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e04d      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_RCC_OscConfig+0x4ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x480>
 800475e:	e045      	b.n	80047ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e040      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
 800476c:	40023800 	.word	0x40023800
 8004770:	40007000 	.word	0x40007000
 8004774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004778:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <HAL_RCC_OscConfig+0x538>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d030      	beq.n	80047e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d129      	bne.n	80047e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d122      	bne.n	80047e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d119      	bne.n	80047e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	3b01      	subs	r3, #1
 80047c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d10f      	bne.n	80047e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800

080047fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e041      	b.n	8004892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd fabc 	bl	8001da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fc62 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d001      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e04e      	b.n	8004952 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a23      	ldr	r2, [pc, #140]	@ (8004960 <HAL_TIM_Base_Start_IT+0xc4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d022      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048de:	d01d      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <HAL_TIM_Base_Start_IT+0xc8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d018      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_TIM_Base_Start_IT+0xcc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <HAL_TIM_Base_Start_IT+0xd0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00e      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_TIM_Base_Start_IT+0xd4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d009      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_TIM_Base_Start_IT+0xd8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x80>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_TIM_Base_Start_IT+0xdc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d111      	bne.n	8004940 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b06      	cmp	r3, #6
 800492c:	d010      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493e:	e007      	b.n	8004950 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40014000 	.word	0x40014000
 8004978:	40001800 	.word	0x40001800

0800497c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e041      	b.n	8004a12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f839 	bl	8004a1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fba2 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_TIM_PWM_Start+0x24>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e022      	b.n	8004a9a <HAL_TIM_PWM_Start+0x6a>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d109      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x3e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e015      	b.n	8004a9a <HAL_TIM_PWM_Start+0x6a>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d109      	bne.n	8004a88 <HAL_TIM_PWM_Start+0x58>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e008      	b.n	8004a9a <HAL_TIM_PWM_Start+0x6a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07c      	b.n	8004b9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x82>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_PWM_Start+0xaa>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0x92>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_PWM_Start+0xaa>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0xa2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_PWM_Start+0xaa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fe04 	bl	80056f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba4 <HAL_TIM_PWM_Start+0x174>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_TIM_PWM_Start+0xcc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba8 <HAL_TIM_PWM_Start+0x178>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_PWM_Start+0xd0>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_PWM_Start+0xd2>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ba4 <HAL_TIM_PWM_Start+0x174>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d022      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b28:	d01d      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bac <HAL_TIM_PWM_Start+0x17c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d018      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <HAL_TIM_PWM_Start+0x180>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d013      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb4 <HAL_TIM_PWM_Start+0x184>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00e      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a16      	ldr	r2, [pc, #88]	@ (8004ba8 <HAL_TIM_PWM_Start+0x178>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d009      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a18      	ldr	r2, [pc, #96]	@ (8004bb8 <HAL_TIM_PWM_Start+0x188>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x136>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <HAL_TIM_PWM_Start+0x18c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d111      	bne.n	8004b8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b06      	cmp	r3, #6
 8004b76:	d010      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b88:	e007      	b.n	8004b9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40010000 	.word	0x40010000
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40001800 	.word	0x40001800

08004bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0202 	mvn.w	r2, #2
 8004bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa5b 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa4d 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa5e 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0204 	mvn.w	r2, #4
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa35 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa27 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa38 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0208 	mvn.w	r2, #8
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2204      	movs	r2, #4
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa0f 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa01 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fa12 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0210 	mvn.w	r2, #16
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f9e9 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9db 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f9ec 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00c      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0201 	mvn.w	r2, #1
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc f8bc 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00c      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fdce 	bl	80058ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9bd 	bl	80050ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00c      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0220 	mvn.w	r2, #32
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fda0 	bl	80058d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e0ae      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	f200 809f 	bhi.w	8004f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dce:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004f0d 	.word	0x08004f0d
 8004ddc:	08004f0d 	.word	0x08004f0d
 8004de0:	08004f0d 	.word	0x08004f0d
 8004de4:	08004e49 	.word	0x08004e49
 8004de8:	08004f0d 	.word	0x08004f0d
 8004dec:	08004f0d 	.word	0x08004f0d
 8004df0:	08004f0d 	.word	0x08004f0d
 8004df4:	08004e8b 	.word	0x08004e8b
 8004df8:	08004f0d 	.word	0x08004f0d
 8004dfc:	08004f0d 	.word	0x08004f0d
 8004e00:	08004f0d 	.word	0x08004f0d
 8004e04:	08004ecb 	.word	0x08004ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fa24 	bl	800525c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0208 	orr.w	r2, r2, #8
 8004e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0204 	bic.w	r2, r2, #4
 8004e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6999      	ldr	r1, [r3, #24]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	619a      	str	r2, [r3, #24]
      break;
 8004e46:	e064      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fa74 	bl	800533c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6999      	ldr	r1, [r3, #24]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	021a      	lsls	r2, r3, #8
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	619a      	str	r2, [r3, #24]
      break;
 8004e88:	e043      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fac9 	bl	8005428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0208 	orr.w	r2, r2, #8
 8004ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0204 	bic.w	r2, r2, #4
 8004eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69d9      	ldr	r1, [r3, #28]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
      break;
 8004ec8:	e023      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fb1d 	bl	8005510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69d9      	ldr	r1, [r3, #28]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	021a      	lsls	r2, r3, #8
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	61da      	str	r2, [r3, #28]
      break;
 8004f0a:	e002      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIM_ConfigClockSource+0x1c>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e0b4      	b.n	80050aa <HAL_TIM_ConfigClockSource+0x186>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f78:	d03e      	beq.n	8004ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7e:	f200 8087 	bhi.w	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f86:	f000 8086 	beq.w	8005096 <HAL_TIM_ConfigClockSource+0x172>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8e:	d87f      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b70      	cmp	r3, #112	@ 0x70
 8004f92:	d01a      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0xa6>
 8004f94:	2b70      	cmp	r3, #112	@ 0x70
 8004f96:	d87b      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b60      	cmp	r3, #96	@ 0x60
 8004f9a:	d050      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x11a>
 8004f9c:	2b60      	cmp	r3, #96	@ 0x60
 8004f9e:	d877      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b50      	cmp	r3, #80	@ 0x50
 8004fa2:	d03c      	beq.n	800501e <HAL_TIM_ConfigClockSource+0xfa>
 8004fa4:	2b50      	cmp	r3, #80	@ 0x50
 8004fa6:	d873      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b40      	cmp	r3, #64	@ 0x40
 8004faa:	d058      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x13a>
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d86f      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b30      	cmp	r3, #48	@ 0x30
 8004fb2:	d064      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b30      	cmp	r3, #48	@ 0x30
 8004fb6:	d86b      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d060      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d867      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d05c      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x15a>
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d05a      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x15a>
 8004fc8:	e062      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fda:	f000 fb69 	bl	80056b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	609a      	str	r2, [r3, #8]
      break;
 8004ff6:	e04f      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005008:	f000 fb52 	bl	80056b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800501a:	609a      	str	r2, [r3, #8]
      break;
 800501c:	e03c      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502a:	461a      	mov	r2, r3
 800502c:	f000 fac6 	bl	80055bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2150      	movs	r1, #80	@ 0x50
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb1f 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 800503c:	e02c      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800504a:	461a      	mov	r2, r3
 800504c:	f000 fae5 	bl	800561a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2160      	movs	r1, #96	@ 0x60
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fb0f 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 800505c:	e01c      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800506a:	461a      	mov	r2, r3
 800506c:	f000 faa6 	bl	80055bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2140      	movs	r1, #64	@ 0x40
 8005076:	4618      	mov	r0, r3
 8005078:	f000 faff 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 800507c:	e00c      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f000 faf6 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 800508e:	e003      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      break;
 8005094:	e000      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a46      	ldr	r2, [pc, #280]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005122:	d00f      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a43      	ldr	r2, [pc, #268]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a42      	ldr	r2, [pc, #264]	@ (8005238 <TIM_Base_SetConfig+0x134>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a41      	ldr	r2, [pc, #260]	@ (800523c <TIM_Base_SetConfig+0x138>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a40      	ldr	r2, [pc, #256]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d02b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005164:	d027      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a32      	ldr	r2, [pc, #200]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d023      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a31      	ldr	r2, [pc, #196]	@ (8005238 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a30      	ldr	r2, [pc, #192]	@ (800523c <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2e      	ldr	r2, [pc, #184]	@ (8005244 <TIM_Base_SetConfig+0x140>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2d      	ldr	r2, [pc, #180]	@ (8005248 <TIM_Base_SetConfig+0x144>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2c      	ldr	r2, [pc, #176]	@ (800524c <TIM_Base_SetConfig+0x148>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <TIM_Base_SetConfig+0x14c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005254 <TIM_Base_SetConfig+0x150>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a29      	ldr	r2, [pc, #164]	@ (8005258 <TIM_Base_SetConfig+0x154>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a10      	ldr	r2, [pc, #64]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a12      	ldr	r2, [pc, #72]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]
  }
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800
 8005250:	40001800 	.word	0x40001800
 8005254:	40001c00 	.word	0x40001c00
 8005258:	40002000 	.word	0x40002000

0800525c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f023 0201 	bic.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 0302 	bic.w	r3, r3, #2
 80052a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <TIM_OC1_SetConfig+0xd8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC1_SetConfig+0x64>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <TIM_OC1_SetConfig+0xdc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10c      	bne.n	80052da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0308 	bic.w	r3, r3, #8
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a15      	ldr	r2, [pc, #84]	@ (8005334 <TIM_OC1_SetConfig+0xd8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_OC1_SetConfig+0x8e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a14      	ldr	r2, [pc, #80]	@ (8005338 <TIM_OC1_SetConfig+0xdc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d111      	bne.n	800530e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <TIM_OC2_SetConfig+0xe4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC2_SetConfig+0x68>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a21      	ldr	r2, [pc, #132]	@ (8005424 <TIM_OC2_SetConfig+0xe8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10d      	bne.n	80053c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <TIM_OC2_SetConfig+0xe4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC2_SetConfig+0x94>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <TIM_OC2_SetConfig+0xe8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d113      	bne.n	80053f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400

08005428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <TIM_OC3_SetConfig+0xe0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_OC3_SetConfig+0x66>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a20      	ldr	r2, [pc, #128]	@ (800550c <TIM_OC3_SetConfig+0xe4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10d      	bne.n	80054aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <TIM_OC3_SetConfig+0xe0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0x92>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a15      	ldr	r2, [pc, #84]	@ (800550c <TIM_OC3_SetConfig+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40010000 	.word	0x40010000
 800550c:	40010400 	.word	0x40010400

08005510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a12      	ldr	r2, [pc, #72]	@ (80055b4 <TIM_OC4_SetConfig+0xa4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC4_SetConfig+0x68>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a11      	ldr	r2, [pc, #68]	@ (80055b8 <TIM_OC4_SetConfig+0xa8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d109      	bne.n	800558c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	019b      	lsls	r3, r3, #6
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400

080055bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0201 	bic.w	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f023 030a 	bic.w	r3, r3, #10
 80055f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561a:	b480      	push	{r7}
 800561c:	b087      	sub	sp, #28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f023 0210 	bic.w	r2, r3, #16
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	031b      	lsls	r3, r3, #12
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	f043 0307 	orr.w	r3, r3, #7
 800569c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	021a      	lsls	r2, r3, #8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	2201      	movs	r2, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	431a      	orrs	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005750:	2302      	movs	r3, #2
 8005752:	e05a      	b.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a0:	d01d      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1d      	ldr	r2, [pc, #116]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a18      	ldr	r2, [pc, #96]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a17      	ldr	r2, [pc, #92]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a15      	ldr	r2, [pc, #84]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10c      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40010400 	.word	0x40010400
 800582c:	40014000 	.word	0x40014000
 8005830:	40001800 	.word	0x40001800

08005834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800584c:	2302      	movs	r3, #2
 800584e:	e03d      	b.n	80058cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e042      	b.n	8005998 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc fb24 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	@ 0x24
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fdff 	bl	8006548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d175      	bne.n	8005aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_UART_Transmit+0x2c>
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e06e      	b.n	8005aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2221      	movs	r2, #33	@ 0x21
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059de:	f7fc fbad 	bl	800213c <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f8:	d108      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a14:	e02e      	b.n	8005a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fb9b 	bl	800615c <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e03a      	b.n	8005aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	3302      	adds	r3, #2
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e007      	b.n	8005a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1cb      	bne.n	8005a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2140      	movs	r1, #64	@ 0x40
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fb67 	bl	800615c <UART_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e006      	b.n	8005aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e000      	b.n	8005aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08a      	sub	sp, #40	@ 0x28
 8005aba:	af02      	add	r7, sp, #8
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	f040 8081 	bne.w	8005bda <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_UART_Receive+0x2e>
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e079      	b.n	8005bdc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2222      	movs	r2, #34	@ 0x22
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005afc:	f7fc fb1e 	bl	800213c <HAL_GetTick>
 8005b00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b16:	d108      	bne.n	8005b2a <HAL_UART_Receive+0x74>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e003      	b.n	8005b32 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005b32:	e047      	b.n	8005bc4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fb0c 	bl	800615c <UART_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e042      	b.n	8005bdc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10c      	bne.n	8005b76 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	3302      	adds	r3, #2
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e01f      	b.n	8005bb6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7e:	d007      	beq.n	8005b90 <HAL_UART_Receive+0xda>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <HAL_UART_Receive+0xe8>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e008      	b.n	8005bb0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1b2      	bne.n	8005b34 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0ba      	sub	sp, #232	@ 0xe8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_UART_IRQHandler+0x66>
 8005c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fbc2 	bl	80063cc <UART_Receive_IT>
      return;
 8005c48:	e25b      	b.n	8006102 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80de 	beq.w	8005e10 <HAL_UART_IRQHandler+0x22c>
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80d1 	beq.w	8005e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_UART_IRQHandler+0xae>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_UART_IRQHandler+0xd2>
 8005c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cae:	f043 0202 	orr.w	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_UART_IRQHandler+0xf6>
 8005cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	f043 0204 	orr.w	r2, r3, #4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <HAL_UART_IRQHandler+0x126>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	f043 0208 	orr.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 81f2 	beq.w	80060f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_UART_IRQHandler+0x14e>
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fb4d 	bl	80063cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d3c:	2b40      	cmp	r3, #64	@ 0x40
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_UART_IRQHandler+0x17a>
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04f      	beq.n	8005dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa55 	bl	800620e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d141      	bne.n	8005df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1d9      	bne.n	8005d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dca:	4a7e      	ldr	r2, [pc, #504]	@ (8005fc4 <HAL_UART_IRQHandler+0x3e0>)
 8005dcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fc ff44 	bl	8002c60 <HAL_DMA_Abort_IT>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	e00e      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f99e 	bl	8006130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	e00a      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f99a 	bl	8006130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e006      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f996 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e0a:	e175      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	bf00      	nop
    return;
 8005e0e:	e173      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	f040 814f 	bne.w	80060b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8148 	beq.w	80060b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8141 	beq.w	80060b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	f040 80b6 	bne.w	8005fc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8145 	beq.w	80060fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f080 813e 	bcs.w	80060fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e92:	f000 8088 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1d9      	bne.n	8005e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e1      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e3      	bne.n	8005f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fc fded 	bl	8002b80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f8c1 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fc2:	e09b      	b.n	80060fc <HAL_UART_IRQHandler+0x518>
 8005fc4:	080062d5 	.word	0x080062d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 808e 	beq.w	8006100 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8089 	beq.w	8006100 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006012:	647a      	str	r2, [r7, #68]	@ 0x44
 8006014:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e3      	bne.n	8005fee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	623b      	str	r3, [r7, #32]
   return(result);
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800604a:	633a      	str	r2, [r7, #48]	@ 0x30
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e3      	bne.n	8006026 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	60fb      	str	r3, [r7, #12]
   return(result);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006090:	61fa      	str	r2, [r7, #28]
 8006092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	617b      	str	r3, [r7, #20]
   return(result);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e3      	bne.n	800606c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f847 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060b6:	e023      	b.n	8006100 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <HAL_UART_IRQHandler+0x4f4>
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f913 	bl	80062fc <UART_Transmit_IT>
    return;
 80060d6:	e014      	b.n	8006102 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <HAL_UART_IRQHandler+0x51e>
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f953 	bl	800639c <UART_EndTransmit_IT>
    return;
 80060f6:	e004      	b.n	8006102 <HAL_UART_IRQHandler+0x51e>
    return;
 80060f8:	bf00      	nop
 80060fa:	e002      	b.n	8006102 <HAL_UART_IRQHandler+0x51e>
      return;
 80060fc:	bf00      	nop
 80060fe:	e000      	b.n	8006102 <HAL_UART_IRQHandler+0x51e>
      return;
 8006100:	bf00      	nop
  }
}
 8006102:	37e8      	adds	r7, #232	@ 0xe8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616c:	e03b      	b.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006174:	d037      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fb ffe1 	bl	800213c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <UART_WaitOnFlagUntilTimeout+0x30>
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e03a      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d023      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b80      	cmp	r3, #128	@ 0x80
 80061a2:	d020      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b40      	cmp	r3, #64	@ 0x40
 80061a8:	d01d      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d116      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f81d 	bl	800620e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2208      	movs	r2, #8
 80061d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e00f      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4013      	ands	r3, r2
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	bf0c      	ite	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	2300      	movne	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	429a      	cmp	r2, r3
 8006202:	d0b4      	beq.n	800616e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800620e:	b480      	push	{r7}
 8006210:	b095      	sub	sp, #84	@ 0x54
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800622c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006236:	643a      	str	r2, [r7, #64]	@ 0x40
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800623c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	61fb      	str	r3, [r7, #28]
   return(result);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800626a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800626c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e5      	bne.n	800624a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	2b01      	cmp	r3, #1
 8006284:	d119      	bne.n	80062ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	60bb      	str	r3, [r7, #8]
   return(result);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f023 0310 	bic.w	r3, r3, #16
 800629c:	647b      	str	r3, [r7, #68]	@ 0x44
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a6:	61ba      	str	r2, [r7, #24]
 80062a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	613b      	str	r3, [r7, #16]
   return(result);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e5      	bne.n	8006286 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062c8:	bf00      	nop
 80062ca:	3754      	adds	r7, #84	@ 0x54
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff ff1e 	bl	8006130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b21      	cmp	r3, #33	@ 0x21
 800630e:	d13e      	bne.n	800638e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006318:	d114      	bne.n	8006344 <UART_Transmit_IT+0x48>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d110      	bne.n	8006344 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006336:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]
 8006342:	e008      	b.n	8006356 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6211      	str	r1, [r2, #32]
 800634e:	781a      	ldrb	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4619      	mov	r1, r3
 8006364:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006378:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006388:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fea3 	bl	8006108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	@ 0x30
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b22      	cmp	r3, #34	@ 0x22
 80063de:	f040 80ae 	bne.w	800653e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ea:	d117      	bne.n	800641c <UART_Receive_IT+0x50>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d113      	bne.n	800641c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640a:	b29a      	uxth	r2, r3
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	1c9a      	adds	r2, r3, #2
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	629a      	str	r2, [r3, #40]	@ 0x28
 800641a:	e026      	b.n	800646a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800642e:	d007      	beq.n	8006440 <UART_Receive_IT+0x74>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <UART_Receive_IT+0x82>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d106      	bne.n	800644e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e008      	b.n	8006460 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29b      	uxth	r3, r3
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	4619      	mov	r1, r3
 8006478:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800647a:	2b00      	cmp	r3, #0
 800647c:	d15d      	bne.n	800653a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0220 	bic.w	r2, r2, #32
 800648c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800649c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d135      	bne.n	8006530 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	613b      	str	r3, [r7, #16]
   return(result);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ea:	623a      	str	r2, [r7, #32]
 80064ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	69f9      	ldr	r1, [r7, #28]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b10      	cmp	r3, #16
 800650a:	d10a      	bne.n	8006522 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff fe0b 	bl	8006144 <HAL_UARTEx_RxEventCallback>
 800652e:	e002      	b.n	8006536 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fdf3 	bl	800611c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e002      	b.n	8006540 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3730      	adds	r7, #48	@ 0x30
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800654c:	b0c0      	sub	sp, #256	@ 0x100
 800654e:	af00      	add	r7, sp, #0
 8006550:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	68d9      	ldr	r1, [r3, #12]
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	ea40 0301 	orr.w	r3, r0, r1
 8006570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	431a      	orrs	r2, r3
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	431a      	orrs	r2, r3
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065a0:	f021 010c 	bic.w	r1, r1, #12
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065ae:	430b      	orrs	r3, r1
 80065b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c2:	6999      	ldr	r1, [r3, #24]
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	ea40 0301 	orr.w	r3, r0, r1
 80065ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b8f      	ldr	r3, [pc, #572]	@ (8006814 <UART_SetConfig+0x2cc>)
 80065d8:	429a      	cmp	r2, r3
 80065da:	d005      	beq.n	80065e8 <UART_SetConfig+0xa0>
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006818 <UART_SetConfig+0x2d0>)
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d104      	bne.n	80065f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e8:	f7fd fbf4 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 80065ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065f0:	e003      	b.n	80065fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065f2:	f7fd fbdb 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 80065f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006604:	f040 810c 	bne.w	8006820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006612:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800661a:	4622      	mov	r2, r4
 800661c:	462b      	mov	r3, r5
 800661e:	1891      	adds	r1, r2, r2
 8006620:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006622:	415b      	adcs	r3, r3
 8006624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800662a:	4621      	mov	r1, r4
 800662c:	eb12 0801 	adds.w	r8, r2, r1
 8006630:	4629      	mov	r1, r5
 8006632:	eb43 0901 	adc.w	r9, r3, r1
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800664a:	4690      	mov	r8, r2
 800664c:	4699      	mov	r9, r3
 800664e:	4623      	mov	r3, r4
 8006650:	eb18 0303 	adds.w	r3, r8, r3
 8006654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006658:	462b      	mov	r3, r5
 800665a:	eb49 0303 	adc.w	r3, r9, r3
 800665e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800666e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006676:	460b      	mov	r3, r1
 8006678:	18db      	adds	r3, r3, r3
 800667a:	653b      	str	r3, [r7, #80]	@ 0x50
 800667c:	4613      	mov	r3, r2
 800667e:	eb42 0303 	adc.w	r3, r2, r3
 8006682:	657b      	str	r3, [r7, #84]	@ 0x54
 8006684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800668c:	f7f9 fe18 	bl	80002c0 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4b61      	ldr	r3, [pc, #388]	@ (800681c <UART_SetConfig+0x2d4>)
 8006696:	fba3 2302 	umull	r2, r3, r3, r2
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	011c      	lsls	r4, r3, #4
 800669e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	1891      	adds	r1, r2, r2
 80066b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066b8:	415b      	adcs	r3, r3
 80066ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066c0:	4641      	mov	r1, r8
 80066c2:	eb12 0a01 	adds.w	sl, r2, r1
 80066c6:	4649      	mov	r1, r9
 80066c8:	eb43 0b01 	adc.w	fp, r3, r1
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e0:	4692      	mov	sl, r2
 80066e2:	469b      	mov	fp, r3
 80066e4:	4643      	mov	r3, r8
 80066e6:	eb1a 0303 	adds.w	r3, sl, r3
 80066ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066ee:	464b      	mov	r3, r9
 80066f0:	eb4b 0303 	adc.w	r3, fp, r3
 80066f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006704:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800670c:	460b      	mov	r3, r1
 800670e:	18db      	adds	r3, r3, r3
 8006710:	643b      	str	r3, [r7, #64]	@ 0x40
 8006712:	4613      	mov	r3, r2
 8006714:	eb42 0303 	adc.w	r3, r2, r3
 8006718:	647b      	str	r3, [r7, #68]	@ 0x44
 800671a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800671e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006722:	f7f9 fdcd 	bl	80002c0 <__aeabi_uldivmod>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4611      	mov	r1, r2
 800672c:	4b3b      	ldr	r3, [pc, #236]	@ (800681c <UART_SetConfig+0x2d4>)
 800672e:	fba3 2301 	umull	r2, r3, r3, r1
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	2264      	movs	r2, #100	@ 0x64
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	1acb      	subs	r3, r1, r3
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006742:	4b36      	ldr	r3, [pc, #216]	@ (800681c <UART_SetConfig+0x2d4>)
 8006744:	fba3 2302 	umull	r2, r3, r3, r2
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006750:	441c      	add	r4, r3
 8006752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006756:	2200      	movs	r2, #0
 8006758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800675c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	1891      	adds	r1, r2, r2
 800676a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800676c:	415b      	adcs	r3, r3
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006774:	4641      	mov	r1, r8
 8006776:	1851      	adds	r1, r2, r1
 8006778:	6339      	str	r1, [r7, #48]	@ 0x30
 800677a:	4649      	mov	r1, r9
 800677c:	414b      	adcs	r3, r1
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800678c:	4659      	mov	r1, fp
 800678e:	00cb      	lsls	r3, r1, #3
 8006790:	4651      	mov	r1, sl
 8006792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006796:	4651      	mov	r1, sl
 8006798:	00ca      	lsls	r2, r1, #3
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	4642      	mov	r2, r8
 80067a2:	189b      	adds	r3, r3, r2
 80067a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067a8:	464b      	mov	r3, r9
 80067aa:	460a      	mov	r2, r1
 80067ac:	eb42 0303 	adc.w	r3, r2, r3
 80067b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067c8:	460b      	mov	r3, r1
 80067ca:	18db      	adds	r3, r3, r3
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ce:	4613      	mov	r3, r2
 80067d0:	eb42 0303 	adc.w	r3, r2, r3
 80067d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067de:	f7f9 fd6f 	bl	80002c0 <__aeabi_uldivmod>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <UART_SetConfig+0x2d4>)
 80067e8:	fba3 1302 	umull	r1, r3, r3, r2
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	2164      	movs	r1, #100	@ 0x64
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	3332      	adds	r3, #50	@ 0x32
 80067fa:	4a08      	ldr	r2, [pc, #32]	@ (800681c <UART_SetConfig+0x2d4>)
 80067fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	f003 0207 	and.w	r2, r3, #7
 8006806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4422      	add	r2, r4
 800680e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006810:	e106      	b.n	8006a20 <UART_SetConfig+0x4d8>
 8006812:	bf00      	nop
 8006814:	40011000 	.word	0x40011000
 8006818:	40011400 	.word	0x40011400
 800681c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006824:	2200      	movs	r2, #0
 8006826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800682a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800682e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006832:	4642      	mov	r2, r8
 8006834:	464b      	mov	r3, r9
 8006836:	1891      	adds	r1, r2, r2
 8006838:	6239      	str	r1, [r7, #32]
 800683a:	415b      	adcs	r3, r3
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
 800683e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006842:	4641      	mov	r1, r8
 8006844:	1854      	adds	r4, r2, r1
 8006846:	4649      	mov	r1, r9
 8006848:	eb43 0501 	adc.w	r5, r3, r1
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	00eb      	lsls	r3, r5, #3
 8006856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800685a:	00e2      	lsls	r2, r4, #3
 800685c:	4614      	mov	r4, r2
 800685e:	461d      	mov	r5, r3
 8006860:	4643      	mov	r3, r8
 8006862:	18e3      	adds	r3, r4, r3
 8006864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006868:	464b      	mov	r3, r9
 800686a:	eb45 0303 	adc.w	r3, r5, r3
 800686e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800687e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800688e:	4629      	mov	r1, r5
 8006890:	008b      	lsls	r3, r1, #2
 8006892:	4621      	mov	r1, r4
 8006894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006898:	4621      	mov	r1, r4
 800689a:	008a      	lsls	r2, r1, #2
 800689c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068a0:	f7f9 fd0e 	bl	80002c0 <__aeabi_uldivmod>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4b60      	ldr	r3, [pc, #384]	@ (8006a2c <UART_SetConfig+0x4e4>)
 80068aa:	fba3 2302 	umull	r2, r3, r3, r2
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	011c      	lsls	r4, r3, #4
 80068b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068c4:	4642      	mov	r2, r8
 80068c6:	464b      	mov	r3, r9
 80068c8:	1891      	adds	r1, r2, r2
 80068ca:	61b9      	str	r1, [r7, #24]
 80068cc:	415b      	adcs	r3, r3
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d4:	4641      	mov	r1, r8
 80068d6:	1851      	adds	r1, r2, r1
 80068d8:	6139      	str	r1, [r7, #16]
 80068da:	4649      	mov	r1, r9
 80068dc:	414b      	adcs	r3, r1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068ec:	4659      	mov	r1, fp
 80068ee:	00cb      	lsls	r3, r1, #3
 80068f0:	4651      	mov	r1, sl
 80068f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f6:	4651      	mov	r1, sl
 80068f8:	00ca      	lsls	r2, r1, #3
 80068fa:	4610      	mov	r0, r2
 80068fc:	4619      	mov	r1, r3
 80068fe:	4603      	mov	r3, r0
 8006900:	4642      	mov	r2, r8
 8006902:	189b      	adds	r3, r3, r2
 8006904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006908:	464b      	mov	r3, r9
 800690a:	460a      	mov	r2, r1
 800690c:	eb42 0303 	adc.w	r3, r2, r3
 8006910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800691e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800692c:	4649      	mov	r1, r9
 800692e:	008b      	lsls	r3, r1, #2
 8006930:	4641      	mov	r1, r8
 8006932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006936:	4641      	mov	r1, r8
 8006938:	008a      	lsls	r2, r1, #2
 800693a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800693e:	f7f9 fcbf 	bl	80002c0 <__aeabi_uldivmod>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4611      	mov	r1, r2
 8006948:	4b38      	ldr	r3, [pc, #224]	@ (8006a2c <UART_SetConfig+0x4e4>)
 800694a:	fba3 2301 	umull	r2, r3, r3, r1
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2264      	movs	r2, #100	@ 0x64
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	1acb      	subs	r3, r1, r3
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	3332      	adds	r3, #50	@ 0x32
 800695c:	4a33      	ldr	r2, [pc, #204]	@ (8006a2c <UART_SetConfig+0x4e4>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006968:	441c      	add	r4, r3
 800696a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800696e:	2200      	movs	r2, #0
 8006970:	673b      	str	r3, [r7, #112]	@ 0x70
 8006972:	677a      	str	r2, [r7, #116]	@ 0x74
 8006974:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	1891      	adds	r1, r2, r2
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	415b      	adcs	r3, r3
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006988:	4641      	mov	r1, r8
 800698a:	1851      	adds	r1, r2, r1
 800698c:	6039      	str	r1, [r7, #0]
 800698e:	4649      	mov	r1, r9
 8006990:	414b      	adcs	r3, r1
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069a0:	4659      	mov	r1, fp
 80069a2:	00cb      	lsls	r3, r1, #3
 80069a4:	4651      	mov	r1, sl
 80069a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069aa:	4651      	mov	r1, sl
 80069ac:	00ca      	lsls	r2, r1, #3
 80069ae:	4610      	mov	r0, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	4642      	mov	r2, r8
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ba:	464b      	mov	r3, r9
 80069bc:	460a      	mov	r2, r1
 80069be:	eb42 0303 	adc.w	r3, r2, r3
 80069c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069dc:	4649      	mov	r1, r9
 80069de:	008b      	lsls	r3, r1, #2
 80069e0:	4641      	mov	r1, r8
 80069e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e6:	4641      	mov	r1, r8
 80069e8:	008a      	lsls	r2, r1, #2
 80069ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069ee:	f7f9 fc67 	bl	80002c0 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <UART_SetConfig+0x4e4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	@ 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	3332      	adds	r3, #50	@ 0x32
 8006a0a:	4a08      	ldr	r2, [pc, #32]	@ (8006a2c <UART_SetConfig+0x4e4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4422      	add	r2, r4
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a26:	46bd      	mov	sp, r7
 8006a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a2c:	51eb851f 	.word	0x51eb851f

08006a30 <__NVIC_SetPriority>:
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	6039      	str	r1, [r7, #0]
 8006a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db0a      	blt.n	8006a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	490c      	ldr	r1, [pc, #48]	@ (8006a7c <__NVIC_SetPriority+0x4c>)
 8006a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4e:	0112      	lsls	r2, r2, #4
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	440b      	add	r3, r1
 8006a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a58:	e00a      	b.n	8006a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4908      	ldr	r1, [pc, #32]	@ (8006a80 <__NVIC_SetPriority+0x50>)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	3b04      	subs	r3, #4
 8006a68:	0112      	lsls	r2, r2, #4
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	761a      	strb	r2, [r3, #24]
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	e000e100 	.word	0xe000e100
 8006a80:	e000ed00 	.word	0xe000ed00

08006a84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <SysTick_Handler+0x1c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a8c:	f002 f852 	bl	8008b34 <xTaskGetSchedulerState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d001      	beq.n	8006a9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a96:	f002 ff47 	bl	8009928 <xPortSysTickHandler>
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010

08006aa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	f06f 0004 	mvn.w	r0, #4
 8006aae:	f7ff ffbf 	bl	8006a30 <__NVIC_SetPriority>
#endif
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006aca:	f06f 0305 	mvn.w	r3, #5
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	e00c      	b.n	8006aec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <osKernelInitialize+0x44>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ada:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <osKernelInitialize+0x44>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	e002      	b.n	8006aec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aec:	687b      	ldr	r3, [r7, #4]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	200006f8 	.word	0x200006f8

08006b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b06:	f3ef 8305 	mrs	r3, IPSR
 8006b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b12:	f06f 0305 	mvn.w	r3, #5
 8006b16:	607b      	str	r3, [r7, #4]
 8006b18:	e010      	b.n	8006b3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <osKernelStart+0x48>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d109      	bne.n	8006b36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b22:	f7ff ffbf 	bl	8006aa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b26:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <osKernelStart+0x48>)
 8006b28:	2202      	movs	r2, #2
 8006b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b2c:	f001 fba4 	bl	8008278 <vTaskStartScheduler>
      stat = osOK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	e002      	b.n	8006b3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b3c:	687b      	ldr	r3, [r7, #4]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	200006f8 	.word	0x200006f8

08006b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08e      	sub	sp, #56	@ 0x38
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5c:	f3ef 8305 	mrs	r3, IPSR
 8006b60:	617b      	str	r3, [r7, #20]
  return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d17e      	bne.n	8006c66 <osThreadNew+0x11a>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d07b      	beq.n	8006c66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b6e:	2380      	movs	r3, #128	@ 0x80
 8006b70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b72:	2318      	movs	r3, #24
 8006b74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d045      	beq.n	8006c12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <osThreadNew+0x48>
        name = attr->name;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <osThreadNew+0x6e>
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b38      	cmp	r3, #56	@ 0x38
 8006bac:	d805      	bhi.n	8006bba <osThreadNew+0x6e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <osThreadNew+0x72>
        return (NULL);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e054      	b.n	8006c68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <osThreadNew+0xa8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b5b      	cmp	r3, #91	@ 0x5b
 8006bdc:	d90a      	bls.n	8006bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <osThreadNew+0xa8>
        mem = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e010      	b.n	8006c16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <osThreadNew+0xca>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d108      	bne.n	8006c16 <osThreadNew+0xca>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <osThreadNew+0xca>
          mem = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e001      	b.n	8006c16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d110      	bne.n	8006c3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c24:	9202      	str	r2, [sp, #8]
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 f944 	bl	8007ec0 <xTaskCreateStatic>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	e013      	b.n	8006c66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d110      	bne.n	8006c66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f107 0310 	add.w	r3, r7, #16
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f001 f992 	bl	8007f80 <xTaskCreate>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d001      	beq.n	8006c66 <osThreadNew+0x11a>
            hTask = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c66:	693b      	ldr	r3, [r7, #16]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3728      	adds	r7, #40	@ 0x28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c78:	f3ef 8305 	mrs	r3, IPSR
 8006c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <osDelay+0x1c>
    stat = osErrorISR;
 8006c84:	f06f 0305 	mvn.w	r3, #5
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e007      	b.n	8006c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fab8 	bl	800820c <vTaskDelay>
    }
  }

  return (stat);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b088      	sub	sp, #32
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cb2:	f3ef 8305 	mrs	r3, IPSR
 8006cb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cb8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d174      	bne.n	8006da8 <osMutexNew+0x102>
    if (attr != NULL) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <osMutexNew+0x26>
      type = attr->attr_bits;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e001      	b.n	8006cd0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <osMutexNew+0x3a>
      rmtx = 1U;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e001      	b.n	8006ce4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d15c      	bne.n	8006da8 <osMutexNew+0x102>
      mem = -1;
 8006cee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cf2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d015      	beq.n	8006d26 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d006      	beq.n	8006d10 <osMutexNew+0x6a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2b4f      	cmp	r3, #79	@ 0x4f
 8006d08:	d902      	bls.n	8006d10 <osMutexNew+0x6a>
          mem = 1;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	e00c      	b.n	8006d2a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <osMutexNew+0x84>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <osMutexNew+0x84>
            mem = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	e001      	b.n	8006d2a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d112      	bne.n	8006d56 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	2004      	movs	r0, #4
 8006d3e:	f000 fb20 	bl	8007382 <xQueueCreateMutexStatic>
 8006d42:	61f8      	str	r0, [r7, #28]
 8006d44:	e016      	b.n	8006d74 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	f000 fb18 	bl	8007382 <xQueueCreateMutexStatic>
 8006d52:	61f8      	str	r0, [r7, #28]
 8006d54:	e00e      	b.n	8006d74 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006d62:	2004      	movs	r0, #4
 8006d64:	f000 faf5 	bl	8007352 <xQueueCreateMutex>
 8006d68:	61f8      	str	r0, [r7, #28]
 8006d6a:	e003      	b.n	8006d74 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f000 faf0 	bl	8007352 <xQueueCreateMutex>
 8006d72:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <osMutexNew+0xee>
        if (attr != NULL) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <osMutexNew+0xe2>
          name = attr->name;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e001      	b.n	8006d8c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006d8c:	68f9      	ldr	r1, [r7, #12]
 8006d8e:	69f8      	ldr	r0, [r7, #28]
 8006d90:	f001 f838 	bl	8007e04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <osMutexNew+0x102>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006da8:	69fb      	ldr	r3, [r7, #28]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd0:	f3ef 8305 	mrs	r3, IPSR
 8006dd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dd6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006ddc:	f06f 0305 	mvn.w	r3, #5
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e02c      	b.n	8006e3e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006dea:	f06f 0303 	mvn.w	r3, #3
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	e025      	b.n	8006e3e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d011      	beq.n	8006e1c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 fb11 	bl	8007422 <xQueueTakeMutexRecursive>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d01b      	beq.n	8006e3e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006e0c:	f06f 0301 	mvn.w	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e014      	b.n	8006e3e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006e14:	f06f 0302 	mvn.w	r3, #2
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e010      	b.n	8006e3e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f000 fdb8 	bl	8007994 <xQueueSemaphoreTake>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d009      	beq.n	8006e3e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006e30:	f06f 0301 	mvn.w	r3, #1
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e002      	b.n	8006e3e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006e38:	f06f 0302 	mvn.w	r3, #2
 8006e3c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006e3e:	697b      	ldr	r3, [r7, #20]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f023 0301 	bic.w	r3, r3, #1
 8006e56:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e64:	f3ef 8305 	mrs	r3, IPSR
 8006e68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e6a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006e70:	f06f 0305 	mvn.w	r3, #5
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	e01f      	b.n	8006eb8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006e7e:	f06f 0303 	mvn.w	r3, #3
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e018      	b.n	8006eb8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006e8c:	6938      	ldr	r0, [r7, #16]
 8006e8e:	f000 fa93 	bl	80073b8 <xQueueGiveMutexRecursive>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d00f      	beq.n	8006eb8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e98:	f06f 0302 	mvn.w	r3, #2
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e00b      	b.n	8006eb8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6938      	ldr	r0, [r7, #16]
 8006ea8:	f000 faf2 	bl	8007490 <xQueueGenericSend>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d002      	beq.n	8006eb8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006eb2:	f06f 0302 	mvn.w	r3, #2
 8006eb6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006eb8:	697b      	ldr	r3, [r7, #20]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a07      	ldr	r2, [pc, #28]	@ (8006ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	4a06      	ldr	r2, [pc, #24]	@ (8006ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8006eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2280      	movs	r2, #128	@ 0x80
 8006ee0:	601a      	str	r2, [r3, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	200006fc 	.word	0x200006fc
 8006ef4:	20000758 	.word	0x20000758

08006ef8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4a06      	ldr	r2, [pc, #24]	@ (8006f28 <vApplicationGetTimerTaskMemory+0x30>)
 8006f0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	20000958 	.word	0x20000958
 8006f28:	200009b4 	.word	0x200009b4

08006f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f103 0208 	add.w	r2, r3, #8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f103 0208 	add.w	r2, r3, #8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f103 0208 	add.w	r2, r3, #8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	601a      	str	r2, [r3, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe4:	d103      	bne.n	8006fee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e00c      	b.n	8007008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e002      	b.n	8006ffc <vListInsert+0x2e>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	429a      	cmp	r2, r3
 8007006:	d2f6      	bcs.n	8006ff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6892      	ldr	r2, [r2, #8]
 8007056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6852      	ldr	r2, [r2, #4]
 8007060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d103      	bne.n	8007074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	1e5a      	subs	r2, r3, #1
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070c0:	f002 fba2 	bl	8009808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f0:	3b01      	subs	r3, #1
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	441a      	add	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	22ff      	movs	r2, #255	@ 0xff
 8007104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	22ff      	movs	r2, #255	@ 0xff
 800710c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d114      	bne.n	8007140 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01a      	beq.n	8007154 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3310      	adds	r3, #16
 8007122:	4618      	mov	r0, r3
 8007124:	f001 fb36 	bl	8008794 <xTaskRemoveFromEventList>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d012      	beq.n	8007154 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800712e:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <xQueueGenericReset+0xd0>)
 8007130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	e009      	b.n	8007154 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3310      	adds	r3, #16
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fef1 	bl	8006f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3324      	adds	r3, #36	@ 0x24
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff feec 	bl	8006f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007154:	f002 fb8a 	bl	800986c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007158:	2301      	movs	r3, #1
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08e      	sub	sp, #56	@ 0x38
 800716c:	af02      	add	r7, sp, #8
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10b      	bne.n	8007194 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800718e:	bf00      	nop
 8007190:	bf00      	nop
 8007192:	e7fd      	b.n	8007190 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	e7fd      	b.n	80071ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <xQueueGenericCreateStatic+0x56>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <xQueueGenericCreateStatic+0x5a>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueGenericCreateStatic+0x5c>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	623b      	str	r3, [r7, #32]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xQueueGenericCreateStatic+0x84>
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <xQueueGenericCreateStatic+0x88>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <xQueueGenericCreateStatic+0x8a>
 80071f0:	2300      	movs	r3, #0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	61fb      	str	r3, [r7, #28]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800720e:	2350      	movs	r3, #80	@ 0x50
 8007210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b50      	cmp	r3, #80	@ 0x50
 8007216:	d00b      	beq.n	8007230 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	61bb      	str	r3, [r7, #24]
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007230:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00d      	beq.n	8007258 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007244:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f840 	bl	80072d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800725a:	4618      	mov	r0, r3
 800725c:	3730      	adds	r7, #48	@ 0x30
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007262:	b580      	push	{r7, lr}
 8007264:	b08a      	sub	sp, #40	@ 0x28
 8007266:	af02      	add	r7, sp, #8
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	4613      	mov	r3, r2
 800726e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	613b      	str	r3, [r7, #16]
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	e7fd      	b.n	800728a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3350      	adds	r3, #80	@ 0x50
 800729c:	4618      	mov	r0, r3
 800729e:	f002 fbd5 	bl	8009a4c <pvPortMalloc>
 80072a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3350      	adds	r3, #80	@ 0x50
 80072b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072bc:	79fa      	ldrb	r2, [r7, #7]
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	4613      	mov	r3, r2
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f805 	bl	80072d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ce:	69bb      	ldr	r3, [r7, #24]
	}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007306:	2101      	movs	r1, #1
 8007308:	69b8      	ldr	r0, [r7, #24]
 800730a:	f7ff fec3 	bl	8007094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	78fa      	ldrb	r2, [r7, #3]
 8007312:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00e      	beq.n	800734a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800733e:	2300      	movs	r3, #0
 8007340:	2200      	movs	r2, #0
 8007342:	2100      	movs	r1, #0
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8a3 	bl	8007490 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007352:	b580      	push	{r7, lr}
 8007354:	b086      	sub	sp, #24
 8007356:	af00      	add	r7, sp, #0
 8007358:	4603      	mov	r3, r0
 800735a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	461a      	mov	r2, r3
 8007368:	6939      	ldr	r1, [r7, #16]
 800736a:	6978      	ldr	r0, [r7, #20]
 800736c:	f7ff ff79 	bl	8007262 <xQueueGenericCreate>
 8007370:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff ffd3 	bl	800731e <prvInitialiseMutex>

		return xNewQueue;
 8007378:	68fb      	ldr	r3, [r7, #12]
	}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007382:	b580      	push	{r7, lr}
 8007384:	b088      	sub	sp, #32
 8007386:	af02      	add	r7, sp, #8
 8007388:	4603      	mov	r3, r0
 800738a:	6039      	str	r1, [r7, #0]
 800738c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800738e:	2301      	movs	r3, #1
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2200      	movs	r2, #0
 800739e:	6939      	ldr	r1, [r7, #16]
 80073a0:	6978      	ldr	r0, [r7, #20]
 80073a2:	f7ff fee1 	bl	8007168 <xQueueGenericCreateStatic>
 80073a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff ffb8 	bl	800731e <prvInitialiseMutex>

		return xNewQueue;
 80073ae:	68fb      	ldr	r3, [r7, #12]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60fb      	str	r3, [r7, #12]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	689c      	ldr	r4, [r3, #8]
 80073e6:	f001 fb95 	bl	8008b14 <xTaskGetCurrentTaskHandle>
 80073ea:	4603      	mov	r3, r0
 80073ec:	429c      	cmp	r4, r3
 80073ee:	d111      	bne.n	8007414 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	1e5a      	subs	r2, r3, #1
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d105      	bne.n	800740e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007402:	2300      	movs	r3, #0
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	6938      	ldr	r0, [r7, #16]
 800740a:	f000 f841 	bl	8007490 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800740e:	2301      	movs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	e001      	b.n	8007418 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007418:	697b      	ldr	r3, [r7, #20]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd90      	pop	{r4, r7, pc}

08007422 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007422:	b590      	push	{r4, r7, lr}
 8007424:	b087      	sub	sp, #28
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	e7fd      	b.n	800744a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	689c      	ldr	r4, [r3, #8]
 8007452:	f001 fb5f 	bl	8008b14 <xTaskGetCurrentTaskHandle>
 8007456:	4603      	mov	r3, r0
 8007458:	429c      	cmp	r4, r3
 800745a:	d107      	bne.n	800746c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007466:	2301      	movs	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e00c      	b.n	8007486 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6938      	ldr	r0, [r7, #16]
 8007470:	f000 fa90 	bl	8007994 <xQueueSemaphoreTake>
 8007474:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007486:	697b      	ldr	r3, [r7, #20]
	}
 8007488:	4618      	mov	r0, r3
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08e      	sub	sp, #56	@ 0x38
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10b      	bne.n	80074c4 <xQueueGenericSend+0x34>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	e7fd      	b.n	80074c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <xQueueGenericSend+0x42>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <xQueueGenericSend+0x46>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueGenericSend+0x48>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10b      	bne.n	80074f4 <xQueueGenericSend+0x64>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	e7fd      	b.n	80074f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d103      	bne.n	8007502 <xQueueGenericSend+0x72>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <xQueueGenericSend+0x76>
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <xQueueGenericSend+0x78>
 8007506:	2300      	movs	r3, #0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10b      	bne.n	8007524 <xQueueGenericSend+0x94>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	623b      	str	r3, [r7, #32]
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007524:	f001 fb06 	bl	8008b34 <xTaskGetSchedulerState>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <xQueueGenericSend+0xa4>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <xQueueGenericSend+0xa8>
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <xQueueGenericSend+0xaa>
 8007538:	2300      	movs	r3, #0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10b      	bne.n	8007556 <xQueueGenericSend+0xc6>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	61fb      	str	r3, [r7, #28]
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	e7fd      	b.n	8007552 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007556:	f002 f957 	bl	8009808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <xQueueGenericSend+0xdc>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d129      	bne.n	80075c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007572:	f000 fb37 	bl	8007be4 <prvCopyDataToQueue>
 8007576:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	d010      	beq.n	80075a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	3324      	adds	r3, #36	@ 0x24
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f905 	bl	8008794 <xTaskRemoveFromEventList>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d013      	beq.n	80075b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007590:	4b3f      	ldr	r3, [pc, #252]	@ (8007690 <xQueueGenericSend+0x200>)
 8007592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	e00a      	b.n	80075b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075a8:	4b39      	ldr	r3, [pc, #228]	@ (8007690 <xQueueGenericSend+0x200>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075b8:	f002 f958 	bl	800986c <vPortExitCritical>
				return pdPASS;
 80075bc:	2301      	movs	r3, #1
 80075be:	e063      	b.n	8007688 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075c6:	f002 f951 	bl	800986c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e05c      	b.n	8007688 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f93f 	bl	800885c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075e2:	f002 f943 	bl	800986c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075e6:	f000 feaf 	bl	8008348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075ea:	f002 f90d 	bl	8009808 <vPortEnterCritical>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075fa:	d103      	bne.n	8007604 <xQueueGenericSend+0x174>
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800760a:	b25b      	sxtb	r3, r3
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007610:	d103      	bne.n	800761a <xQueueGenericSend+0x18a>
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800761a:	f002 f927 	bl	800986c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800761e:	1d3a      	adds	r2, r7, #4
 8007620:	f107 0314 	add.w	r3, r7, #20
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f92e 	bl	8008888 <xTaskCheckForTimeOut>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d124      	bne.n	800767c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007632:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007634:	f000 fbce 	bl	8007dd4 <prvIsQueueFull>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d018      	beq.n	8007670 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	3310      	adds	r3, #16
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f001 f852 	bl	80086f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800764c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800764e:	f000 fb59 	bl	8007d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007652:	f000 fe87 	bl	8008364 <xTaskResumeAll>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f af7c 	bne.w	8007556 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800765e:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <xQueueGenericSend+0x200>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	e772      	b.n	8007556 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007672:	f000 fb47 	bl	8007d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007676:	f000 fe75 	bl	8008364 <xTaskResumeAll>
 800767a:	e76c      	b.n	8007556 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800767c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800767e:	f000 fb41 	bl	8007d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007682:	f000 fe6f 	bl	8008364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007688:	4618      	mov	r0, r3
 800768a:	3738      	adds	r7, #56	@ 0x38
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b090      	sub	sp, #64	@ 0x40
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <xQueueGenericSendFromISR+0x3e>
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <xQueueGenericSendFromISR+0x42>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <xQueueGenericSendFromISR+0x44>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10b      	bne.n	80076f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d103      	bne.n	8007702 <xQueueGenericSendFromISR+0x6e>
 80076fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <xQueueGenericSendFromISR+0x72>
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <xQueueGenericSendFromISR+0x74>
 8007706:	2300      	movs	r3, #0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10b      	bne.n	8007724 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	623b      	str	r3, [r7, #32]
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	e7fd      	b.n	8007720 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007724:	f002 f950 	bl	80099c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007728:	f3ef 8211 	mrs	r2, BASEPRI
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	61fa      	str	r2, [r7, #28]
 800773e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007740:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800774c:	429a      	cmp	r2, r3
 800774e:	d302      	bcc.n	8007756 <xQueueGenericSendFromISR+0xc2>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d12f      	bne.n	80077b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800775c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800776c:	f000 fa3a 	bl	8007be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007770:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007778:	d112      	bne.n	80077a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	d016      	beq.n	80077b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	3324      	adds	r3, #36	@ 0x24
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f804 	bl	8008794 <xTaskRemoveFromEventList>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00e      	beq.n	80077b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e007      	b.n	80077b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80077a4:	3301      	adds	r3, #1
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	b25a      	sxtb	r2, r3
 80077aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077b0:	2301      	movs	r3, #1
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077b4:	e001      	b.n	80077ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3740      	adds	r7, #64	@ 0x40
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	@ 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077dc:	2300      	movs	r3, #0
 80077de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <xQueueReceive+0x32>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	623b      	str	r3, [r7, #32]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <xQueueReceive+0x40>
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <xQueueReceive+0x44>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <xQueueReceive+0x46>
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <xQueueReceive+0x62>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	61fb      	str	r3, [r7, #28]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007832:	f001 f97f 	bl	8008b34 <xTaskGetSchedulerState>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <xQueueReceive+0x72>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <xQueueReceive+0x76>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <xQueueReceive+0x78>
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10b      	bne.n	8007864 <xQueueReceive+0x94>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	61bb      	str	r3, [r7, #24]
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007864:	f001 ffd0 	bl	8009808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01f      	beq.n	80078b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007878:	f000 fa1e 	bl	8007cb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	1e5a      	subs	r2, r3, #1
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00f      	beq.n	80078ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	3310      	adds	r3, #16
 8007890:	4618      	mov	r0, r3
 8007892:	f000 ff7f 	bl	8008794 <xTaskRemoveFromEventList>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800789c:	4b3c      	ldr	r3, [pc, #240]	@ (8007990 <xQueueReceive+0x1c0>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078ac:	f001 ffde 	bl	800986c <vPortExitCritical>
				return pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e069      	b.n	8007988 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ba:	f001 ffd7 	bl	800986c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078be:	2300      	movs	r3, #0
 80078c0:	e062      	b.n	8007988 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078c8:	f107 0310 	add.w	r3, r7, #16
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 ffc5 	bl	800885c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078d6:	f001 ffc9 	bl	800986c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078da:	f000 fd35 	bl	8008348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078de:	f001 ff93 	bl	8009808 <vPortEnterCritical>
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078e8:	b25b      	sxtb	r3, r3
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078ee:	d103      	bne.n	80078f8 <xQueueReceive+0x128>
 80078f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007904:	d103      	bne.n	800790e <xQueueReceive+0x13e>
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800790e:	f001 ffad 	bl	800986c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007912:	1d3a      	adds	r2, r7, #4
 8007914:	f107 0310 	add.w	r3, r7, #16
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f000 ffb4 	bl	8008888 <xTaskCheckForTimeOut>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d123      	bne.n	800796e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007928:	f000 fa3e 	bl	8007da8 <prvIsQueueEmpty>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d017      	beq.n	8007962 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	3324      	adds	r3, #36	@ 0x24
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fed8 	bl	80086f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007942:	f000 f9df 	bl	8007d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007946:	f000 fd0d 	bl	8008364 <xTaskResumeAll>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d189      	bne.n	8007864 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007950:	4b0f      	ldr	r3, [pc, #60]	@ (8007990 <xQueueReceive+0x1c0>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	e780      	b.n	8007864 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007964:	f000 f9ce 	bl	8007d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007968:	f000 fcfc 	bl	8008364 <xTaskResumeAll>
 800796c:	e77a      	b.n	8007864 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800796e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007970:	f000 f9c8 	bl	8007d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007974:	f000 fcf6 	bl	8008364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800797a:	f000 fa15 	bl	8007da8 <prvIsQueueEmpty>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	f43f af6f 	beq.w	8007864 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007986:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007988:	4618      	mov	r0, r3
 800798a:	3730      	adds	r7, #48	@ 0x30
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08e      	sub	sp, #56	@ 0x38
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800799e:	2300      	movs	r3, #0
 80079a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80079a6:	2300      	movs	r3, #0
 80079a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10b      	bne.n	80079c8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	623b      	str	r3, [r7, #32]
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	e7fd      	b.n	80079c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	61fb      	str	r3, [r7, #28]
}
 80079e2:	bf00      	nop
 80079e4:	bf00      	nop
 80079e6:	e7fd      	b.n	80079e4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079e8:	f001 f8a4 	bl	8008b34 <xTaskGetSchedulerState>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <xQueueSemaphoreTake+0x64>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <xQueueSemaphoreTake+0x68>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <xQueueSemaphoreTake+0x6a>
 80079fc:	2300      	movs	r3, #0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	61bb      	str	r3, [r7, #24]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a1a:	f001 fef5 	bl	8009808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d024      	beq.n	8007a74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	1e5a      	subs	r2, r3, #1
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a3a:	f001 f9f5 	bl	8008e28 <pvTaskIncrementMutexHeldCount>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00f      	beq.n	8007a6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4e:	3310      	adds	r3, #16
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fe9f 	bl	8008794 <xTaskRemoveFromEventList>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a5c:	4b54      	ldr	r3, [pc, #336]	@ (8007bb0 <xQueueSemaphoreTake+0x21c>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a6c:	f001 fefe 	bl	800986c <vPortExitCritical>
				return pdPASS;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e098      	b.n	8007ba6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d112      	bne.n	8007aa0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	617b      	str	r3, [r7, #20]
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a98:	f001 fee8 	bl	800986c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e082      	b.n	8007ba6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aa6:	f107 030c 	add.w	r3, r7, #12
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fed6 	bl	800885c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ab4:	f001 feda 	bl	800986c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ab8:	f000 fc46 	bl	8008348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007abc:	f001 fea4 	bl	8009808 <vPortEnterCritical>
 8007ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ac6:	b25b      	sxtb	r3, r3
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007acc:	d103      	bne.n	8007ad6 <xQueueSemaphoreTake+0x142>
 8007ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ae2:	d103      	bne.n	8007aec <xQueueSemaphoreTake+0x158>
 8007ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aec:	f001 febe 	bl	800986c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007af0:	463a      	mov	r2, r7
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fec5 	bl	8008888 <xTaskCheckForTimeOut>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d132      	bne.n	8007b6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b06:	f000 f94f 	bl	8007da8 <prvIsQueueEmpty>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d026      	beq.n	8007b5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007b18:	f001 fe76 	bl	8009808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f825 	bl	8008b70 <xTaskPriorityInherit>
 8007b26:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007b28:	f001 fea0 	bl	800986c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	3324      	adds	r3, #36	@ 0x24
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fddb 	bl	80086f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b3c:	f000 f8e2 	bl	8007d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b40:	f000 fc10 	bl	8008364 <xTaskResumeAll>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f47f af67 	bne.w	8007a1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007b4c:	4b18      	ldr	r3, [pc, #96]	@ (8007bb0 <xQueueSemaphoreTake+0x21c>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	e75d      	b.n	8007a1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b60:	f000 f8d0 	bl	8007d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b64:	f000 fbfe 	bl	8008364 <xTaskResumeAll>
 8007b68:	e757      	b.n	8007a1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b6c:	f000 f8ca 	bl	8007d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b70:	f000 fbf8 	bl	8008364 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b76:	f000 f917 	bl	8007da8 <prvIsQueueEmpty>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f43f af4c 	beq.w	8007a1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00d      	beq.n	8007ba4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007b88:	f001 fe3e 	bl	8009808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b8e:	f000 f811 	bl	8007bb4 <prvGetDisinheritPriorityAfterTimeout>
 8007b92:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f8c0 	bl	8008d20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ba0:	f001 fe64 	bl	800986c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3738      	adds	r7, #56	@ 0x38
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d006      	beq.n	8007bd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	e001      	b.n	8007bd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
	}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10d      	bne.n	8007c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d14d      	bne.n	8007ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 f816 	bl	8008c40 <xTaskPriorityDisinherit>
 8007c14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	609a      	str	r2, [r3, #8]
 8007c1c:	e043      	b.n	8007ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d119      	bne.n	8007c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6858      	ldr	r0, [r3, #4]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	f002 fa97 	bl	800a162 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3c:	441a      	add	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d32b      	bcc.n	8007ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	605a      	str	r2, [r3, #4]
 8007c56:	e026      	b.n	8007ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	68d8      	ldr	r0, [r3, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c60:	461a      	mov	r2, r3
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	f002 fa7d 	bl	800a162 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c70:	425b      	negs	r3, r3
 8007c72:	441a      	add	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d207      	bcs.n	8007c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	441a      	add	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d105      	bne.n	8007ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cae:	697b      	ldr	r3, [r7, #20]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d018      	beq.n	8007cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd2:	441a      	add	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d303      	bcc.n	8007cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68d9      	ldr	r1, [r3, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6838      	ldr	r0, [r7, #0]
 8007cf8:	f002 fa33 	bl	800a162 <memcpy>
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d0c:	f001 fd7c 	bl	8009808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d18:	e011      	b.n	8007d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d012      	beq.n	8007d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3324      	adds	r3, #36	@ 0x24
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fd34 	bl	8008794 <xTaskRemoveFromEventList>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d32:	f000 fe0d 	bl	8008950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	dce9      	bgt.n	8007d1a <prvUnlockQueue+0x16>
 8007d46:	e000      	b.n	8007d4a <prvUnlockQueue+0x46>
					break;
 8007d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	22ff      	movs	r2, #255	@ 0xff
 8007d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d52:	f001 fd8b 	bl	800986c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d56:	f001 fd57 	bl	8009808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d62:	e011      	b.n	8007d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3310      	adds	r3, #16
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fd0f 	bl	8008794 <xTaskRemoveFromEventList>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d7c:	f000 fde8 	bl	8008950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dce9      	bgt.n	8007d64 <prvUnlockQueue+0x60>
 8007d90:	e000      	b.n	8007d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	22ff      	movs	r2, #255	@ 0xff
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d9c:	f001 fd66 	bl	800986c <vPortExitCritical>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007db0:	f001 fd2a 	bl	8009808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e001      	b.n	8007dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dc6:	f001 fd51 	bl	800986c <vPortExitCritical>

	return xReturn;
 8007dca:	68fb      	ldr	r3, [r7, #12]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ddc:	f001 fd14 	bl	8009808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d102      	bne.n	8007df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e001      	b.n	8007df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007df6:	f001 fd39 	bl	800986c <vPortExitCritical>

	return xReturn;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e014      	b.n	8007e3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e14:	4a0f      	ldr	r2, [pc, #60]	@ (8007e54 <vQueueAddToRegistry+0x50>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e20:	490c      	ldr	r1, [pc, #48]	@ (8007e54 <vQueueAddToRegistry+0x50>)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007e54 <vQueueAddToRegistry+0x50>)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e36:	e006      	b.n	8007e46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	d9e7      	bls.n	8007e14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000db4 	.word	0x20000db4

08007e58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e68:	f001 fcce 	bl	8009808 <vPortEnterCritical>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e78:	d103      	bne.n	8007e82 <vQueueWaitForMessageRestricted+0x2a>
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e8e:	d103      	bne.n	8007e98 <vQueueWaitForMessageRestricted+0x40>
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e98:	f001 fce8 	bl	800986c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	3324      	adds	r3, #36	@ 0x24
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fc45 	bl	800873c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007eb2:	6978      	ldr	r0, [r7, #20]
 8007eb4:	f7ff ff26 	bl	8007d04 <prvUnlockQueue>
	}
 8007eb8:	bf00      	nop
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	@ 0x38
 8007ec4:	af04      	add	r7, sp, #16
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	623b      	str	r3, [r7, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10b      	bne.n	8007f0a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	61fb      	str	r3, [r7, #28]
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f0a:	235c      	movs	r3, #92	@ 0x5c
 8007f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f12:	d00b      	beq.n	8007f2c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	61bb      	str	r3, [r7, #24]
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	e7fd      	b.n	8007f28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01e      	beq.n	8007f72 <xTaskCreateStatic+0xb2>
 8007f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01b      	beq.n	8007f72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	9302      	str	r3, [sp, #8]
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f850 	bl	800800a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f6c:	f000 f8de 	bl	800812c <prvAddNewTaskToReadyList>
 8007f70:	e001      	b.n	8007f76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f76:	697b      	ldr	r3, [r7, #20]
	}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3728      	adds	r7, #40	@ 0x28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08c      	sub	sp, #48	@ 0x30
 8007f84:	af04      	add	r7, sp, #16
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fd59 	bl	8009a4c <pvPortMalloc>
 8007f9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00e      	beq.n	8007fc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fa2:	205c      	movs	r0, #92	@ 0x5c
 8007fa4:	f001 fd52 	bl	8009a4c <pvPortMalloc>
 8007fa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fb6:	e005      	b.n	8007fc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fb8:	6978      	ldr	r0, [r7, #20]
 8007fba:	f001 fe15 	bl	8009be8 <vPortFree>
 8007fbe:	e001      	b.n	8007fc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d017      	beq.n	8007ffa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fd2:	88fa      	ldrh	r2, [r7, #6]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	9302      	str	r3, [sp, #8]
 8007fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f80e 	bl	800800a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fee:	69f8      	ldr	r0, [r7, #28]
 8007ff0:	f000 f89c 	bl	800812c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	e002      	b.n	8008000 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ffe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008000:	69bb      	ldr	r3, [r7, #24]
	}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b088      	sub	sp, #32
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	461a      	mov	r2, r3
 8008022:	21a5      	movs	r1, #165	@ 0xa5
 8008024:	f002 f868 	bl	800a0f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008032:	3b01      	subs	r3, #1
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	617b      	str	r3, [r7, #20]
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01f      	beq.n	80080aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800806a:	2300      	movs	r3, #0
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	e012      	b.n	8008096 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	4413      	add	r3, r2
 8008076:	7819      	ldrb	r1, [r3, #0]
 8008078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	4413      	add	r3, r2
 800807e:	3334      	adds	r3, #52	@ 0x34
 8008080:	460a      	mov	r2, r1
 8008082:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2b0f      	cmp	r3, #15
 800809a:	d9e9      	bls.n	8008070 <prvInitialiseNewTask+0x66>
 800809c:	e000      	b.n	80080a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800809e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080a8:	e003      	b.n	80080b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	2b37      	cmp	r3, #55	@ 0x37
 80080b6:	d901      	bls.n	80080bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080b8:	2337      	movs	r3, #55	@ 0x37
 80080ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	2200      	movs	r2, #0
 80080cc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe ff4a 	bl	8006f6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	3318      	adds	r3, #24
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe ff45 	bl	8006f6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	2200      	movs	r2, #0
 80080fc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	69b8      	ldr	r0, [r7, #24]
 800810c:	f001 fa4e 	bl	80095ac <pxPortInitialiseStack>
 8008110:	4602      	mov	r2, r0
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008122:	bf00      	nop
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008134:	f001 fb68 	bl	8009808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008138:	4b2d      	ldr	r3, [pc, #180]	@ (80081f0 <prvAddNewTaskToReadyList+0xc4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a2c      	ldr	r2, [pc, #176]	@ (80081f0 <prvAddNewTaskToReadyList+0xc4>)
 8008140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008142:	4b2c      	ldr	r3, [pc, #176]	@ (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800814a:	4a2a      	ldr	r2, [pc, #168]	@ (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008150:	4b27      	ldr	r3, [pc, #156]	@ (80081f0 <prvAddNewTaskToReadyList+0xc4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d110      	bne.n	800817a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008158:	f000 fc1e 	bl	8008998 <prvInitialiseTaskLists>
 800815c:	e00d      	b.n	800817a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800815e:	4b26      	ldr	r3, [pc, #152]	@ (80081f8 <prvAddNewTaskToReadyList+0xcc>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008166:	4b23      	ldr	r3, [pc, #140]	@ (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d802      	bhi.n	800817a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008174:	4a1f      	ldr	r2, [pc, #124]	@ (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800817a:	4b20      	ldr	r3, [pc, #128]	@ (80081fc <prvAddNewTaskToReadyList+0xd0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	4a1e      	ldr	r2, [pc, #120]	@ (80081fc <prvAddNewTaskToReadyList+0xd0>)
 8008182:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008184:	4b1d      	ldr	r3, [pc, #116]	@ (80081fc <prvAddNewTaskToReadyList+0xd0>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008190:	4b1b      	ldr	r3, [pc, #108]	@ (8008200 <prvAddNewTaskToReadyList+0xd4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d903      	bls.n	80081a0 <prvAddNewTaskToReadyList+0x74>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819c:	4a18      	ldr	r2, [pc, #96]	@ (8008200 <prvAddNewTaskToReadyList+0xd4>)
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4a15      	ldr	r2, [pc, #84]	@ (8008204 <prvAddNewTaskToReadyList+0xd8>)
 80081ae:	441a      	add	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f7fe fee5 	bl	8006f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081bc:	f001 fb56 	bl	800986c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081c0:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <prvAddNewTaskToReadyList+0xcc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00e      	beq.n	80081e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081c8:	4b0a      	ldr	r3, [pc, #40]	@ (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d207      	bcs.n	80081e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008208 <prvAddNewTaskToReadyList+0xdc>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200012c8 	.word	0x200012c8
 80081f4:	20000df4 	.word	0x20000df4
 80081f8:	200012d4 	.word	0x200012d4
 80081fc:	200012e4 	.word	0x200012e4
 8008200:	200012d0 	.word	0x200012d0
 8008204:	20000df8 	.word	0x20000df8
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d018      	beq.n	8008250 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800821e:	4b14      	ldr	r3, [pc, #80]	@ (8008270 <vTaskDelay+0x64>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <vTaskDelay+0x32>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60bb      	str	r3, [r7, #8]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800823e:	f000 f883 	bl	8008348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fe03 	bl	8008e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800824a:	f000 f88b 	bl	8008364 <xTaskResumeAll>
 800824e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d107      	bne.n	8008266 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008256:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <vTaskDelay+0x68>)
 8008258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200012f0 	.word	0x200012f0
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	@ 0x28
 800827c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008286:	463a      	mov	r2, r7
 8008288:	1d39      	adds	r1, r7, #4
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fe18 	bl	8006ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	9202      	str	r2, [sp, #8]
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	2300      	movs	r3, #0
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	2300      	movs	r3, #0
 80082a4:	460a      	mov	r2, r1
 80082a6:	4922      	ldr	r1, [pc, #136]	@ (8008330 <vTaskStartScheduler+0xb8>)
 80082a8:	4822      	ldr	r0, [pc, #136]	@ (8008334 <vTaskStartScheduler+0xbc>)
 80082aa:	f7ff fe09 	bl	8007ec0 <xTaskCreateStatic>
 80082ae:	4603      	mov	r3, r0
 80082b0:	4a21      	ldr	r2, [pc, #132]	@ (8008338 <vTaskStartScheduler+0xc0>)
 80082b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082b4:	4b20      	ldr	r3, [pc, #128]	@ (8008338 <vTaskStartScheduler+0xc0>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082bc:	2301      	movs	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e001      	b.n	80082c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d102      	bne.n	80082d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082cc:	f000 fe14 	bl	8008ef8 <xTimerCreateTimerTask>
 80082d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d116      	bne.n	8008306 <vTaskStartScheduler+0x8e>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	613b      	str	r3, [r7, #16]
}
 80082ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082ec:	4b13      	ldr	r3, [pc, #76]	@ (800833c <vTaskStartScheduler+0xc4>)
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082f4:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <vTaskStartScheduler+0xc8>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082fa:	4b12      	ldr	r3, [pc, #72]	@ (8008344 <vTaskStartScheduler+0xcc>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008300:	f001 f9de 	bl	80096c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008304:	e00f      	b.n	8008326 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800830c:	d10b      	bne.n	8008326 <vTaskStartScheduler+0xae>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	60fb      	str	r3, [r7, #12]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <vTaskStartScheduler+0xaa>
}
 8008326:	bf00      	nop
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	0800b514 	.word	0x0800b514
 8008334:	08008969 	.word	0x08008969
 8008338:	200012ec 	.word	0x200012ec
 800833c:	200012e8 	.word	0x200012e8
 8008340:	200012d4 	.word	0x200012d4
 8008344:	200012cc 	.word	0x200012cc

08008348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800834c:	4b04      	ldr	r3, [pc, #16]	@ (8008360 <vTaskSuspendAll+0x18>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	4a03      	ldr	r2, [pc, #12]	@ (8008360 <vTaskSuspendAll+0x18>)
 8008354:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	200012f0 	.word	0x200012f0

08008364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800836e:	2300      	movs	r3, #0
 8008370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008372:	4b42      	ldr	r3, [pc, #264]	@ (800847c <xTaskResumeAll+0x118>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <xTaskResumeAll+0x2e>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	603b      	str	r3, [r7, #0]
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008392:	f001 fa39 	bl	8009808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008396:	4b39      	ldr	r3, [pc, #228]	@ (800847c <xTaskResumeAll+0x118>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3b01      	subs	r3, #1
 800839c:	4a37      	ldr	r2, [pc, #220]	@ (800847c <xTaskResumeAll+0x118>)
 800839e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a0:	4b36      	ldr	r3, [pc, #216]	@ (800847c <xTaskResumeAll+0x118>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d162      	bne.n	800846e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083a8:	4b35      	ldr	r3, [pc, #212]	@ (8008480 <xTaskResumeAll+0x11c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d05e      	beq.n	800846e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083b0:	e02f      	b.n	8008412 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b2:	4b34      	ldr	r3, [pc, #208]	@ (8008484 <xTaskResumeAll+0x120>)
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3318      	adds	r3, #24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fe3e 	bl	8007040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fe39 	bl	8007040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008488 <xTaskResumeAll+0x124>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <xTaskResumeAll+0x7e>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083de:	4a2a      	ldr	r2, [pc, #168]	@ (8008488 <xTaskResumeAll+0x124>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a27      	ldr	r2, [pc, #156]	@ (800848c <xTaskResumeAll+0x128>)
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fe fdc4 	bl	8006f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008402:	4b23      	ldr	r3, [pc, #140]	@ (8008490 <xTaskResumeAll+0x12c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	429a      	cmp	r2, r3
 800840a:	d302      	bcc.n	8008412 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800840c:	4b21      	ldr	r3, [pc, #132]	@ (8008494 <xTaskResumeAll+0x130>)
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008412:	4b1c      	ldr	r3, [pc, #112]	@ (8008484 <xTaskResumeAll+0x120>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1cb      	bne.n	80083b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008420:	f000 fb58 	bl	8008ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008424:	4b1c      	ldr	r3, [pc, #112]	@ (8008498 <xTaskResumeAll+0x134>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d010      	beq.n	8008452 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008430:	f000 f846 	bl	80084c0 <xTaskIncrementTick>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800843a:	4b16      	ldr	r3, [pc, #88]	@ (8008494 <xTaskResumeAll+0x130>)
 800843c:	2201      	movs	r2, #1
 800843e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3b01      	subs	r3, #1
 8008444:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f1      	bne.n	8008430 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800844c:	4b12      	ldr	r3, [pc, #72]	@ (8008498 <xTaskResumeAll+0x134>)
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008452:	4b10      	ldr	r3, [pc, #64]	@ (8008494 <xTaskResumeAll+0x130>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800845e:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <xTaskResumeAll+0x138>)
 8008460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800846e:	f001 f9fd 	bl	800986c <vPortExitCritical>

	return xAlreadyYielded;
 8008472:	68bb      	ldr	r3, [r7, #8]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200012f0 	.word	0x200012f0
 8008480:	200012c8 	.word	0x200012c8
 8008484:	20001288 	.word	0x20001288
 8008488:	200012d0 	.word	0x200012d0
 800848c:	20000df8 	.word	0x20000df8
 8008490:	20000df4 	.word	0x20000df4
 8008494:	200012dc 	.word	0x200012dc
 8008498:	200012d8 	.word	0x200012d8
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084a6:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <xTaskGetTickCount+0x1c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084ac:	687b      	ldr	r3, [r7, #4]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	200012cc 	.word	0x200012cc

080084c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008608 <xTaskIncrementTick+0x148>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 8090 	bne.w	80085f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084d4:	4b4d      	ldr	r3, [pc, #308]	@ (800860c <xTaskIncrementTick+0x14c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084dc:	4a4b      	ldr	r2, [pc, #300]	@ (800860c <xTaskIncrementTick+0x14c>)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d121      	bne.n	800852c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80084e8:	4b49      	ldr	r3, [pc, #292]	@ (8008610 <xTaskIncrementTick+0x150>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <xTaskIncrementTick+0x4a>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	603b      	str	r3, [r7, #0]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <xTaskIncrementTick+0x46>
 800850a:	4b41      	ldr	r3, [pc, #260]	@ (8008610 <xTaskIncrementTick+0x150>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	4b40      	ldr	r3, [pc, #256]	@ (8008614 <xTaskIncrementTick+0x154>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a3e      	ldr	r2, [pc, #248]	@ (8008610 <xTaskIncrementTick+0x150>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	4a3e      	ldr	r2, [pc, #248]	@ (8008614 <xTaskIncrementTick+0x154>)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	4b3e      	ldr	r3, [pc, #248]	@ (8008618 <xTaskIncrementTick+0x158>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	4a3c      	ldr	r2, [pc, #240]	@ (8008618 <xTaskIncrementTick+0x158>)
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	f000 fad4 	bl	8008ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800852c:	4b3b      	ldr	r3, [pc, #236]	@ (800861c <xTaskIncrementTick+0x15c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	429a      	cmp	r2, r3
 8008534:	d349      	bcc.n	80085ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008536:	4b36      	ldr	r3, [pc, #216]	@ (8008610 <xTaskIncrementTick+0x150>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008540:	4b36      	ldr	r3, [pc, #216]	@ (800861c <xTaskIncrementTick+0x15c>)
 8008542:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008546:	601a      	str	r2, [r3, #0]
					break;
 8008548:	e03f      	b.n	80085ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800854a:	4b31      	ldr	r3, [pc, #196]	@ (8008610 <xTaskIncrementTick+0x150>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	429a      	cmp	r2, r3
 8008560:	d203      	bcs.n	800856a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008562:	4a2e      	ldr	r2, [pc, #184]	@ (800861c <xTaskIncrementTick+0x15c>)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008568:	e02f      	b.n	80085ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3304      	adds	r3, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fd66 	bl	8007040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	3318      	adds	r3, #24
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe fd5d 	bl	8007040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858a:	4b25      	ldr	r3, [pc, #148]	@ (8008620 <xTaskIncrementTick+0x160>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d903      	bls.n	800859a <xTaskIncrementTick+0xda>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	4a22      	ldr	r2, [pc, #136]	@ (8008620 <xTaskIncrementTick+0x160>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008624 <xTaskIncrementTick+0x164>)
 80085a8:	441a      	add	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fe fce8 	bl	8006f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008628 <xTaskIncrementTick+0x168>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d3b8      	bcc.n	8008536 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80085c4:	2301      	movs	r3, #1
 80085c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c8:	e7b5      	b.n	8008536 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085ca:	4b17      	ldr	r3, [pc, #92]	@ (8008628 <xTaskIncrementTick+0x168>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d0:	4914      	ldr	r1, [pc, #80]	@ (8008624 <xTaskIncrementTick+0x164>)
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d901      	bls.n	80085e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085e6:	4b11      	ldr	r3, [pc, #68]	@ (800862c <xTaskIncrementTick+0x16c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80085ee:	2301      	movs	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e004      	b.n	80085fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008630 <xTaskIncrementTick+0x170>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008630 <xTaskIncrementTick+0x170>)
 80085fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085fe:	697b      	ldr	r3, [r7, #20]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200012f0 	.word	0x200012f0
 800860c:	200012cc 	.word	0x200012cc
 8008610:	20001280 	.word	0x20001280
 8008614:	20001284 	.word	0x20001284
 8008618:	200012e0 	.word	0x200012e0
 800861c:	200012e8 	.word	0x200012e8
 8008620:	200012d0 	.word	0x200012d0
 8008624:	20000df8 	.word	0x20000df8
 8008628:	20000df4 	.word	0x20000df4
 800862c:	200012dc 	.word	0x200012dc
 8008630:	200012d8 	.word	0x200012d8

08008634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800863a:	4b28      	ldr	r3, [pc, #160]	@ (80086dc <vTaskSwitchContext+0xa8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008642:	4b27      	ldr	r3, [pc, #156]	@ (80086e0 <vTaskSwitchContext+0xac>)
 8008644:	2201      	movs	r2, #1
 8008646:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008648:	e042      	b.n	80086d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800864a:	4b25      	ldr	r3, [pc, #148]	@ (80086e0 <vTaskSwitchContext+0xac>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008650:	4b24      	ldr	r3, [pc, #144]	@ (80086e4 <vTaskSwitchContext+0xb0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	e011      	b.n	800867c <vTaskSwitchContext+0x48>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <vTaskSwitchContext+0x42>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <vTaskSwitchContext+0x3e>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3b01      	subs	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	491a      	ldr	r1, [pc, #104]	@ (80086e8 <vTaskSwitchContext+0xb4>)
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0e3      	beq.n	8008658 <vTaskSwitchContext+0x24>
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4a13      	ldr	r2, [pc, #76]	@ (80086e8 <vTaskSwitchContext+0xb4>)
 800869c:	4413      	add	r3, r2
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	3308      	adds	r3, #8
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d104      	bne.n	80086c0 <vTaskSwitchContext+0x8c>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	605a      	str	r2, [r3, #4]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	4a09      	ldr	r2, [pc, #36]	@ (80086ec <vTaskSwitchContext+0xb8>)
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	4a06      	ldr	r2, [pc, #24]	@ (80086e4 <vTaskSwitchContext+0xb0>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6013      	str	r3, [r2, #0]
}
 80086d0:	bf00      	nop
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	200012f0 	.word	0x200012f0
 80086e0:	200012dc 	.word	0x200012dc
 80086e4:	200012d0 	.word	0x200012d0
 80086e8:	20000df8 	.word	0x20000df8
 80086ec:	20000df4 	.word	0x20000df4

080086f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60fb      	str	r3, [r7, #12]
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008718:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <vTaskPlaceOnEventList+0x48>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3318      	adds	r3, #24
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7fe fc54 	bl	8006fce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008726:	2101      	movs	r1, #1
 8008728:	6838      	ldr	r0, [r7, #0]
 800872a:	f000 fb91 	bl	8008e50 <prvAddCurrentTaskToDelayedList>
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000df4 	.word	0x20000df4

0800873c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	617b      	str	r3, [r7, #20]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008766:	4b0a      	ldr	r3, [pc, #40]	@ (8008790 <vTaskPlaceOnEventListRestricted+0x54>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3318      	adds	r3, #24
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7fe fc09 	bl	8006f86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800877a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800877e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	68b8      	ldr	r0, [r7, #8]
 8008784:	f000 fb64 	bl	8008e50 <prvAddCurrentTaskToDelayedList>
	}
 8008788:	bf00      	nop
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000df4 	.word	0x20000df4

08008794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	60fb      	str	r3, [r7, #12]
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	3318      	adds	r3, #24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fc3a 	bl	8007040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008844 <xTaskRemoveFromEventList+0xb0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d11d      	bne.n	8008810 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fc31 	bl	8007040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e2:	4b19      	ldr	r3, [pc, #100]	@ (8008848 <xTaskRemoveFromEventList+0xb4>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d903      	bls.n	80087f2 <xTaskRemoveFromEventList+0x5e>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	4a16      	ldr	r2, [pc, #88]	@ (8008848 <xTaskRemoveFromEventList+0xb4>)
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4a13      	ldr	r2, [pc, #76]	@ (800884c <xTaskRemoveFromEventList+0xb8>)
 8008800:	441a      	add	r2, r3
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3304      	adds	r3, #4
 8008806:	4619      	mov	r1, r3
 8008808:	4610      	mov	r0, r2
 800880a:	f7fe fbbc 	bl	8006f86 <vListInsertEnd>
 800880e:	e005      	b.n	800881c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3318      	adds	r3, #24
 8008814:	4619      	mov	r1, r3
 8008816:	480e      	ldr	r0, [pc, #56]	@ (8008850 <xTaskRemoveFromEventList+0xbc>)
 8008818:	f7fe fbb5 	bl	8006f86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008820:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <xTaskRemoveFromEventList+0xc0>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	429a      	cmp	r2, r3
 8008828:	d905      	bls.n	8008836 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800882e:	4b0a      	ldr	r3, [pc, #40]	@ (8008858 <xTaskRemoveFromEventList+0xc4>)
 8008830:	2201      	movs	r2, #1
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e001      	b.n	800883a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800883a:	697b      	ldr	r3, [r7, #20]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	200012f0 	.word	0x200012f0
 8008848:	200012d0 	.word	0x200012d0
 800884c:	20000df8 	.word	0x20000df8
 8008850:	20001288 	.word	0x20001288
 8008854:	20000df4 	.word	0x20000df4
 8008858:	200012dc 	.word	0x200012dc

0800885c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008864:	4b06      	ldr	r3, [pc, #24]	@ (8008880 <vTaskInternalSetTimeOutState+0x24>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800886c:	4b05      	ldr	r3, [pc, #20]	@ (8008884 <vTaskInternalSetTimeOutState+0x28>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	200012e0 	.word	0x200012e0
 8008884:	200012cc 	.word	0x200012cc

08008888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	613b      	str	r3, [r7, #16]
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10b      	bne.n	80088ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60fb      	str	r3, [r7, #12]
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	e7fd      	b.n	80088ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80088ce:	f000 ff9b 	bl	8009808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008948 <xTaskCheckForTimeOut+0xc0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ea:	d102      	bne.n	80088f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	e023      	b.n	800893a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	4b15      	ldr	r3, [pc, #84]	@ (800894c <xTaskCheckForTimeOut+0xc4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d007      	beq.n	800890e <xTaskCheckForTimeOut+0x86>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	429a      	cmp	r2, r3
 8008906:	d302      	bcc.n	800890e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	e015      	b.n	800893a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	429a      	cmp	r2, r3
 8008916:	d20b      	bcs.n	8008930 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff ff99 	bl	800885c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
 800892e:	e004      	b.n	800893a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008936:	2301      	movs	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800893a:	f000 ff97 	bl	800986c <vPortExitCritical>

	return xReturn;
 800893e:	69fb      	ldr	r3, [r7, #28]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	200012cc 	.word	0x200012cc
 800894c:	200012e0 	.word	0x200012e0

08008950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008954:	4b03      	ldr	r3, [pc, #12]	@ (8008964 <vTaskMissedYield+0x14>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
}
 800895a:	bf00      	nop
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	200012dc 	.word	0x200012dc

08008968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008970:	f000 f852 	bl	8008a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008974:	4b06      	ldr	r3, [pc, #24]	@ (8008990 <prvIdleTask+0x28>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d9f9      	bls.n	8008970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800897c:	4b05      	ldr	r3, [pc, #20]	@ (8008994 <prvIdleTask+0x2c>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800898c:	e7f0      	b.n	8008970 <prvIdleTask+0x8>
 800898e:	bf00      	nop
 8008990:	20000df8 	.word	0x20000df8
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800899e:	2300      	movs	r3, #0
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	e00c      	b.n	80089be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4a12      	ldr	r2, [pc, #72]	@ (80089f8 <prvInitialiseTaskLists+0x60>)
 80089b0:	4413      	add	r3, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe faba 	bl	8006f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3301      	adds	r3, #1
 80089bc:	607b      	str	r3, [r7, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b37      	cmp	r3, #55	@ 0x37
 80089c2:	d9ef      	bls.n	80089a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089c4:	480d      	ldr	r0, [pc, #52]	@ (80089fc <prvInitialiseTaskLists+0x64>)
 80089c6:	f7fe fab1 	bl	8006f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089ca:	480d      	ldr	r0, [pc, #52]	@ (8008a00 <prvInitialiseTaskLists+0x68>)
 80089cc:	f7fe faae 	bl	8006f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089d0:	480c      	ldr	r0, [pc, #48]	@ (8008a04 <prvInitialiseTaskLists+0x6c>)
 80089d2:	f7fe faab 	bl	8006f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089d6:	480c      	ldr	r0, [pc, #48]	@ (8008a08 <prvInitialiseTaskLists+0x70>)
 80089d8:	f7fe faa8 	bl	8006f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089dc:	480b      	ldr	r0, [pc, #44]	@ (8008a0c <prvInitialiseTaskLists+0x74>)
 80089de:	f7fe faa5 	bl	8006f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008a10 <prvInitialiseTaskLists+0x78>)
 80089e4:	4a05      	ldr	r2, [pc, #20]	@ (80089fc <prvInitialiseTaskLists+0x64>)
 80089e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a14 <prvInitialiseTaskLists+0x7c>)
 80089ea:	4a05      	ldr	r2, [pc, #20]	@ (8008a00 <prvInitialiseTaskLists+0x68>)
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20000df8 	.word	0x20000df8
 80089fc:	20001258 	.word	0x20001258
 8008a00:	2000126c 	.word	0x2000126c
 8008a04:	20001288 	.word	0x20001288
 8008a08:	2000129c 	.word	0x2000129c
 8008a0c:	200012b4 	.word	0x200012b4
 8008a10:	20001280 	.word	0x20001280
 8008a14:	20001284 	.word	0x20001284

08008a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a1e:	e019      	b.n	8008a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a20:	f000 fef2 	bl	8009808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a24:	4b10      	ldr	r3, [pc, #64]	@ (8008a68 <prvCheckTasksWaitingTermination+0x50>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fb05 	bl	8007040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a36:	4b0d      	ldr	r3, [pc, #52]	@ (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <prvCheckTasksWaitingTermination+0x58>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	4a0a      	ldr	r2, [pc, #40]	@ (8008a70 <prvCheckTasksWaitingTermination+0x58>)
 8008a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a4a:	f000 ff0f 	bl	800986c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f810 	bl	8008a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a54:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <prvCheckTasksWaitingTermination+0x58>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e1      	bne.n	8008a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2000129c 	.word	0x2000129c
 8008a6c:	200012c8 	.word	0x200012c8
 8008a70:	200012b0 	.word	0x200012b0

08008a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d108      	bne.n	8008a98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 f8ac 	bl	8009be8 <vPortFree>
				vPortFree( pxTCB );
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f8a9 	bl	8009be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a96:	e019      	b.n	8008acc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d103      	bne.n	8008aaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 f8a0 	bl	8009be8 <vPortFree>
	}
 8008aa8:	e010      	b.n	8008acc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d00b      	beq.n	8008acc <prvDeleteTCB+0x58>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <prvDeleteTCB+0x54>
	}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ada:	4b0c      	ldr	r3, [pc, #48]	@ (8008b0c <prvResetNextTaskUnblockTime+0x38>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ae6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008aec:	e008      	b.n	8008b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aee:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <prvResetNextTaskUnblockTime+0x38>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	4a04      	ldr	r2, [pc, #16]	@ (8008b10 <prvResetNextTaskUnblockTime+0x3c>)
 8008afe:	6013      	str	r3, [r2, #0]
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	20001280 	.word	0x20001280
 8008b10:	200012e8 	.word	0x200012e8

08008b14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008b1a:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <xTaskGetCurrentTaskHandle+0x1c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008b20:	687b      	ldr	r3, [r7, #4]
	}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000df4 	.word	0x20000df4

08008b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b68 <xTaskGetSchedulerState+0x34>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b42:	2301      	movs	r3, #1
 8008b44:	607b      	str	r3, [r7, #4]
 8008b46:	e008      	b.n	8008b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b48:	4b08      	ldr	r3, [pc, #32]	@ (8008b6c <xTaskGetSchedulerState+0x38>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b50:	2302      	movs	r3, #2
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	e001      	b.n	8008b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b56:	2300      	movs	r3, #0
 8008b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b5a:	687b      	ldr	r3, [r7, #4]
	}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	200012d4 	.word	0x200012d4
 8008b6c:	200012f0 	.word	0x200012f0

08008b70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d051      	beq.n	8008c2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8008c34 <xTaskPriorityInherit+0xc4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d241      	bcs.n	8008c18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	db06      	blt.n	8008baa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b9c:	4b25      	ldr	r3, [pc, #148]	@ (8008c34 <xTaskPriorityInherit+0xc4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6959      	ldr	r1, [r3, #20]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4a1f      	ldr	r2, [pc, #124]	@ (8008c38 <xTaskPriorityInherit+0xc8>)
 8008bbc:	4413      	add	r3, r2
 8008bbe:	4299      	cmp	r1, r3
 8008bc0:	d122      	bne.n	8008c08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fa3a 	bl	8007040 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bcc:	4b19      	ldr	r3, [pc, #100]	@ (8008c34 <xTaskPriorityInherit+0xc4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bda:	4b18      	ldr	r3, [pc, #96]	@ (8008c3c <xTaskPriorityInherit+0xcc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d903      	bls.n	8008bea <xTaskPriorityInherit+0x7a>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	4a15      	ldr	r2, [pc, #84]	@ (8008c3c <xTaskPriorityInherit+0xcc>)
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4a10      	ldr	r2, [pc, #64]	@ (8008c38 <xTaskPriorityInherit+0xc8>)
 8008bf8:	441a      	add	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7fe f9c0 	bl	8006f86 <vListInsertEnd>
 8008c06:	e004      	b.n	8008c12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c08:	4b0a      	ldr	r3, [pc, #40]	@ (8008c34 <xTaskPriorityInherit+0xc4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c12:	2301      	movs	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	e008      	b.n	8008c2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <xTaskPriorityInherit+0xc4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d201      	bcs.n	8008c2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c26:	2301      	movs	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20000df4 	.word	0x20000df4
 8008c38:	20000df8 	.word	0x20000df8
 8008c3c:	200012d0 	.word	0x200012d0

08008c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d058      	beq.n	8008d08 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c56:	4b2f      	ldr	r3, [pc, #188]	@ (8008d14 <xTaskPriorityDisinherit+0xd4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d00b      	beq.n	8008c78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	60fb      	str	r3, [r7, #12]
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	e7fd      	b.n	8008c74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10b      	bne.n	8008c98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60bb      	str	r3, [r7, #8]
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c9c:	1e5a      	subs	r2, r3, #1
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d02c      	beq.n	8008d08 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d128      	bne.n	8008d08 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe f9c0 	bl	8007040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <xTaskPriorityDisinherit+0xd8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d903      	bls.n	8008ce8 <xTaskPriorityDisinherit+0xa8>
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8008d18 <xTaskPriorityDisinherit+0xd8>)
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4a09      	ldr	r2, [pc, #36]	@ (8008d1c <xTaskPriorityDisinherit+0xdc>)
 8008cf6:	441a      	add	r2, r3
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f7fe f941 	bl	8006f86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d08:	697b      	ldr	r3, [r7, #20]
	}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000df4 	.word	0x20000df4
 8008d18:	200012d0 	.word	0x200012d0
 8008d1c:	20000df8 	.word	0x20000df8

08008d20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d06c      	beq.n	8008e12 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d902      	bls.n	8008d68 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	e002      	b.n	8008d6e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d6c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d04c      	beq.n	8008e12 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d147      	bne.n	8008e12 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d82:	4b26      	ldr	r3, [pc, #152]	@ (8008e1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d10b      	bne.n	8008da4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60bb      	str	r3, [r7, #8]
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	db04      	blt.n	8008dc2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	6959      	ldr	r1, [r3, #20]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4a13      	ldr	r2, [pc, #76]	@ (8008e20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008dd2:	4413      	add	r3, r2
 8008dd4:	4299      	cmp	r1, r3
 8008dd6:	d11c      	bne.n	8008e12 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe f92f 	bl	8007040 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e24 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d903      	bls.n	8008df6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df2:	4a0c      	ldr	r2, [pc, #48]	@ (8008e24 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4a07      	ldr	r2, [pc, #28]	@ (8008e20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e04:	441a      	add	r2, r3
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7fe f8ba 	bl	8006f86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e12:	bf00      	nop
 8008e14:	3720      	adds	r7, #32
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000df4 	.word	0x20000df4
 8008e20:	20000df8 	.word	0x20000df8
 8008e24:	200012d0 	.word	0x200012d0

08008e28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e2c:	4b07      	ldr	r3, [pc, #28]	@ (8008e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d004      	beq.n	8008e3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e34:	4b05      	ldr	r3, [pc, #20]	@ (8008e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008e3e:	4b03      	ldr	r3, [pc, #12]	@ (8008e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e40:	681b      	ldr	r3, [r3, #0]
	}
 8008e42:	4618      	mov	r0, r3
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	20000df4 	.word	0x20000df4

08008e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e5a:	4b21      	ldr	r3, [pc, #132]	@ (8008ee0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e60:	4b20      	ldr	r3, [pc, #128]	@ (8008ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe f8ea 	bl	8007040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e72:	d10a      	bne.n	8008e8a <prvAddCurrentTaskToDelayedList+0x3a>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d007      	beq.n	8008e8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4819      	ldr	r0, [pc, #100]	@ (8008ee8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e84:	f7fe f87f 	bl	8006f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e88:	e026      	b.n	8008ed8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4413      	add	r3, r2
 8008e90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e92:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d209      	bcs.n	8008eb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea2:	4b12      	ldr	r3, [pc, #72]	@ (8008eec <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	4619      	mov	r1, r3
 8008eae:	4610      	mov	r0, r2
 8008eb0:	f7fe f88d 	bl	8006fce <vListInsert>
}
 8008eb4:	e010      	b.n	8008ed8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fe f883 	bl	8006fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d202      	bcs.n	8008ed8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ed2:	4a08      	ldr	r2, [pc, #32]	@ (8008ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6013      	str	r3, [r2, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	200012cc 	.word	0x200012cc
 8008ee4:	20000df4 	.word	0x20000df4
 8008ee8:	200012b4 	.word	0x200012b4
 8008eec:	20001284 	.word	0x20001284
 8008ef0:	20001280 	.word	0x20001280
 8008ef4:	200012e8 	.word	0x200012e8

08008ef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	@ 0x28
 8008efc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f02:	f000 fb13 	bl	800952c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f06:	4b1d      	ldr	r3, [pc, #116]	@ (8008f7c <xTimerCreateTimerTask+0x84>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d021      	beq.n	8008f52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f16:	1d3a      	adds	r2, r7, #4
 8008f18:	f107 0108 	add.w	r1, r7, #8
 8008f1c:	f107 030c 	add.w	r3, r7, #12
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd ffe9 	bl	8006ef8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	9202      	str	r2, [sp, #8]
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	2302      	movs	r3, #2
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	460a      	mov	r2, r1
 8008f38:	4911      	ldr	r1, [pc, #68]	@ (8008f80 <xTimerCreateTimerTask+0x88>)
 8008f3a:	4812      	ldr	r0, [pc, #72]	@ (8008f84 <xTimerCreateTimerTask+0x8c>)
 8008f3c:	f7fe ffc0 	bl	8007ec0 <xTaskCreateStatic>
 8008f40:	4603      	mov	r3, r0
 8008f42:	4a11      	ldr	r2, [pc, #68]	@ (8008f88 <xTimerCreateTimerTask+0x90>)
 8008f44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f46:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <xTimerCreateTimerTask+0x90>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	613b      	str	r3, [r7, #16]
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	e7fd      	b.n	8008f6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f70:	697b      	ldr	r3, [r7, #20]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20001324 	.word	0x20001324
 8008f80:	0800b51c 	.word	0x0800b51c
 8008f84:	080090c5 	.word	0x080090c5
 8008f88:	20001328 	.word	0x20001328

08008f8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	@ 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10b      	bne.n	8008fbc <xTimerGenericCommand+0x30>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	623b      	str	r3, [r7, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fbc:	4b19      	ldr	r3, [pc, #100]	@ (8009024 <xTimerGenericCommand+0x98>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d02a      	beq.n	800901a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	dc18      	bgt.n	8009008 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fd6:	f7ff fdad 	bl	8008b34 <xTaskGetSchedulerState>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d109      	bne.n	8008ff4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fe0:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <xTimerGenericCommand+0x98>)
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	f107 0110 	add.w	r1, r7, #16
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fec:	f7fe fa50 	bl	8007490 <xQueueGenericSend>
 8008ff0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ff2:	e012      	b.n	800901a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8009024 <xTimerGenericCommand+0x98>)
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	f107 0110 	add.w	r1, r7, #16
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2200      	movs	r2, #0
 8009000:	f7fe fa46 	bl	8007490 <xQueueGenericSend>
 8009004:	6278      	str	r0, [r7, #36]	@ 0x24
 8009006:	e008      	b.n	800901a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009008:	4b06      	ldr	r3, [pc, #24]	@ (8009024 <xTimerGenericCommand+0x98>)
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	f107 0110 	add.w	r1, r7, #16
 8009010:	2300      	movs	r3, #0
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	f7fe fb3e 	bl	8007694 <xQueueGenericSendFromISR>
 8009018:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800901c:	4618      	mov	r0, r3
 800901e:	3728      	adds	r7, #40	@ 0x28
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20001324 	.word	0x20001324

08009028 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af02      	add	r7, sp, #8
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009032:	4b23      	ldr	r3, [pc, #140]	@ (80090c0 <prvProcessExpiredTimer+0x98>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd fffd 	bl	8007040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d023      	beq.n	800909c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	699a      	ldr	r2, [r3, #24]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	18d1      	adds	r1, r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	6978      	ldr	r0, [r7, #20]
 8009062:	f000 f8d5 	bl	8009210 <prvInsertTimerInActiveList>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d020      	beq.n	80090ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	2100      	movs	r1, #0
 8009076:	6978      	ldr	r0, [r7, #20]
 8009078:	f7ff ff88 	bl	8008f8c <xTimerGenericCommand>
 800907c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d114      	bne.n	80090ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	60fb      	str	r3, [r7, #12]
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	e7fd      	b.n	8009098 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	4798      	blx	r3
}
 80090b6:	bf00      	nop
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000131c 	.word	0x2000131c

080090c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 f859 	bl	8009188 <prvGetNextExpireTime>
 80090d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4619      	mov	r1, r3
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 f805 	bl	80090ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090e2:	f000 f8d7 	bl	8009294 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090e6:	bf00      	nop
 80090e8:	e7f0      	b.n	80090cc <prvTimerTask+0x8>
	...

080090ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090f6:	f7ff f927 	bl	8008348 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f866 	bl	80091d0 <prvSampleTimeNow>
 8009104:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d130      	bne.n	800916e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <prvProcessTimerOrBlockTask+0x3c>
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	429a      	cmp	r2, r3
 8009118:	d806      	bhi.n	8009128 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800911a:	f7ff f923 	bl	8008364 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff ff81 	bl	8009028 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009126:	e024      	b.n	8009172 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d008      	beq.n	8009140 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800912e:	4b13      	ldr	r3, [pc, #76]	@ (800917c <prvProcessTimerOrBlockTask+0x90>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <prvProcessTimerOrBlockTask+0x50>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <prvProcessTimerOrBlockTask+0x52>
 800913c:	2300      	movs	r3, #0
 800913e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009140:	4b0f      	ldr	r3, [pc, #60]	@ (8009180 <prvProcessTimerOrBlockTask+0x94>)
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	f7fe fe83 	bl	8007e58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009152:	f7ff f907 	bl	8008364 <xTaskResumeAll>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800915c:	4b09      	ldr	r3, [pc, #36]	@ (8009184 <prvProcessTimerOrBlockTask+0x98>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	f3bf 8f6f 	isb	sy
}
 800916c:	e001      	b.n	8009172 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800916e:	f7ff f8f9 	bl	8008364 <xTaskResumeAll>
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20001320 	.word	0x20001320
 8009180:	20001324 	.word	0x20001324
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009190:	4b0e      	ldr	r3, [pc, #56]	@ (80091cc <prvGetNextExpireTime+0x44>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <prvGetNextExpireTime+0x16>
 800919a:	2201      	movs	r2, #1
 800919c:	e000      	b.n	80091a0 <prvGetNextExpireTime+0x18>
 800919e:	2200      	movs	r2, #0
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d105      	bne.n	80091b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091ac:	4b07      	ldr	r3, [pc, #28]	@ (80091cc <prvGetNextExpireTime+0x44>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	e001      	b.n	80091bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091bc:	68fb      	ldr	r3, [r7, #12]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	2000131c 	.word	0x2000131c

080091d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091d8:	f7ff f962 	bl	80084a0 <xTaskGetTickCount>
 80091dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091de:	4b0b      	ldr	r3, [pc, #44]	@ (800920c <prvSampleTimeNow+0x3c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d205      	bcs.n	80091f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091e8:	f000 f93a 	bl	8009460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	e002      	b.n	80091fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091fa:	4a04      	ldr	r2, [pc, #16]	@ (800920c <prvSampleTimeNow+0x3c>)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009200:	68fb      	ldr	r3, [r7, #12]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	2000132c 	.word	0x2000132c

08009210 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d812      	bhi.n	800925c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	1ad2      	subs	r2, r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	429a      	cmp	r2, r3
 8009242:	d302      	bcc.n	800924a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	e01b      	b.n	8009282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800924a:	4b10      	ldr	r3, [pc, #64]	@ (800928c <prvInsertTimerInActiveList+0x7c>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3304      	adds	r3, #4
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7fd feba 	bl	8006fce <vListInsert>
 800925a:	e012      	b.n	8009282 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d206      	bcs.n	8009272 <prvInsertTimerInActiveList+0x62>
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	d302      	bcc.n	8009272 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800926c:	2301      	movs	r3, #1
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e007      	b.n	8009282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009272:	4b07      	ldr	r3, [pc, #28]	@ (8009290 <prvInsertTimerInActiveList+0x80>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7fd fea6 	bl	8006fce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009282:	697b      	ldr	r3, [r7, #20]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20001320 	.word	0x20001320
 8009290:	2000131c 	.word	0x2000131c

08009294 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	@ 0x38
 8009298:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800929a:	e0ce      	b.n	800943a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da19      	bge.n	80092d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092a2:	1d3b      	adds	r3, r7, #4
 80092a4:	3304      	adds	r3, #4
 80092a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	61fb      	str	r3, [r7, #28]
}
 80092c0:	bf00      	nop
 80092c2:	bf00      	nop
 80092c4:	e7fd      	b.n	80092c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092cc:	6850      	ldr	r0, [r2, #4]
 80092ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092d0:	6892      	ldr	r2, [r2, #8]
 80092d2:	4611      	mov	r1, r2
 80092d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f2c0 80ae 	blt.w	800943a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d004      	beq.n	80092f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ec:	3304      	adds	r3, #4
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fd fea6 	bl	8007040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092f4:	463b      	mov	r3, r7
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff ff6a 	bl	80091d0 <prvSampleTimeNow>
 80092fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b09      	cmp	r3, #9
 8009302:	f200 8097 	bhi.w	8009434 <prvProcessReceivedCommands+0x1a0>
 8009306:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <prvProcessReceivedCommands+0x78>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	08009335 	.word	0x08009335
 8009310:	08009335 	.word	0x08009335
 8009314:	08009335 	.word	0x08009335
 8009318:	080093ab 	.word	0x080093ab
 800931c:	080093bf 	.word	0x080093bf
 8009320:	0800940b 	.word	0x0800940b
 8009324:	08009335 	.word	0x08009335
 8009328:	08009335 	.word	0x08009335
 800932c:	080093ab 	.word	0x080093ab
 8009330:	080093bf 	.word	0x080093bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	b2da      	uxtb	r2, r3
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	18d1      	adds	r1, r2, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009354:	f7ff ff5c 	bl	8009210 <prvInsertTimerInActiveList>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d06c      	beq.n	8009438 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009364:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d061      	beq.n	8009438 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	441a      	add	r2, r3
 800937c:	2300      	movs	r3, #0
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	2300      	movs	r3, #0
 8009382:	2100      	movs	r1, #0
 8009384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009386:	f7ff fe01 	bl	8008f8c <xTimerGenericCommand>
 800938a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d152      	bne.n	8009438 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	61bb      	str	r3, [r7, #24]
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	e7fd      	b.n	80093a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093b0:	f023 0301 	bic.w	r3, r3, #1
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093bc:	e03d      	b.n	800943a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093c4:	f043 0301 	orr.w	r3, r3, #1
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10b      	bne.n	80093f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	617b      	str	r3, [r7, #20]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	18d1      	adds	r1, r2, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009404:	f7ff ff04 	bl	8009210 <prvInsertTimerInActiveList>
					break;
 8009408:	e017      	b.n	800943a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800940a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800941a:	f000 fbe5 	bl	8009be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800941e:	e00c      	b.n	800943a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009426:	f023 0301 	bic.w	r3, r3, #1
 800942a:	b2da      	uxtb	r2, r3
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009432:	e002      	b.n	800943a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009434:	bf00      	nop
 8009436:	e000      	b.n	800943a <prvProcessReceivedCommands+0x1a6>
					break;
 8009438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800943a:	4b08      	ldr	r3, [pc, #32]	@ (800945c <prvProcessReceivedCommands+0x1c8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	1d39      	adds	r1, r7, #4
 8009440:	2200      	movs	r2, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe f9c4 	bl	80077d0 <xQueueReceive>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f af26 	bne.w	800929c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	3730      	adds	r7, #48	@ 0x30
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20001324 	.word	0x20001324

08009460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009466:	e049      	b.n	80094fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009468:	4b2e      	ldr	r3, [pc, #184]	@ (8009524 <prvSwitchTimerLists+0xc4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009472:	4b2c      	ldr	r3, [pc, #176]	@ (8009524 <prvSwitchTimerLists+0xc4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3304      	adds	r3, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f7fd fddd 	bl	8007040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	d02f      	beq.n	80094fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4413      	add	r3, r2
 80094a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d90e      	bls.n	80094cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009524 <prvSwitchTimerLists+0xc4>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f7fd fd82 	bl	8006fce <vListInsert>
 80094ca:	e017      	b.n	80094fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094cc:	2300      	movs	r3, #0
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	2300      	movs	r3, #0
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	2100      	movs	r1, #0
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f7ff fd58 	bl	8008f8c <xTimerGenericCommand>
 80094dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10b      	bne.n	80094fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	603b      	str	r3, [r7, #0]
}
 80094f6:	bf00      	nop
 80094f8:	bf00      	nop
 80094fa:	e7fd      	b.n	80094f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094fc:	4b09      	ldr	r3, [pc, #36]	@ (8009524 <prvSwitchTimerLists+0xc4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1b0      	bne.n	8009468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009506:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <prvSwitchTimerLists+0xc4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800950c:	4b06      	ldr	r3, [pc, #24]	@ (8009528 <prvSwitchTimerLists+0xc8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a04      	ldr	r2, [pc, #16]	@ (8009524 <prvSwitchTimerLists+0xc4>)
 8009512:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009514:	4a04      	ldr	r2, [pc, #16]	@ (8009528 <prvSwitchTimerLists+0xc8>)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6013      	str	r3, [r2, #0]
}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	2000131c 	.word	0x2000131c
 8009528:	20001320 	.word	0x20001320

0800952c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009532:	f000 f969 	bl	8009808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009536:	4b15      	ldr	r3, [pc, #84]	@ (800958c <prvCheckForValidListAndQueue+0x60>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d120      	bne.n	8009580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800953e:	4814      	ldr	r0, [pc, #80]	@ (8009590 <prvCheckForValidListAndQueue+0x64>)
 8009540:	f7fd fcf4 	bl	8006f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009544:	4813      	ldr	r0, [pc, #76]	@ (8009594 <prvCheckForValidListAndQueue+0x68>)
 8009546:	f7fd fcf1 	bl	8006f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800954a:	4b13      	ldr	r3, [pc, #76]	@ (8009598 <prvCheckForValidListAndQueue+0x6c>)
 800954c:	4a10      	ldr	r2, [pc, #64]	@ (8009590 <prvCheckForValidListAndQueue+0x64>)
 800954e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009550:	4b12      	ldr	r3, [pc, #72]	@ (800959c <prvCheckForValidListAndQueue+0x70>)
 8009552:	4a10      	ldr	r2, [pc, #64]	@ (8009594 <prvCheckForValidListAndQueue+0x68>)
 8009554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009556:	2300      	movs	r3, #0
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	4b11      	ldr	r3, [pc, #68]	@ (80095a0 <prvCheckForValidListAndQueue+0x74>)
 800955c:	4a11      	ldr	r2, [pc, #68]	@ (80095a4 <prvCheckForValidListAndQueue+0x78>)
 800955e:	2110      	movs	r1, #16
 8009560:	200a      	movs	r0, #10
 8009562:	f7fd fe01 	bl	8007168 <xQueueGenericCreateStatic>
 8009566:	4603      	mov	r3, r0
 8009568:	4a08      	ldr	r2, [pc, #32]	@ (800958c <prvCheckForValidListAndQueue+0x60>)
 800956a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800956c:	4b07      	ldr	r3, [pc, #28]	@ (800958c <prvCheckForValidListAndQueue+0x60>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009574:	4b05      	ldr	r3, [pc, #20]	@ (800958c <prvCheckForValidListAndQueue+0x60>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	490b      	ldr	r1, [pc, #44]	@ (80095a8 <prvCheckForValidListAndQueue+0x7c>)
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fc42 	bl	8007e04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009580:	f000 f974 	bl	800986c <vPortExitCritical>
}
 8009584:	bf00      	nop
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20001324 	.word	0x20001324
 8009590:	200012f4 	.word	0x200012f4
 8009594:	20001308 	.word	0x20001308
 8009598:	2000131c 	.word	0x2000131c
 800959c:	20001320 	.word	0x20001320
 80095a0:	200013d0 	.word	0x200013d0
 80095a4:	20001330 	.word	0x20001330
 80095a8:	0800b524 	.word	0x0800b524

080095ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3b04      	subs	r3, #4
 80095bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f023 0201 	bic.w	r2, r3, #1
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3b04      	subs	r3, #4
 80095da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009610 <pxPortInitialiseStack+0x64>)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b14      	subs	r3, #20
 80095e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f06f 0202 	mvn.w	r2, #2
 80095fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3b20      	subs	r3, #32
 8009600:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009602:	68fb      	ldr	r3, [r7, #12]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	08009615 	.word	0x08009615

08009614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800961e:	4b13      	ldr	r3, [pc, #76]	@ (800966c <prvTaskExitError+0x58>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009626:	d00b      	beq.n	8009640 <prvTaskExitError+0x2c>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60fb      	str	r3, [r7, #12]
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <prvTaskExitError+0x28>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60bb      	str	r3, [r7, #8]
}
 8009652:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009654:	bf00      	nop
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0fc      	beq.n	8009656 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	20000030 	.word	0x20000030

08009670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009670:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <pxCurrentTCBConst2>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f380 8809 	msr	PSP, r0
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	4770      	bx	lr
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst2>:
 8009690:	20000df4 	.word	0x20000df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009698:	4808      	ldr	r0, [pc, #32]	@ (80096bc <prvPortStartFirstTask+0x24>)
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	6800      	ldr	r0, [r0, #0]
 800969e:	f380 8808 	msr	MSP, r0
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8814 	msr	CONTROL, r0
 80096aa:	b662      	cpsie	i
 80096ac:	b661      	cpsie	f
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	df00      	svc	0
 80096b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ba:	bf00      	nop
 80096bc:	e000ed08 	.word	0xe000ed08

080096c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096c6:	4b47      	ldr	r3, [pc, #284]	@ (80097e4 <xPortStartScheduler+0x124>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a47      	ldr	r2, [pc, #284]	@ (80097e8 <xPortStartScheduler+0x128>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d10b      	bne.n	80096e8 <xPortStartScheduler+0x28>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096e8:	4b3e      	ldr	r3, [pc, #248]	@ (80097e4 <xPortStartScheduler+0x124>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a3f      	ldr	r2, [pc, #252]	@ (80097ec <xPortStartScheduler+0x12c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d10b      	bne.n	800970a <xPortStartScheduler+0x4a>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60fb      	str	r3, [r7, #12]
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	e7fd      	b.n	8009706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800970a:	4b39      	ldr	r3, [pc, #228]	@ (80097f0 <xPortStartScheduler+0x130>)
 800970c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	22ff      	movs	r2, #255	@ 0xff
 800971a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800972c:	b2da      	uxtb	r2, r3
 800972e:	4b31      	ldr	r3, [pc, #196]	@ (80097f4 <xPortStartScheduler+0x134>)
 8009730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009732:	4b31      	ldr	r3, [pc, #196]	@ (80097f8 <xPortStartScheduler+0x138>)
 8009734:	2207      	movs	r2, #7
 8009736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009738:	e009      	b.n	800974e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800973a:	4b2f      	ldr	r3, [pc, #188]	@ (80097f8 <xPortStartScheduler+0x138>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3b01      	subs	r3, #1
 8009740:	4a2d      	ldr	r2, [pc, #180]	@ (80097f8 <xPortStartScheduler+0x138>)
 8009742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	b2db      	uxtb	r3, r3
 800974c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009756:	2b80      	cmp	r3, #128	@ 0x80
 8009758:	d0ef      	beq.n	800973a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800975a:	4b27      	ldr	r3, [pc, #156]	@ (80097f8 <xPortStartScheduler+0x138>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f1c3 0307 	rsb	r3, r3, #7
 8009762:	2b04      	cmp	r3, #4
 8009764:	d00b      	beq.n	800977e <xPortStartScheduler+0xbe>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	60bb      	str	r3, [r7, #8]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800977e:	4b1e      	ldr	r3, [pc, #120]	@ (80097f8 <xPortStartScheduler+0x138>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	021b      	lsls	r3, r3, #8
 8009784:	4a1c      	ldr	r2, [pc, #112]	@ (80097f8 <xPortStartScheduler+0x138>)
 8009786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009788:	4b1b      	ldr	r3, [pc, #108]	@ (80097f8 <xPortStartScheduler+0x138>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009790:	4a19      	ldr	r2, [pc, #100]	@ (80097f8 <xPortStartScheduler+0x138>)
 8009792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	b2da      	uxtb	r2, r3
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800979c:	4b17      	ldr	r3, [pc, #92]	@ (80097fc <xPortStartScheduler+0x13c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a16      	ldr	r2, [pc, #88]	@ (80097fc <xPortStartScheduler+0x13c>)
 80097a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097a8:	4b14      	ldr	r3, [pc, #80]	@ (80097fc <xPortStartScheduler+0x13c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a13      	ldr	r2, [pc, #76]	@ (80097fc <xPortStartScheduler+0x13c>)
 80097ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097b4:	f000 f8da 	bl	800996c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097b8:	4b11      	ldr	r3, [pc, #68]	@ (8009800 <xPortStartScheduler+0x140>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097be:	f000 f8f9 	bl	80099b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097c2:	4b10      	ldr	r3, [pc, #64]	@ (8009804 <xPortStartScheduler+0x144>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009804 <xPortStartScheduler+0x144>)
 80097c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097ce:	f7ff ff63 	bl	8009698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097d2:	f7fe ff2f 	bl	8008634 <vTaskSwitchContext>
	prvTaskExitError();
 80097d6:	f7ff ff1d 	bl	8009614 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	e000ed00 	.word	0xe000ed00
 80097e8:	410fc271 	.word	0x410fc271
 80097ec:	410fc270 	.word	0x410fc270
 80097f0:	e000e400 	.word	0xe000e400
 80097f4:	20001420 	.word	0x20001420
 80097f8:	20001424 	.word	0x20001424
 80097fc:	e000ed20 	.word	0xe000ed20
 8009800:	20000030 	.word	0x20000030
 8009804:	e000ef34 	.word	0xe000ef34

08009808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009822:	4b10      	ldr	r3, [pc, #64]	@ (8009864 <vPortEnterCritical+0x5c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3301      	adds	r3, #1
 8009828:	4a0e      	ldr	r2, [pc, #56]	@ (8009864 <vPortEnterCritical+0x5c>)
 800982a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800982c:	4b0d      	ldr	r3, [pc, #52]	@ (8009864 <vPortEnterCritical+0x5c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d110      	bne.n	8009856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009834:	4b0c      	ldr	r3, [pc, #48]	@ (8009868 <vPortEnterCritical+0x60>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00b      	beq.n	8009856 <vPortEnterCritical+0x4e>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <vPortEnterCritical+0x4a>
	}
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000030 	.word	0x20000030
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009872:	4b12      	ldr	r3, [pc, #72]	@ (80098bc <vPortExitCritical+0x50>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <vPortExitCritical+0x26>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	607b      	str	r3, [r7, #4]
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	e7fd      	b.n	800988e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009892:	4b0a      	ldr	r3, [pc, #40]	@ (80098bc <vPortExitCritical+0x50>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3b01      	subs	r3, #1
 8009898:	4a08      	ldr	r2, [pc, #32]	@ (80098bc <vPortExitCritical+0x50>)
 800989a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800989c:	4b07      	ldr	r3, [pc, #28]	@ (80098bc <vPortExitCritical+0x50>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d105      	bne.n	80098b0 <vPortExitCritical+0x44>
 80098a4:	2300      	movs	r3, #0
 80098a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f383 8811 	msr	BASEPRI, r3
}
 80098ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20000030 	.word	0x20000030

080098c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098c0:	f3ef 8009 	mrs	r0, PSP
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	4b15      	ldr	r3, [pc, #84]	@ (8009920 <pxCurrentTCBConst>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	f01e 0f10 	tst.w	lr, #16
 80098d0:	bf08      	it	eq
 80098d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098da:	6010      	str	r0, [r2, #0]
 80098dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098e4:	f380 8811 	msr	BASEPRI, r0
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f7fe fea0 	bl	8008634 <vTaskSwitchContext>
 80098f4:	f04f 0000 	mov.w	r0, #0
 80098f8:	f380 8811 	msr	BASEPRI, r0
 80098fc:	bc09      	pop	{r0, r3}
 80098fe:	6819      	ldr	r1, [r3, #0]
 8009900:	6808      	ldr	r0, [r1, #0]
 8009902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009906:	f01e 0f10 	tst.w	lr, #16
 800990a:	bf08      	it	eq
 800990c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009910:	f380 8809 	msr	PSP, r0
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w

08009920 <pxCurrentTCBConst>:
 8009920:	20000df4 	.word	0x20000df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop

08009928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	607b      	str	r3, [r7, #4]
}
 8009940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009942:	f7fe fdbd 	bl	80084c0 <xTaskIncrementTick>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800994c:	4b06      	ldr	r3, [pc, #24]	@ (8009968 <xPortSysTickHandler+0x40>)
 800994e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	2300      	movs	r3, #0
 8009956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f383 8811 	msr	BASEPRI, r3
}
 800995e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009970:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <vPortSetupTimerInterrupt+0x34>)
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009976:	4b0b      	ldr	r3, [pc, #44]	@ (80099a4 <vPortSetupTimerInterrupt+0x38>)
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800997c:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <vPortSetupTimerInterrupt+0x3c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0a      	ldr	r2, [pc, #40]	@ (80099ac <vPortSetupTimerInterrupt+0x40>)
 8009982:	fba2 2303 	umull	r2, r3, r2, r3
 8009986:	099b      	lsrs	r3, r3, #6
 8009988:	4a09      	ldr	r2, [pc, #36]	@ (80099b0 <vPortSetupTimerInterrupt+0x44>)
 800998a:	3b01      	subs	r3, #1
 800998c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800998e:	4b04      	ldr	r3, [pc, #16]	@ (80099a0 <vPortSetupTimerInterrupt+0x34>)
 8009990:	2207      	movs	r2, #7
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	e000e010 	.word	0xe000e010
 80099a4:	e000e018 	.word	0xe000e018
 80099a8:	20000024 	.word	0x20000024
 80099ac:	10624dd3 	.word	0x10624dd3
 80099b0:	e000e014 	.word	0xe000e014

080099b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099c4 <vPortEnableVFP+0x10>
 80099b8:	6801      	ldr	r1, [r0, #0]
 80099ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099be:	6001      	str	r1, [r0, #0]
 80099c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099c2:	bf00      	nop
 80099c4:	e000ed88 	.word	0xe000ed88

080099c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ce:	f3ef 8305 	mrs	r3, IPSR
 80099d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b0f      	cmp	r3, #15
 80099d8:	d915      	bls.n	8009a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099da:	4a18      	ldr	r2, [pc, #96]	@ (8009a3c <vPortValidateInterruptPriority+0x74>)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099e4:	4b16      	ldr	r3, [pc, #88]	@ (8009a40 <vPortValidateInterruptPriority+0x78>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	7afa      	ldrb	r2, [r7, #11]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d20b      	bcs.n	8009a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	607b      	str	r3, [r7, #4]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a06:	4b0f      	ldr	r3, [pc, #60]	@ (8009a44 <vPortValidateInterruptPriority+0x7c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a48 <vPortValidateInterruptPriority+0x80>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d90b      	bls.n	8009a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	603b      	str	r3, [r7, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <vPortValidateInterruptPriority+0x62>
	}
 8009a2e:	bf00      	nop
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	e000e3f0 	.word	0xe000e3f0
 8009a40:	20001420 	.word	0x20001420
 8009a44:	e000ed0c 	.word	0xe000ed0c
 8009a48:	20001424 	.word	0x20001424

08009a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	@ 0x28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a58:	f7fe fc76 	bl	8008348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8009bd0 <pvPortMalloc+0x184>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a64:	f000 f924 	bl	8009cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a68:	4b5a      	ldr	r3, [pc, #360]	@ (8009bd4 <pvPortMalloc+0x188>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f040 8095 	bne.w	8009ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01e      	beq.n	8009aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a7c:	2208      	movs	r2, #8
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4413      	add	r3, r2
 8009a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f003 0307 	and.w	r3, r3, #7
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d015      	beq.n	8009aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f023 0307 	bic.w	r3, r3, #7
 8009a94:	3308      	adds	r3, #8
 8009a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <pvPortMalloc+0x6e>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	617b      	str	r3, [r7, #20]
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	e7fd      	b.n	8009ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d06f      	beq.n	8009ba0 <pvPortMalloc+0x154>
 8009ac0:	4b45      	ldr	r3, [pc, #276]	@ (8009bd8 <pvPortMalloc+0x18c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d86a      	bhi.n	8009ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aca:	4b44      	ldr	r3, [pc, #272]	@ (8009bdc <pvPortMalloc+0x190>)
 8009acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ace:	4b43      	ldr	r3, [pc, #268]	@ (8009bdc <pvPortMalloc+0x190>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ad4:	e004      	b.n	8009ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d903      	bls.n	8009af2 <pvPortMalloc+0xa6>
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f1      	bne.n	8009ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009af2:	4b37      	ldr	r3, [pc, #220]	@ (8009bd0 <pvPortMalloc+0x184>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d051      	beq.n	8009ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2208      	movs	r2, #8
 8009b02:	4413      	add	r3, r2
 8009b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	1ad2      	subs	r2, r2, r3
 8009b16:	2308      	movs	r3, #8
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d920      	bls.n	8009b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <pvPortMalloc+0xfc>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	613b      	str	r3, [r7, #16]
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	e7fd      	b.n	8009b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b5a:	69b8      	ldr	r0, [r7, #24]
 8009b5c:	f000 f90a 	bl	8009d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b60:	4b1d      	ldr	r3, [pc, #116]	@ (8009bd8 <pvPortMalloc+0x18c>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd8 <pvPortMalloc+0x18c>)
 8009b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd8 <pvPortMalloc+0x18c>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b1b      	ldr	r3, [pc, #108]	@ (8009be0 <pvPortMalloc+0x194>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d203      	bcs.n	8009b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b7a:	4b17      	ldr	r3, [pc, #92]	@ (8009bd8 <pvPortMalloc+0x18c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a18      	ldr	r2, [pc, #96]	@ (8009be0 <pvPortMalloc+0x194>)
 8009b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	4b13      	ldr	r3, [pc, #76]	@ (8009bd4 <pvPortMalloc+0x188>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b96:	4b13      	ldr	r3, [pc, #76]	@ (8009be4 <pvPortMalloc+0x198>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	4a11      	ldr	r2, [pc, #68]	@ (8009be4 <pvPortMalloc+0x198>)
 8009b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ba0:	f7fe fbe0 	bl	8008364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	60fb      	str	r3, [r7, #12]
}
 8009bc0:	bf00      	nop
 8009bc2:	bf00      	nop
 8009bc4:	e7fd      	b.n	8009bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	@ 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20005030 	.word	0x20005030
 8009bd4:	20005044 	.word	0x20005044
 8009bd8:	20005034 	.word	0x20005034
 8009bdc:	20005028 	.word	0x20005028
 8009be0:	20005038 	.word	0x20005038
 8009be4:	2000503c 	.word	0x2000503c

08009be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d04f      	beq.n	8009c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bfa:	2308      	movs	r3, #8
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	4413      	add	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	4b25      	ldr	r3, [pc, #148]	@ (8009ca4 <vPortFree+0xbc>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4013      	ands	r3, r2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <vPortFree+0x46>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60fb      	str	r3, [r7, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <vPortFree+0x66>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	60bb      	str	r3, [r7, #8]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	4b14      	ldr	r3, [pc, #80]	@ (8009ca4 <vPortFree+0xbc>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01e      	beq.n	8009c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11a      	bne.n	8009c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca4 <vPortFree+0xbc>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	43db      	mvns	r3, r3
 8009c6e:	401a      	ands	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c74:	f7fe fb68 	bl	8008348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca8 <vPortFree+0xc0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4413      	add	r3, r2
 8009c82:	4a09      	ldr	r2, [pc, #36]	@ (8009ca8 <vPortFree+0xc0>)
 8009c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f000 f874 	bl	8009d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c8c:	4b07      	ldr	r3, [pc, #28]	@ (8009cac <vPortFree+0xc4>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3301      	adds	r3, #1
 8009c92:	4a06      	ldr	r2, [pc, #24]	@ (8009cac <vPortFree+0xc4>)
 8009c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c96:	f7fe fb65 	bl	8008364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c9a:	bf00      	nop
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20005044 	.word	0x20005044
 8009ca8:	20005034 	.word	0x20005034
 8009cac:	20005040 	.word	0x20005040

08009cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cbc:	4b27      	ldr	r3, [pc, #156]	@ (8009d5c <prvHeapInit+0xac>)
 8009cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3307      	adds	r3, #7
 8009cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0307 	bic.w	r3, r3, #7
 8009cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	4a1f      	ldr	r2, [pc, #124]	@ (8009d5c <prvHeapInit+0xac>)
 8009ce0:	4413      	add	r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d60 <prvHeapInit+0xb0>)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cee:	4b1c      	ldr	r3, [pc, #112]	@ (8009d60 <prvHeapInit+0xb0>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0307 	bic.w	r3, r3, #7
 8009d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4a15      	ldr	r2, [pc, #84]	@ (8009d64 <prvHeapInit+0xb4>)
 8009d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d12:	4b14      	ldr	r3, [pc, #80]	@ (8009d64 <prvHeapInit+0xb4>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2200      	movs	r2, #0
 8009d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d1a:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <prvHeapInit+0xb4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d30:	4b0c      	ldr	r3, [pc, #48]	@ (8009d64 <prvHeapInit+0xb4>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d68 <prvHeapInit+0xb8>)
 8009d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	4a09      	ldr	r2, [pc, #36]	@ (8009d6c <prvHeapInit+0xbc>)
 8009d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d48:	4b09      	ldr	r3, [pc, #36]	@ (8009d70 <prvHeapInit+0xc0>)
 8009d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d4e:	601a      	str	r2, [r3, #0]
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	20001428 	.word	0x20001428
 8009d60:	20005028 	.word	0x20005028
 8009d64:	20005030 	.word	0x20005030
 8009d68:	20005038 	.word	0x20005038
 8009d6c:	20005034 	.word	0x20005034
 8009d70:	20005044 	.word	0x20005044

08009d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d7c:	4b28      	ldr	r3, [pc, #160]	@ (8009e20 <prvInsertBlockIntoFreeList+0xac>)
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	e002      	b.n	8009d88 <prvInsertBlockIntoFreeList+0x14>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d8f7      	bhi.n	8009d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d108      	bne.n	8009db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	441a      	add	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d118      	bne.n	8009dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	4b15      	ldr	r3, [pc, #84]	@ (8009e24 <prvInsertBlockIntoFreeList+0xb0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d00d      	beq.n	8009df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	441a      	add	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	e008      	b.n	8009e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009df2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e24 <prvInsertBlockIntoFreeList+0xb0>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	e003      	b.n	8009e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d002      	beq.n	8009e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e12:	bf00      	nop
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20005028 	.word	0x20005028
 8009e24:	20005030 	.word	0x20005030

08009e28 <siprintf>:
 8009e28:	b40e      	push	{r1, r2, r3}
 8009e2a:	b500      	push	{lr}
 8009e2c:	b09c      	sub	sp, #112	@ 0x70
 8009e2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e30:	9002      	str	r0, [sp, #8]
 8009e32:	9006      	str	r0, [sp, #24]
 8009e34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e38:	4809      	ldr	r0, [pc, #36]	@ (8009e60 <siprintf+0x38>)
 8009e3a:	9107      	str	r1, [sp, #28]
 8009e3c:	9104      	str	r1, [sp, #16]
 8009e3e:	4909      	ldr	r1, [pc, #36]	@ (8009e64 <siprintf+0x3c>)
 8009e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e44:	9105      	str	r1, [sp, #20]
 8009e46:	6800      	ldr	r0, [r0, #0]
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	a902      	add	r1, sp, #8
 8009e4c:	f000 f9f2 	bl	800a234 <_svfiprintf_r>
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	b01c      	add	sp, #112	@ 0x70
 8009e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e5c:	b003      	add	sp, #12
 8009e5e:	4770      	bx	lr
 8009e60:	20000040 	.word	0x20000040
 8009e64:	ffff0208 	.word	0xffff0208

08009e68 <std>:
 8009e68:	2300      	movs	r3, #0
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e76:	6083      	str	r3, [r0, #8]
 8009e78:	8181      	strh	r1, [r0, #12]
 8009e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e7c:	81c2      	strh	r2, [r0, #14]
 8009e7e:	6183      	str	r3, [r0, #24]
 8009e80:	4619      	mov	r1, r3
 8009e82:	2208      	movs	r2, #8
 8009e84:	305c      	adds	r0, #92	@ 0x5c
 8009e86:	f000 f937 	bl	800a0f8 <memset>
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec0 <std+0x58>)
 8009e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <std+0x5c>)
 8009e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e92:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec8 <std+0x60>)
 8009e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ecc <std+0x64>)
 8009e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed0 <std+0x68>)
 8009e9c:	6224      	str	r4, [r4, #32]
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d006      	beq.n	8009eb0 <std+0x48>
 8009ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ea6:	4294      	cmp	r4, r2
 8009ea8:	d002      	beq.n	8009eb0 <std+0x48>
 8009eaa:	33d0      	adds	r3, #208	@ 0xd0
 8009eac:	429c      	cmp	r4, r3
 8009eae:	d105      	bne.n	8009ebc <std+0x54>
 8009eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb8:	f000 b950 	b.w	800a15c <__retarget_lock_init_recursive>
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800ac81 	.word	0x0800ac81
 8009ec4:	0800aca3 	.word	0x0800aca3
 8009ec8:	0800acdb 	.word	0x0800acdb
 8009ecc:	0800acff 	.word	0x0800acff
 8009ed0:	20005048 	.word	0x20005048

08009ed4 <stdio_exit_handler>:
 8009ed4:	4a02      	ldr	r2, [pc, #8]	@ (8009ee0 <stdio_exit_handler+0xc>)
 8009ed6:	4903      	ldr	r1, [pc, #12]	@ (8009ee4 <stdio_exit_handler+0x10>)
 8009ed8:	4803      	ldr	r0, [pc, #12]	@ (8009ee8 <stdio_exit_handler+0x14>)
 8009eda:	f000 b869 	b.w	8009fb0 <_fwalk_sglue>
 8009ede:	bf00      	nop
 8009ee0:	20000034 	.word	0x20000034
 8009ee4:	0800ac19 	.word	0x0800ac19
 8009ee8:	20000044 	.word	0x20000044

08009eec <cleanup_stdio>:
 8009eec:	6841      	ldr	r1, [r0, #4]
 8009eee:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <cleanup_stdio+0x34>)
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	d001      	beq.n	8009efc <cleanup_stdio+0x10>
 8009ef8:	f000 fe8e 	bl	800ac18 <_fflush_r>
 8009efc:	68a1      	ldr	r1, [r4, #8]
 8009efe:	4b09      	ldr	r3, [pc, #36]	@ (8009f24 <cleanup_stdio+0x38>)
 8009f00:	4299      	cmp	r1, r3
 8009f02:	d002      	beq.n	8009f0a <cleanup_stdio+0x1e>
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fe87 	bl	800ac18 <_fflush_r>
 8009f0a:	68e1      	ldr	r1, [r4, #12]
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <cleanup_stdio+0x3c>)
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	d004      	beq.n	8009f1c <cleanup_stdio+0x30>
 8009f12:	4620      	mov	r0, r4
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f000 be7e 	b.w	800ac18 <_fflush_r>
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	bf00      	nop
 8009f20:	20005048 	.word	0x20005048
 8009f24:	200050b0 	.word	0x200050b0
 8009f28:	20005118 	.word	0x20005118

08009f2c <global_stdio_init.part.0>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <global_stdio_init.part.0+0x30>)
 8009f30:	4c0b      	ldr	r4, [pc, #44]	@ (8009f60 <global_stdio_init.part.0+0x34>)
 8009f32:	4a0c      	ldr	r2, [pc, #48]	@ (8009f64 <global_stdio_init.part.0+0x38>)
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	4620      	mov	r0, r4
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2104      	movs	r1, #4
 8009f3c:	f7ff ff94 	bl	8009e68 <std>
 8009f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f44:	2201      	movs	r2, #1
 8009f46:	2109      	movs	r1, #9
 8009f48:	f7ff ff8e 	bl	8009e68 <std>
 8009f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f50:	2202      	movs	r2, #2
 8009f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f56:	2112      	movs	r1, #18
 8009f58:	f7ff bf86 	b.w	8009e68 <std>
 8009f5c:	20005180 	.word	0x20005180
 8009f60:	20005048 	.word	0x20005048
 8009f64:	08009ed5 	.word	0x08009ed5

08009f68 <__sfp_lock_acquire>:
 8009f68:	4801      	ldr	r0, [pc, #4]	@ (8009f70 <__sfp_lock_acquire+0x8>)
 8009f6a:	f000 b8f8 	b.w	800a15e <__retarget_lock_acquire_recursive>
 8009f6e:	bf00      	nop
 8009f70:	20005185 	.word	0x20005185

08009f74 <__sfp_lock_release>:
 8009f74:	4801      	ldr	r0, [pc, #4]	@ (8009f7c <__sfp_lock_release+0x8>)
 8009f76:	f000 b8f3 	b.w	800a160 <__retarget_lock_release_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	20005185 	.word	0x20005185

08009f80 <__sinit>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	4604      	mov	r4, r0
 8009f84:	f7ff fff0 	bl	8009f68 <__sfp_lock_acquire>
 8009f88:	6a23      	ldr	r3, [r4, #32]
 8009f8a:	b11b      	cbz	r3, 8009f94 <__sinit+0x14>
 8009f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f90:	f7ff bff0 	b.w	8009f74 <__sfp_lock_release>
 8009f94:	4b04      	ldr	r3, [pc, #16]	@ (8009fa8 <__sinit+0x28>)
 8009f96:	6223      	str	r3, [r4, #32]
 8009f98:	4b04      	ldr	r3, [pc, #16]	@ (8009fac <__sinit+0x2c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1f5      	bne.n	8009f8c <__sinit+0xc>
 8009fa0:	f7ff ffc4 	bl	8009f2c <global_stdio_init.part.0>
 8009fa4:	e7f2      	b.n	8009f8c <__sinit+0xc>
 8009fa6:	bf00      	nop
 8009fa8:	08009eed 	.word	0x08009eed
 8009fac:	20005180 	.word	0x20005180

08009fb0 <_fwalk_sglue>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	4688      	mov	r8, r1
 8009fb8:	4614      	mov	r4, r2
 8009fba:	2600      	movs	r6, #0
 8009fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc4:	d505      	bpl.n	8009fd2 <_fwalk_sglue+0x22>
 8009fc6:	6824      	ldr	r4, [r4, #0]
 8009fc8:	2c00      	cmp	r4, #0
 8009fca:	d1f7      	bne.n	8009fbc <_fwalk_sglue+0xc>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d907      	bls.n	8009fe8 <_fwalk_sglue+0x38>
 8009fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	d003      	beq.n	8009fe8 <_fwalk_sglue+0x38>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47c0      	blx	r8
 8009fe6:	4306      	orrs	r6, r0
 8009fe8:	3568      	adds	r5, #104	@ 0x68
 8009fea:	e7e9      	b.n	8009fc0 <_fwalk_sglue+0x10>

08009fec <iprintf>:
 8009fec:	b40f      	push	{r0, r1, r2, r3}
 8009fee:	b507      	push	{r0, r1, r2, lr}
 8009ff0:	4906      	ldr	r1, [pc, #24]	@ (800a00c <iprintf+0x20>)
 8009ff2:	ab04      	add	r3, sp, #16
 8009ff4:	6808      	ldr	r0, [r1, #0]
 8009ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffa:	6881      	ldr	r1, [r0, #8]
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	f000 fa3f 	bl	800a480 <_vfiprintf_r>
 800a002:	b003      	add	sp, #12
 800a004:	f85d eb04 	ldr.w	lr, [sp], #4
 800a008:	b004      	add	sp, #16
 800a00a:	4770      	bx	lr
 800a00c:	20000040 	.word	0x20000040

0800a010 <_puts_r>:
 800a010:	6a03      	ldr	r3, [r0, #32]
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	6884      	ldr	r4, [r0, #8]
 800a016:	4605      	mov	r5, r0
 800a018:	460e      	mov	r6, r1
 800a01a:	b90b      	cbnz	r3, 800a020 <_puts_r+0x10>
 800a01c:	f7ff ffb0 	bl	8009f80 <__sinit>
 800a020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a022:	07db      	lsls	r3, r3, #31
 800a024:	d405      	bmi.n	800a032 <_puts_r+0x22>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	0598      	lsls	r0, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_puts_r+0x22>
 800a02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a02e:	f000 f896 	bl	800a15e <__retarget_lock_acquire_recursive>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	0719      	lsls	r1, r3, #28
 800a036:	d502      	bpl.n	800a03e <_puts_r+0x2e>
 800a038:	6923      	ldr	r3, [r4, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d135      	bne.n	800a0aa <_puts_r+0x9a>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f000 fecd 	bl	800ade0 <__swsetup_r>
 800a046:	b380      	cbz	r0, 800a0aa <_puts_r+0x9a>
 800a048:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a04c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a04e:	07da      	lsls	r2, r3, #31
 800a050:	d405      	bmi.n	800a05e <_puts_r+0x4e>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	059b      	lsls	r3, r3, #22
 800a056:	d402      	bmi.n	800a05e <_puts_r+0x4e>
 800a058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a05a:	f000 f881 	bl	800a160 <__retarget_lock_release_recursive>
 800a05e:	4628      	mov	r0, r5
 800a060:	bd70      	pop	{r4, r5, r6, pc}
 800a062:	2b00      	cmp	r3, #0
 800a064:	da04      	bge.n	800a070 <_puts_r+0x60>
 800a066:	69a2      	ldr	r2, [r4, #24]
 800a068:	429a      	cmp	r2, r3
 800a06a:	dc17      	bgt.n	800a09c <_puts_r+0x8c>
 800a06c:	290a      	cmp	r1, #10
 800a06e:	d015      	beq.n	800a09c <_puts_r+0x8c>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	6022      	str	r2, [r4, #0]
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	68a3      	ldr	r3, [r4, #8]
 800a07a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a07e:	3b01      	subs	r3, #1
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	2900      	cmp	r1, #0
 800a084:	d1ed      	bne.n	800a062 <_puts_r+0x52>
 800a086:	2b00      	cmp	r3, #0
 800a088:	da11      	bge.n	800a0ae <_puts_r+0x9e>
 800a08a:	4622      	mov	r2, r4
 800a08c:	210a      	movs	r1, #10
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 fe67 	bl	800ad62 <__swbuf_r>
 800a094:	3001      	adds	r0, #1
 800a096:	d0d7      	beq.n	800a048 <_puts_r+0x38>
 800a098:	250a      	movs	r5, #10
 800a09a:	e7d7      	b.n	800a04c <_puts_r+0x3c>
 800a09c:	4622      	mov	r2, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 fe5f 	bl	800ad62 <__swbuf_r>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d1e7      	bne.n	800a078 <_puts_r+0x68>
 800a0a8:	e7ce      	b.n	800a048 <_puts_r+0x38>
 800a0aa:	3e01      	subs	r6, #1
 800a0ac:	e7e4      	b.n	800a078 <_puts_r+0x68>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	e7ee      	b.n	800a098 <_puts_r+0x88>
	...

0800a0bc <puts>:
 800a0bc:	4b02      	ldr	r3, [pc, #8]	@ (800a0c8 <puts+0xc>)
 800a0be:	4601      	mov	r1, r0
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	f7ff bfa5 	b.w	800a010 <_puts_r>
 800a0c6:	bf00      	nop
 800a0c8:	20000040 	.word	0x20000040

0800a0cc <strstr>:
 800a0cc:	780a      	ldrb	r2, [r1, #0]
 800a0ce:	b570      	push	{r4, r5, r6, lr}
 800a0d0:	b96a      	cbnz	r2, 800a0ee <strstr+0x22>
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d109      	bne.n	800a0ec <strstr+0x20>
 800a0d8:	460c      	mov	r4, r1
 800a0da:	4605      	mov	r5, r0
 800a0dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0f6      	beq.n	800a0d2 <strstr+0x6>
 800a0e4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a0e8:	429e      	cmp	r6, r3
 800a0ea:	d0f7      	beq.n	800a0dc <strstr+0x10>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	7803      	ldrb	r3, [r0, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ef      	bne.n	800a0d4 <strstr+0x8>
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	e7ec      	b.n	800a0d2 <strstr+0x6>

0800a0f8 <memset>:
 800a0f8:	4402      	add	r2, r0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d100      	bne.n	800a102 <memset+0xa>
 800a100:	4770      	bx	lr
 800a102:	f803 1b01 	strb.w	r1, [r3], #1
 800a106:	e7f9      	b.n	800a0fc <memset+0x4>

0800a108 <__errno>:
 800a108:	4b01      	ldr	r3, [pc, #4]	@ (800a110 <__errno+0x8>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	20000040 	.word	0x20000040

0800a114 <__libc_init_array>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4d0d      	ldr	r5, [pc, #52]	@ (800a14c <__libc_init_array+0x38>)
 800a118:	4c0d      	ldr	r4, [pc, #52]	@ (800a150 <__libc_init_array+0x3c>)
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	2600      	movs	r6, #0
 800a120:	42a6      	cmp	r6, r4
 800a122:	d109      	bne.n	800a138 <__libc_init_array+0x24>
 800a124:	4d0b      	ldr	r5, [pc, #44]	@ (800a154 <__libc_init_array+0x40>)
 800a126:	4c0c      	ldr	r4, [pc, #48]	@ (800a158 <__libc_init_array+0x44>)
 800a128:	f000 fff6 	bl	800b118 <_init>
 800a12c:	1b64      	subs	r4, r4, r5
 800a12e:	10a4      	asrs	r4, r4, #2
 800a130:	2600      	movs	r6, #0
 800a132:	42a6      	cmp	r6, r4
 800a134:	d105      	bne.n	800a142 <__libc_init_array+0x2e>
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13c:	4798      	blx	r3
 800a13e:	3601      	adds	r6, #1
 800a140:	e7ee      	b.n	800a120 <__libc_init_array+0xc>
 800a142:	f855 3b04 	ldr.w	r3, [r5], #4
 800a146:	4798      	blx	r3
 800a148:	3601      	adds	r6, #1
 800a14a:	e7f2      	b.n	800a132 <__libc_init_array+0x1e>
 800a14c:	0800c454 	.word	0x0800c454
 800a150:	0800c454 	.word	0x0800c454
 800a154:	0800c454 	.word	0x0800c454
 800a158:	0800c458 	.word	0x0800c458

0800a15c <__retarget_lock_init_recursive>:
 800a15c:	4770      	bx	lr

0800a15e <__retarget_lock_acquire_recursive>:
 800a15e:	4770      	bx	lr

0800a160 <__retarget_lock_release_recursive>:
 800a160:	4770      	bx	lr

0800a162 <memcpy>:
 800a162:	440a      	add	r2, r1
 800a164:	4291      	cmp	r1, r2
 800a166:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a16a:	d100      	bne.n	800a16e <memcpy+0xc>
 800a16c:	4770      	bx	lr
 800a16e:	b510      	push	{r4, lr}
 800a170:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a178:	4291      	cmp	r1, r2
 800a17a:	d1f9      	bne.n	800a170 <memcpy+0xe>
 800a17c:	bd10      	pop	{r4, pc}

0800a17e <__ssputs_r>:
 800a17e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a182:	688e      	ldr	r6, [r1, #8]
 800a184:	461f      	mov	r7, r3
 800a186:	42be      	cmp	r6, r7
 800a188:	680b      	ldr	r3, [r1, #0]
 800a18a:	4682      	mov	sl, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	4690      	mov	r8, r2
 800a190:	d82d      	bhi.n	800a1ee <__ssputs_r+0x70>
 800a192:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a196:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a19a:	d026      	beq.n	800a1ea <__ssputs_r+0x6c>
 800a19c:	6965      	ldr	r5, [r4, #20]
 800a19e:	6909      	ldr	r1, [r1, #16]
 800a1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1a4:	eba3 0901 	sub.w	r9, r3, r1
 800a1a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1ac:	1c7b      	adds	r3, r7, #1
 800a1ae:	444b      	add	r3, r9
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	bf38      	it	cc
 800a1b6:	461d      	movcc	r5, r3
 800a1b8:	0553      	lsls	r3, r2, #21
 800a1ba:	d527      	bpl.n	800a20c <__ssputs_r+0x8e>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	f000 fa99 	bl	800a6f4 <_malloc_r>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	b360      	cbz	r0, 800a220 <__ssputs_r+0xa2>
 800a1c6:	6921      	ldr	r1, [r4, #16]
 800a1c8:	464a      	mov	r2, r9
 800a1ca:	f7ff ffca 	bl	800a162 <memcpy>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	6126      	str	r6, [r4, #16]
 800a1dc:	6165      	str	r5, [r4, #20]
 800a1de:	444e      	add	r6, r9
 800a1e0:	eba5 0509 	sub.w	r5, r5, r9
 800a1e4:	6026      	str	r6, [r4, #0]
 800a1e6:	60a5      	str	r5, [r4, #8]
 800a1e8:	463e      	mov	r6, r7
 800a1ea:	42be      	cmp	r6, r7
 800a1ec:	d900      	bls.n	800a1f0 <__ssputs_r+0x72>
 800a1ee:	463e      	mov	r6, r7
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	f000 feab 	bl	800af50 <memmove>
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	1b9b      	subs	r3, r3, r6
 800a1fe:	60a3      	str	r3, [r4, #8]
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	4433      	add	r3, r6
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	2000      	movs	r0, #0
 800a208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20c:	462a      	mov	r2, r5
 800a20e:	f000 fd7a 	bl	800ad06 <_realloc_r>
 800a212:	4606      	mov	r6, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d1e0      	bne.n	800a1da <__ssputs_r+0x5c>
 800a218:	6921      	ldr	r1, [r4, #16]
 800a21a:	4650      	mov	r0, sl
 800a21c:	f000 ff2a 	bl	800b074 <_free_r>
 800a220:	230c      	movs	r3, #12
 800a222:	f8ca 3000 	str.w	r3, [sl]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a232:	e7e9      	b.n	800a208 <__ssputs_r+0x8a>

0800a234 <_svfiprintf_r>:
 800a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	4698      	mov	r8, r3
 800a23a:	898b      	ldrh	r3, [r1, #12]
 800a23c:	061b      	lsls	r3, r3, #24
 800a23e:	b09d      	sub	sp, #116	@ 0x74
 800a240:	4607      	mov	r7, r0
 800a242:	460d      	mov	r5, r1
 800a244:	4614      	mov	r4, r2
 800a246:	d510      	bpl.n	800a26a <_svfiprintf_r+0x36>
 800a248:	690b      	ldr	r3, [r1, #16]
 800a24a:	b973      	cbnz	r3, 800a26a <_svfiprintf_r+0x36>
 800a24c:	2140      	movs	r1, #64	@ 0x40
 800a24e:	f000 fa51 	bl	800a6f4 <_malloc_r>
 800a252:	6028      	str	r0, [r5, #0]
 800a254:	6128      	str	r0, [r5, #16]
 800a256:	b930      	cbnz	r0, 800a266 <_svfiprintf_r+0x32>
 800a258:	230c      	movs	r3, #12
 800a25a:	603b      	str	r3, [r7, #0]
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a260:	b01d      	add	sp, #116	@ 0x74
 800a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a266:	2340      	movs	r3, #64	@ 0x40
 800a268:	616b      	str	r3, [r5, #20]
 800a26a:	2300      	movs	r3, #0
 800a26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a26e:	2320      	movs	r3, #32
 800a270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a274:	f8cd 800c 	str.w	r8, [sp, #12]
 800a278:	2330      	movs	r3, #48	@ 0x30
 800a27a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a418 <_svfiprintf_r+0x1e4>
 800a27e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a282:	f04f 0901 	mov.w	r9, #1
 800a286:	4623      	mov	r3, r4
 800a288:	469a      	mov	sl, r3
 800a28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28e:	b10a      	cbz	r2, 800a294 <_svfiprintf_r+0x60>
 800a290:	2a25      	cmp	r2, #37	@ 0x25
 800a292:	d1f9      	bne.n	800a288 <_svfiprintf_r+0x54>
 800a294:	ebba 0b04 	subs.w	fp, sl, r4
 800a298:	d00b      	beq.n	800a2b2 <_svfiprintf_r+0x7e>
 800a29a:	465b      	mov	r3, fp
 800a29c:	4622      	mov	r2, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f7ff ff6c 	bl	800a17e <__ssputs_r>
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f000 80a7 	beq.w	800a3fa <_svfiprintf_r+0x1c6>
 800a2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ae:	445a      	add	r2, fp
 800a2b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 809f 	beq.w	800a3fa <_svfiprintf_r+0x1c6>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c6:	f10a 0a01 	add.w	sl, sl, #1
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	9307      	str	r3, [sp, #28]
 800a2ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2d4:	4654      	mov	r4, sl
 800a2d6:	2205      	movs	r2, #5
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	484e      	ldr	r0, [pc, #312]	@ (800a418 <_svfiprintf_r+0x1e4>)
 800a2de:	f7f5 ff9f 	bl	8000220 <memchr>
 800a2e2:	9a04      	ldr	r2, [sp, #16]
 800a2e4:	b9d8      	cbnz	r0, 800a31e <_svfiprintf_r+0xea>
 800a2e6:	06d0      	lsls	r0, r2, #27
 800a2e8:	bf44      	itt	mi
 800a2ea:	2320      	movmi	r3, #32
 800a2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2f0:	0711      	lsls	r1, r2, #28
 800a2f2:	bf44      	itt	mi
 800a2f4:	232b      	movmi	r3, #43	@ 0x2b
 800a2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a300:	d015      	beq.n	800a32e <_svfiprintf_r+0xfa>
 800a302:	9a07      	ldr	r2, [sp, #28]
 800a304:	4654      	mov	r4, sl
 800a306:	2000      	movs	r0, #0
 800a308:	f04f 0c0a 	mov.w	ip, #10
 800a30c:	4621      	mov	r1, r4
 800a30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a312:	3b30      	subs	r3, #48	@ 0x30
 800a314:	2b09      	cmp	r3, #9
 800a316:	d94b      	bls.n	800a3b0 <_svfiprintf_r+0x17c>
 800a318:	b1b0      	cbz	r0, 800a348 <_svfiprintf_r+0x114>
 800a31a:	9207      	str	r2, [sp, #28]
 800a31c:	e014      	b.n	800a348 <_svfiprintf_r+0x114>
 800a31e:	eba0 0308 	sub.w	r3, r0, r8
 800a322:	fa09 f303 	lsl.w	r3, r9, r3
 800a326:	4313      	orrs	r3, r2
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	46a2      	mov	sl, r4
 800a32c:	e7d2      	b.n	800a2d4 <_svfiprintf_r+0xa0>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	1d19      	adds	r1, r3, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	9103      	str	r1, [sp, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	bfbb      	ittet	lt
 800a33a:	425b      	neglt	r3, r3
 800a33c:	f042 0202 	orrlt.w	r2, r2, #2
 800a340:	9307      	strge	r3, [sp, #28]
 800a342:	9307      	strlt	r3, [sp, #28]
 800a344:	bfb8      	it	lt
 800a346:	9204      	strlt	r2, [sp, #16]
 800a348:	7823      	ldrb	r3, [r4, #0]
 800a34a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a34c:	d10a      	bne.n	800a364 <_svfiprintf_r+0x130>
 800a34e:	7863      	ldrb	r3, [r4, #1]
 800a350:	2b2a      	cmp	r3, #42	@ 0x2a
 800a352:	d132      	bne.n	800a3ba <_svfiprintf_r+0x186>
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	9203      	str	r2, [sp, #12]
 800a35c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a360:	3402      	adds	r4, #2
 800a362:	9305      	str	r3, [sp, #20]
 800a364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a428 <_svfiprintf_r+0x1f4>
 800a368:	7821      	ldrb	r1, [r4, #0]
 800a36a:	2203      	movs	r2, #3
 800a36c:	4650      	mov	r0, sl
 800a36e:	f7f5 ff57 	bl	8000220 <memchr>
 800a372:	b138      	cbz	r0, 800a384 <_svfiprintf_r+0x150>
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	eba0 000a 	sub.w	r0, r0, sl
 800a37a:	2240      	movs	r2, #64	@ 0x40
 800a37c:	4082      	lsls	r2, r0
 800a37e:	4313      	orrs	r3, r2
 800a380:	3401      	adds	r4, #1
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	4824      	ldr	r0, [pc, #144]	@ (800a41c <_svfiprintf_r+0x1e8>)
 800a38a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a38e:	2206      	movs	r2, #6
 800a390:	f7f5 ff46 	bl	8000220 <memchr>
 800a394:	2800      	cmp	r0, #0
 800a396:	d036      	beq.n	800a406 <_svfiprintf_r+0x1d2>
 800a398:	4b21      	ldr	r3, [pc, #132]	@ (800a420 <_svfiprintf_r+0x1ec>)
 800a39a:	bb1b      	cbnz	r3, 800a3e4 <_svfiprintf_r+0x1b0>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	3307      	adds	r3, #7
 800a3a0:	f023 0307 	bic.w	r3, r3, #7
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	9303      	str	r3, [sp, #12]
 800a3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3aa:	4433      	add	r3, r6
 800a3ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ae:	e76a      	b.n	800a286 <_svfiprintf_r+0x52>
 800a3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	e7a8      	b.n	800a30c <_svfiprintf_r+0xd8>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3cc:	3a30      	subs	r2, #48	@ 0x30
 800a3ce:	2a09      	cmp	r2, #9
 800a3d0:	d903      	bls.n	800a3da <_svfiprintf_r+0x1a6>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0c6      	beq.n	800a364 <_svfiprintf_r+0x130>
 800a3d6:	9105      	str	r1, [sp, #20]
 800a3d8:	e7c4      	b.n	800a364 <_svfiprintf_r+0x130>
 800a3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3de:	4604      	mov	r4, r0
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e7f0      	b.n	800a3c6 <_svfiprintf_r+0x192>
 800a3e4:	ab03      	add	r3, sp, #12
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a424 <_svfiprintf_r+0x1f0>)
 800a3ec:	a904      	add	r1, sp, #16
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f3af 8000 	nop.w
 800a3f4:	1c42      	adds	r2, r0, #1
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	d1d6      	bne.n	800a3a8 <_svfiprintf_r+0x174>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	065b      	lsls	r3, r3, #25
 800a3fe:	f53f af2d 	bmi.w	800a25c <_svfiprintf_r+0x28>
 800a402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a404:	e72c      	b.n	800a260 <_svfiprintf_r+0x2c>
 800a406:	ab03      	add	r3, sp, #12
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	462a      	mov	r2, r5
 800a40c:	4b05      	ldr	r3, [pc, #20]	@ (800a424 <_svfiprintf_r+0x1f0>)
 800a40e:	a904      	add	r1, sp, #16
 800a410:	4638      	mov	r0, r7
 800a412:	f000 fa5d 	bl	800a8d0 <_printf_i>
 800a416:	e7ed      	b.n	800a3f4 <_svfiprintf_r+0x1c0>
 800a418:	0800c418 	.word	0x0800c418
 800a41c:	0800c422 	.word	0x0800c422
 800a420:	00000000 	.word	0x00000000
 800a424:	0800a17f 	.word	0x0800a17f
 800a428:	0800c41e 	.word	0x0800c41e

0800a42c <__sfputc_r>:
 800a42c:	6893      	ldr	r3, [r2, #8]
 800a42e:	3b01      	subs	r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	b410      	push	{r4}
 800a434:	6093      	str	r3, [r2, #8]
 800a436:	da08      	bge.n	800a44a <__sfputc_r+0x1e>
 800a438:	6994      	ldr	r4, [r2, #24]
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	db01      	blt.n	800a442 <__sfputc_r+0x16>
 800a43e:	290a      	cmp	r1, #10
 800a440:	d103      	bne.n	800a44a <__sfputc_r+0x1e>
 800a442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a446:	f000 bc8c 	b.w	800ad62 <__swbuf_r>
 800a44a:	6813      	ldr	r3, [r2, #0]
 800a44c:	1c58      	adds	r0, r3, #1
 800a44e:	6010      	str	r0, [r2, #0]
 800a450:	7019      	strb	r1, [r3, #0]
 800a452:	4608      	mov	r0, r1
 800a454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <__sfputs_r>:
 800a45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	4614      	mov	r4, r2
 800a462:	18d5      	adds	r5, r2, r3
 800a464:	42ac      	cmp	r4, r5
 800a466:	d101      	bne.n	800a46c <__sfputs_r+0x12>
 800a468:	2000      	movs	r0, #0
 800a46a:	e007      	b.n	800a47c <__sfputs_r+0x22>
 800a46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a470:	463a      	mov	r2, r7
 800a472:	4630      	mov	r0, r6
 800a474:	f7ff ffda 	bl	800a42c <__sfputc_r>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d1f3      	bne.n	800a464 <__sfputs_r+0xa>
 800a47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a480 <_vfiprintf_r>:
 800a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a484:	460d      	mov	r5, r1
 800a486:	b09d      	sub	sp, #116	@ 0x74
 800a488:	4614      	mov	r4, r2
 800a48a:	4698      	mov	r8, r3
 800a48c:	4606      	mov	r6, r0
 800a48e:	b118      	cbz	r0, 800a498 <_vfiprintf_r+0x18>
 800a490:	6a03      	ldr	r3, [r0, #32]
 800a492:	b90b      	cbnz	r3, 800a498 <_vfiprintf_r+0x18>
 800a494:	f7ff fd74 	bl	8009f80 <__sinit>
 800a498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a49a:	07d9      	lsls	r1, r3, #31
 800a49c:	d405      	bmi.n	800a4aa <_vfiprintf_r+0x2a>
 800a49e:	89ab      	ldrh	r3, [r5, #12]
 800a4a0:	059a      	lsls	r2, r3, #22
 800a4a2:	d402      	bmi.n	800a4aa <_vfiprintf_r+0x2a>
 800a4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4a6:	f7ff fe5a 	bl	800a15e <__retarget_lock_acquire_recursive>
 800a4aa:	89ab      	ldrh	r3, [r5, #12]
 800a4ac:	071b      	lsls	r3, r3, #28
 800a4ae:	d501      	bpl.n	800a4b4 <_vfiprintf_r+0x34>
 800a4b0:	692b      	ldr	r3, [r5, #16]
 800a4b2:	b99b      	cbnz	r3, 800a4dc <_vfiprintf_r+0x5c>
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f000 fc92 	bl	800ade0 <__swsetup_r>
 800a4bc:	b170      	cbz	r0, 800a4dc <_vfiprintf_r+0x5c>
 800a4be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4c0:	07dc      	lsls	r4, r3, #31
 800a4c2:	d504      	bpl.n	800a4ce <_vfiprintf_r+0x4e>
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4c8:	b01d      	add	sp, #116	@ 0x74
 800a4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ce:	89ab      	ldrh	r3, [r5, #12]
 800a4d0:	0598      	lsls	r0, r3, #22
 800a4d2:	d4f7      	bmi.n	800a4c4 <_vfiprintf_r+0x44>
 800a4d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4d6:	f7ff fe43 	bl	800a160 <__retarget_lock_release_recursive>
 800a4da:	e7f3      	b.n	800a4c4 <_vfiprintf_r+0x44>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e0:	2320      	movs	r3, #32
 800a4e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ea:	2330      	movs	r3, #48	@ 0x30
 800a4ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a69c <_vfiprintf_r+0x21c>
 800a4f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4f4:	f04f 0901 	mov.w	r9, #1
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	469a      	mov	sl, r3
 800a4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a500:	b10a      	cbz	r2, 800a506 <_vfiprintf_r+0x86>
 800a502:	2a25      	cmp	r2, #37	@ 0x25
 800a504:	d1f9      	bne.n	800a4fa <_vfiprintf_r+0x7a>
 800a506:	ebba 0b04 	subs.w	fp, sl, r4
 800a50a:	d00b      	beq.n	800a524 <_vfiprintf_r+0xa4>
 800a50c:	465b      	mov	r3, fp
 800a50e:	4622      	mov	r2, r4
 800a510:	4629      	mov	r1, r5
 800a512:	4630      	mov	r0, r6
 800a514:	f7ff ffa1 	bl	800a45a <__sfputs_r>
 800a518:	3001      	adds	r0, #1
 800a51a:	f000 80a7 	beq.w	800a66c <_vfiprintf_r+0x1ec>
 800a51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a520:	445a      	add	r2, fp
 800a522:	9209      	str	r2, [sp, #36]	@ 0x24
 800a524:	f89a 3000 	ldrb.w	r3, [sl]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 809f 	beq.w	800a66c <_vfiprintf_r+0x1ec>
 800a52e:	2300      	movs	r3, #0
 800a530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a538:	f10a 0a01 	add.w	sl, sl, #1
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a544:	931a      	str	r3, [sp, #104]	@ 0x68
 800a546:	4654      	mov	r4, sl
 800a548:	2205      	movs	r2, #5
 800a54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a54e:	4853      	ldr	r0, [pc, #332]	@ (800a69c <_vfiprintf_r+0x21c>)
 800a550:	f7f5 fe66 	bl	8000220 <memchr>
 800a554:	9a04      	ldr	r2, [sp, #16]
 800a556:	b9d8      	cbnz	r0, 800a590 <_vfiprintf_r+0x110>
 800a558:	06d1      	lsls	r1, r2, #27
 800a55a:	bf44      	itt	mi
 800a55c:	2320      	movmi	r3, #32
 800a55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a562:	0713      	lsls	r3, r2, #28
 800a564:	bf44      	itt	mi
 800a566:	232b      	movmi	r3, #43	@ 0x2b
 800a568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a56c:	f89a 3000 	ldrb.w	r3, [sl]
 800a570:	2b2a      	cmp	r3, #42	@ 0x2a
 800a572:	d015      	beq.n	800a5a0 <_vfiprintf_r+0x120>
 800a574:	9a07      	ldr	r2, [sp, #28]
 800a576:	4654      	mov	r4, sl
 800a578:	2000      	movs	r0, #0
 800a57a:	f04f 0c0a 	mov.w	ip, #10
 800a57e:	4621      	mov	r1, r4
 800a580:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a584:	3b30      	subs	r3, #48	@ 0x30
 800a586:	2b09      	cmp	r3, #9
 800a588:	d94b      	bls.n	800a622 <_vfiprintf_r+0x1a2>
 800a58a:	b1b0      	cbz	r0, 800a5ba <_vfiprintf_r+0x13a>
 800a58c:	9207      	str	r2, [sp, #28]
 800a58e:	e014      	b.n	800a5ba <_vfiprintf_r+0x13a>
 800a590:	eba0 0308 	sub.w	r3, r0, r8
 800a594:	fa09 f303 	lsl.w	r3, r9, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	46a2      	mov	sl, r4
 800a59e:	e7d2      	b.n	800a546 <_vfiprintf_r+0xc6>
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	1d19      	adds	r1, r3, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	9103      	str	r1, [sp, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfbb      	ittet	lt
 800a5ac:	425b      	neglt	r3, r3
 800a5ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b2:	9307      	strge	r3, [sp, #28]
 800a5b4:	9307      	strlt	r3, [sp, #28]
 800a5b6:	bfb8      	it	lt
 800a5b8:	9204      	strlt	r2, [sp, #16]
 800a5ba:	7823      	ldrb	r3, [r4, #0]
 800a5bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5be:	d10a      	bne.n	800a5d6 <_vfiprintf_r+0x156>
 800a5c0:	7863      	ldrb	r3, [r4, #1]
 800a5c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5c4:	d132      	bne.n	800a62c <_vfiprintf_r+0x1ac>
 800a5c6:	9b03      	ldr	r3, [sp, #12]
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	9203      	str	r2, [sp, #12]
 800a5ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5d2:	3402      	adds	r4, #2
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6ac <_vfiprintf_r+0x22c>
 800a5da:	7821      	ldrb	r1, [r4, #0]
 800a5dc:	2203      	movs	r2, #3
 800a5de:	4650      	mov	r0, sl
 800a5e0:	f7f5 fe1e 	bl	8000220 <memchr>
 800a5e4:	b138      	cbz	r0, 800a5f6 <_vfiprintf_r+0x176>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	eba0 000a 	sub.w	r0, r0, sl
 800a5ec:	2240      	movs	r2, #64	@ 0x40
 800a5ee:	4082      	lsls	r2, r0
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	3401      	adds	r4, #1
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fa:	4829      	ldr	r0, [pc, #164]	@ (800a6a0 <_vfiprintf_r+0x220>)
 800a5fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a600:	2206      	movs	r2, #6
 800a602:	f7f5 fe0d 	bl	8000220 <memchr>
 800a606:	2800      	cmp	r0, #0
 800a608:	d03f      	beq.n	800a68a <_vfiprintf_r+0x20a>
 800a60a:	4b26      	ldr	r3, [pc, #152]	@ (800a6a4 <_vfiprintf_r+0x224>)
 800a60c:	bb1b      	cbnz	r3, 800a656 <_vfiprintf_r+0x1d6>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	f023 0307 	bic.w	r3, r3, #7
 800a616:	3308      	adds	r3, #8
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a61c:	443b      	add	r3, r7
 800a61e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a620:	e76a      	b.n	800a4f8 <_vfiprintf_r+0x78>
 800a622:	fb0c 3202 	mla	r2, ip, r2, r3
 800a626:	460c      	mov	r4, r1
 800a628:	2001      	movs	r0, #1
 800a62a:	e7a8      	b.n	800a57e <_vfiprintf_r+0xfe>
 800a62c:	2300      	movs	r3, #0
 800a62e:	3401      	adds	r4, #1
 800a630:	9305      	str	r3, [sp, #20]
 800a632:	4619      	mov	r1, r3
 800a634:	f04f 0c0a 	mov.w	ip, #10
 800a638:	4620      	mov	r0, r4
 800a63a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a63e:	3a30      	subs	r2, #48	@ 0x30
 800a640:	2a09      	cmp	r2, #9
 800a642:	d903      	bls.n	800a64c <_vfiprintf_r+0x1cc>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0c6      	beq.n	800a5d6 <_vfiprintf_r+0x156>
 800a648:	9105      	str	r1, [sp, #20]
 800a64a:	e7c4      	b.n	800a5d6 <_vfiprintf_r+0x156>
 800a64c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a650:	4604      	mov	r4, r0
 800a652:	2301      	movs	r3, #1
 800a654:	e7f0      	b.n	800a638 <_vfiprintf_r+0x1b8>
 800a656:	ab03      	add	r3, sp, #12
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	462a      	mov	r2, r5
 800a65c:	4b12      	ldr	r3, [pc, #72]	@ (800a6a8 <_vfiprintf_r+0x228>)
 800a65e:	a904      	add	r1, sp, #16
 800a660:	4630      	mov	r0, r6
 800a662:	f3af 8000 	nop.w
 800a666:	4607      	mov	r7, r0
 800a668:	1c78      	adds	r0, r7, #1
 800a66a:	d1d6      	bne.n	800a61a <_vfiprintf_r+0x19a>
 800a66c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a66e:	07d9      	lsls	r1, r3, #31
 800a670:	d405      	bmi.n	800a67e <_vfiprintf_r+0x1fe>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	059a      	lsls	r2, r3, #22
 800a676:	d402      	bmi.n	800a67e <_vfiprintf_r+0x1fe>
 800a678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a67a:	f7ff fd71 	bl	800a160 <__retarget_lock_release_recursive>
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	065b      	lsls	r3, r3, #25
 800a682:	f53f af1f 	bmi.w	800a4c4 <_vfiprintf_r+0x44>
 800a686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a688:	e71e      	b.n	800a4c8 <_vfiprintf_r+0x48>
 800a68a:	ab03      	add	r3, sp, #12
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	462a      	mov	r2, r5
 800a690:	4b05      	ldr	r3, [pc, #20]	@ (800a6a8 <_vfiprintf_r+0x228>)
 800a692:	a904      	add	r1, sp, #16
 800a694:	4630      	mov	r0, r6
 800a696:	f000 f91b 	bl	800a8d0 <_printf_i>
 800a69a:	e7e4      	b.n	800a666 <_vfiprintf_r+0x1e6>
 800a69c:	0800c418 	.word	0x0800c418
 800a6a0:	0800c422 	.word	0x0800c422
 800a6a4:	00000000 	.word	0x00000000
 800a6a8:	0800a45b 	.word	0x0800a45b
 800a6ac:	0800c41e 	.word	0x0800c41e

0800a6b0 <sbrk_aligned>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a6f0 <sbrk_aligned+0x40>)
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	6831      	ldr	r1, [r6, #0]
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	b911      	cbnz	r1, 800a6c2 <sbrk_aligned+0x12>
 800a6bc:	f000 fcb8 	bl	800b030 <_sbrk_r>
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f000 fcb3 	bl	800b030 <_sbrk_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d103      	bne.n	800a6d6 <sbrk_aligned+0x26>
 800a6ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	1cc4      	adds	r4, r0, #3
 800a6d8:	f024 0403 	bic.w	r4, r4, #3
 800a6dc:	42a0      	cmp	r0, r4
 800a6de:	d0f8      	beq.n	800a6d2 <sbrk_aligned+0x22>
 800a6e0:	1a21      	subs	r1, r4, r0
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 fca4 	bl	800b030 <_sbrk_r>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d1f2      	bne.n	800a6d2 <sbrk_aligned+0x22>
 800a6ec:	e7ef      	b.n	800a6ce <sbrk_aligned+0x1e>
 800a6ee:	bf00      	nop
 800a6f0:	20005188 	.word	0x20005188

0800a6f4 <_malloc_r>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	1ccd      	adds	r5, r1, #3
 800a6fa:	f025 0503 	bic.w	r5, r5, #3
 800a6fe:	3508      	adds	r5, #8
 800a700:	2d0c      	cmp	r5, #12
 800a702:	bf38      	it	cc
 800a704:	250c      	movcc	r5, #12
 800a706:	2d00      	cmp	r5, #0
 800a708:	4606      	mov	r6, r0
 800a70a:	db01      	blt.n	800a710 <_malloc_r+0x1c>
 800a70c:	42a9      	cmp	r1, r5
 800a70e:	d904      	bls.n	800a71a <_malloc_r+0x26>
 800a710:	230c      	movs	r3, #12
 800a712:	6033      	str	r3, [r6, #0]
 800a714:	2000      	movs	r0, #0
 800a716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7f0 <_malloc_r+0xfc>
 800a71e:	f000 faa3 	bl	800ac68 <__malloc_lock>
 800a722:	f8d8 3000 	ldr.w	r3, [r8]
 800a726:	461c      	mov	r4, r3
 800a728:	bb44      	cbnz	r4, 800a77c <_malloc_r+0x88>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4630      	mov	r0, r6
 800a72e:	f7ff ffbf 	bl	800a6b0 <sbrk_aligned>
 800a732:	1c43      	adds	r3, r0, #1
 800a734:	4604      	mov	r4, r0
 800a736:	d158      	bne.n	800a7ea <_malloc_r+0xf6>
 800a738:	f8d8 4000 	ldr.w	r4, [r8]
 800a73c:	4627      	mov	r7, r4
 800a73e:	2f00      	cmp	r7, #0
 800a740:	d143      	bne.n	800a7ca <_malloc_r+0xd6>
 800a742:	2c00      	cmp	r4, #0
 800a744:	d04b      	beq.n	800a7de <_malloc_r+0xea>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	eb04 0903 	add.w	r9, r4, r3
 800a750:	f000 fc6e 	bl	800b030 <_sbrk_r>
 800a754:	4581      	cmp	r9, r0
 800a756:	d142      	bne.n	800a7de <_malloc_r+0xea>
 800a758:	6821      	ldr	r1, [r4, #0]
 800a75a:	1a6d      	subs	r5, r5, r1
 800a75c:	4629      	mov	r1, r5
 800a75e:	4630      	mov	r0, r6
 800a760:	f7ff ffa6 	bl	800a6b0 <sbrk_aligned>
 800a764:	3001      	adds	r0, #1
 800a766:	d03a      	beq.n	800a7de <_malloc_r+0xea>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	442b      	add	r3, r5
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	f8d8 3000 	ldr.w	r3, [r8]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	bb62      	cbnz	r2, 800a7d0 <_malloc_r+0xdc>
 800a776:	f8c8 7000 	str.w	r7, [r8]
 800a77a:	e00f      	b.n	800a79c <_malloc_r+0xa8>
 800a77c:	6822      	ldr	r2, [r4, #0]
 800a77e:	1b52      	subs	r2, r2, r5
 800a780:	d420      	bmi.n	800a7c4 <_malloc_r+0xd0>
 800a782:	2a0b      	cmp	r2, #11
 800a784:	d917      	bls.n	800a7b6 <_malloc_r+0xc2>
 800a786:	1961      	adds	r1, r4, r5
 800a788:	42a3      	cmp	r3, r4
 800a78a:	6025      	str	r5, [r4, #0]
 800a78c:	bf18      	it	ne
 800a78e:	6059      	strne	r1, [r3, #4]
 800a790:	6863      	ldr	r3, [r4, #4]
 800a792:	bf08      	it	eq
 800a794:	f8c8 1000 	streq.w	r1, [r8]
 800a798:	5162      	str	r2, [r4, r5]
 800a79a:	604b      	str	r3, [r1, #4]
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 fa69 	bl	800ac74 <__malloc_unlock>
 800a7a2:	f104 000b 	add.w	r0, r4, #11
 800a7a6:	1d23      	adds	r3, r4, #4
 800a7a8:	f020 0007 	bic.w	r0, r0, #7
 800a7ac:	1ac2      	subs	r2, r0, r3
 800a7ae:	bf1c      	itt	ne
 800a7b0:	1a1b      	subne	r3, r3, r0
 800a7b2:	50a3      	strne	r3, [r4, r2]
 800a7b4:	e7af      	b.n	800a716 <_malloc_r+0x22>
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	bf0c      	ite	eq
 800a7bc:	f8c8 2000 	streq.w	r2, [r8]
 800a7c0:	605a      	strne	r2, [r3, #4]
 800a7c2:	e7eb      	b.n	800a79c <_malloc_r+0xa8>
 800a7c4:	4623      	mov	r3, r4
 800a7c6:	6864      	ldr	r4, [r4, #4]
 800a7c8:	e7ae      	b.n	800a728 <_malloc_r+0x34>
 800a7ca:	463c      	mov	r4, r7
 800a7cc:	687f      	ldr	r7, [r7, #4]
 800a7ce:	e7b6      	b.n	800a73e <_malloc_r+0x4a>
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d1fb      	bne.n	800a7d0 <_malloc_r+0xdc>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	6053      	str	r3, [r2, #4]
 800a7dc:	e7de      	b.n	800a79c <_malloc_r+0xa8>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	6033      	str	r3, [r6, #0]
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 fa46 	bl	800ac74 <__malloc_unlock>
 800a7e8:	e794      	b.n	800a714 <_malloc_r+0x20>
 800a7ea:	6005      	str	r5, [r0, #0]
 800a7ec:	e7d6      	b.n	800a79c <_malloc_r+0xa8>
 800a7ee:	bf00      	nop
 800a7f0:	2000518c 	.word	0x2000518c

0800a7f4 <_printf_common>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	4698      	mov	r8, r3
 800a7fc:	688a      	ldr	r2, [r1, #8]
 800a7fe:	690b      	ldr	r3, [r1, #16]
 800a800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a804:	4293      	cmp	r3, r2
 800a806:	bfb8      	it	lt
 800a808:	4613      	movlt	r3, r2
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a810:	4607      	mov	r7, r0
 800a812:	460c      	mov	r4, r1
 800a814:	b10a      	cbz	r2, 800a81a <_printf_common+0x26>
 800a816:	3301      	adds	r3, #1
 800a818:	6033      	str	r3, [r6, #0]
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	0699      	lsls	r1, r3, #26
 800a81e:	bf42      	ittt	mi
 800a820:	6833      	ldrmi	r3, [r6, #0]
 800a822:	3302      	addmi	r3, #2
 800a824:	6033      	strmi	r3, [r6, #0]
 800a826:	6825      	ldr	r5, [r4, #0]
 800a828:	f015 0506 	ands.w	r5, r5, #6
 800a82c:	d106      	bne.n	800a83c <_printf_common+0x48>
 800a82e:	f104 0a19 	add.w	sl, r4, #25
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	6832      	ldr	r2, [r6, #0]
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc26      	bgt.n	800a88a <_printf_common+0x96>
 800a83c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	3b00      	subs	r3, #0
 800a844:	bf18      	it	ne
 800a846:	2301      	movne	r3, #1
 800a848:	0692      	lsls	r2, r2, #26
 800a84a:	d42b      	bmi.n	800a8a4 <_printf_common+0xb0>
 800a84c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a850:	4641      	mov	r1, r8
 800a852:	4638      	mov	r0, r7
 800a854:	47c8      	blx	r9
 800a856:	3001      	adds	r0, #1
 800a858:	d01e      	beq.n	800a898 <_printf_common+0xa4>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	6922      	ldr	r2, [r4, #16]
 800a85e:	f003 0306 	and.w	r3, r3, #6
 800a862:	2b04      	cmp	r3, #4
 800a864:	bf02      	ittt	eq
 800a866:	68e5      	ldreq	r5, [r4, #12]
 800a868:	6833      	ldreq	r3, [r6, #0]
 800a86a:	1aed      	subeq	r5, r5, r3
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	bf0c      	ite	eq
 800a870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a874:	2500      	movne	r5, #0
 800a876:	4293      	cmp	r3, r2
 800a878:	bfc4      	itt	gt
 800a87a:	1a9b      	subgt	r3, r3, r2
 800a87c:	18ed      	addgt	r5, r5, r3
 800a87e:	2600      	movs	r6, #0
 800a880:	341a      	adds	r4, #26
 800a882:	42b5      	cmp	r5, r6
 800a884:	d11a      	bne.n	800a8bc <_printf_common+0xc8>
 800a886:	2000      	movs	r0, #0
 800a888:	e008      	b.n	800a89c <_printf_common+0xa8>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4652      	mov	r2, sl
 800a88e:	4641      	mov	r1, r8
 800a890:	4638      	mov	r0, r7
 800a892:	47c8      	blx	r9
 800a894:	3001      	adds	r0, #1
 800a896:	d103      	bne.n	800a8a0 <_printf_common+0xac>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	e7c6      	b.n	800a832 <_printf_common+0x3e>
 800a8a4:	18e1      	adds	r1, r4, r3
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	2030      	movs	r0, #48	@ 0x30
 800a8aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8ae:	4422      	add	r2, r4
 800a8b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	e7c7      	b.n	800a84c <_printf_common+0x58>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c8      	blx	r9
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d0e6      	beq.n	800a898 <_printf_common+0xa4>
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7d9      	b.n	800a882 <_printf_common+0x8e>
	...

0800a8d0 <_printf_i>:
 800a8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	7e0f      	ldrb	r7, [r1, #24]
 800a8d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8d8:	2f78      	cmp	r7, #120	@ 0x78
 800a8da:	4691      	mov	r9, r2
 800a8dc:	4680      	mov	r8, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8e6:	d807      	bhi.n	800a8f8 <_printf_i+0x28>
 800a8e8:	2f62      	cmp	r7, #98	@ 0x62
 800a8ea:	d80a      	bhi.n	800a902 <_printf_i+0x32>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	f000 80d2 	beq.w	800aa96 <_printf_i+0x1c6>
 800a8f2:	2f58      	cmp	r7, #88	@ 0x58
 800a8f4:	f000 80b9 	beq.w	800aa6a <_printf_i+0x19a>
 800a8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a900:	e03a      	b.n	800a978 <_printf_i+0xa8>
 800a902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a906:	2b15      	cmp	r3, #21
 800a908:	d8f6      	bhi.n	800a8f8 <_printf_i+0x28>
 800a90a:	a101      	add	r1, pc, #4	@ (adr r1, 800a910 <_printf_i+0x40>)
 800a90c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a910:	0800a969 	.word	0x0800a969
 800a914:	0800a97d 	.word	0x0800a97d
 800a918:	0800a8f9 	.word	0x0800a8f9
 800a91c:	0800a8f9 	.word	0x0800a8f9
 800a920:	0800a8f9 	.word	0x0800a8f9
 800a924:	0800a8f9 	.word	0x0800a8f9
 800a928:	0800a97d 	.word	0x0800a97d
 800a92c:	0800a8f9 	.word	0x0800a8f9
 800a930:	0800a8f9 	.word	0x0800a8f9
 800a934:	0800a8f9 	.word	0x0800a8f9
 800a938:	0800a8f9 	.word	0x0800a8f9
 800a93c:	0800aa7d 	.word	0x0800aa7d
 800a940:	0800a9a7 	.word	0x0800a9a7
 800a944:	0800aa37 	.word	0x0800aa37
 800a948:	0800a8f9 	.word	0x0800a8f9
 800a94c:	0800a8f9 	.word	0x0800a8f9
 800a950:	0800aa9f 	.word	0x0800aa9f
 800a954:	0800a8f9 	.word	0x0800a8f9
 800a958:	0800a9a7 	.word	0x0800a9a7
 800a95c:	0800a8f9 	.word	0x0800a8f9
 800a960:	0800a8f9 	.word	0x0800a8f9
 800a964:	0800aa3f 	.word	0x0800aa3f
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6032      	str	r2, [r6, #0]
 800a970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a978:	2301      	movs	r3, #1
 800a97a:	e09d      	b.n	800aab8 <_printf_i+0x1e8>
 800a97c:	6833      	ldr	r3, [r6, #0]
 800a97e:	6820      	ldr	r0, [r4, #0]
 800a980:	1d19      	adds	r1, r3, #4
 800a982:	6031      	str	r1, [r6, #0]
 800a984:	0606      	lsls	r6, r0, #24
 800a986:	d501      	bpl.n	800a98c <_printf_i+0xbc>
 800a988:	681d      	ldr	r5, [r3, #0]
 800a98a:	e003      	b.n	800a994 <_printf_i+0xc4>
 800a98c:	0645      	lsls	r5, r0, #25
 800a98e:	d5fb      	bpl.n	800a988 <_printf_i+0xb8>
 800a990:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a994:	2d00      	cmp	r5, #0
 800a996:	da03      	bge.n	800a9a0 <_printf_i+0xd0>
 800a998:	232d      	movs	r3, #45	@ 0x2d
 800a99a:	426d      	negs	r5, r5
 800a99c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9a0:	4859      	ldr	r0, [pc, #356]	@ (800ab08 <_printf_i+0x238>)
 800a9a2:	230a      	movs	r3, #10
 800a9a4:	e011      	b.n	800a9ca <_printf_i+0xfa>
 800a9a6:	6821      	ldr	r1, [r4, #0]
 800a9a8:	6833      	ldr	r3, [r6, #0]
 800a9aa:	0608      	lsls	r0, r1, #24
 800a9ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9b0:	d402      	bmi.n	800a9b8 <_printf_i+0xe8>
 800a9b2:	0649      	lsls	r1, r1, #25
 800a9b4:	bf48      	it	mi
 800a9b6:	b2ad      	uxthmi	r5, r5
 800a9b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9ba:	4853      	ldr	r0, [pc, #332]	@ (800ab08 <_printf_i+0x238>)
 800a9bc:	6033      	str	r3, [r6, #0]
 800a9be:	bf14      	ite	ne
 800a9c0:	230a      	movne	r3, #10
 800a9c2:	2308      	moveq	r3, #8
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ca:	6866      	ldr	r6, [r4, #4]
 800a9cc:	60a6      	str	r6, [r4, #8]
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	bfa2      	ittt	ge
 800a9d2:	6821      	ldrge	r1, [r4, #0]
 800a9d4:	f021 0104 	bicge.w	r1, r1, #4
 800a9d8:	6021      	strge	r1, [r4, #0]
 800a9da:	b90d      	cbnz	r5, 800a9e0 <_printf_i+0x110>
 800a9dc:	2e00      	cmp	r6, #0
 800a9de:	d04b      	beq.n	800aa78 <_printf_i+0x1a8>
 800a9e0:	4616      	mov	r6, r2
 800a9e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9e6:	fb03 5711 	mls	r7, r3, r1, r5
 800a9ea:	5dc7      	ldrb	r7, [r0, r7]
 800a9ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9f0:	462f      	mov	r7, r5
 800a9f2:	42bb      	cmp	r3, r7
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	d9f4      	bls.n	800a9e2 <_printf_i+0x112>
 800a9f8:	2b08      	cmp	r3, #8
 800a9fa:	d10b      	bne.n	800aa14 <_printf_i+0x144>
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	07df      	lsls	r7, r3, #31
 800aa00:	d508      	bpl.n	800aa14 <_printf_i+0x144>
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	6861      	ldr	r1, [r4, #4]
 800aa06:	4299      	cmp	r1, r3
 800aa08:	bfde      	ittt	le
 800aa0a:	2330      	movle	r3, #48	@ 0x30
 800aa0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aa14:	1b92      	subs	r2, r2, r6
 800aa16:	6122      	str	r2, [r4, #16]
 800aa18:	f8cd a000 	str.w	sl, [sp]
 800aa1c:	464b      	mov	r3, r9
 800aa1e:	aa03      	add	r2, sp, #12
 800aa20:	4621      	mov	r1, r4
 800aa22:	4640      	mov	r0, r8
 800aa24:	f7ff fee6 	bl	800a7f4 <_printf_common>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d14a      	bne.n	800aac2 <_printf_i+0x1f2>
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa30:	b004      	add	sp, #16
 800aa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	f043 0320 	orr.w	r3, r3, #32
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	4833      	ldr	r0, [pc, #204]	@ (800ab0c <_printf_i+0x23c>)
 800aa40:	2778      	movs	r7, #120	@ 0x78
 800aa42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	6831      	ldr	r1, [r6, #0]
 800aa4a:	061f      	lsls	r7, r3, #24
 800aa4c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa50:	d402      	bmi.n	800aa58 <_printf_i+0x188>
 800aa52:	065f      	lsls	r7, r3, #25
 800aa54:	bf48      	it	mi
 800aa56:	b2ad      	uxthmi	r5, r5
 800aa58:	6031      	str	r1, [r6, #0]
 800aa5a:	07d9      	lsls	r1, r3, #31
 800aa5c:	bf44      	itt	mi
 800aa5e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa62:	6023      	strmi	r3, [r4, #0]
 800aa64:	b11d      	cbz	r5, 800aa6e <_printf_i+0x19e>
 800aa66:	2310      	movs	r3, #16
 800aa68:	e7ac      	b.n	800a9c4 <_printf_i+0xf4>
 800aa6a:	4827      	ldr	r0, [pc, #156]	@ (800ab08 <_printf_i+0x238>)
 800aa6c:	e7e9      	b.n	800aa42 <_printf_i+0x172>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	f023 0320 	bic.w	r3, r3, #32
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	e7f6      	b.n	800aa66 <_printf_i+0x196>
 800aa78:	4616      	mov	r6, r2
 800aa7a:	e7bd      	b.n	800a9f8 <_printf_i+0x128>
 800aa7c:	6833      	ldr	r3, [r6, #0]
 800aa7e:	6825      	ldr	r5, [r4, #0]
 800aa80:	6961      	ldr	r1, [r4, #20]
 800aa82:	1d18      	adds	r0, r3, #4
 800aa84:	6030      	str	r0, [r6, #0]
 800aa86:	062e      	lsls	r6, r5, #24
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	d501      	bpl.n	800aa90 <_printf_i+0x1c0>
 800aa8c:	6019      	str	r1, [r3, #0]
 800aa8e:	e002      	b.n	800aa96 <_printf_i+0x1c6>
 800aa90:	0668      	lsls	r0, r5, #25
 800aa92:	d5fb      	bpl.n	800aa8c <_printf_i+0x1bc>
 800aa94:	8019      	strh	r1, [r3, #0]
 800aa96:	2300      	movs	r3, #0
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	4616      	mov	r6, r2
 800aa9c:	e7bc      	b.n	800aa18 <_printf_i+0x148>
 800aa9e:	6833      	ldr	r3, [r6, #0]
 800aaa0:	1d1a      	adds	r2, r3, #4
 800aaa2:	6032      	str	r2, [r6, #0]
 800aaa4:	681e      	ldr	r6, [r3, #0]
 800aaa6:	6862      	ldr	r2, [r4, #4]
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7f5 fbb8 	bl	8000220 <memchr>
 800aab0:	b108      	cbz	r0, 800aab6 <_printf_i+0x1e6>
 800aab2:	1b80      	subs	r0, r0, r6
 800aab4:	6060      	str	r0, [r4, #4]
 800aab6:	6863      	ldr	r3, [r4, #4]
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	2300      	movs	r3, #0
 800aabc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aac0:	e7aa      	b.n	800aa18 <_printf_i+0x148>
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	4632      	mov	r2, r6
 800aac6:	4649      	mov	r1, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	47d0      	blx	sl
 800aacc:	3001      	adds	r0, #1
 800aace:	d0ad      	beq.n	800aa2c <_printf_i+0x15c>
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	079b      	lsls	r3, r3, #30
 800aad4:	d413      	bmi.n	800aafe <_printf_i+0x22e>
 800aad6:	68e0      	ldr	r0, [r4, #12]
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	4298      	cmp	r0, r3
 800aadc:	bfb8      	it	lt
 800aade:	4618      	movlt	r0, r3
 800aae0:	e7a6      	b.n	800aa30 <_printf_i+0x160>
 800aae2:	2301      	movs	r3, #1
 800aae4:	4632      	mov	r2, r6
 800aae6:	4649      	mov	r1, r9
 800aae8:	4640      	mov	r0, r8
 800aaea:	47d0      	blx	sl
 800aaec:	3001      	adds	r0, #1
 800aaee:	d09d      	beq.n	800aa2c <_printf_i+0x15c>
 800aaf0:	3501      	adds	r5, #1
 800aaf2:	68e3      	ldr	r3, [r4, #12]
 800aaf4:	9903      	ldr	r1, [sp, #12]
 800aaf6:	1a5b      	subs	r3, r3, r1
 800aaf8:	42ab      	cmp	r3, r5
 800aafa:	dcf2      	bgt.n	800aae2 <_printf_i+0x212>
 800aafc:	e7eb      	b.n	800aad6 <_printf_i+0x206>
 800aafe:	2500      	movs	r5, #0
 800ab00:	f104 0619 	add.w	r6, r4, #25
 800ab04:	e7f5      	b.n	800aaf2 <_printf_i+0x222>
 800ab06:	bf00      	nop
 800ab08:	0800c429 	.word	0x0800c429
 800ab0c:	0800c43a 	.word	0x0800c43a

0800ab10 <__sflush_r>:
 800ab10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	0716      	lsls	r6, r2, #28
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	d454      	bmi.n	800abca <__sflush_r+0xba>
 800ab20:	684b      	ldr	r3, [r1, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dc02      	bgt.n	800ab2c <__sflush_r+0x1c>
 800ab26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	dd48      	ble.n	800abbe <__sflush_r+0xae>
 800ab2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab2e:	2e00      	cmp	r6, #0
 800ab30:	d045      	beq.n	800abbe <__sflush_r+0xae>
 800ab32:	2300      	movs	r3, #0
 800ab34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab38:	682f      	ldr	r7, [r5, #0]
 800ab3a:	6a21      	ldr	r1, [r4, #32]
 800ab3c:	602b      	str	r3, [r5, #0]
 800ab3e:	d030      	beq.n	800aba2 <__sflush_r+0x92>
 800ab40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	0759      	lsls	r1, r3, #29
 800ab46:	d505      	bpl.n	800ab54 <__sflush_r+0x44>
 800ab48:	6863      	ldr	r3, [r4, #4]
 800ab4a:	1ad2      	subs	r2, r2, r3
 800ab4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab4e:	b10b      	cbz	r3, 800ab54 <__sflush_r+0x44>
 800ab50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	2300      	movs	r3, #0
 800ab56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab58:	6a21      	ldr	r1, [r4, #32]
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	47b0      	blx	r6
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	d106      	bne.n	800ab72 <__sflush_r+0x62>
 800ab64:	6829      	ldr	r1, [r5, #0]
 800ab66:	291d      	cmp	r1, #29
 800ab68:	d82b      	bhi.n	800abc2 <__sflush_r+0xb2>
 800ab6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac14 <__sflush_r+0x104>)
 800ab6c:	410a      	asrs	r2, r1
 800ab6e:	07d6      	lsls	r6, r2, #31
 800ab70:	d427      	bmi.n	800abc2 <__sflush_r+0xb2>
 800ab72:	2200      	movs	r2, #0
 800ab74:	6062      	str	r2, [r4, #4]
 800ab76:	04d9      	lsls	r1, r3, #19
 800ab78:	6922      	ldr	r2, [r4, #16]
 800ab7a:	6022      	str	r2, [r4, #0]
 800ab7c:	d504      	bpl.n	800ab88 <__sflush_r+0x78>
 800ab7e:	1c42      	adds	r2, r0, #1
 800ab80:	d101      	bne.n	800ab86 <__sflush_r+0x76>
 800ab82:	682b      	ldr	r3, [r5, #0]
 800ab84:	b903      	cbnz	r3, 800ab88 <__sflush_r+0x78>
 800ab86:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab8a:	602f      	str	r7, [r5, #0]
 800ab8c:	b1b9      	cbz	r1, 800abbe <__sflush_r+0xae>
 800ab8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab92:	4299      	cmp	r1, r3
 800ab94:	d002      	beq.n	800ab9c <__sflush_r+0x8c>
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 fa6c 	bl	800b074 <_free_r>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aba0:	e00d      	b.n	800abbe <__sflush_r+0xae>
 800aba2:	2301      	movs	r3, #1
 800aba4:	4628      	mov	r0, r5
 800aba6:	47b0      	blx	r6
 800aba8:	4602      	mov	r2, r0
 800abaa:	1c50      	adds	r0, r2, #1
 800abac:	d1c9      	bne.n	800ab42 <__sflush_r+0x32>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0c6      	beq.n	800ab42 <__sflush_r+0x32>
 800abb4:	2b1d      	cmp	r3, #29
 800abb6:	d001      	beq.n	800abbc <__sflush_r+0xac>
 800abb8:	2b16      	cmp	r3, #22
 800abba:	d11e      	bne.n	800abfa <__sflush_r+0xea>
 800abbc:	602f      	str	r7, [r5, #0]
 800abbe:	2000      	movs	r0, #0
 800abc0:	e022      	b.n	800ac08 <__sflush_r+0xf8>
 800abc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc6:	b21b      	sxth	r3, r3
 800abc8:	e01b      	b.n	800ac02 <__sflush_r+0xf2>
 800abca:	690f      	ldr	r7, [r1, #16]
 800abcc:	2f00      	cmp	r7, #0
 800abce:	d0f6      	beq.n	800abbe <__sflush_r+0xae>
 800abd0:	0793      	lsls	r3, r2, #30
 800abd2:	680e      	ldr	r6, [r1, #0]
 800abd4:	bf08      	it	eq
 800abd6:	694b      	ldreq	r3, [r1, #20]
 800abd8:	600f      	str	r7, [r1, #0]
 800abda:	bf18      	it	ne
 800abdc:	2300      	movne	r3, #0
 800abde:	eba6 0807 	sub.w	r8, r6, r7
 800abe2:	608b      	str	r3, [r1, #8]
 800abe4:	f1b8 0f00 	cmp.w	r8, #0
 800abe8:	dde9      	ble.n	800abbe <__sflush_r+0xae>
 800abea:	6a21      	ldr	r1, [r4, #32]
 800abec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abee:	4643      	mov	r3, r8
 800abf0:	463a      	mov	r2, r7
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b0      	blx	r6
 800abf6:	2800      	cmp	r0, #0
 800abf8:	dc08      	bgt.n	800ac0c <__sflush_r+0xfc>
 800abfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac02:	81a3      	strh	r3, [r4, #12]
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0c:	4407      	add	r7, r0
 800ac0e:	eba8 0800 	sub.w	r8, r8, r0
 800ac12:	e7e7      	b.n	800abe4 <__sflush_r+0xd4>
 800ac14:	dfbffffe 	.word	0xdfbffffe

0800ac18 <_fflush_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	690b      	ldr	r3, [r1, #16]
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	b913      	cbnz	r3, 800ac28 <_fflush_r+0x10>
 800ac22:	2500      	movs	r5, #0
 800ac24:	4628      	mov	r0, r5
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	b118      	cbz	r0, 800ac32 <_fflush_r+0x1a>
 800ac2a:	6a03      	ldr	r3, [r0, #32]
 800ac2c:	b90b      	cbnz	r3, 800ac32 <_fflush_r+0x1a>
 800ac2e:	f7ff f9a7 	bl	8009f80 <__sinit>
 800ac32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0f3      	beq.n	800ac22 <_fflush_r+0xa>
 800ac3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac3c:	07d0      	lsls	r0, r2, #31
 800ac3e:	d404      	bmi.n	800ac4a <_fflush_r+0x32>
 800ac40:	0599      	lsls	r1, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_fflush_r+0x32>
 800ac44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac46:	f7ff fa8a 	bl	800a15e <__retarget_lock_acquire_recursive>
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	f7ff ff5f 	bl	800ab10 <__sflush_r>
 800ac52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac54:	07da      	lsls	r2, r3, #31
 800ac56:	4605      	mov	r5, r0
 800ac58:	d4e4      	bmi.n	800ac24 <_fflush_r+0xc>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	059b      	lsls	r3, r3, #22
 800ac5e:	d4e1      	bmi.n	800ac24 <_fflush_r+0xc>
 800ac60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac62:	f7ff fa7d 	bl	800a160 <__retarget_lock_release_recursive>
 800ac66:	e7dd      	b.n	800ac24 <_fflush_r+0xc>

0800ac68 <__malloc_lock>:
 800ac68:	4801      	ldr	r0, [pc, #4]	@ (800ac70 <__malloc_lock+0x8>)
 800ac6a:	f7ff ba78 	b.w	800a15e <__retarget_lock_acquire_recursive>
 800ac6e:	bf00      	nop
 800ac70:	20005184 	.word	0x20005184

0800ac74 <__malloc_unlock>:
 800ac74:	4801      	ldr	r0, [pc, #4]	@ (800ac7c <__malloc_unlock+0x8>)
 800ac76:	f7ff ba73 	b.w	800a160 <__retarget_lock_release_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20005184 	.word	0x20005184

0800ac80 <__sread>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	460c      	mov	r4, r1
 800ac84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac88:	f000 f9c0 	bl	800b00c <_read_r>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	bfab      	itete	ge
 800ac90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac92:	89a3      	ldrhlt	r3, [r4, #12]
 800ac94:	181b      	addge	r3, r3, r0
 800ac96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac9a:	bfac      	ite	ge
 800ac9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac9e:	81a3      	strhlt	r3, [r4, #12]
 800aca0:	bd10      	pop	{r4, pc}

0800aca2 <__swrite>:
 800aca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	461f      	mov	r7, r3
 800aca8:	898b      	ldrh	r3, [r1, #12]
 800acaa:	05db      	lsls	r3, r3, #23
 800acac:	4605      	mov	r5, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	4616      	mov	r6, r2
 800acb2:	d505      	bpl.n	800acc0 <__swrite+0x1e>
 800acb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb8:	2302      	movs	r3, #2
 800acba:	2200      	movs	r2, #0
 800acbc:	f000 f994 	bl	800afe8 <_lseek_r>
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	4632      	mov	r2, r6
 800acce:	463b      	mov	r3, r7
 800acd0:	4628      	mov	r0, r5
 800acd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd6:	f000 b9bb 	b.w	800b050 <_write_r>

0800acda <__sseek>:
 800acda:	b510      	push	{r4, lr}
 800acdc:	460c      	mov	r4, r1
 800acde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace2:	f000 f981 	bl	800afe8 <_lseek_r>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	bf15      	itete	ne
 800acec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800acee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acf6:	81a3      	strheq	r3, [r4, #12]
 800acf8:	bf18      	it	ne
 800acfa:	81a3      	strhne	r3, [r4, #12]
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <__sclose>:
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 b93f 	b.w	800af84 <_close_r>

0800ad06 <_realloc_r>:
 800ad06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	4615      	mov	r5, r2
 800ad0e:	460c      	mov	r4, r1
 800ad10:	b921      	cbnz	r1, 800ad1c <_realloc_r+0x16>
 800ad12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	4611      	mov	r1, r2
 800ad18:	f7ff bcec 	b.w	800a6f4 <_malloc_r>
 800ad1c:	b92a      	cbnz	r2, 800ad2a <_realloc_r+0x24>
 800ad1e:	f000 f9a9 	bl	800b074 <_free_r>
 800ad22:	2400      	movs	r4, #0
 800ad24:	4620      	mov	r0, r4
 800ad26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2a:	f000 f9ed 	bl	800b108 <_malloc_usable_size_r>
 800ad2e:	4285      	cmp	r5, r0
 800ad30:	4606      	mov	r6, r0
 800ad32:	d802      	bhi.n	800ad3a <_realloc_r+0x34>
 800ad34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad38:	d8f4      	bhi.n	800ad24 <_realloc_r+0x1e>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	f7ff fcd9 	bl	800a6f4 <_malloc_r>
 800ad42:	4607      	mov	r7, r0
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d0ec      	beq.n	800ad22 <_realloc_r+0x1c>
 800ad48:	42b5      	cmp	r5, r6
 800ad4a:	462a      	mov	r2, r5
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	bf28      	it	cs
 800ad50:	4632      	movcs	r2, r6
 800ad52:	f7ff fa06 	bl	800a162 <memcpy>
 800ad56:	4621      	mov	r1, r4
 800ad58:	4640      	mov	r0, r8
 800ad5a:	f000 f98b 	bl	800b074 <_free_r>
 800ad5e:	463c      	mov	r4, r7
 800ad60:	e7e0      	b.n	800ad24 <_realloc_r+0x1e>

0800ad62 <__swbuf_r>:
 800ad62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad64:	460e      	mov	r6, r1
 800ad66:	4614      	mov	r4, r2
 800ad68:	4605      	mov	r5, r0
 800ad6a:	b118      	cbz	r0, 800ad74 <__swbuf_r+0x12>
 800ad6c:	6a03      	ldr	r3, [r0, #32]
 800ad6e:	b90b      	cbnz	r3, 800ad74 <__swbuf_r+0x12>
 800ad70:	f7ff f906 	bl	8009f80 <__sinit>
 800ad74:	69a3      	ldr	r3, [r4, #24]
 800ad76:	60a3      	str	r3, [r4, #8]
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	071a      	lsls	r2, r3, #28
 800ad7c:	d501      	bpl.n	800ad82 <__swbuf_r+0x20>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	b943      	cbnz	r3, 800ad94 <__swbuf_r+0x32>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 f82b 	bl	800ade0 <__swsetup_r>
 800ad8a:	b118      	cbz	r0, 800ad94 <__swbuf_r+0x32>
 800ad8c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ad90:	4638      	mov	r0, r7
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	6922      	ldr	r2, [r4, #16]
 800ad98:	1a98      	subs	r0, r3, r2
 800ad9a:	6963      	ldr	r3, [r4, #20]
 800ad9c:	b2f6      	uxtb	r6, r6
 800ad9e:	4283      	cmp	r3, r0
 800ada0:	4637      	mov	r7, r6
 800ada2:	dc05      	bgt.n	800adb0 <__swbuf_r+0x4e>
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f7ff ff36 	bl	800ac18 <_fflush_r>
 800adac:	2800      	cmp	r0, #0
 800adae:	d1ed      	bne.n	800ad8c <__swbuf_r+0x2a>
 800adb0:	68a3      	ldr	r3, [r4, #8]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	60a3      	str	r3, [r4, #8]
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	6022      	str	r2, [r4, #0]
 800adbc:	701e      	strb	r6, [r3, #0]
 800adbe:	6962      	ldr	r2, [r4, #20]
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d004      	beq.n	800add0 <__swbuf_r+0x6e>
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	07db      	lsls	r3, r3, #31
 800adca:	d5e1      	bpl.n	800ad90 <__swbuf_r+0x2e>
 800adcc:	2e0a      	cmp	r6, #10
 800adce:	d1df      	bne.n	800ad90 <__swbuf_r+0x2e>
 800add0:	4621      	mov	r1, r4
 800add2:	4628      	mov	r0, r5
 800add4:	f7ff ff20 	bl	800ac18 <_fflush_r>
 800add8:	2800      	cmp	r0, #0
 800adda:	d0d9      	beq.n	800ad90 <__swbuf_r+0x2e>
 800addc:	e7d6      	b.n	800ad8c <__swbuf_r+0x2a>
	...

0800ade0 <__swsetup_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4b29      	ldr	r3, [pc, #164]	@ (800ae88 <__swsetup_r+0xa8>)
 800ade4:	4605      	mov	r5, r0
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	460c      	mov	r4, r1
 800adea:	b118      	cbz	r0, 800adf4 <__swsetup_r+0x14>
 800adec:	6a03      	ldr	r3, [r0, #32]
 800adee:	b90b      	cbnz	r3, 800adf4 <__swsetup_r+0x14>
 800adf0:	f7ff f8c6 	bl	8009f80 <__sinit>
 800adf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf8:	0719      	lsls	r1, r3, #28
 800adfa:	d422      	bmi.n	800ae42 <__swsetup_r+0x62>
 800adfc:	06da      	lsls	r2, r3, #27
 800adfe:	d407      	bmi.n	800ae10 <__swsetup_r+0x30>
 800ae00:	2209      	movs	r2, #9
 800ae02:	602a      	str	r2, [r5, #0]
 800ae04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae0e:	e033      	b.n	800ae78 <__swsetup_r+0x98>
 800ae10:	0758      	lsls	r0, r3, #29
 800ae12:	d512      	bpl.n	800ae3a <__swsetup_r+0x5a>
 800ae14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae16:	b141      	cbz	r1, 800ae2a <__swsetup_r+0x4a>
 800ae18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	d002      	beq.n	800ae26 <__swsetup_r+0x46>
 800ae20:	4628      	mov	r0, r5
 800ae22:	f000 f927 	bl	800b074 <_free_r>
 800ae26:	2300      	movs	r3, #0
 800ae28:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	2300      	movs	r3, #0
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	f043 0308 	orr.w	r3, r3, #8
 800ae40:	81a3      	strh	r3, [r4, #12]
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	b94b      	cbnz	r3, 800ae5a <__swsetup_r+0x7a>
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae50:	d003      	beq.n	800ae5a <__swsetup_r+0x7a>
 800ae52:	4621      	mov	r1, r4
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 f83f 	bl	800aed8 <__smakebuf_r>
 800ae5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae5e:	f013 0201 	ands.w	r2, r3, #1
 800ae62:	d00a      	beq.n	800ae7a <__swsetup_r+0x9a>
 800ae64:	2200      	movs	r2, #0
 800ae66:	60a2      	str	r2, [r4, #8]
 800ae68:	6962      	ldr	r2, [r4, #20]
 800ae6a:	4252      	negs	r2, r2
 800ae6c:	61a2      	str	r2, [r4, #24]
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	b942      	cbnz	r2, 800ae84 <__swsetup_r+0xa4>
 800ae72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae76:	d1c5      	bne.n	800ae04 <__swsetup_r+0x24>
 800ae78:	bd38      	pop	{r3, r4, r5, pc}
 800ae7a:	0799      	lsls	r1, r3, #30
 800ae7c:	bf58      	it	pl
 800ae7e:	6962      	ldrpl	r2, [r4, #20]
 800ae80:	60a2      	str	r2, [r4, #8]
 800ae82:	e7f4      	b.n	800ae6e <__swsetup_r+0x8e>
 800ae84:	2000      	movs	r0, #0
 800ae86:	e7f7      	b.n	800ae78 <__swsetup_r+0x98>
 800ae88:	20000040 	.word	0x20000040

0800ae8c <__swhatbuf_r>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	460c      	mov	r4, r1
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	2900      	cmp	r1, #0
 800ae96:	b096      	sub	sp, #88	@ 0x58
 800ae98:	4615      	mov	r5, r2
 800ae9a:	461e      	mov	r6, r3
 800ae9c:	da0d      	bge.n	800aeba <__swhatbuf_r+0x2e>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aea4:	f04f 0100 	mov.w	r1, #0
 800aea8:	bf14      	ite	ne
 800aeaa:	2340      	movne	r3, #64	@ 0x40
 800aeac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	6031      	str	r1, [r6, #0]
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	b016      	add	sp, #88	@ 0x58
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
 800aeba:	466a      	mov	r2, sp
 800aebc:	f000 f872 	bl	800afa4 <_fstat_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	dbec      	blt.n	800ae9e <__swhatbuf_r+0x12>
 800aec4:	9901      	ldr	r1, [sp, #4]
 800aec6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aeca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aece:	4259      	negs	r1, r3
 800aed0:	4159      	adcs	r1, r3
 800aed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aed6:	e7eb      	b.n	800aeb0 <__swhatbuf_r+0x24>

0800aed8 <__smakebuf_r>:
 800aed8:	898b      	ldrh	r3, [r1, #12]
 800aeda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aedc:	079d      	lsls	r5, r3, #30
 800aede:	4606      	mov	r6, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	d507      	bpl.n	800aef4 <__smakebuf_r+0x1c>
 800aee4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	6123      	str	r3, [r4, #16]
 800aeec:	2301      	movs	r3, #1
 800aeee:	6163      	str	r3, [r4, #20]
 800aef0:	b003      	add	sp, #12
 800aef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef4:	ab01      	add	r3, sp, #4
 800aef6:	466a      	mov	r2, sp
 800aef8:	f7ff ffc8 	bl	800ae8c <__swhatbuf_r>
 800aefc:	9f00      	ldr	r7, [sp, #0]
 800aefe:	4605      	mov	r5, r0
 800af00:	4639      	mov	r1, r7
 800af02:	4630      	mov	r0, r6
 800af04:	f7ff fbf6 	bl	800a6f4 <_malloc_r>
 800af08:	b948      	cbnz	r0, 800af1e <__smakebuf_r+0x46>
 800af0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af0e:	059a      	lsls	r2, r3, #22
 800af10:	d4ee      	bmi.n	800aef0 <__smakebuf_r+0x18>
 800af12:	f023 0303 	bic.w	r3, r3, #3
 800af16:	f043 0302 	orr.w	r3, r3, #2
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	e7e2      	b.n	800aee4 <__smakebuf_r+0xc>
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	6020      	str	r0, [r4, #0]
 800af22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af2e:	b15b      	cbz	r3, 800af48 <__smakebuf_r+0x70>
 800af30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af34:	4630      	mov	r0, r6
 800af36:	f000 f847 	bl	800afc8 <_isatty_r>
 800af3a:	b128      	cbz	r0, 800af48 <__smakebuf_r+0x70>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f023 0303 	bic.w	r3, r3, #3
 800af42:	f043 0301 	orr.w	r3, r3, #1
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	431d      	orrs	r5, r3
 800af4c:	81a5      	strh	r5, [r4, #12]
 800af4e:	e7cf      	b.n	800aef0 <__smakebuf_r+0x18>

0800af50 <memmove>:
 800af50:	4288      	cmp	r0, r1
 800af52:	b510      	push	{r4, lr}
 800af54:	eb01 0402 	add.w	r4, r1, r2
 800af58:	d902      	bls.n	800af60 <memmove+0x10>
 800af5a:	4284      	cmp	r4, r0
 800af5c:	4623      	mov	r3, r4
 800af5e:	d807      	bhi.n	800af70 <memmove+0x20>
 800af60:	1e43      	subs	r3, r0, #1
 800af62:	42a1      	cmp	r1, r4
 800af64:	d008      	beq.n	800af78 <memmove+0x28>
 800af66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af6e:	e7f8      	b.n	800af62 <memmove+0x12>
 800af70:	4402      	add	r2, r0
 800af72:	4601      	mov	r1, r0
 800af74:	428a      	cmp	r2, r1
 800af76:	d100      	bne.n	800af7a <memmove+0x2a>
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af82:	e7f7      	b.n	800af74 <memmove+0x24>

0800af84 <_close_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	@ (800afa0 <_close_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f6 fd71 	bl	8001a76 <_close>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_close_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_close_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20005190 	.word	0x20005190

0800afa4 <_fstat_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d07      	ldr	r5, [pc, #28]	@ (800afc4 <_fstat_r+0x20>)
 800afa8:	2300      	movs	r3, #0
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	4611      	mov	r1, r2
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	f7f6 fd6c 	bl	8001a8e <_fstat>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d102      	bne.n	800afc0 <_fstat_r+0x1c>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	b103      	cbz	r3, 800afc0 <_fstat_r+0x1c>
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	bf00      	nop
 800afc4:	20005190 	.word	0x20005190

0800afc8 <_isatty_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d06      	ldr	r5, [pc, #24]	@ (800afe4 <_isatty_r+0x1c>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	f7f6 fd6b 	bl	8001aae <_isatty>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_isatty_r+0x1a>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_isatty_r+0x1a>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20005190 	.word	0x20005190

0800afe8 <_lseek_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	@ (800b008 <_lseek_r+0x20>)
 800afec:	4604      	mov	r4, r0
 800afee:	4608      	mov	r0, r1
 800aff0:	4611      	mov	r1, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f7f6 fd64 	bl	8001ac4 <_lseek>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_lseek_r+0x1e>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_lseek_r+0x1e>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20005190 	.word	0x20005190

0800b00c <_read_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	@ (800b02c <_read_r+0x20>)
 800b010:	4604      	mov	r4, r0
 800b012:	4608      	mov	r0, r1
 800b014:	4611      	mov	r1, r2
 800b016:	2200      	movs	r2, #0
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7f6 fd0e 	bl	8001a3c <_read>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_read_r+0x1e>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_read_r+0x1e>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20005190 	.word	0x20005190

0800b030 <_sbrk_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d06      	ldr	r5, [pc, #24]	@ (800b04c <_sbrk_r+0x1c>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	f7f6 fd50 	bl	8001ae0 <_sbrk>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_sbrk_r+0x1a>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_sbrk_r+0x1a>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	20005190 	.word	0x20005190

0800b050 <_write_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	@ (800b070 <_write_r+0x20>)
 800b054:	4604      	mov	r4, r0
 800b056:	4608      	mov	r0, r1
 800b058:	4611      	mov	r1, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	f7f6 f938 	bl	80012d4 <_write>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_write_r+0x1e>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_write_r+0x1e>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20005190 	.word	0x20005190

0800b074 <_free_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4605      	mov	r5, r0
 800b078:	2900      	cmp	r1, #0
 800b07a:	d041      	beq.n	800b100 <_free_r+0x8c>
 800b07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b080:	1f0c      	subs	r4, r1, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	bfb8      	it	lt
 800b086:	18e4      	addlt	r4, r4, r3
 800b088:	f7ff fdee 	bl	800ac68 <__malloc_lock>
 800b08c:	4a1d      	ldr	r2, [pc, #116]	@ (800b104 <_free_r+0x90>)
 800b08e:	6813      	ldr	r3, [r2, #0]
 800b090:	b933      	cbnz	r3, 800b0a0 <_free_r+0x2c>
 800b092:	6063      	str	r3, [r4, #4]
 800b094:	6014      	str	r4, [r2, #0]
 800b096:	4628      	mov	r0, r5
 800b098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b09c:	f7ff bdea 	b.w	800ac74 <__malloc_unlock>
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	d908      	bls.n	800b0b6 <_free_r+0x42>
 800b0a4:	6820      	ldr	r0, [r4, #0]
 800b0a6:	1821      	adds	r1, r4, r0
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	bf01      	itttt	eq
 800b0ac:	6819      	ldreq	r1, [r3, #0]
 800b0ae:	685b      	ldreq	r3, [r3, #4]
 800b0b0:	1809      	addeq	r1, r1, r0
 800b0b2:	6021      	streq	r1, [r4, #0]
 800b0b4:	e7ed      	b.n	800b092 <_free_r+0x1e>
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	b10b      	cbz	r3, 800b0c0 <_free_r+0x4c>
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	d9fa      	bls.n	800b0b6 <_free_r+0x42>
 800b0c0:	6811      	ldr	r1, [r2, #0]
 800b0c2:	1850      	adds	r0, r2, r1
 800b0c4:	42a0      	cmp	r0, r4
 800b0c6:	d10b      	bne.n	800b0e0 <_free_r+0x6c>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	4401      	add	r1, r0
 800b0cc:	1850      	adds	r0, r2, r1
 800b0ce:	4283      	cmp	r3, r0
 800b0d0:	6011      	str	r1, [r2, #0]
 800b0d2:	d1e0      	bne.n	800b096 <_free_r+0x22>
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	6053      	str	r3, [r2, #4]
 800b0da:	4408      	add	r0, r1
 800b0dc:	6010      	str	r0, [r2, #0]
 800b0de:	e7da      	b.n	800b096 <_free_r+0x22>
 800b0e0:	d902      	bls.n	800b0e8 <_free_r+0x74>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	e7d6      	b.n	800b096 <_free_r+0x22>
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	1821      	adds	r1, r4, r0
 800b0ec:	428b      	cmp	r3, r1
 800b0ee:	bf04      	itt	eq
 800b0f0:	6819      	ldreq	r1, [r3, #0]
 800b0f2:	685b      	ldreq	r3, [r3, #4]
 800b0f4:	6063      	str	r3, [r4, #4]
 800b0f6:	bf04      	itt	eq
 800b0f8:	1809      	addeq	r1, r1, r0
 800b0fa:	6021      	streq	r1, [r4, #0]
 800b0fc:	6054      	str	r4, [r2, #4]
 800b0fe:	e7ca      	b.n	800b096 <_free_r+0x22>
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	2000518c 	.word	0x2000518c

0800b108 <_malloc_usable_size_r>:
 800b108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b10c:	1f18      	subs	r0, r3, #4
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bfbc      	itt	lt
 800b112:	580b      	ldrlt	r3, [r1, r0]
 800b114:	18c0      	addlt	r0, r0, r3
 800b116:	4770      	bx	lr

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
