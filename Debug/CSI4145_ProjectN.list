
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd0  08003bd0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bd8  08003bd8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd8  08003bd8  00004bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bdc  08003bdc  00004bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003be0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08003bec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003bec  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129a9  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6b  00000000  00000000  000179e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d06  00000000  00000000  0001b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002380d  00000000  00000000  0001c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e02  00000000  00000000  0003f9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc2f3  00000000  00000000  000557f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131ae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004574  00000000  00000000  00131b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001360a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ba0 	.word	0x08003ba0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003ba0 	.word	0x08003ba0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <MX_ADC1_Init+0x98>)
 8000508:	4a21      	ldr	r2, [pc, #132]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <MX_ADC1_Init+0x98>)
 800050e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800051a:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_ADC1_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052e:	4b17      	ldr	r3, [pc, #92]	@ (800058c <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <MX_ADC1_Init+0x98>)
 8000536:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <MX_ADC1_Init+0xa0>)
 8000538:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <MX_ADC1_Init+0x98>)
 8000542:	2201      	movs	r2, #1
 8000544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_ADC1_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_ADC1_Init+0x98>)
 8000550:	2201      	movs	r2, #1
 8000552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <MX_ADC1_Init+0x98>)
 8000556:	f000 fc91 	bl	8000e7c <HAL_ADC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000560:	f000 f9ea 	bl	8000938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800056c:	2305      	movs	r3, #5
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_ADC1_Init+0x98>)
 8000576:	f000 fcc5 	bl	8000f04 <HAL_ADC_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000580:	f000 f9da 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000028 	.word	0x20000028
 8000590:	40012000 	.word	0x40012000
 8000594:	0f000001 	.word	0x0f000001

08000598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <HAL_ADC_MspInit+0x7c>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d127      	bne.n	800060a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_ADC_MspInit+0x80>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f2:	2301      	movs	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <HAL_ADC_MspInit+0x84>)
 8000606:	f000 ff8d 	bl	8001524 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060a:	bf00      	nop
 800060c:	3728      	adds	r7, #40	@ 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40012000 	.word	0x40012000
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b37      	ldr	r3, [pc, #220]	@ (8000718 <MX_GPIO_Init+0xf8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b34      	ldr	r3, [pc, #208]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <MX_GPIO_Init+0xf8>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <MX_GPIO_Init+0xf8>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_GPIO_Init+0xf8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	481c      	ldr	r0, [pc, #112]	@ (800071c <MX_GPIO_Init+0xfc>)
 80006ac:	f001 f8ce 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2103      	movs	r1, #3
 80006b4:	481a      	ldr	r0, [pc, #104]	@ (8000720 <MX_GPIO_Init+0x100>)
 80006b6:	f001 f8c9 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4814      	ldr	r0, [pc, #80]	@ (8000724 <MX_GPIO_Init+0x104>)
 80006d2:	f000 ff27 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d6:	2320      	movs	r3, #32
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0xfc>)
 80006ee:	f000 ff19 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 80006f2:	2303      	movs	r3, #3
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_GPIO_Init+0x100>)
 800070a:	f000 ff0b 	bl	8001524 <HAL_GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800

08000728 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 f88b 	bl	8001880 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f8e2 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000070 	.word	0x20000070
 800077c:	40005400 	.word	0x40005400
 8000780:	00061a80 	.word	0x00061a80

08000784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <HAL_I2C_MspInit+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12b      	bne.n	80007fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c2:	23c0      	movs	r3, #192	@ 0xc0
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d2:	2304      	movs	r3, #4
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <HAL_I2C_MspInit+0x8c>)
 80007de:	f000 fea1 	bl	8001524 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_I2C_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40005400 	.word	0x40005400
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 faee 	bl	8000df8 <HAL_Init>

  SystemClock_Config();
 800081c:	f000 f80c 	bl	8000838 <SystemClock_Config>



  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff fefe 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000824:	f000 fa4c 	bl	8000cc0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000828:	f7ff ff7e 	bl	8000728 <MX_I2C1_Init>
  MX_ADC1_Init();
 800082c:	f7ff fe62 	bl	80004f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000830:	f000 f978 	bl	8000b24 <MX_TIM2_Init>
  // test_Servo();
  // test_ESP8266();

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <main+0x20>

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	@ 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2234      	movs	r2, #52	@ 0x34
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f97e 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b2a      	ldr	r3, [pc, #168]	@ (800090c <SystemClock_Config+0xd4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	4a29      	ldr	r2, [pc, #164]	@ (800090c <SystemClock_Config+0xd4>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	@ 0x40
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <SystemClock_Config+0xd4>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <SystemClock_Config+0xd8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000884:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <SystemClock_Config+0xd8>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <SystemClock_Config+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000898:	2302      	movs	r3, #2
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	2301      	movs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2310      	movs	r3, #16
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2302      	movs	r3, #2
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008ac:	2310      	movs	r3, #16
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fc9a 	bl	8002200 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008d2:	f000 f831 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2102      	movs	r1, #2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f908 	bl	8001b08 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008fe:	f000 f81b 	bl	8000938 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	@ 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fa89 	bl	8000e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fd99 	bl	80014ba <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	@ 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <HAL_InitTick+0xe4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a32      	ldr	r2, [pc, #200]	@ (8000a78 <HAL_InitTick+0xe4>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <HAL_InitTick+0xe4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 f9b6 	bl	8001d3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d103      	bne.n	80009e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009da:	f001 f987 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80009de:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e2:	f001 f983 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80009e6:	4603      	mov	r3, r0
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ee:	4a23      	ldr	r2, [pc, #140]	@ (8000a7c <HAL_InitTick+0xe8>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	0c9b      	lsrs	r3, r3, #18
 80009f6:	3b01      	subs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <HAL_InitTick+0xec>)
 80009fc:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <HAL_InitTick+0xf0>)
 80009fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a20:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a22:	f001 fe8b 	bl	800273c <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d11b      	bne.n	8000a6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a34:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <HAL_InitTick+0xec>)
 8000a36:	f001 fed1 	bl	80027dc <HAL_TIM_Base_Start_IT>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d111      	bne.n	8000a6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a48:	2036      	movs	r0, #54	@ 0x36
 8000a4a:	f000 fd5d 	bl	8001508 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d808      	bhi.n	8000a66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2036      	movs	r0, #54	@ 0x36
 8000a5a:	f000 fd39 	bl	80014d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_InitTick+0xf4>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e002      	b.n	8000a6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3738      	adds	r7, #56	@ 0x38
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	200000c4 	.word	0x200000c4
 8000a84:	40001000 	.word	0x40001000
 8000a88:	20000004 	.word	0x20000004

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM6_DAC_IRQHandler+0x10>)
 8000af2:	f001 ff3c 	bl	800296e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c4 	.word	0x200000c4

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b54:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b5e:	2253      	movs	r2, #83	@ 0x53
 8000b60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b6a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b7c:	4823      	ldr	r0, [pc, #140]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b7e:	f001 fddd 	bl	800273c <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b88:	f7ff fed6 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b96:	4619      	mov	r1, r3
 8000b98:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000b9a:	f002 f89b 	bl	8002cd4 <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ba4:	f7ff fec8 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ba8:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000baa:	f001 fe87 	bl	80028bc <HAL_TIM_PWM_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bb4:	f7ff fec0 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000bc8:	f002 fc6a 	bl	80034a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bd2:	f7ff feb1 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd6:	2360      	movs	r3, #96	@ 0x60
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000bda:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000bf0:	f001 ffae 	bl	8002b50 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bfa:	f7ff fe9d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bfe:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MX_TIM2_Init+0xe8>)
 8000c00:	f000 f826 	bl	8000c50 <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	@ 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000010c 	.word	0x2000010c

08000c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c20:	d10d      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c70:	d11e      	bne.n	8000cb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <HAL_TIM_MspPostInit+0x6c>)
 8000cac:	f000 fc3a 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_USART2_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f002 fc62 	bl	80035c0 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f7ff fe19 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000154 	.word	0x20000154
 8000d10:	40004400 	.word	0x40004400

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d8a:	f000 fbcb 	bl	8001524 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da8:	f7ff feaa 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 fec1 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fd1d 	bl	8000814 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de8:	08003be0 	.word	0x08003be0
  ldr r2, =_sbss
 8000dec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df0:	200001a0 	.word	0x200001a0

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 fb4a 	bl	80014ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fdb4 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fd8a 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	2000019c 	.word	0x2000019c

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000019c 	.word	0x2000019c

08000e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e033      	b.n	8000efa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fb7c 	bl	8000598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d118      	bne.n	8000eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ec2:	f023 0302 	bic.w	r3, r3, #2
 8000ec6:	f043 0202 	orr.w	r2, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f94a 	bl	8001168 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f023 0303 	bic.w	r3, r3, #3
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eea:	e001      	b.n	8000ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x1c>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e113      	b.n	8001148 <HAL_ADC_ConfigChannel+0x244>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b09      	cmp	r3, #9
 8000f2e:	d925      	bls.n	8000f7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68d9      	ldr	r1, [r3, #12]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	3b1e      	subs	r3, #30
 8000f46:	2207      	movs	r2, #7
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	400a      	ands	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68d9      	ldr	r1, [r3, #12]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4403      	add	r3, r0
 8000f6e:	3b1e      	subs	r3, #30
 8000f70:	409a      	lsls	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	e022      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6919      	ldr	r1, [r3, #16]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	2207      	movs	r2, #7
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6919      	ldr	r1, [r3, #16]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4403      	add	r3, r0
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d824      	bhi.n	8001014 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b05      	subs	r3, #5
 8000fdc:	221f      	movs	r2, #31
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	400a      	ands	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	3b05      	subs	r3, #5
 8001006:	fa00 f203 	lsl.w	r2, r0, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	635a      	str	r2, [r3, #52]	@ 0x34
 8001012:	e04c      	b.n	80010ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b0c      	cmp	r3, #12
 800101a:	d824      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	3b23      	subs	r3, #35	@ 0x23
 800102e:	221f      	movs	r2, #31
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43da      	mvns	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	400a      	ands	r2, r1
 800103c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b23      	subs	r3, #35	@ 0x23
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	631a      	str	r2, [r3, #48]	@ 0x30
 8001064:	e023      	b.n	80010ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	3b41      	subs	r3, #65	@ 0x41
 8001078:	221f      	movs	r2, #31
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b41      	subs	r3, #65	@ 0x41
 80010a2:	fa00 f203 	lsl.w	r2, r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ae:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <HAL_ADC_ConfigChannel+0x250>)
 80010b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a28      	ldr	r2, [pc, #160]	@ (8001158 <HAL_ADC_ConfigChannel+0x254>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d10f      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1d8>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b12      	cmp	r3, #18
 80010c2:	d10b      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_ADC_ConfigChannel+0x254>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12b      	bne.n	800113e <HAL_ADC_ConfigChannel+0x23a>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <HAL_ADC_ConfigChannel+0x258>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d003      	beq.n	80010f8 <HAL_ADC_ConfigChannel+0x1f4>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d122      	bne.n	800113e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a11      	ldr	r2, [pc, #68]	@ (800115c <HAL_ADC_ConfigChannel+0x258>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d111      	bne.n	800113e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_ADC_ConfigChannel+0x25c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_ADC_ConfigChannel+0x260>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0c9a      	lsrs	r2, r3, #18
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001130:	e002      	b.n	8001138 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3b01      	subs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40012300 	.word	0x40012300
 8001158:	40012000 	.word	0x40012000
 800115c:	10000012 	.word	0x10000012
 8001160:	20000000 	.word	0x20000000
 8001164:	431bde83 	.word	0x431bde83

08001168 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001170:	4b79      	ldr	r3, [pc, #484]	@ (8001358 <ADC_Init+0x1f0>)
 8001172:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	431a      	orrs	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800119c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6859      	ldr	r1, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	021a      	lsls	r2, r3, #8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80011c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6899      	ldr	r1, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	4a58      	ldr	r2, [pc, #352]	@ (800135c <ADC_Init+0x1f4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d022      	beq.n	8001246 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800120e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6899      	ldr	r1, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6899      	ldr	r1, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	e00f      	b.n	8001266 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001264:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0202 	bic.w	r2, r2, #2
 8001274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6899      	ldr	r1, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
 8001280:	005a      	lsls	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01b      	beq.n	80012cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80012b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6859      	ldr	r1, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	3b01      	subs	r3, #1
 80012c0:	035a      	lsls	r2, r3, #13
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	e007      	b.n	80012dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	051a      	lsls	r2, r3, #20
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6899      	ldr	r1, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800131e:	025a      	lsls	r2, r3, #9
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6899      	ldr	r1, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	029a      	lsls	r2, r3, #10
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	609a      	str	r2, [r3, #8]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40012300 	.word	0x40012300
 800135c:	0f000001 	.word	0x0f000001

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	@ (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff4c 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e2:	f7ff ff61 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff ffb1 	bl	8001454 <NVIC_EncodePriority>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff80 	bl	8001400 <__NVIC_SetPriority>
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff54 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e165      	b.n	800180c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 8154 	bne.w	8001806 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80ae 	beq.w	8001806 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <HAL_GPIO_Init+0x300>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001824 <HAL_GPIO_Init+0x300>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <HAL_GPIO_Init+0x300>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c6:	4a58      	ldr	r2, [pc, #352]	@ (8001828 <HAL_GPIO_Init+0x304>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4f      	ldr	r2, [pc, #316]	@ (800182c <HAL_GPIO_Init+0x308>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d025      	beq.n	800173e <HAL_GPIO_Init+0x21a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001830 <HAL_GPIO_Init+0x30c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01f      	beq.n	800173a <HAL_GPIO_Init+0x216>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001834 <HAL_GPIO_Init+0x310>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0x212>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4c      	ldr	r2, [pc, #304]	@ (8001838 <HAL_GPIO_Init+0x314>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x20e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4b      	ldr	r2, [pc, #300]	@ (800183c <HAL_GPIO_Init+0x318>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x20a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4a      	ldr	r2, [pc, #296]	@ (8001840 <HAL_GPIO_Init+0x31c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x206>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a49      	ldr	r2, [pc, #292]	@ (8001844 <HAL_GPIO_Init+0x320>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x202>
 8001722:	2306      	movs	r3, #6
 8001724:	e00c      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 8001726:	2307      	movs	r3, #7
 8001728:	e00a      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 800172a:	2305      	movs	r3, #5
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 800172e:	2304      	movs	r3, #4
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x21c>
 800173e:	2300      	movs	r3, #0
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	@ (8001828 <HAL_GPIO_Init+0x304>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <HAL_GPIO_Init+0x324>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001782:	4a31      	ldr	r2, [pc, #196]	@ (8001848 <HAL_GPIO_Init+0x324>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001788:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <HAL_GPIO_Init+0x324>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ac:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <HAL_GPIO_Init+0x324>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <HAL_GPIO_Init+0x324>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <HAL_GPIO_Init+0x324>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <HAL_GPIO_Init+0x324>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001800:	4a11      	ldr	r2, [pc, #68]	@ (8001848 <HAL_GPIO_Init+0x324>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	f67f ae96 	bls.w	8001540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40013800 	.word	0x40013800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40021400 	.word	0x40021400
 8001844:	40021800 	.word	0x40021800
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e12b      	b.n	8001aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ff6c 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	@ 0x24
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e4:	f000 fa02 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a81      	ldr	r2, [pc, #516]	@ (8001af4 <HAL_I2C_Init+0x274>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d807      	bhi.n	8001904 <HAL_I2C_Init+0x84>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a80      	ldr	r2, [pc, #512]	@ (8001af8 <HAL_I2C_Init+0x278>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e006      	b.n	8001912 <HAL_I2C_Init+0x92>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a7d      	ldr	r2, [pc, #500]	@ (8001afc <HAL_I2C_Init+0x27c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0e7      	b.n	8001aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a78      	ldr	r2, [pc, #480]	@ (8001b00 <HAL_I2C_Init+0x280>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9b      	lsrs	r3, r3, #18
 8001924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a6a      	ldr	r2, [pc, #424]	@ (8001af4 <HAL_I2C_Init+0x274>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d802      	bhi.n	8001954 <HAL_I2C_Init+0xd4>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	e009      	b.n	8001968 <HAL_I2C_Init+0xe8>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a69      	ldr	r2, [pc, #420]	@ (8001b04 <HAL_I2C_Init+0x284>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	3301      	adds	r3, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800197a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	495c      	ldr	r1, [pc, #368]	@ (8001af4 <HAL_I2C_Init+0x274>)
 8001984:	428b      	cmp	r3, r1
 8001986:	d819      	bhi.n	80019bc <HAL_I2C_Init+0x13c>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e59      	subs	r1, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fbb1 f3f3 	udiv	r3, r1, r3
 8001996:	1c59      	adds	r1, r3, #1
 8001998:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800199c:	400b      	ands	r3, r1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_I2C_Init+0x138>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e59      	subs	r1, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	e051      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e04f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_I2C_Init+0x168>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	e012      	b.n	8001a0e <HAL_I2C_Init+0x18e>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	0099      	lsls	r1, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x196>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e022      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10e      	bne.n	8001a3c <HAL_I2C_Init+0x1bc>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e58      	subs	r0, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a3a:	e00f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6911      	ldr	r1, [r2, #16]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	000186a0 	.word	0x000186a0
 8001af8:	001e847f 	.word	0x001e847f
 8001afc:	003d08ff 	.word	0x003d08ff
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	10624dd3 	.word	0x10624dd3

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0cc      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b68      	ldr	r3, [pc, #416]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d90c      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b65      	ldr	r3, [pc, #404]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b63      	ldr	r3, [pc, #396]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0b8      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b5c:	4b59      	ldr	r3, [pc, #356]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a58      	ldr	r2, [pc, #352]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b74:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	494d      	ldr	r1, [pc, #308]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d044      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d119      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e07f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e067      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4934      	ldr	r1, [pc, #208]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f934 	bl	8000e64 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f930 	bl	8000e64 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e04f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c28:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d20c      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e032      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4916      	ldr	r1, [pc, #88]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	490e      	ldr	r1, [pc, #56]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8e:	f000 f887 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	490a      	ldr	r1, [pc, #40]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	5ccb      	ldrb	r3, [r1, r3]
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fe70 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08003bb8 	.word	0x08003bb8
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08003bc8 	.word	0x08003bc8

08001d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d18:	f7ff ffdc 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0b5b      	lsrs	r3, r3, #13
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08003bc8 	.word	0x08003bc8

08001d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220f      	movs	r2, #15
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_RCC_GetClockConfig+0x60>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da4:	b0ae      	sub	sp, #184	@ 0xb8
 8001da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc6:	4bcb      	ldr	r3, [pc, #812]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	f200 8206 	bhi.w	80021e0 <HAL_RCC_GetSysClockFreq+0x440>
 8001dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001e11 	.word	0x08001e11
 8001de0:	080021e1 	.word	0x080021e1
 8001de4:	080021e1 	.word	0x080021e1
 8001de8:	080021e1 	.word	0x080021e1
 8001dec:	08001e19 	.word	0x08001e19
 8001df0:	080021e1 	.word	0x080021e1
 8001df4:	080021e1 	.word	0x080021e1
 8001df8:	080021e1 	.word	0x080021e1
 8001dfc:	08001e21 	.word	0x08001e21
 8001e00:	080021e1 	.word	0x080021e1
 8001e04:	080021e1 	.word	0x080021e1
 8001e08:	080021e1 	.word	0x080021e1
 8001e0c:	08002011 	.word	0x08002011
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4bb9      	ldr	r3, [pc, #740]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001e16:	e1e7      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e18:	4bb8      	ldr	r3, [pc, #736]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e1e:	e1e3      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e20:	4bb4      	ldr	r3, [pc, #720]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d071      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e38:	4bae      	ldr	r3, [pc, #696]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e5e:	4622      	mov	r2, r4
 8001e60:	462b      	mov	r3, r5
 8001e62:	f04f 0000 	mov.w	r0, #0
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	0159      	lsls	r1, r3, #5
 8001e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e70:	0150      	lsls	r0, r2, #5
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4621      	mov	r1, r4
 8001e78:	1a51      	subs	r1, r2, r1
 8001e7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e90:	4649      	mov	r1, r9
 8001e92:	018b      	lsls	r3, r1, #6
 8001e94:	4641      	mov	r1, r8
 8001e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	018a      	lsls	r2, r1, #6
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	1a51      	subs	r1, r2, r1
 8001ea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001eb8:	4649      	mov	r1, r9
 8001eba:	00cb      	lsls	r3, r1, #3
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec2:	4641      	mov	r1, r8
 8001ec4:	00ca      	lsls	r2, r1, #3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4622      	mov	r2, r4
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	eb42 0303 	adc.w	r3, r2, r3
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ee8:	4629      	mov	r1, r5
 8001eea:	024b      	lsls	r3, r1, #9
 8001eec:	4621      	mov	r1, r4
 8001eee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	024a      	lsls	r2, r1, #9
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f0c:	f7fe f97a 	bl	8000204 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f1a:	e067      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1c:	4b75      	ldr	r3, [pc, #468]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f36:	2300      	movs	r3, #0
 8001f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f3e:	4622      	mov	r2, r4
 8001f40:	462b      	mov	r3, r5
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4621      	mov	r1, r4
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f70:	4649      	mov	r1, r9
 8001f72:	018b      	lsls	r3, r1, #6
 8001f74:	4641      	mov	r1, r8
 8001f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	018a      	lsls	r2, r1, #6
 8001f7e:	4641      	mov	r1, r8
 8001f80:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f84:	4649      	mov	r1, r9
 8001f86:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f9e:	4692      	mov	sl, r2
 8001fa0:	469b      	mov	fp, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb1a 0303 	adds.w	r3, sl, r3
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	462b      	mov	r3, r5
 8001fac:	eb4b 0303 	adc.w	r3, fp, r3
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	028b      	lsls	r3, r1, #10
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc8:	4621      	mov	r1, r4
 8001fca:	028a      	lsls	r2, r1, #10
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fde:	f7fe f911 	bl	8000204 <__aeabi_uldivmod>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fec:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800200e:	e0eb      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002010:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201c:	4b35      	ldr	r3, [pc, #212]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d06b      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	2200      	movs	r2, #0
 8002030:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002032:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002034:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203a:	663b      	str	r3, [r7, #96]	@ 0x60
 800203c:	2300      	movs	r3, #0
 800203e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002040:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002044:	4622      	mov	r2, r4
 8002046:	462b      	mov	r3, r5
 8002048:	f04f 0000 	mov.w	r0, #0
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	0159      	lsls	r1, r3, #5
 8002052:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002056:	0150      	lsls	r0, r2, #5
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4621      	mov	r1, r4
 800205e:	1a51      	subs	r1, r2, r1
 8002060:	61b9      	str	r1, [r7, #24]
 8002062:	4629      	mov	r1, r5
 8002064:	eb63 0301 	sbc.w	r3, r3, r1
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002076:	4659      	mov	r1, fp
 8002078:	018b      	lsls	r3, r1, #6
 800207a:	4651      	mov	r1, sl
 800207c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002080:	4651      	mov	r1, sl
 8002082:	018a      	lsls	r2, r1, #6
 8002084:	4651      	mov	r1, sl
 8002086:	ebb2 0801 	subs.w	r8, r2, r1
 800208a:	4659      	mov	r1, fp
 800208c:	eb63 0901 	sbc.w	r9, r3, r1
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800209c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a4:	4690      	mov	r8, r2
 80020a6:	4699      	mov	r9, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	eb18 0303 	adds.w	r3, r8, r3
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	462b      	mov	r3, r5
 80020b2:	eb49 0303 	adc.w	r3, r9, r3
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020c4:	4629      	mov	r1, r5
 80020c6:	024b      	lsls	r3, r1, #9
 80020c8:	4621      	mov	r1, r4
 80020ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ce:	4621      	mov	r1, r4
 80020d0:	024a      	lsls	r2, r1, #9
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020da:	2200      	movs	r2, #0
 80020dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020e4:	f7fe f88e 	bl	8000204 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4613      	mov	r3, r2
 80020ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020f2:	e065      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x420>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	2200      	movs	r2, #0
 8002108:	4618      	mov	r0, r3
 800210a:	4611      	mov	r1, r2
 800210c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002110:	653b      	str	r3, [r7, #80]	@ 0x50
 8002112:	2300      	movs	r3, #0
 8002114:	657b      	str	r3, [r7, #84]	@ 0x54
 8002116:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800211a:	4642      	mov	r2, r8
 800211c:	464b      	mov	r3, r9
 800211e:	f04f 0000 	mov.w	r0, #0
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	0159      	lsls	r1, r3, #5
 8002128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800212c:	0150      	lsls	r0, r2, #5
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4641      	mov	r1, r8
 8002134:	1a51      	subs	r1, r2, r1
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	4649      	mov	r1, r9
 800213a:	eb63 0301 	sbc.w	r3, r3, r1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800214c:	4659      	mov	r1, fp
 800214e:	018b      	lsls	r3, r1, #6
 8002150:	4651      	mov	r1, sl
 8002152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002156:	4651      	mov	r1, sl
 8002158:	018a      	lsls	r2, r1, #6
 800215a:	4651      	mov	r1, sl
 800215c:	1a54      	subs	r4, r2, r1
 800215e:	4659      	mov	r1, fp
 8002160:	eb63 0501 	sbc.w	r5, r3, r1
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	00eb      	lsls	r3, r5, #3
 800216e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002172:	00e2      	lsls	r2, r4, #3
 8002174:	4614      	mov	r4, r2
 8002176:	461d      	mov	r5, r3
 8002178:	4643      	mov	r3, r8
 800217a:	18e3      	adds	r3, r4, r3
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	464b      	mov	r3, r9
 8002180:	eb45 0303 	adc.w	r3, r5, r3
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002192:	4629      	mov	r1, r5
 8002194:	028b      	lsls	r3, r1, #10
 8002196:	4621      	mov	r1, r4
 8002198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800219c:	4621      	mov	r1, r4
 800219e:	028a      	lsls	r2, r1, #10
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021a8:	2200      	movs	r2, #0
 80021aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021b2:	f7fe f827 	bl	8000204 <__aeabi_uldivmod>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4613      	mov	r3, r2
 80021bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0f1b      	lsrs	r3, r3, #28
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80021ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021de:	e003      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80021e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	37b8      	adds	r7, #184	@ 0xb8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	00f42400 	.word	0x00f42400

08002200 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e28d      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8083 	beq.w	8002326 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002220:	4b94      	ldr	r3, [pc, #592]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d019      	beq.n	8002260 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800222c:	4b91      	ldr	r3, [pc, #580]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002234:	2b08      	cmp	r3, #8
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002238:	4b8e      	ldr	r3, [pc, #568]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002244:	d00c      	beq.n	8002260 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b8b      	ldr	r3, [pc, #556]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b88      	ldr	r3, [pc, #544]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b84      	ldr	r3, [pc, #528]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x124>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e25a      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x90>
 8002282:	4b7c      	ldr	r3, [pc, #496]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7b      	ldr	r2, [pc, #492]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xcc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xb4>
 800229a:	4b76      	ldr	r3, [pc, #472]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a75      	ldr	r2, [pc, #468]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b73      	ldr	r3, [pc, #460]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a72      	ldr	r2, [pc, #456]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xcc>
 80022b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fdc6 	bl	8000e64 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fdc2 	bl	8000e64 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e21f      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xdc>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fdb2 	bl	8000e64 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fdae 	bl	8000e64 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e20b      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b57      	ldr	r3, [pc, #348]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x104>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d06f      	beq.n	8002412 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002332:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d017      	beq.n	800236e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800233e:	4b4d      	ldr	r3, [pc, #308]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800234a:	4b4a      	ldr	r3, [pc, #296]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b47      	ldr	r3, [pc, #284]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002362:	4b44      	ldr	r3, [pc, #272]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x186>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1d3      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4937      	ldr	r1, [pc, #220]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <HAL_RCC_OscConfig+0x278>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fd5b 	bl	8000e64 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fd57 	bl	8000e64 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1b4      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4925      	ldr	r1, [pc, #148]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <HAL_RCC_OscConfig+0x278>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fd3a 	bl	8000e64 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe fd36 	bl	8000e64 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e193      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d036      	beq.n	800248c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fd1a 	bl	8000e64 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe fd16 	bl	8000e64 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e173      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x274>)
 8002448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x234>
 8002452:	e01b      	b.n	800248c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002454:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fd03 	bl	8000e64 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	e00e      	b.n	8002480 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002462:	f7fe fcff 	bl	8000e64 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d907      	bls.n	8002480 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e15c      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
 8002474:	40023800 	.word	0x40023800
 8002478:	42470000 	.word	0x42470000
 800247c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	4b8a      	ldr	r3, [pc, #552]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ea      	bne.n	8002462 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8097 	beq.w	80025c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b83      	ldr	r3, [pc, #524]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b7f      	ldr	r3, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a7e      	ldr	r2, [pc, #504]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b7c      	ldr	r3, [pc, #496]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b79      	ldr	r3, [pc, #484]	@ (80026b0 <HAL_RCC_OscConfig+0x4b0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b76      	ldr	r3, [pc, #472]	@ (80026b0 <HAL_RCC_OscConfig+0x4b0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a75      	ldr	r2, [pc, #468]	@ (80026b0 <HAL_RCC_OscConfig+0x4b0>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fcbf 	bl	8000e64 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7fe fcbb 	bl	8000e64 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e118      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b6c      	ldr	r3, [pc, #432]	@ (80026b0 <HAL_RCC_OscConfig+0x4b0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x31e>
 8002510:	4b66      	ldr	r3, [pc, #408]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002514:	4a65      	ldr	r2, [pc, #404]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6713      	str	r3, [r2, #112]	@ 0x70
 800251c:	e01c      	b.n	8002558 <HAL_RCC_OscConfig+0x358>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x340>
 8002526:	4b61      	ldr	r3, [pc, #388]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252a:	4a60      	ldr	r2, [pc, #384]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6713      	str	r3, [r2, #112]	@ 0x70
 8002532:	4b5e      	ldr	r3, [pc, #376]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002536:	4a5d      	ldr	r2, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6713      	str	r3, [r2, #112]	@ 0x70
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0x358>
 8002540:	4b5a      	ldr	r3, [pc, #360]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a59      	ldr	r2, [pc, #356]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
 800254c:	4b57      	ldr	r3, [pc, #348]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002550:	4a56      	ldr	r2, [pc, #344]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002552:	f023 0304 	bic.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fc80 	bl	8000e64 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fc7c 	bl	8000e64 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0d7      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	4b4b      	ldr	r3, [pc, #300]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ee      	beq.n	8002568 <HAL_RCC_OscConfig+0x368>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fc6a 	bl	8000e64 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fc66 	bl	8000e64 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0c1      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025aa:	4b40      	ldr	r3, [pc, #256]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ee      	bne.n	8002594 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	4a3a      	ldr	r2, [pc, #232]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80ad 	beq.w	800272c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d2:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d060      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d145      	bne.n	8002672 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b33      	ldr	r3, [pc, #204]	@ (80026b4 <HAL_RCC_OscConfig+0x4b4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc3a 	bl	8000e64 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fc36 	bl	8000e64 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e093      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b29      	ldr	r3, [pc, #164]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	3b01      	subs	r3, #1
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	071b      	lsls	r3, r3, #28
 800263e:	491b      	ldr	r1, [pc, #108]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_RCC_OscConfig+0x4b4>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fc0b 	bl	8000e64 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fc07 	bl	8000e64 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e064      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x452>
 8002670:	e05c      	b.n	800272c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <HAL_RCC_OscConfig+0x4b4>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fbf4 	bl	8000e64 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fbf0 	bl	8000e64 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e04d      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_RCC_OscConfig+0x4ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x480>
 800269e:	e045      	b.n	800272c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e040      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000
 80026b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <HAL_RCC_OscConfig+0x538>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d030      	beq.n	8002728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d129      	bne.n	8002728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d122      	bne.n	8002728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d119      	bne.n	8002728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d10f      	bne.n	8002728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e041      	b.n	80027d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fa54 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 fb9a 	bl	8002eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04e      	b.n	8002892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a23      	ldr	r2, [pc, #140]	@ (80028a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281e:	d01d      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <HAL_TIM_Base_Start_IT+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d010      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	e007      	b.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	40010400 	.word	0x40010400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40001800 	.word	0x40001800

080028bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f839 	bl	800295a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fada 	bl	8002eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01b      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0202 	mvn.w	r2, #2
 80029a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fa5c 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 80029be:	e005      	b.n	80029cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa4e 	bl	8002e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa5f 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01b      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0204 	mvn.w	r2, #4
 80029ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fa36 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002a0a:	e005      	b.n	8002a18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa28 	bl	8002e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa39 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01b      	beq.n	8002a6a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f06f 0208 	mvn.w	r2, #8
 8002a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa10 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002a56:	e005      	b.n	8002a64 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa02 	bl	8002e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa13 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01b      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0210 	mvn.w	r2, #16
 8002a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f9ea 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002aa2:	e005      	b.n	8002ab0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f9dc 	bl	8002e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9ed 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0201 	mvn.w	r2, #1
 8002ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fd ff1d 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fd57 	bl	80035ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f9be 	bl	8002e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0220 	mvn.w	r2, #32
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fd29 	bl	8003598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e0ae      	b.n	8002ccc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	f200 809f 	bhi.w	8002cbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002bb9 	.word	0x08002bb9
 8002b88:	08002cbd 	.word	0x08002cbd
 8002b8c:	08002cbd 	.word	0x08002cbd
 8002b90:	08002cbd 	.word	0x08002cbd
 8002b94:	08002bf9 	.word	0x08002bf9
 8002b98:	08002cbd 	.word	0x08002cbd
 8002b9c:	08002cbd 	.word	0x08002cbd
 8002ba0:	08002cbd 	.word	0x08002cbd
 8002ba4:	08002c3b 	.word	0x08002c3b
 8002ba8:	08002cbd 	.word	0x08002cbd
 8002bac:	08002cbd 	.word	0x08002cbd
 8002bb0:	08002cbd 	.word	0x08002cbd
 8002bb4:	08002c7b 	.word	0x08002c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa24 	bl	800300c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0208 	orr.w	r2, r2, #8
 8002bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0204 	bic.w	r2, r2, #4
 8002be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6999      	ldr	r1, [r3, #24]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	619a      	str	r2, [r3, #24]
      break;
 8002bf6:	e064      	b.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa74 	bl	80030ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	021a      	lsls	r2, r3, #8
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]
      break;
 8002c38:	e043      	b.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fac9 	bl	80031d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0208 	orr.w	r2, r2, #8
 8002c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0204 	bic.w	r2, r2, #4
 8002c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	61da      	str	r2, [r3, #28]
      break;
 8002c78:	e023      	b.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb1d 	bl	80032c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	021a      	lsls	r2, r3, #8
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	61da      	str	r2, [r3, #28]
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0b4      	b.n	8002e5a <HAL_TIM_ConfigClockSource+0x186>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d28:	d03e      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2e:	f200 8087 	bhi.w	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d36:	f000 8086 	beq.w	8002e46 <HAL_TIM_ConfigClockSource+0x172>
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3e:	d87f      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b70      	cmp	r3, #112	@ 0x70
 8002d42:	d01a      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0xa6>
 8002d44:	2b70      	cmp	r3, #112	@ 0x70
 8002d46:	d87b      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b60      	cmp	r3, #96	@ 0x60
 8002d4a:	d050      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x11a>
 8002d4c:	2b60      	cmp	r3, #96	@ 0x60
 8002d4e:	d877      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b50      	cmp	r3, #80	@ 0x50
 8002d52:	d03c      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0xfa>
 8002d54:	2b50      	cmp	r3, #80	@ 0x50
 8002d56:	d873      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	d058      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x13a>
 8002d5c:	2b40      	cmp	r3, #64	@ 0x40
 8002d5e:	d86f      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b30      	cmp	r3, #48	@ 0x30
 8002d62:	d064      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x15a>
 8002d64:	2b30      	cmp	r3, #48	@ 0x30
 8002d66:	d86b      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d060      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x15a>
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d867      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d05c      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x15a>
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d05a      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x15a>
 8002d78:	e062      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	f000 fb69 	bl	8003460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	609a      	str	r2, [r3, #8]
      break;
 8002da6:	e04f      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002db8:	f000 fb52 	bl	8003460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dca:	609a      	str	r2, [r3, #8]
      break;
 8002dcc:	e03c      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f000 fac6 	bl	800336c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2150      	movs	r1, #80	@ 0x50
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fb1f 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002dec:	e02c      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 fae5 	bl	80033ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2160      	movs	r1, #96	@ 0x60
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fb0f 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e01c      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 faa6 	bl	800336c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2140      	movs	r1, #64	@ 0x40
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 faff 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e00c      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f000 faf6 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002e3e:	e003      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      break;
 8002e44:	e000      	b.n	8002e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed2:	d00f      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a43      	ldr	r2, [pc, #268]	@ (8002fe4 <TIM_Base_SetConfig+0x130>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a42      	ldr	r2, [pc, #264]	@ (8002fe8 <TIM_Base_SetConfig+0x134>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a41      	ldr	r2, [pc, #260]	@ (8002fec <TIM_Base_SetConfig+0x138>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	@ (8002ff0 <TIM_Base_SetConfig+0x13c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a35      	ldr	r2, [pc, #212]	@ (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02b      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d027      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a32      	ldr	r2, [pc, #200]	@ (8002fe4 <TIM_Base_SetConfig+0x130>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d023      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a31      	ldr	r2, [pc, #196]	@ (8002fe8 <TIM_Base_SetConfig+0x134>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a30      	ldr	r2, [pc, #192]	@ (8002fec <TIM_Base_SetConfig+0x138>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01b      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <TIM_Base_SetConfig+0x13c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d017      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <TIM_Base_SetConfig+0x140>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <TIM_Base_SetConfig+0x144>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00f      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <TIM_Base_SetConfig+0x148>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2b      	ldr	r2, [pc, #172]	@ (8003000 <TIM_Base_SetConfig+0x14c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <TIM_Base_SetConfig+0x150>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a29      	ldr	r2, [pc, #164]	@ (8003008 <TIM_Base_SetConfig+0x154>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d108      	bne.n	8002f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_Base_SetConfig+0xf8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <TIM_Base_SetConfig+0x13c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d103      	bne.n	8002fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	40001800 	.word	0x40001800
 8003004:	40001c00 	.word	0x40001c00
 8003008:	40002000 	.word	0x40002000

0800300c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 0201 	bic.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0302 	bic.w	r3, r3, #2
 8003054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <TIM_OC1_SetConfig+0xd8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC1_SetConfig+0x64>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a1f      	ldr	r2, [pc, #124]	@ (80030e8 <TIM_OC1_SetConfig+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0308 	bic.w	r3, r3, #8
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <TIM_OC1_SetConfig+0xd8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC1_SetConfig+0x8e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <TIM_OC1_SetConfig+0xdc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010400 	.word	0x40010400

080030ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 0210 	bic.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0320 	bic.w	r3, r3, #32
 8003136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a22      	ldr	r2, [pc, #136]	@ (80031d0 <TIM_OC2_SetConfig+0xe4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_OC2_SetConfig+0x68>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a21      	ldr	r2, [pc, #132]	@ (80031d4 <TIM_OC2_SetConfig+0xe8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10d      	bne.n	8003170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a17      	ldr	r2, [pc, #92]	@ (80031d0 <TIM_OC2_SetConfig+0xe4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC2_SetConfig+0x94>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a16      	ldr	r2, [pc, #88]	@ (80031d4 <TIM_OC2_SetConfig+0xe8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d113      	bne.n	80031a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400

080031d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a21      	ldr	r2, [pc, #132]	@ (80032b8 <TIM_OC3_SetConfig+0xe0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC3_SetConfig+0x66>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a20      	ldr	r2, [pc, #128]	@ (80032bc <TIM_OC3_SetConfig+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <TIM_OC3_SetConfig+0xe0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_OC3_SetConfig+0x92>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a15      	ldr	r2, [pc, #84]	@ (80032bc <TIM_OC3_SetConfig+0xe4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d113      	bne.n	8003292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40010400 	.word	0x40010400

080032c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800330a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	031b      	lsls	r3, r3, #12
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a12      	ldr	r2, [pc, #72]	@ (8003364 <TIM_OC4_SetConfig+0xa4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC4_SetConfig+0x68>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <TIM_OC4_SetConfig+0xa8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d109      	bne.n	800333c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800332e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40010400 	.word	0x40010400

0800336c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f023 030a 	bic.w	r3, r3, #10
 80033a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b087      	sub	sp, #28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f023 0210 	bic.w	r2, r3, #16
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	031b      	lsls	r3, r3, #12
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	f043 0307 	orr.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800347a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	021a      	lsls	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	431a      	orrs	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e05a      	b.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a21      	ldr	r2, [pc, #132]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003504:	d01d      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1d      	ldr	r2, [pc, #116]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1a      	ldr	r2, [pc, #104]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a18      	ldr	r2, [pc, #96]	@ (800358c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10c      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4313      	orrs	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40010400 	.word	0x40010400
 8003590:	40014000 	.word	0x40014000
 8003594:	40001800 	.word	0x40001800

08003598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e042      	b.n	8003658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fb94 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	@ 0x24
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f82b 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b0c0      	sub	sp, #256	@ 0x100
 8003666:	af00      	add	r7, sp, #0
 8003668:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	68d9      	ldr	r1, [r3, #12]
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	ea40 0301 	orr.w	r3, r0, r1
 8003688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036b8:	f021 010c 	bic.w	r1, r1, #12
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036c6:	430b      	orrs	r3, r1
 80036c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	6999      	ldr	r1, [r3, #24]
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	ea40 0301 	orr.w	r3, r0, r1
 80036e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b8f      	ldr	r3, [pc, #572]	@ (800392c <UART_SetConfig+0x2cc>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d005      	beq.n	8003700 <UART_SetConfig+0xa0>
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003930 <UART_SetConfig+0x2d0>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d104      	bne.n	800370a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7fe fb08 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8003704:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003708:	e003      	b.n	8003712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370a:	f7fe faef 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 800370e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800371c:	f040 810c 	bne.w	8003938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800372a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800372e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	1891      	adds	r1, r2, r2
 8003738:	65b9      	str	r1, [r7, #88]	@ 0x58
 800373a:	415b      	adcs	r3, r3
 800373c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800373e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003742:	4621      	mov	r1, r4
 8003744:	eb12 0801 	adds.w	r8, r2, r1
 8003748:	4629      	mov	r1, r5
 800374a:	eb43 0901 	adc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003770:	462b      	mov	r3, r5
 8003772:	eb49 0303 	adc.w	r3, r9, r3
 8003776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003786:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800378a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800378e:	460b      	mov	r3, r1
 8003790:	18db      	adds	r3, r3, r3
 8003792:	653b      	str	r3, [r7, #80]	@ 0x50
 8003794:	4613      	mov	r3, r2
 8003796:	eb42 0303 	adc.w	r3, r2, r3
 800379a:	657b      	str	r3, [r7, #84]	@ 0x54
 800379c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037a4:	f7fc fd2e 	bl	8000204 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <UART_SetConfig+0x2d4>)
 80037ae:	fba3 2302 	umull	r2, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037d0:	415b      	adcs	r3, r3
 80037d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037d8:	4641      	mov	r1, r8
 80037da:	eb12 0a01 	adds.w	sl, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb43 0b01 	adc.w	fp, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f8:	4692      	mov	sl, r2
 80037fa:	469b      	mov	fp, r3
 80037fc:	4643      	mov	r3, r8
 80037fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003806:	464b      	mov	r3, r9
 8003808:	eb4b 0303 	adc.w	r3, fp, r3
 800380c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800381c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003824:	460b      	mov	r3, r1
 8003826:	18db      	adds	r3, r3, r3
 8003828:	643b      	str	r3, [r7, #64]	@ 0x40
 800382a:	4613      	mov	r3, r2
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800383a:	f7fc fce3 	bl	8000204 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4611      	mov	r1, r2
 8003844:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <UART_SetConfig+0x2d4>)
 8003846:	fba3 2301 	umull	r2, r3, r3, r1
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2264      	movs	r2, #100	@ 0x64
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	1acb      	subs	r3, r1, r3
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800385a:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <UART_SetConfig+0x2d4>)
 800385c:	fba3 2302 	umull	r2, r3, r3, r2
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003868:	441c      	add	r4, r3
 800386a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003874:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800387c:	4642      	mov	r2, r8
 800387e:	464b      	mov	r3, r9
 8003880:	1891      	adds	r1, r2, r2
 8003882:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003884:	415b      	adcs	r3, r3
 8003886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800388c:	4641      	mov	r1, r8
 800388e:	1851      	adds	r1, r2, r1
 8003890:	6339      	str	r1, [r7, #48]	@ 0x30
 8003892:	4649      	mov	r1, r9
 8003894:	414b      	adcs	r3, r1
 8003896:	637b      	str	r3, [r7, #52]	@ 0x34
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038a4:	4659      	mov	r1, fp
 80038a6:	00cb      	lsls	r3, r1, #3
 80038a8:	4651      	mov	r1, sl
 80038aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ae:	4651      	mov	r1, sl
 80038b0:	00ca      	lsls	r2, r1, #3
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	4642      	mov	r2, r8
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c0:	464b      	mov	r3, r9
 80038c2:	460a      	mov	r2, r1
 80038c4:	eb42 0303 	adc.w	r3, r2, r3
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038e0:	460b      	mov	r3, r1
 80038e2:	18db      	adds	r3, r3, r3
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038f6:	f7fc fc85 	bl	8000204 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <UART_SetConfig+0x2d4>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	@ 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	3332      	adds	r3, #50	@ 0x32
 8003912:	4a08      	ldr	r2, [pc, #32]	@ (8003934 <UART_SetConfig+0x2d4>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 0207 	and.w	r2, r3, #7
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4422      	add	r2, r4
 8003926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003928:	e106      	b.n	8003b38 <UART_SetConfig+0x4d8>
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	40011400 	.word	0x40011400
 8003934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003942:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800394a:	4642      	mov	r2, r8
 800394c:	464b      	mov	r3, r9
 800394e:	1891      	adds	r1, r2, r2
 8003950:	6239      	str	r1, [r7, #32]
 8003952:	415b      	adcs	r3, r3
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
 8003956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395a:	4641      	mov	r1, r8
 800395c:	1854      	adds	r4, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0501 	adc.w	r5, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	00eb      	lsls	r3, r5, #3
 800396e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003972:	00e2      	lsls	r2, r4, #3
 8003974:	4614      	mov	r4, r2
 8003976:	461d      	mov	r5, r3
 8003978:	4643      	mov	r3, r8
 800397a:	18e3      	adds	r3, r4, r3
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003980:	464b      	mov	r3, r9
 8003982:	eb45 0303 	adc.w	r3, r5, r3
 8003986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039a6:	4629      	mov	r1, r5
 80039a8:	008b      	lsls	r3, r1, #2
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b0:	4621      	mov	r1, r4
 80039b2:	008a      	lsls	r2, r1, #2
 80039b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039b8:	f7fc fc24 	bl	8000204 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b60      	ldr	r3, [pc, #384]	@ (8003b44 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	011c      	lsls	r4, r3, #4
 80039ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	61b9      	str	r1, [r7, #24]
 80039e4:	415b      	adcs	r3, r3
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ec:	4641      	mov	r1, r8
 80039ee:	1851      	adds	r1, r2, r1
 80039f0:	6139      	str	r1, [r7, #16]
 80039f2:	4649      	mov	r1, r9
 80039f4:	414b      	adcs	r3, r1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a04:	4659      	mov	r1, fp
 8003a06:	00cb      	lsls	r3, r1, #3
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0e:	4651      	mov	r1, sl
 8003a10:	00ca      	lsls	r2, r1, #3
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a20:	464b      	mov	r3, r9
 8003a22:	460a      	mov	r2, r1
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a44:	4649      	mov	r1, r9
 8003a46:	008b      	lsls	r3, r1, #2
 8003a48:	4641      	mov	r1, r8
 8003a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4e:	4641      	mov	r1, r8
 8003a50:	008a      	lsls	r2, r1, #2
 8003a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a56:	f7fc fbd5 	bl	8000204 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4b38      	ldr	r3, [pc, #224]	@ (8003b44 <UART_SetConfig+0x4e4>)
 8003a62:	fba3 2301 	umull	r2, r3, r3, r1
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2264      	movs	r2, #100	@ 0x64
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	1acb      	subs	r3, r1, r3
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	3332      	adds	r3, #50	@ 0x32
 8003a74:	4a33      	ldr	r2, [pc, #204]	@ (8003b44 <UART_SetConfig+0x4e4>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a80:	441c      	add	r4, r3
 8003a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a86:	2200      	movs	r2, #0
 8003a88:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	1851      	adds	r1, r2, r1
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	414b      	adcs	r3, r1
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ab8:	4659      	mov	r1, fp
 8003aba:	00cb      	lsls	r3, r1, #3
 8003abc:	4651      	mov	r1, sl
 8003abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	00ca      	lsls	r2, r1, #3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	4642      	mov	r2, r8
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	eb42 0303 	adc.w	r3, r2, r3
 8003ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ae6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003af4:	4649      	mov	r1, r9
 8003af6:	008b      	lsls	r3, r1, #2
 8003af8:	4641      	mov	r1, r8
 8003afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afe:	4641      	mov	r1, r8
 8003b00:	008a      	lsls	r2, r1, #2
 8003b02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b06:	f7fc fb7d 	bl	8000204 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <UART_SetConfig+0x4e4>)
 8003b10:	fba3 1302 	umull	r1, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	2164      	movs	r1, #100	@ 0x64
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	3332      	adds	r3, #50	@ 0x32
 8003b22:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <UART_SetConfig+0x4e4>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4422      	add	r2, r4
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <memset>:
 8003b48:	4402      	add	r2, r0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b90 <__libc_init_array+0x38>)
 8003b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b94 <__libc_init_array+0x3c>)
 8003b5e:	1b64      	subs	r4, r4, r5
 8003b60:	10a4      	asrs	r4, r4, #2
 8003b62:	2600      	movs	r6, #0
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	4d0b      	ldr	r5, [pc, #44]	@ (8003b98 <__libc_init_array+0x40>)
 8003b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b9c <__libc_init_array+0x44>)
 8003b6c:	f000 f818 	bl	8003ba0 <_init>
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	2600      	movs	r6, #0
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	08003bd8 	.word	0x08003bd8
 8003b94:	08003bd8 	.word	0x08003bd8
 8003b98:	08003bd8 	.word	0x08003bd8
 8003b9c:	08003bdc 	.word	0x08003bdc

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
