
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c220  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000133c  0800c3f0  0800c3f0  0000d3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d72c  0800d72c  0000f090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d72c  0800d72c  0000e72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d734  0800d734  0000f090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d734  0800d734  0000e734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d738  0800d738  0000e738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800d73c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005160  20000090  0800d7cc  0000f090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051f0  0800d7cc  0000f1f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ec  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004df0  00000000  00000000  0002faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a8  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002832b  00000000  00000000  00037a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d2a  00000000  00000000  0005fd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed0af  00000000  00000000  00082a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016fb24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea0  00000000  00000000  0016fb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00177a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c3d8 	.word	0x0800c3d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800c3d8 	.word	0x0800c3d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <MX_ADC1_Init+0x9c>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <MX_ADC1_Init+0xa0>)
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dee:	f001 ffbd 	bl	8002d6c <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 ffa0 	bl	8001d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000e04:	2305      	movs	r3, #5
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000e0e:	f002 f98f 	bl	8003130 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 ff90 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000ac 	.word	0x200000ac
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	0f000001 	.word	0x0f000001

08000e30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_ADC_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d127      	bne.n	8000ea2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_ADC_MspInit+0x84>)
 8000e9e:	f002 fce9 	bl	8003874 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012000 	.word	0x40012000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <send_AT_command+0x48>)
 8000ec8:	f00a f9f0 	bl	800b2ac <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff f99f 	bl	8000210 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <send_AT_command+0x4c>)
 8000ede:	f005 febf 	bl	8006c60 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f000 f811 	bl	8000f0c <waitFor>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <send_AT_command+0x50>)
 8000ef4:	f00a f9da 	bl	800b2ac <iprintf>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800c3f0 	.word	0x0800c3f0
 8000f04:	200006c0 	.word	0x200006c0
 8000f08:	0800c3fc 	.word	0x0800c3fc

08000f0c <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b6      	sub	sp, #216	@ 0xd8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	22c4      	movs	r2, #196	@ 0xc4
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a fa48 	bl	800b3b8 <memset>
    uint32_t startTick = HAL_GetTick();
 8000f28:	f001 fef0 	bl	8002d0c <HAL_GetTick>
 8000f2c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000f36:	e044      	b.n	8000fc2 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 8000f38:	f107 0208 	add.w	r2, r7, #8
 8000f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f40:	18d1      	adds	r1, r2, r3
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	2201      	movs	r2, #1
 8000f46:	4828      	ldr	r0, [pc, #160]	@ (8000fe8 <waitFor+0xdc>)
 8000f48:	f005 ff15 	bl	8006d76 <HAL_UART_Receive>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d137      	bne.n	8000fc2 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d007      	beq.n	8000f72 <waitFor+0x66>
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d11b      	bne.n	8000faa <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a fa00 	bl	800b38c <strstr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	@ (8000fec <waitFor+0xe0>)
 8000f9a:	f00a f987 	bl	800b2ac <iprintf>
                    return 1;  // Found the expected response
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e01d      	b.n	8000fde <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fa8:	e00b      	b.n	8000fc2 <waitFor+0xb6>
            } else {
                index++;
 8000faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 8000fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fb8:	2bc6      	cmp	r3, #198	@ 0xc6
 8000fba:	d902      	bls.n	8000fc2 <waitFor+0xb6>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000fc2:	f001 fea3 	bl	8002d0c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8b1      	bhi.n	8000f38 <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <waitFor+0xe4>)
 8000fd8:	f00a f968 	bl	800b2ac <iprintf>
    return 0;  // Timeout reached without expected response
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	37d8      	adds	r7, #216	@ 0xd8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200006c0 	.word	0x200006c0
 8000fec:	0800c420 	.word	0x0800c420
 8000ff0:	0800c434 	.word	0x0800c434

08000ff4 <ESP_Server_Init>:
void ESP_Server_Init(const char *ssid, const char *password) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    char cmdBuffer[100];  // Buffer for AT commands

    printf("RESETTING ESP8266...\n");
 8000ffe:	4821      	ldr	r0, [pc, #132]	@ (8001084 <ESP_Server_Init+0x90>)
 8001000:	f00a f9bc 	bl	800b37c <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8001004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001008:	491f      	ldr	r1, [pc, #124]	@ (8001088 <ESP_Server_Init+0x94>)
 800100a:	4820      	ldr	r0, [pc, #128]	@ (800108c <ESP_Server_Init+0x98>)
 800100c:	f7ff ff54 	bl	8000eb8 <send_AT_command>

    printf("Testing AT Command...\n");
 8001010:	481f      	ldr	r0, [pc, #124]	@ (8001090 <ESP_Server_Init+0x9c>)
 8001012:	f00a f9b3 	bl	800b37c <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 8001016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800101a:	491b      	ldr	r1, [pc, #108]	@ (8001088 <ESP_Server_Init+0x94>)
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <ESP_Server_Init+0xa0>)
 800101e:	f7ff ff4b 	bl	8000eb8 <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8001022:	481d      	ldr	r0, [pc, #116]	@ (8001098 <ESP_Server_Init+0xa4>)
 8001024:	f00a f9aa 	bl	800b37c <puts>
    sprintf(cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001028:	f107 000c 	add.w	r0, r7, #12
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	491a      	ldr	r1, [pc, #104]	@ (800109c <ESP_Server_Init+0xa8>)
 8001032:	f00a f859 	bl	800b0e8 <siprintf>
    send_AT_command(cmdBuffer, "WIFI CONNECTED", 15000);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800103e:	4918      	ldr	r1, [pc, #96]	@ (80010a0 <ESP_Server_Init+0xac>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff39 	bl	8000eb8 <send_AT_command>

    printf("Checking assigned IP address...\n");
 8001046:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <ESP_Server_Init+0xb0>)
 8001048:	f00a f998 	bl	800b37c <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4915      	ldr	r1, [pc, #84]	@ (80010a8 <ESP_Server_Init+0xb4>)
 8001052:	4816      	ldr	r0, [pc, #88]	@ (80010ac <ESP_Server_Init+0xb8>)
 8001054:	f7ff ff30 	bl	8000eb8 <send_AT_command>

    printf("Enabling single connections...\n");
 8001058:	4815      	ldr	r0, [pc, #84]	@ (80010b0 <ESP_Server_Init+0xbc>)
 800105a:	f00a f98f 	bl	800b37c <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 800105e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <ESP_Server_Init+0x94>)
 8001064:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <ESP_Server_Init+0xc0>)
 8001066:	f7ff ff27 	bl	8000eb8 <send_AT_command>

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <ESP_Server_Init+0xc4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <ESP_Server_Init+0xc4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	60da      	str	r2, [r3, #12]
}
 800107a:	bf00      	nop
 800107c:	3770      	adds	r7, #112	@ 0x70
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800c450 	.word	0x0800c450
 8001088:	0800c468 	.word	0x0800c468
 800108c:	0800c46c 	.word	0x0800c46c
 8001090:	0800c478 	.word	0x0800c478
 8001094:	0800c490 	.word	0x0800c490
 8001098:	0800c498 	.word	0x0800c498
 800109c:	0800c4b0 	.word	0x0800c4b0
 80010a0:	0800c4c8 	.word	0x0800c4c8
 80010a4:	0800c4d8 	.word	0x0800c4d8
 80010a8:	0800c4f8 	.word	0x0800c4f8
 80010ac:	0800c500 	.word	0x0800c500
 80010b0:	0800c50c 	.word	0x0800c50c
 80010b4:	0800c52c 	.word	0x0800c52c
 80010b8:	200006c0 	.word	0x200006c0

080010bc <sendHTMLToLocalServer>:

void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010d2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80010d6:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80010d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010e0:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	492b      	ldr	r1, [pc, #172]	@ (8001194 <sendHTMLToLocalServer+0xd8>)
 80010e8:	f009 fffe 	bl	800b0e8 <siprintf>
    send_AT_command(cmdBuffer, "OK", 2000);
 80010ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4928      	ldr	r1, [pc, #160]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fede 	bl	8000eb8 <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 80010fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001100:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4601      	mov	r1, r0
 800110c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001110:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8001114:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001118:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800111c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	491c      	ldr	r1, [pc, #112]	@ (800119c <sendHTMLToLocalServer+0xe0>)
 800112a:	f009 ffdd 	bl	800b0e8 <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 800112e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f86c 	bl	8000210 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8001146:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <sendHTMLToLocalServer+0xe4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f009 ffcd 	bl	800b0e8 <siprintf>
    send_AT_command(responseBuffer, ">", 500);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001156:	4913      	ldr	r1, [pc, #76]	@ (80011a4 <sendHTMLToLocalServer+0xe8>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fead 	bl	8000eb8 <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 1000);
 800115e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001166:	4910      	ldr	r1, [pc, #64]	@ (80011a8 <sendHTMLToLocalServer+0xec>)
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fea5 	bl	8000eb8 <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 500);
 800116e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001172:	4909      	ldr	r1, [pc, #36]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <sendHTMLToLocalServer+0xf0>)
 8001176:	f7ff fe9f 	bl	8000eb8 <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 800117a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800117e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <sendHTMLToLocalServer+0xf4>)
 8001186:	f00a f891 	bl	800b2ac <iprintf>
}
 800118a:	bf00      	nop
 800118c:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800c53c 	.word	0x0800c53c
 8001198:	0800c468 	.word	0x0800c468
 800119c:	0800c55c 	.word	0x0800c55c
 80011a0:	0800c5b8 	.word	0x0800c5b8
 80011a4:	0800c5c8 	.word	0x0800c5c8
 80011a8:	0800c5cc 	.word	0x0800c5cc
 80011ac:	0800c5d4 	.word	0x0800c5d4
 80011b0:	0800c5e4 	.word	0x0800c5e4

080011b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <MX_FREERTOS_Init+0x18>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_FREERTOS_Init+0x1c>)
 80011be:	f006 fe25 	bl	8007e0c <osThreadNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <MX_FREERTOS_Init+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0800d544 	.word	0x0800d544
 80011d0:	080011d9 	.word	0x080011d9
 80011d4:	200000f4 	.word	0x200000f4

080011d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f006 fea5 	bl	8007f30 <osDelay>
 80011e6:	e7fb      	b.n	80011e0 <StartDefaultTask+0x8>

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_GPIO_Init+0x138>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <MX_GPIO_Init+0x138>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <MX_GPIO_Init+0x138>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|System_state_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2160      	movs	r1, #96	@ 0x60
 8001272:	482c      	ldr	r0, [pc, #176]	@ (8001324 <MX_GPIO_Init+0x13c>)
 8001274:	f002 fcaa 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2103      	movs	r1, #3
 800127c:	482a      	ldr	r0, [pc, #168]	@ (8001328 <MX_GPIO_Init+0x140>)
 800127e:	f002 fca5 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001288:	4828      	ldr	r0, [pc, #160]	@ (800132c <MX_GPIO_Init+0x144>)
 800128a:	f002 fc9f 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001294:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4821      	ldr	r0, [pc, #132]	@ (800132c <MX_GPIO_Init+0x144>)
 80012a6:	f002 fae5 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|System_state_Pin;
 80012aa:	2360      	movs	r3, #96	@ 0x60
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_GPIO_Init+0x13c>)
 80012c2:	f002 fad7 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = control_System_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(control_System_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <MX_GPIO_Init+0x144>)
 80012da:	f002 facb 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 80012de:	2303      	movs	r3, #3
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <MX_GPIO_Init+0x140>)
 80012f6:	f002 fabd 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_GPIO_Init+0x144>)
 8001314:	f002 faae 	bl	8003874 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <MX_I2C1_Init+0x54>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_I2C1_Init+0x50>)
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <MX_I2C1_Init+0x58>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_I2C1_Init+0x50>)
 800134e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_I2C1_Init+0x50>)
 800136e:	f002 fc47 	bl	8003c00 <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001378:	f000 fce0 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f8 	.word	0x200000f8
 8001384:	40005400 	.word	0x40005400
 8001388:	00061a80 	.word	0x00061a80

0800138c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_I2C_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	@ 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <HAL_I2C_MspInit+0x8c>)
 80013e6:	f002 fa45 	bl	8003874 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <delay>:
/**
* @brief  The application entry point.
* @retval int
*/

void delay (uint16_t time){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <delay+0x30>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 800142e:	bf00      	nop
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <delay+0x30>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3f9      	bcc.n	8001430 <delay+0x14>
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000678 	.word	0x20000678

08001450 <main>:

int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8001454:	f001 fc24 	bl	8002ca0 <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 8001458:	f000 f8e8 	bl	800162c <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 800145c:	f7ff fec4 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001460:	f001 fb46 	bl	8002af0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001464:	f7ff ff64 	bl	8001330 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001468:	f7ff fc90 	bl	8000d8c <MX_ADC1_Init>
  MX_TIM2_Init();
 800146c:	f001 f966 	bl	800273c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001470:	f001 fb14 	bl	8002a9c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001474:	f001 f8c0 	bl	80025f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001478:	f001 f9d6 	bl	8002828 <MX_TIM3_Init>
/* USER CODE BEGIN 2 */
SSD1306_Init(); // Initialize OLED display
 800147c:	f000 fc7a 	bl	8001d74 <SSD1306_Init>
SSD1306_Clear(); // Clear the display
 8001480:	f000 fe9b 	bl	80021ba <SSD1306_Clear>
SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 8001484:	210a      	movs	r1, #10
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fdde 	bl	8002048 <SSD1306_GotoXY>
SSD1306_Puts("main", &Font_11x18, 1); // Display simple message
 800148c:	2201      	movs	r2, #1
 800148e:	493f      	ldr	r1, [pc, #252]	@ (800158c <main+0x13c>)
 8001490:	483f      	ldr	r0, [pc, #252]	@ (8001590 <main+0x140>)
 8001492:	f000 fe6d 	bl	8002170 <SSD1306_Puts>
SSD1306_UpdateScreen(); // Update the screen
 8001496:	f000 fd31 	bl	8001efc <SSD1306_UpdateScreen>
// test_Laser();
// test_Buzzer();
// test_LED();
// test_Servo();
// test_ESP8266();
HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800149a:	2100      	movs	r1, #0
 800149c:	483d      	ldr	r0, [pc, #244]	@ (8001594 <main+0x144>)
 800149e:	f004 f9c7 	bl	8005830 <HAL_TIM_IC_Start_IT>
ESP_Server_Init(username, pwd);
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <main+0x148>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <main+0x14c>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fda1 	bl	8000ff4 <ESP_Server_Init>

sendHTMLToLocalServer(localIP, regularHTML);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <main+0x150>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <main+0x154>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdfd 	bl	80010bc <sendHTMLToLocalServer>
systemStateMutex = osMutexNew(&systemStateMutex_attributes);
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <main+0x158>)
 80014c4:	f006 fd4f 	bl	8007f66 <osMutexNew>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a38      	ldr	r2, [pc, #224]	@ (80015ac <main+0x15c>)
 80014cc:	6013      	str	r3, [r2, #0]
if (systemStateMutex == NULL) {
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <main+0x15c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <main+0x8c>
    printf("Failed to create system state mutex\n");
 80014d6:	4836      	ldr	r0, [pc, #216]	@ (80015b0 <main+0x160>)
 80014d8:	f009 ff50 	bl	800b37c <puts>
}
// test_Button();
/* USER CODE END 2 */
/* Init scheduler */
osKernelInitialize();
 80014dc:	f006 fc4c 	bl	8007d78 <osKernelInitialize>
/* Call init function for freertos objects (in freertos.c) */
MX_FREERTOS_Init();
 80014e0:	f7ff fe68 	bl	80011b4 <MX_FREERTOS_Init>
TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 80014e4:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <main+0x164>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4833      	ldr	r0, [pc, #204]	@ (80015b8 <main+0x168>)
 80014ea:	f006 fc8f 	bl	8007e0c <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <main+0x16c>)
 80014f2:	6013      	str	r3, [r2, #0]
TaskSystemButtonHandle = osThreadNew(StartTaskSystemButton, NULL, &TaskSystemButton_attributes);
 80014f4:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <main+0x170>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4832      	ldr	r0, [pc, #200]	@ (80015c4 <main+0x174>)
 80014fa:	f006 fc87 	bl	8007e0c <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <main+0x178>)
 8001502:	6013      	str	r3, [r2, #0]
TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 8001504:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <main+0x17c>)
 8001506:	2100      	movs	r1, #0
 8001508:	4831      	ldr	r0, [pc, #196]	@ (80015d0 <main+0x180>)
 800150a:	f006 fc7f 	bl	8007e0c <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <main+0x184>)
 8001512:	6013      	str	r3, [r2, #0]
//laser
TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 8001514:	4a30      	ldr	r2, [pc, #192]	@ (80015d8 <main+0x188>)
 8001516:	2100      	movs	r1, #0
 8001518:	4830      	ldr	r0, [pc, #192]	@ (80015dc <main+0x18c>)
 800151a:	f006 fc77 	bl	8007e0c <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <main+0x190>)
 8001522:	6013      	str	r3, [r2, #0]
TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <main+0x194>)
 8001526:	2100      	movs	r1, #0
 8001528:	482f      	ldr	r0, [pc, #188]	@ (80015e8 <main+0x198>)
 800152a:	f006 fc6f 	bl	8007e0c <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <main+0x19c>)
 8001532:	6013      	str	r3, [r2, #0]
TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 8001534:	4a2e      	ldr	r2, [pc, #184]	@ (80015f0 <main+0x1a0>)
 8001536:	2100      	movs	r1, #0
 8001538:	482e      	ldr	r0, [pc, #184]	@ (80015f4 <main+0x1a4>)
 800153a:	f006 fc67 	bl	8007e0c <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a2d      	ldr	r2, [pc, #180]	@ (80015f8 <main+0x1a8>)
 8001542:	6013      	str	r3, [r2, #0]
TaskLedSystemHandle = osThreadNew(StartTaskSystemLed, NULL, &StartTaskSystemLed_attributes);
 8001544:	4a2d      	ldr	r2, [pc, #180]	@ (80015fc <main+0x1ac>)
 8001546:	2100      	movs	r1, #0
 8001548:	482d      	ldr	r0, [pc, #180]	@ (8001600 <main+0x1b0>)
 800154a:	f006 fc5f 	bl	8007e0c <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <main+0x1b4>)
 8001552:	6013      	str	r3, [r2, #0]
TaskLaserHandle = osThreadNew(StartTaskLaser, NULL, &StartTaskLaser_attributes);
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <main+0x1b8>)
 8001556:	2100      	movs	r1, #0
 8001558:	482c      	ldr	r0, [pc, #176]	@ (800160c <main+0x1bc>)
 800155a:	f006 fc57 	bl	8007e0c <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a2b      	ldr	r2, [pc, #172]	@ (8001610 <main+0x1c0>)
 8001562:	6013      	str	r3, [r2, #0]
TaskUpdateWebHandle = osThreadNew(StartTaskUpdateWeb, NULL, &StartTaskUpdateWeb_attributes);
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <main+0x1c4>)
 8001566:	2100      	movs	r1, #0
 8001568:	482b      	ldr	r0, [pc, #172]	@ (8001618 <main+0x1c8>)
 800156a:	f006 fc4f 	bl	8007e0c <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a2a      	ldr	r2, [pc, #168]	@ (800161c <main+0x1cc>)
 8001572:	6013      	str	r3, [r2, #0]
TaskDistanceHandle = osThreadNew(StartTaskDistance, NULL, &StartTaskDistance_attributes);
 8001574:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <main+0x1d0>)
 8001576:	2100      	movs	r1, #0
 8001578:	482a      	ldr	r0, [pc, #168]	@ (8001624 <main+0x1d4>)
 800157a:	f006 fc47 	bl	8007e0c <osThreadNew>
 800157e:	4603      	mov	r3, r0
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <main+0x1d8>)
 8001582:	6013      	str	r3, [r2, #0]
/* Start scheduler */
osKernelStart();
 8001584:	f006 fc1c 	bl	8007dc0 <osKernelStart>
/* We should never get here as control is now taken by the scheduler */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <main+0x138>
 800158c:	20000000 	.word	0x20000000
 8001590:	0800c75c 	.word	0x0800c75c
 8001594:	20000678 	.word	0x20000678
 8001598:	20000020 	.word	0x20000020
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000010 	.word	0x20000010
 80015a8:	0800d6d0 	.word	0x0800d6d0
 80015ac:	20000190 	.word	0x20000190
 80015b0:	0800c764 	.word	0x0800c764
 80015b4:	0800d568 	.word	0x0800d568
 80015b8:	0800172d 	.word	0x0800172d
 80015bc:	20000168 	.word	0x20000168
 80015c0:	0800d58c 	.word	0x0800d58c
 80015c4:	08001925 	.word	0x08001925
 80015c8:	2000016c 	.word	0x2000016c
 80015cc:	0800d5b0 	.word	0x0800d5b0
 80015d0:	080019a5 	.word	0x080019a5
 80015d4:	20000170 	.word	0x20000170
 80015d8:	0800d5d4 	.word	0x0800d5d4
 80015dc:	08001a8d 	.word	0x08001a8d
 80015e0:	20000174 	.word	0x20000174
 80015e4:	0800d5f8 	.word	0x0800d5f8
 80015e8:	08001acd 	.word	0x08001acd
 80015ec:	20000178 	.word	0x20000178
 80015f0:	0800d61c 	.word	0x0800d61c
 80015f4:	08001b35 	.word	0x08001b35
 80015f8:	2000017c 	.word	0x2000017c
 80015fc:	0800d640 	.word	0x0800d640
 8001600:	08001afd 	.word	0x08001afd
 8001604:	20000180 	.word	0x20000180
 8001608:	0800d664 	.word	0x0800d664
 800160c:	08001a55 	.word	0x08001a55
 8001610:	20000184 	.word	0x20000184
 8001614:	0800d688 	.word	0x0800d688
 8001618:	0800181d 	.word	0x0800181d
 800161c:	20000188 	.word	0x20000188
 8001620:	0800d6ac 	.word	0x0800d6ac
 8001624:	08001781 	.word	0x08001781
 8001628:	2000018c 	.word	0x2000018c

0800162c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2234      	movs	r2, #52	@ 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 febc 	bl	800b3b8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <SystemClock_Config+0xd4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <SystemClock_Config+0xd4>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <SystemClock_Config+0xd4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <SystemClock_Config+0xd8>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SystemClock_Config+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 336;
 80016a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fbe8 	bl	8004e90 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x9e>
{
  Error_Handler();
 80016c6:	f000 fb39 	bl	8001d3c <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 f856 	bl	8004798 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xca>
{
  Error_Handler();
 80016f2:	f000 fb23 	bl	8001d3c <Error_Handler>
}
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */
/* USER CODE END Callback 0 */
if (htim->Instance == TIM6) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
  HAL_IncTick();
 800171a:	f001 fae3 	bl	8002ce4 <HAL_IncTick>
}
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001000 	.word	0x40001000

0800172c <StartTaskButton>:
void StartTaskButton(void *argument) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001738:	480e      	ldr	r0, [pc, #56]	@ (8001774 <StartTaskButton+0x48>)
 800173a:	f002 fa2f 	bl	8003b9c <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f7      	bne.n	8001734 <StartTaskButton+0x8>
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <StartTaskButton+0x4c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d1f3      	bne.n	8001734 <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 800174c:	2032      	movs	r0, #50	@ 0x32
 800174e:	f001 fae9 	bl	8002d24 <HAL_Delay>
			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <StartTaskButton+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET);
 8001758:	bf00      	nop
 800175a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <StartTaskButton+0x48>)
 8001760:	f002 fa1c 	bl	8003b9c <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f7      	beq.n	800175a <StartTaskButton+0x2e>
			HAL_Delay(50); // Prevent multiple triggers
 800176a:	2032      	movs	r0, #50	@ 0x32
 800176c:	f001 fada 	bl	8002d24 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001770:	e7e0      	b.n	8001734 <StartTaskButton+0x8>
 8001772:	bf00      	nop
 8001774:	40020800 	.word	0x40020800
 8001778:	20000150 	.word	0x20000150
 800177c:	2000014c 	.word	0x2000014c

08001780 <StartTaskDistance>:
		}
	}
}

void StartTaskDistance(void *argument) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		 HCSR04_Read();  // Trigger distance measurement
 8001788:	f000 fab8 	bl	8001cfc <HCSR04_Read>
		 HAL_Delay(200);  // Delay to allow sensor to respond
 800178c:	20c8      	movs	r0, #200	@ 0xc8
 800178e:	f001 fac9 	bl	8002d24 <HAL_Delay>

		 char buffer[10];
		 SSD1306_Clear();
 8001792:	f000 fd12 	bl	80021ba <SSD1306_Clear>
		 SSD1306_GotoXY(0, 10);
 8001796:	210a      	movs	r1, #10
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fc55 	bl	8002048 <SSD1306_GotoXY>
		 SSD1306_Puts("Distance", &Font_11x18, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	4918      	ldr	r1, [pc, #96]	@ (8001804 <StartTaskDistance+0x84>)
 80017a2:	4819      	ldr	r0, [pc, #100]	@ (8001808 <StartTaskDistance+0x88>)
 80017a4:	f000 fce4 	bl	8002170 <SSD1306_Puts>
		 SSD1306_GotoXY(0, 30);
 80017a8:	211e      	movs	r1, #30
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fc4c 	bl	8002048 <SSD1306_GotoXY>
		 sprintf(buffer, "%d cm", Distance);
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <StartTaskDistance+0x8c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4915      	ldr	r1, [pc, #84]	@ (8001810 <StartTaskDistance+0x90>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 fc93 	bl	800b0e8 <siprintf>
		 SSD1306_Puts(buffer, &Font_11x18, 1);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2201      	movs	r2, #1
 80017c8:	490e      	ldr	r1, [pc, #56]	@ (8001804 <StartTaskDistance+0x84>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fcd0 	bl	8002170 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 80017d0:	f000 fb94 	bl	8001efc <SSD1306_UpdateScreen>

		 if(system_state == SYSTEM_ON && Distance < 30){
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <StartTaskDistance+0x94>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <StartTaskDistance+0x6a>
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <StartTaskDistance+0x8c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b1d      	cmp	r3, #29
 80017e2:	d802      	bhi.n	80017ea <StartTaskDistance+0x6a>
			 alarm_state = ALARM_ON;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <StartTaskDistance+0x98>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
		 }

		 if(alarm_state == ALARM_OFF){
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <StartTaskDistance+0x98>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <StartTaskDistance+0x78>
			 osDelay(200);
 80017f2:	20c8      	movs	r0, #200	@ 0xc8
 80017f4:	f006 fb9c 	bl	8007f30 <osDelay>
		 }
		 osDelay(500);  // Delay to avoid excessive updates
 80017f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017fc:	f006 fb98 	bl	8007f30 <osDelay>
	{
 8001800:	e7c2      	b.n	8001788 <StartTaskDistance+0x8>
 8001802:	bf00      	nop
 8001804:	20000000 	.word	0x20000000
 8001808:	0800c788 	.word	0x0800c788
 800180c:	20000165 	.word	0x20000165
 8001810:	0800c794 	.word	0x0800c794
 8001814:	20000150 	.word	0x20000150
 8001818:	2000014c 	.word	0x2000014c

0800181c <StartTaskUpdateWeb>:
		}
	}


void StartTaskUpdateWeb(void *argument) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    int prev_alarm_state = ALARM_OFF;  // Track previous state && prev_alarm_state == ALARM_OFF
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
    int prev_system_state = SYSTEM_ON;
 8001828:	2301      	movs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]

    for (;;) {
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4619      	mov	r1, r3
 8001834:	4835      	ldr	r0, [pc, #212]	@ (800190c <StartTaskUpdateWeb+0xf0>)
 8001836:	f009 fd39 	bl	800b2ac <iprintf>

        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 800183a:	4b33      	ldr	r3, [pc, #204]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10b      	bne.n	800185a <StartTaskUpdateWeb+0x3e>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d108      	bne.n	800185a <StartTaskUpdateWeb+0x3e>
            // Alarm just turned ON
            sendHTMLToLocalServer(localIP, intrusionHTML);
 8001848:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <StartTaskUpdateWeb+0xf4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a31      	ldr	r2, [pc, #196]	@ (8001914 <StartTaskUpdateWeb+0xf8>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc32 	bl	80010bc <sendHTMLToLocalServer>
        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8001858:	e04a      	b.n	80018f0 <StartTaskUpdateWeb+0xd4>
        }
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 800185a:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <StartTaskUpdateWeb+0x66>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <StartTaskUpdateWeb+0x66>
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <StartTaskUpdateWeb+0xfc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d108      	bne.n	8001882 <StartTaskUpdateWeb+0x66>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <StartTaskUpdateWeb+0xf4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a29      	ldr	r2, [pc, #164]	@ (800191c <StartTaskUpdateWeb+0x100>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fc1e 	bl	80010bc <sendHTMLToLocalServer>
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8001880:	e036      	b.n	80018f0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <StartTaskUpdateWeb+0x8e>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10c      	bne.n	80018aa <StartTaskUpdateWeb+0x8e>
 8001890:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <StartTaskUpdateWeb+0xfc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d108      	bne.n	80018aa <StartTaskUpdateWeb+0x8e>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <StartTaskUpdateWeb+0xf4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1f      	ldr	r2, [pc, #124]	@ (800191c <StartTaskUpdateWeb+0x100>)
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fc0a 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 80018a8:	e022      	b.n	80018f0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10b      	bne.n	80018ca <StartTaskUpdateWeb+0xae>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <StartTaskUpdateWeb+0xae>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <StartTaskUpdateWeb+0xf4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <StartTaskUpdateWeb+0x104>)
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fbfa 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 80018c8:	e012      	b.n	80018f0 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state == SYSTEM_OFF && system_state== SYSTEM_ON){
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <StartTaskUpdateWeb+0xd4>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <StartTaskUpdateWeb+0xd4>
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <StartTaskUpdateWeb+0xfc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <StartTaskUpdateWeb+0xd4>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <StartTaskUpdateWeb+0xf4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001920 <StartTaskUpdateWeb+0x104>)
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fbe6 	bl	80010bc <sendHTMLToLocalServer>
        }

        // Update previous state
        prev_alarm_state = alarm_state;
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <StartTaskUpdateWeb+0xec>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
        prev_system_state = system_state;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <StartTaskUpdateWeb+0xfc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60bb      	str	r3, [r7, #8]

        osDelay(1000);  // Delay before checking again
 80018fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001900:	f006 fb16 	bl	8007f30 <osDelay>
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8001904:	e792      	b.n	800182c <StartTaskUpdateWeb+0x10>
 8001906:	bf00      	nop
 8001908:	2000014c 	.word	0x2000014c
 800190c:	0800c79c 	.word	0x0800c79c
 8001910:	20000018 	.word	0x20000018
 8001914:	2000000c 	.word	0x2000000c
 8001918:	20000150 	.word	0x20000150
 800191c:	20000014 	.word	0x20000014
 8001920:	20000010 	.word	0x20000010

08001924 <StartTaskSystemButton>:
    }
}

void StartTaskSystemButton(void *argument) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
   for (;;) {
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 800192c:	2110      	movs	r1, #16
 800192e:	4819      	ldr	r0, [pc, #100]	@ (8001994 <StartTaskSystemButton+0x70>)
 8001930:	f002 f934 	bl	8003b9c <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f8      	bne.n	800192c <StartTaskSystemButton+0x8>
           HAL_Delay(50); // Debounce delay
 800193a:	2032      	movs	r0, #50	@ 0x32
 800193c:	f001 f9f2 	bl	8002d24 <HAL_Delay>
           osMutexAcquire(systemStateMutex, osWaitForever); // Lock mutex
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <StartTaskSystemButton+0x74>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001948:	4618      	mov	r0, r3
 800194a:	f006 fb92 	bl	8008072 <osMutexAcquire>
           system_state = !system_state;
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <StartTaskSystemButton+0x78>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf0c      	ite	eq
 8001956:	2301      	moveq	r3, #1
 8001958:	2300      	movne	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <StartTaskSystemButton+0x78>)
 8001960:	601a      	str	r2, [r3, #0]
           if (system_state == SYSTEM_OFF){
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <StartTaskSystemButton+0x78>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <StartTaskSystemButton+0x4c>
               alarm_state = ALARM_OFF;
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <StartTaskSystemButton+0x7c>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
           }
           osMutexRelease(systemStateMutex); // Release mutex
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <StartTaskSystemButton+0x74>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f006 fbc7 	bl	8008108 <osMutexRelease>
           // Wait for button release
           while (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET);
 800197a:	bf00      	nop
 800197c:	2110      	movs	r1, #16
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <StartTaskSystemButton+0x70>)
 8001980:	f002 f90c 	bl	8003b9c <HAL_GPIO_ReadPin>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f8      	beq.n	800197c <StartTaskSystemButton+0x58>
           HAL_Delay(50); // Prevent multiple triggers
 800198a:	2032      	movs	r0, #50	@ 0x32
 800198c:	f001 f9ca 	bl	8002d24 <HAL_Delay>
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001990:	e7cc      	b.n	800192c <StartTaskSystemButton+0x8>
 8001992:	bf00      	nop
 8001994:	40020800 	.word	0x40020800
 8001998:	20000190 	.word	0x20000190
 800199c:	20000150 	.word	0x20000150
 80019a0:	2000014c 	.word	0x2000014c

080019a4 <StartTaskLDR>:
       }
   }
}
void StartTaskLDR(void *argument) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
   int local_system_state = SYSTEM_OFF;  // Track the last known state
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
   for (;;) {
       // Acquire mutex before reading system_state
       osMutexAcquire(systemStateMutex, osWaitForever);
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <StartTaskLDR+0x9c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b8:	4618      	mov	r0, r3
 80019ba:	f006 fb5a 	bl	8008072 <osMutexAcquire>
       int current_system_state = system_state;
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <StartTaskLDR+0xa0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
       osMutexRelease(systemStateMutex);
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <StartTaskLDR+0x9c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f006 fb9d 	bl	8008108 <osMutexRelease>
       // Check if system just turned ON
       if (current_system_state == SYSTEM_ON && local_system_state == SYSTEM_OFF) {
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <StartTaskLDR+0x3e>
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <StartTaskLDR+0x3e>
           osDelay(2000);  // Delay before first LDR reading
 80019da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019de:	f006 faa7 	bl	8007f30 <osDelay>
       }
       // Update local state
       local_system_state = current_system_state;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	617b      	str	r3, [r7, #20]
       if (current_system_state == SYSTEM_ON) {
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d124      	bne.n	8001a36 <StartTaskLDR+0x92>
    	   if(alarm_state == ALARM_OFF){
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <StartTaskLDR+0xa4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <StartTaskLDR+0x56>
    	  			 osDelay(200);
 80019f4:	20c8      	movs	r0, #200	@ 0xc8
 80019f6:	f006 fa9b 	bl	8007f30 <osDelay>
    	  		 }
           uint32_t adcValue;
           HAL_ADC_Start(&hadc1);
 80019fa:	4814      	ldr	r0, [pc, #80]	@ (8001a4c <StartTaskLDR+0xa8>)
 80019fc:	f001 f9fa 	bl	8002df4 <HAL_ADC_Start>
           HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a04:	4811      	ldr	r0, [pc, #68]	@ (8001a4c <StartTaskLDR+0xa8>)
 8001a06:	f001 fafa 	bl	8002ffe <HAL_ADC_PollForConversion>
           adcValue = HAL_ADC_GetValue(&hadc1);
 8001a0a:	4810      	ldr	r0, [pc, #64]	@ (8001a4c <StartTaskLDR+0xa8>)
 8001a0c:	f001 fb82 	bl	8003114 <HAL_ADC_GetValue>
 8001a10:	60f8      	str	r0, [r7, #12]
           HAL_ADC_Stop(&hadc1);
 8001a12:	480e      	ldr	r0, [pc, #56]	@ (8001a4c <StartTaskLDR+0xa8>)
 8001a14:	f001 fac0 	bl	8002f98 <HAL_ADC_Stop>
           light_value = adcValue;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <StartTaskLDR+0xac>)
 8001a1c:	6013      	str	r3, [r2, #0]
           if (adcValue < 1500 && system_state == SYSTEM_ON) {
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d806      	bhi.n	8001a36 <StartTaskLDR+0x92>
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <StartTaskLDR+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d102      	bne.n	8001a36 <StartTaskLDR+0x92>
               alarm_state = ALARM_ON;
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <StartTaskLDR+0xa4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

           }
       }
       osDelay(500);  // Regular delay between reads
 8001a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a3a:	f006 fa79 	bl	8007f30 <osDelay>
   for (;;) {
 8001a3e:	e7b7      	b.n	80019b0 <StartTaskLDR+0xc>
 8001a40:	20000190 	.word	0x20000190
 8001a44:	20000150 	.word	0x20000150
 8001a48:	2000014c 	.word	0x2000014c
 8001a4c:	200000ac 	.word	0x200000ac
 8001a50:	20000008 	.word	0x20000008

08001a54 <StartTaskLaser>:
   }
}


void StartTaskLaser(void *argument) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <StartTaskLaser+0x30>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <StartTaskLaser+0x1c>
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2102      	movs	r1, #2
 8001a68:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <StartTaskLaser+0x34>)
 8001a6a:	f002 f8af 	bl	8003bcc <HAL_GPIO_WritePin>
 8001a6e:	e004      	b.n	8001a7a <StartTaskLaser+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2102      	movs	r1, #2
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <StartTaskLaser+0x34>)
 8001a76:	f002 f8a9 	bl	8003bcc <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001a7a:	2064      	movs	r0, #100	@ 0x64
 8001a7c:	f006 fa58 	bl	8007f30 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001a80:	e7ec      	b.n	8001a5c <StartTaskLaser+0x8>
 8001a82:	bf00      	nop
 8001a84:	20000150 	.word	0x20000150
 8001a88:	40020400 	.word	0x40020400

08001a8c <StartTaskBuzzer>:
   }
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <StartTaskBuzzer+0x38>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d1fb      	bne.n	8001a94 <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4809      	ldr	r0, [pc, #36]	@ (8001ac8 <StartTaskBuzzer+0x3c>)
 8001aa2:	f002 f893 	bl	8003bcc <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001aa6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001aaa:	f001 f93b 	bl	8002d24 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <StartTaskBuzzer+0x3c>)
 8001ab4:	f002 f88a 	bl	8003bcc <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001ab8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001abc:	f001 f932 	bl	8002d24 <HAL_Delay>
		if(alarm_state == ALARM_ON){
 8001ac0:	e7e8      	b.n	8001a94 <StartTaskBuzzer+0x8>
 8001ac2:	bf00      	nop
 8001ac4:	2000014c 	.word	0x2000014c
 8001ac8:	40020400 	.word	0x40020400

08001acc <StartTaskLed>:
		}
// Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	for(;;){
		if(alarm_state==ALARM_ON){
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <StartTaskLed+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <StartTaskLed+0x1c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2120      	movs	r1, #32
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <StartTaskLed+0x2c>)
 8001ae2:	f002 f873 	bl	8003bcc <HAL_GPIO_WritePin>
 8001ae6:	e7f5      	b.n	8001ad4 <StartTaskLed+0x8>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2120      	movs	r1, #32
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <StartTaskLed+0x2c>)
 8001aee:	f002 f86d 	bl	8003bcc <HAL_GPIO_WritePin>
		if(alarm_state==ALARM_ON){
 8001af2:	e7ef      	b.n	8001ad4 <StartTaskLed+0x8>
 8001af4:	2000014c 	.word	0x2000014c
 8001af8:	40020000 	.word	0x40020000

08001afc <StartTaskSystemLed>:
		}
		  // LED ON
	}
}
void StartTaskSystemLed(void *argument) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <StartTaskSystemLed+0x30>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <StartTaskSystemLed+0x1c>
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2140      	movs	r1, #64	@ 0x40
 8001b10:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <StartTaskSystemLed+0x34>)
 8001b12:	f002 f85b 	bl	8003bcc <HAL_GPIO_WritePin>
 8001b16:	e004      	b.n	8001b22 <StartTaskSystemLed+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2140      	movs	r1, #64	@ 0x40
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <StartTaskSystemLed+0x34>)
 8001b1e:	f002 f855 	bl	8003bcc <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001b22:	2064      	movs	r0, #100	@ 0x64
 8001b24:	f006 fa04 	bl	8007f30 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001b28:	e7ec      	b.n	8001b04 <StartTaskSystemLed+0x8>
 8001b2a:	bf00      	nop
 8001b2c:	20000150 	.word	0x20000150
 8001b30:	40020000 	.word	0x40020000

08001b34 <StartTaskServo>:
   }
}
void StartTaskServo(void *argument) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		osDelay(1000);
 8001b3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b40:	f006 f9f6 	bl	8007f30 <osDelay>
		 if(alarm_state == ALARM_ON && door_state == DOOR_OPEN) {
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <StartTaskServo+0x98>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11d      	bne.n	8001b88 <StartTaskServo+0x54>
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <StartTaskServo+0x9c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d119      	bne.n	8001b88 <StartTaskServo+0x54>
		            // Move both servos 90° to the left
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b54:	2100      	movs	r1, #0
 8001b56:	481f      	ldr	r0, [pc, #124]	@ (8001bd4 <StartTaskServo+0xa0>)
 8001b58:	f003 fd52 	bl	8005600 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	481e      	ldr	r0, [pc, #120]	@ (8001bd8 <StartTaskServo+0xa4>)
 8001b60:	f003 fd4e 	bl	8005600 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);  // 90° for first servo
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <StartTaskServo+0xa0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b6c:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);  // 90° for second servo (same direction)
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <StartTaskServo+0xa4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001b78:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b7c:	f001 f8d2 	bl	8002d24 <HAL_Delay>
		            door_state = DOOR_CLOSED;
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <StartTaskServo+0x9c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e020      	b.n	8001bca <StartTaskServo+0x96>
		        }
		        else if(alarm_state == ALARM_OFF && door_state == DOOR_CLOSED) {
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <StartTaskServo+0x98>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1d5      	bne.n	8001b3c <StartTaskServo+0x8>
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <StartTaskServo+0x9c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d1d1      	bne.n	8001b3c <StartTaskServo+0x8>
		            // Move both servos back to 0° (neutral)
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480e      	ldr	r0, [pc, #56]	@ (8001bd4 <StartTaskServo+0xa0>)
 8001b9c:	f003 fd30 	bl	8005600 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <StartTaskServo+0xa4>)
 8001ba4:	f003 fd2c 	bl	8005600 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);  // Back to 0° for first servo
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <StartTaskServo+0xa0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2500);   // Back to 0° for second servo (same direction)
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <StartTaskServo+0xa4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001bba:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001bbc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bc0:	f001 f8b0 	bl	8002d24 <HAL_Delay>
		            door_state = DOOR_OPEN;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	@ (8001bd0 <StartTaskServo+0x9c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001bca:	e7b7      	b.n	8001b3c <StartTaskServo+0x8>
 8001bcc:	2000014c 	.word	0x2000014c
 8001bd0:	20000154 	.word	0x20000154
 8001bd4:	20000630 	.word	0x20000630
 8001bd8:	200005e8 	.word	0x200005e8
 8001bdc:	00000000 	.word	0x00000000

08001be0 <HAL_TIM_IC_CaptureCallback>:
		        }
	}
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt is from channel 1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7f1b      	ldrb	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d170      	bne.n	8001cd2 <HAL_TIM_IC_CaptureCallback+0xf2>
        if (Is_First_Captured == 0) { // If it's the first edge (rising)
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11a      	bne.n	8001c2e <HAL_TIM_IC_CaptureCallback+0x4e>
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read first value
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f004 fa56 	bl	80060ac <HAL_TIM_ReadCapturedValue>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a3a      	ldr	r2, [pc, #232]	@ (8001cec <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c04:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Switch to falling edge
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a1a      	ldr	r2, [r3, #32]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020a 	bic.w	r2, r2, #10
 8001c1a:	621a      	str	r2, [r3, #32]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a1a      	ldr	r2, [r3, #32]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0202 	orr.w	r2, r2, #2
 8001c2a:	621a      	str	r2, [r3, #32]
            Distance = Difference * 0.034 / 2; // Convert to cm

            Is_First_Captured = 0; // Reset flag for next measurement
        }
    }
}
 8001c2c:	e051      	b.n	8001cd2 <HAL_TIM_IC_CaptureCallback+0xf2>
        } else if (Is_First_Captured == 1) { // If it's the second edge (falling)
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d14d      	bne.n	8001cd2 <HAL_TIM_IC_CaptureCallback+0xf2>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read second value
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f004 fa37 	bl	80060ac <HAL_TIM_ReadCapturedValue>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c42:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // Reset to rising edge
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020a 	bic.w	r2, r2, #10
 8001c52:	621a      	str	r2, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a12      	ldr	r2, [r2, #32]
 8001c5e:	621a      	str	r2, [r3, #32]
            if (IC_Val2 > IC_Val1) {
 8001c60:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d907      	bls.n	8001c7c <HAL_TIM_IC_CaptureCallback+0x9c>
                Difference = IC_Val2 - IC_Val1;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e009      	b.n	8001c90 <HAL_TIM_IC_CaptureCallback+0xb0>
                Difference = (0xFFFF - IC_Val1) + IC_Val2;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c8a:	33ff      	adds	r3, #255	@ 0xff
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c8e:	6013      	str	r3, [r2, #0]
            Distance = Difference * 0.034 / 2; // Convert to cm
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc55 	bl	8000544 <__aeabi_ui2d>
 8001c9a:	a311      	add	r3, pc, #68	@ (adr r3, 8001ce0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcca 	bl	8000638 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cb4:	f7fe fdea 	bl	800088c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe fecc 	bl	8000a5c <__aeabi_d2uiz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001cca:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // Reset flag for next measurement
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	b020c49c 	.word	0xb020c49c
 8001ce4:	3fa16872 	.word	0x3fa16872
 8001ce8:	20000164 	.word	0x20000164
 8001cec:	20000158 	.word	0x20000158
 8001cf0:	2000015c 	.word	0x2000015c
 8001cf4:	20000160 	.word	0x20000160
 8001cf8:	20000165 	.word	0x20000165

08001cfc <HCSR04_Read>:


void HCSR04_Read (void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // Set TRIG pin HIGH
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d06:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <HCSR04_Read+0x34>)
 8001d08:	f001 ff60 	bl	8003bcc <HAL_GPIO_WritePin>
    delay(10);  // 10µs pulse
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7ff fb85 	bl	800141c <delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // Set TRIG pin LOW
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <HCSR04_Read+0x34>)
 8001d1a:	f001 ff57 	bl	8003bcc <HAL_GPIO_WritePin>

    // Reset first capture flag
    Is_First_Captured = 0;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HCSR04_Read+0x38>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

    // Start the input capture interrupt
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d24:	2100      	movs	r1, #0
 8001d26:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <HCSR04_Read+0x3c>)
 8001d28:	f003 fd82 	bl	8005830 <HAL_TIM_IC_Start_IT>
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40020800 	.word	0x40020800
 8001d34:	20000164 	.word	0x20000164
 8001d38:	20000678 	.word	0x20000678

08001d3c <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <Error_Handler+0x8>

08001d48 <_write>:
{
}
/* USER CODE END Error_Handler_Debug */
}
int _write(int file, char *ptr, int len) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <_write+0x28>)
 8001d60:	f004 ff7e 	bl	8006c60 <HAL_UART_Transmit>
  return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000708 	.word	0x20000708

08001d74 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d7a:	f000 fa27 	bl	80021cc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d7e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001d82:	2201      	movs	r2, #1
 8001d84:	2178      	movs	r1, #120	@ 0x78
 8001d86:	485b      	ldr	r0, [pc, #364]	@ (8001ef4 <SSD1306_Init+0x180>)
 8001d88:	f002 f97c 	bl	8004084 <HAL_I2C_IsDeviceReady>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e0a9      	b.n	8001eea <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001d96:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001d9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d9c:	e002      	b.n	8001da4 <SSD1306_Init+0x30>
		p--;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001daa:	22ae      	movs	r2, #174	@ 0xae
 8001dac:	2100      	movs	r1, #0
 8001dae:	2078      	movs	r0, #120	@ 0x78
 8001db0:	f000 fa88 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001db4:	2220      	movs	r2, #32
 8001db6:	2100      	movs	r1, #0
 8001db8:	2078      	movs	r0, #120	@ 0x78
 8001dba:	f000 fa83 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2078      	movs	r0, #120	@ 0x78
 8001dc4:	f000 fa7e 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001dc8:	22b0      	movs	r2, #176	@ 0xb0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2078      	movs	r0, #120	@ 0x78
 8001dce:	f000 fa79 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001dd2:	22c8      	movs	r2, #200	@ 0xc8
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2078      	movs	r0, #120	@ 0x78
 8001dd8:	f000 fa74 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2078      	movs	r0, #120	@ 0x78
 8001de2:	f000 fa6f 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001de6:	2210      	movs	r2, #16
 8001de8:	2100      	movs	r1, #0
 8001dea:	2078      	movs	r0, #120	@ 0x78
 8001dec:	f000 fa6a 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001df0:	2240      	movs	r2, #64	@ 0x40
 8001df2:	2100      	movs	r1, #0
 8001df4:	2078      	movs	r0, #120	@ 0x78
 8001df6:	f000 fa65 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001dfa:	2281      	movs	r2, #129	@ 0x81
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2078      	movs	r0, #120	@ 0x78
 8001e00:	f000 fa60 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e04:	22ff      	movs	r2, #255	@ 0xff
 8001e06:	2100      	movs	r1, #0
 8001e08:	2078      	movs	r0, #120	@ 0x78
 8001e0a:	f000 fa5b 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e0e:	22a1      	movs	r2, #161	@ 0xa1
 8001e10:	2100      	movs	r1, #0
 8001e12:	2078      	movs	r0, #120	@ 0x78
 8001e14:	f000 fa56 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e18:	22a6      	movs	r2, #166	@ 0xa6
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2078      	movs	r0, #120	@ 0x78
 8001e1e:	f000 fa51 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e22:	22a8      	movs	r2, #168	@ 0xa8
 8001e24:	2100      	movs	r1, #0
 8001e26:	2078      	movs	r0, #120	@ 0x78
 8001e28:	f000 fa4c 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e2c:	223f      	movs	r2, #63	@ 0x3f
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2078      	movs	r0, #120	@ 0x78
 8001e32:	f000 fa47 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e36:	22a4      	movs	r2, #164	@ 0xa4
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2078      	movs	r0, #120	@ 0x78
 8001e3c:	f000 fa42 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e40:	22d3      	movs	r2, #211	@ 0xd3
 8001e42:	2100      	movs	r1, #0
 8001e44:	2078      	movs	r0, #120	@ 0x78
 8001e46:	f000 fa3d 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2078      	movs	r0, #120	@ 0x78
 8001e50:	f000 fa38 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e54:	22d5      	movs	r2, #213	@ 0xd5
 8001e56:	2100      	movs	r1, #0
 8001e58:	2078      	movs	r0, #120	@ 0x78
 8001e5a:	f000 fa33 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e5e:	22f0      	movs	r2, #240	@ 0xf0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	@ 0x78
 8001e64:	f000 fa2e 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e68:	22d9      	movs	r2, #217	@ 0xd9
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	@ 0x78
 8001e6e:	f000 fa29 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e72:	2222      	movs	r2, #34	@ 0x22
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	@ 0x78
 8001e78:	f000 fa24 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e7c:	22da      	movs	r2, #218	@ 0xda
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	@ 0x78
 8001e82:	f000 fa1f 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e86:	2212      	movs	r2, #18
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	@ 0x78
 8001e8c:	f000 fa1a 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e90:	22db      	movs	r2, #219	@ 0xdb
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	@ 0x78
 8001e96:	f000 fa15 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	@ 0x78
 8001ea0:	f000 fa10 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001ea4:	228d      	movs	r2, #141	@ 0x8d
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	@ 0x78
 8001eaa:	f000 fa0b 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001eae:	2214      	movs	r2, #20
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	@ 0x78
 8001eb4:	f000 fa06 	bl	80022c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001eb8:	22af      	movs	r2, #175	@ 0xaf
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	@ 0x78
 8001ebe:	f000 fa01 	bl	80022c4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ec2:	222e      	movs	r2, #46	@ 0x2e
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	@ 0x78
 8001ec8:	f000 f9fc 	bl	80022c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 f843 	bl	8001f58 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001ed2:	f000 f813 	bl	8001efc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <SSD1306_Init+0x184>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SSD1306_Init+0x184>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SSD1306_Init+0x184>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200000f8 	.word	0x200000f8
 8001ef8:	20000594 	.word	0x20000594

08001efc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	e01d      	b.n	8001f44 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	3b50      	subs	r3, #80	@ 0x50
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2100      	movs	r1, #0
 8001f12:	2078      	movs	r0, #120	@ 0x78
 8001f14:	f000 f9d6 	bl	80022c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2078      	movs	r0, #120	@ 0x78
 8001f1e:	f000 f9d1 	bl	80022c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f22:	2210      	movs	r2, #16
 8001f24:	2100      	movs	r1, #0
 8001f26:	2078      	movs	r0, #120	@ 0x78
 8001f28:	f000 f9cc 	bl	80022c4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <SSD1306_UpdateScreen+0x58>)
 8001f32:	441a      	add	r2, r3
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	2140      	movs	r1, #64	@ 0x40
 8001f38:	2078      	movs	r0, #120	@ 0x78
 8001f3a:	f000 f95d 	bl	80021f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	3301      	adds	r3, #1
 8001f42:	71fb      	strb	r3, [r7, #7]
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	d9de      	bls.n	8001f08 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000194 	.word	0x20000194

08001f58 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <SSD1306_Fill+0x14>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <SSD1306_Fill+0x16>
 8001f6c:	23ff      	movs	r3, #255	@ 0xff
 8001f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f72:	4619      	mov	r1, r3
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <SSD1306_Fill+0x2c>)
 8001f76:	f009 fa1f 	bl	800b3b8 <memset>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000194 	.word	0x20000194

08001f88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
 8001f92:	460b      	mov	r3, r1
 8001f94:	80bb      	strh	r3, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	70fb      	strb	r3, [r7, #3]
	if (
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f9e:	d848      	bhi.n	8002032 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001fa0:	88bb      	ldrh	r3, [r7, #4]
 8001fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fa4:	d845      	bhi.n	8002032 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001fa6:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <SSD1306_DrawPixel+0xb8>)
 8001fa8:	791b      	ldrb	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11a      	bne.n	8001ff8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	08db      	lsrs	r3, r3, #3
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	01db      	lsls	r3, r3, #7
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <SSD1306_DrawPixel+0xbc>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	b25a      	sxtb	r2, r3
 8001fd6:	88bb      	ldrh	r3, [r7, #4]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b259      	sxtb	r1, r3
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	4603      	mov	r3, r0
 8001fec:	01db      	lsls	r3, r3, #7
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2c9      	uxtb	r1, r1
 8001ff2:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <SSD1306_DrawPixel+0xbc>)
 8001ff4:	54d1      	strb	r1, [r2, r3]
 8001ff6:	e01d      	b.n	8002034 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	b298      	uxth	r0, r3
 8002000:	4603      	mov	r3, r0
 8002002:	01db      	lsls	r3, r3, #7
 8002004:	4413      	add	r3, r2
 8002006:	4a0f      	ldr	r2, [pc, #60]	@ (8002044 <SSD1306_DrawPixel+0xbc>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	b25a      	sxtb	r2, r3
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	b25b      	sxtb	r3, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	b25b      	sxtb	r3, r3
 800201e:	4013      	ands	r3, r2
 8002020:	b259      	sxtb	r1, r3
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	4603      	mov	r3, r0
 8002026:	01db      	lsls	r3, r3, #7
 8002028:	4413      	add	r3, r2
 800202a:	b2c9      	uxtb	r1, r1
 800202c:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <SSD1306_DrawPixel+0xbc>)
 800202e:	54d1      	strb	r1, [r2, r3]
 8002030:	e000      	b.n	8002034 <SSD1306_DrawPixel+0xac>
		return;
 8002032:	bf00      	nop
	}
}
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000594 	.word	0x20000594
 8002044:	20000194 	.word	0x20000194

08002048 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	80fb      	strh	r3, [r7, #6]
 8002054:	4613      	mov	r3, r2
 8002056:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002058:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <SSD1306_GotoXY+0x28>)
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800205e:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <SSD1306_GotoXY+0x28>)
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	8053      	strh	r3, [r2, #2]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000594 	.word	0x20000594

08002074 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <SSD1306_Putc+0xf8>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
	if (
 8002090:	2b7f      	cmp	r3, #127	@ 0x7f
 8002092:	dc07      	bgt.n	80020a4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <SSD1306_Putc+0xf8>)
 8002096:	885b      	ldrh	r3, [r3, #2]
 8002098:	461a      	mov	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80020a2:	dd01      	ble.n	80020a8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e05d      	b.n	8002164 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e04b      	b.n	8002146 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	3b20      	subs	r3, #32
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	7849      	ldrb	r1, [r1, #1]
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	440b      	add	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e030      	b.n	8002134 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d010      	beq.n	8002104 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020e2:	4b22      	ldr	r3, [pc, #136]	@ (800216c <SSD1306_Putc+0xf8>)
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	b298      	uxth	r0, r3
 80020ee:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <SSD1306_Putc+0xf8>)
 80020f0:	885a      	ldrh	r2, [r3, #2]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	79ba      	ldrb	r2, [r7, #6]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7ff ff43 	bl	8001f88 <SSD1306_DrawPixel>
 8002102:	e014      	b.n	800212e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <SSD1306_Putc+0xf8>)
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b298      	uxth	r0, r3
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <SSD1306_Putc+0xf8>)
 8002112:	885a      	ldrh	r2, [r3, #2]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4413      	add	r3, r2
 800211a:	b299      	uxth	r1, r3
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff ff2d 	bl	8001f88 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	3301      	adds	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4293      	cmp	r3, r2
 800213e:	d3c8      	bcc.n	80020d2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	461a      	mov	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4293      	cmp	r3, r2
 8002150:	d3ad      	bcc.n	80020ae <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <SSD1306_Putc+0xf8>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b03      	ldr	r3, [pc, #12]	@ (800216c <SSD1306_Putc+0xf8>)
 8002160:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002162:	79fb      	ldrb	r3, [r7, #7]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000594 	.word	0x20000594

08002170 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800217e:	e012      	b.n	80021a6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff73 	bl	8002074 <SSD1306_Putc>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d002      	beq.n	80021a0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	e008      	b.n	80021b2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e8      	bne.n	8002180 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	781b      	ldrb	r3, [r3, #0]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff feca 	bl	8001f58 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021c4:	f7ff fe9a 	bl	8001efc <SSD1306_UpdateScreen>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <ssd1306_I2C_Init+0x28>)
 80021d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021d6:	e002      	b.n	80021de <ssd1306_I2C_Init+0x12>
		p--;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f9      	bne.n	80021d8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	0003d090 	.word	0x0003d090

080021f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b0c7      	sub	sp, #284	@ 0x11c
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	4604      	mov	r4, r0
 8002200:	4608      	mov	r0, r1
 8002202:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002206:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800220a:	600a      	str	r2, [r1, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002212:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002216:	4622      	mov	r2, r4
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800221e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002222:	4602      	mov	r2, r0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800222a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800222e:	460a      	mov	r2, r1
 8002230:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800223a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800223e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800224c:	e015      	b.n	800227a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800224e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002252:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002256:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	441a      	add	r2, r3
 800225e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002262:	3301      	adds	r3, #1
 8002264:	7811      	ldrb	r1, [r2, #0]
 8002266:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800226a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800226e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002270:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002274:	3301      	adds	r3, #1
 8002276:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800227a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800227e:	b29b      	uxth	r3, r3
 8002280:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002284:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d8df      	bhi.n	800224e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800228e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002292:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b299      	uxth	r1, r3
 800229a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800229e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f107 020c 	add.w	r2, r7, #12
 80022ac:	200a      	movs	r0, #10
 80022ae:	9000      	str	r0, [sp, #0]
 80022b0:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80022b2:	f001 fde9 	bl	8003e88 <HAL_I2C_Master_Transmit>
}
 80022b6:	bf00      	nop
 80022b8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	200000f8 	.word	0x200000f8

080022c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	460b      	mov	r3, r1
 80022d0:	71bb      	strb	r3, [r7, #6]
 80022d2:	4613      	mov	r3, r2
 80022d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022da:	797b      	ldrb	r3, [r7, #5]
 80022dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	f107 020c 	add.w	r2, r7, #12
 80022e6:	230a      	movs	r3, #10
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2302      	movs	r3, #2
 80022ec:	4803      	ldr	r0, [pc, #12]	@ (80022fc <ssd1306_I2C_Write+0x38>)
 80022ee:	f001 fdcb 	bl	8003e88 <HAL_I2C_Master_Transmit>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200000f8 	.word	0x200000f8

08002300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_MspInit+0x54>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <HAL_MspInit+0x54>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_MspInit+0x54>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_MspInit+0x54>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <HAL_MspInit+0x54>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_MspInit+0x54>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	210f      	movs	r1, #15
 8002342:	f06f 0001 	mvn.w	r0, #1
 8002346:	f001 f9d9 	bl	80036fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	@ 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	4b33      	ldr	r3, [pc, #204]	@ (800243c <HAL_InitTick+0xe4>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	4a32      	ldr	r2, [pc, #200]	@ (800243c <HAL_InitTick+0xe4>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
 8002378:	4b30      	ldr	r3, [pc, #192]	@ (800243c <HAL_InitTick+0xe4>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002384:	f107 0210 	add.w	r2, r7, #16
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f002 fb1c 	bl	80049cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800239e:	f002 faed 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 80023a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80023a4:	e004      	b.n	80023b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023a6:	f002 fae9 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 80023aa:	4603      	mov	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b2:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <HAL_InitTick+0xe8>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	3b01      	subs	r3, #1
 80023bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_InitTick+0xec>)
 80023c0:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <HAL_InitTick+0xf0>)
 80023c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <HAL_InitTick+0xec>)
 80023c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <HAL_InitTick+0xec>)
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_InitTick+0xec>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_InitTick+0xec>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_InitTick+0xec>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023e4:	4817      	ldr	r0, [pc, #92]	@ (8002444 <HAL_InitTick+0xec>)
 80023e6:	f002 fff1 	bl	80053cc <HAL_TIM_Base_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11b      	bne.n	8002430 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023f8:	4812      	ldr	r0, [pc, #72]	@ (8002444 <HAL_InitTick+0xec>)
 80023fa:	f003 f837 	bl	800546c <HAL_TIM_Base_Start_IT>
 80023fe:	4603      	mov	r3, r0
 8002400:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002404:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002408:	2b00      	cmp	r3, #0
 800240a:	d111      	bne.n	8002430 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800240c:	2036      	movs	r0, #54	@ 0x36
 800240e:	f001 f991 	bl	8003734 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d808      	bhi.n	800242a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	2036      	movs	r0, #54	@ 0x36
 800241e:	f001 f96d 	bl	80036fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <HAL_InitTick+0xf4>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e002      	b.n	8002430 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002430:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002434:	4618      	mov	r0, r3
 8002436:	3738      	adds	r7, #56	@ 0x38
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	431bde83 	.word	0x431bde83
 8002444:	2000059c 	.word	0x2000059c
 8002448:	40001000 	.word	0x40001000
 800244c:	20000028 	.word	0x20000028

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <NMI_Handler+0x4>

08002458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <HardFault_Handler+0x4>

08002460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <MemManage_Handler+0x4>

08002468 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <UsageFault_Handler+0x4>

08002478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <TIM3_IRQHandler+0x10>)
 800248e:	f003 faf7 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000678 	.word	0x20000678

0800249c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a0:	4802      	ldr	r0, [pc, #8]	@ (80024ac <USART1_IRQHandler+0x10>)
 80024a2:	f004 fcff 	bl	8006ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200006c0 	.word	0x200006c0

080024b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024b4:	4802      	ldr	r0, [pc, #8]	@ (80024c0 <TIM6_DAC_IRQHandler+0x10>)
 80024b6:	f003 fae3 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000059c 	.word	0x2000059c

080024c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e00a      	b.n	80024ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d6:	f3af 8000 	nop.w
 80024da:	4601      	mov	r1, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60ba      	str	r2, [r7, #8]
 80024e2:	b2ca      	uxtb	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dbf0      	blt.n	80024d6 <_read+0x12>
  }

  return len;
 80024f4:	687b      	ldr	r3, [r7, #4]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002526:	605a      	str	r2, [r3, #4]
  return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <_isatty>:

int _isatty(int file)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <_sbrk+0x5c>)
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <_sbrk+0x60>)
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <_sbrk+0x64>)
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <_sbrk+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d207      	bcs.n	80025a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002598:	f008 ff16 	bl	800b3c8 <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025a6:	e009      	b.n	80025bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <_sbrk+0x64>)
 80025b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20020000 	.word	0x20020000
 80025c8:	00000400 	.word	0x00000400
 80025cc:	200005e4 	.word	0x200005e4
 80025d0:	200051f0 	.word	0x200051f0

080025d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <SystemInit+0x20>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <SystemInit+0x20>)
 80025e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b096      	sub	sp, #88	@ 0x58
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	615a      	str	r2, [r3, #20]
 8002628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2220      	movs	r2, #32
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f008 fec1 	bl	800b3b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002636:	4b3f      	ldr	r3, [pc, #252]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002638:	4a3f      	ldr	r2, [pc, #252]	@ (8002738 <MX_TIM1_Init+0x140>)
 800263a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800263c:	4b3d      	ldr	r3, [pc, #244]	@ (8002734 <MX_TIM1_Init+0x13c>)
 800263e:	2253      	movs	r2, #83	@ 0x53
 8002640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002648:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <MX_TIM1_Init+0x13c>)
 800264a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800264e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002656:	4b37      	ldr	r3, [pc, #220]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b35      	ldr	r3, [pc, #212]	@ (8002734 <MX_TIM1_Init+0x13c>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002662:	4834      	ldr	r0, [pc, #208]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002664:	f002 feb2 	bl	80053cc <HAL_TIM_Base_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800266e:	f7ff fb65 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002676:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002678:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800267c:	4619      	mov	r1, r3
 800267e:	482d      	ldr	r0, [pc, #180]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002680:	f003 fc4c 	bl	8005f1c <HAL_TIM_ConfigClockSource>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800268a:	f7ff fb57 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800268e:	4829      	ldr	r0, [pc, #164]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002690:	f002 ff5c 	bl	800554c <HAL_TIM_PWM_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800269a:	f7ff fb4f 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026aa:	4619      	mov	r1, r3
 80026ac:	4821      	ldr	r0, [pc, #132]	@ (8002734 <MX_TIM1_Init+0x13c>)
 80026ae:	f004 f9a5 	bl	80069fc <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80026b8:	f7ff fb40 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026bc:	2360      	movs	r3, #96	@ 0x60
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 80026c0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ca:	2300      	movs	r3, #0
 80026cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	4814      	ldr	r0, [pc, #80]	@ (8002734 <MX_TIM1_Init+0x13c>)
 80026e4:	f003 fb58 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80026ee:	f7ff fb25 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800270a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4807      	ldr	r0, [pc, #28]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002716:	f004 f9ed 	bl	8006af4 <HAL_TIMEx_ConfigBreakDeadTime>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002720:	f7ff fb0c 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002724:	4803      	ldr	r0, [pc, #12]	@ (8002734 <MX_TIM1_Init+0x13c>)
 8002726:	f000 f959 	bl	80029dc <HAL_TIM_MspPostInit>

}
 800272a:	bf00      	nop
 800272c:	3758      	adds	r7, #88	@ 0x58
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200005e8 	.word	0x200005e8
 8002738:	40010000 	.word	0x40010000

0800273c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	@ 0x38
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
 8002768:	615a      	str	r2, [r3, #20]
 800276a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800276c:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <MX_TIM2_Init+0xe8>)
 800276e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <MX_TIM2_Init+0xe8>)
 8002776:	2253      	movs	r2, #83	@ 0x53
 8002778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <MX_TIM2_Init+0xe8>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002780:	4b28      	ldr	r3, [pc, #160]	@ (8002824 <MX_TIM2_Init+0xe8>)
 8002782:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002788:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <MX_TIM2_Init+0xe8>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <MX_TIM2_Init+0xe8>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002794:	4823      	ldr	r0, [pc, #140]	@ (8002824 <MX_TIM2_Init+0xe8>)
 8002796:	f002 fe19 	bl	80053cc <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80027a0:	f7ff facc 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ae:	4619      	mov	r1, r3
 80027b0:	481c      	ldr	r0, [pc, #112]	@ (8002824 <MX_TIM2_Init+0xe8>)
 80027b2:	f003 fbb3 	bl	8005f1c <HAL_TIM_ConfigClockSource>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80027bc:	f7ff fabe 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027c0:	4818      	ldr	r0, [pc, #96]	@ (8002824 <MX_TIM2_Init+0xe8>)
 80027c2:	f002 fec3 	bl	800554c <HAL_TIM_PWM_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027cc:	f7ff fab6 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d8:	f107 0320 	add.w	r3, r7, #32
 80027dc:	4619      	mov	r1, r3
 80027de:	4811      	ldr	r0, [pc, #68]	@ (8002824 <MX_TIM2_Init+0xe8>)
 80027e0:	f004 f90c 	bl	80069fc <HAL_TIMEx_MasterConfigSynchronization>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027ea:	f7ff faa7 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ee:	2360      	movs	r3, #96	@ 0x60
 80027f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80027f2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80027f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	4807      	ldr	r0, [pc, #28]	@ (8002824 <MX_TIM2_Init+0xe8>)
 8002808:	f003 fac6 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002812:	f7ff fa93 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002816:	4803      	ldr	r0, [pc, #12]	@ (8002824 <MX_TIM2_Init+0xe8>)
 8002818:	f000 f8e0 	bl	80029dc <HAL_TIM_MspPostInit>

}
 800281c:	bf00      	nop
 800281e:	3738      	adds	r7, #56	@ 0x38
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000630 	.word	0x20000630

08002828 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002838:	463b      	mov	r3, r7
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002844:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 8002846:	4a21      	ldr	r2, [pc, #132]	@ (80028cc <MX_TIM3_Init+0xa4>)
 8002848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800284a:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 800284c:	2247      	movs	r2, #71	@ 0x47
 800284e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002856:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 8002858:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800285c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285e:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800286a:	4817      	ldr	r0, [pc, #92]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 800286c:	f002 ff90 	bl	8005790 <HAL_TIM_IC_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002876:	f7ff fa61 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4619      	mov	r1, r3
 8002888:	480f      	ldr	r0, [pc, #60]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 800288a:	f004 f8b7 	bl	80069fc <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002894:	f7ff fa52 	bl	8001d3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800289c:	2301      	movs	r3, #1
 800289e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028a8:	463b      	mov	r3, r7
 80028aa:	2200      	movs	r2, #0
 80028ac:	4619      	mov	r1, r3
 80028ae:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <MX_TIM3_Init+0xa0>)
 80028b0:	f003 f9d6 	bl	8005c60 <HAL_TIM_IC_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80028ba:	f7ff fa3f 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000678 	.word	0x20000678
 80028cc:	40000400 	.word	0x40000400

080028d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_TIM_Base_MspInit+0x64>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10e      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <HAL_TIM_Base_MspInit+0x68>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <HAL_TIM_Base_MspInit+0x68>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_TIM_Base_MspInit+0x68>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028fe:	e012      	b.n	8002926 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002908:	d10d      	bne.n	8002926 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_TIM_Base_MspInit+0x68>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <HAL_TIM_Base_MspInit+0x68>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_TIM_Base_MspInit+0x68>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_IC_MspInit+0x94>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d133      	bne.n	80029c6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <HAL_TIM_IC_MspInit+0x98>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <HAL_TIM_IC_MspInit+0x98>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6413      	str	r3, [r2, #64]	@ 0x40
 800296e:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_TIM_IC_MspInit+0x98>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b15      	ldr	r3, [pc, #84]	@ (80029d4 <HAL_TIM_IC_MspInit+0x98>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <HAL_TIM_IC_MspInit+0x98>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_TIM_IC_MspInit+0x98>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002996:	2340      	movs	r3, #64	@ 0x40
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029a6:	2302      	movs	r3, #2
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <HAL_TIM_IC_MspInit+0x9c>)
 80029b2:	f000 ff5f 	bl	8003874 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2105      	movs	r1, #5
 80029ba:	201d      	movs	r0, #29
 80029bc:	f000 fe9e 	bl	80036fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029c0:	201d      	movs	r0, #29
 80029c2:	f000 feb7 	bl	8003734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020800 	.word	0x40020800

080029dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	@ 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a25      	ldr	r2, [pc, #148]	@ (8002a90 <HAL_TIM_MspPostInit+0xb4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d11f      	bne.n	8002a3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_TIM_MspPostInit+0xb8>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <HAL_TIM_MspPostInit+0xb8>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_TIM_MspPostInit+0xb8>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	4818      	ldr	r0, [pc, #96]	@ (8002a98 <HAL_TIM_MspPostInit+0xbc>)
 8002a38:	f000 ff1c 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a3c:	e023      	b.n	8002a86 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a46:	d11e      	bne.n	8002a86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_TIM_MspPostInit+0xb8>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <HAL_TIM_MspPostInit+0xb8>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <HAL_TIM_MspPostInit+0xb8>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a76:	2301      	movs	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4805      	ldr	r0, [pc, #20]	@ (8002a98 <HAL_TIM_MspPostInit+0xbc>)
 8002a82:	f000 fef7 	bl	8003874 <HAL_GPIO_Init>
}
 8002a86:	bf00      	nop
 8002a88:	3728      	adds	r7, #40	@ 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40020000 	.word	0x40020000

08002a9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <MX_USART1_UART_Init+0x50>)
 8002aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002acc:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <MX_USART1_UART_Init+0x4c>)
 8002ad4:	f004 f874 	bl	8006bc0 <HAL_UART_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ade:	f7ff f92d 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200006c0 	.word	0x200006c0
 8002aec:	40011000 	.word	0x40011000

08002af0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <MX_USART2_UART_Init+0x50>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b28:	f004 f84a 	bl	8006bc0 <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b32:	f7ff f903 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000708 	.word	0x20000708
 8002b40:	40004400 	.word	0x40004400

08002b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	@ 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a36      	ldr	r2, [pc, #216]	@ (8002c3c <HAL_UART_MspInit+0xf8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d135      	bne.n	8002bd2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	4b35      	ldr	r3, [pc, #212]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4a34      	ldr	r2, [pc, #208]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b76:	4b32      	ldr	r3, [pc, #200]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bb0:	2307      	movs	r3, #7
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4822      	ldr	r0, [pc, #136]	@ (8002c44 <HAL_UART_MspInit+0x100>)
 8002bbc:	f000 fe5a 	bl	8003874 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	2025      	movs	r0, #37	@ 0x25
 8002bc6:	f000 fd99 	bl	80036fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bca:	2025      	movs	r0, #37	@ 0x25
 8002bcc:	f000 fdb2 	bl	8003734 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bd0:	e030      	b.n	8002c34 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c48 <HAL_UART_MspInit+0x104>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d12b      	bne.n	8002c34 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	4a16      	ldr	r2, [pc, #88]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c08:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_UART_MspInit+0xfc>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c14:	230c      	movs	r3, #12
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c24:	2307      	movs	r3, #7
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <HAL_UART_MspInit+0x100>)
 8002c30:	f000 fe20 	bl	8003874 <HAL_GPIO_Init>
}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	@ 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40011000 	.word	0x40011000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40004400 	.word	0x40004400

08002c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c50:	f7ff fcc0 	bl	80025d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c54:	480c      	ldr	r0, [pc, #48]	@ (8002c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c56:	490d      	ldr	r1, [pc, #52]	@ (8002c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c58:	4a0d      	ldr	r2, [pc, #52]	@ (8002c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c5c:	e002      	b.n	8002c64 <LoopCopyDataInit>

08002c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c62:	3304      	adds	r3, #4

08002c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c68:	d3f9      	bcc.n	8002c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c70:	e001      	b.n	8002c76 <LoopFillZerobss>

08002c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c74:	3204      	adds	r2, #4

08002c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c78:	d3fb      	bcc.n	8002c72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f008 fbab 	bl	800b3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7e:	f7fe fbe7 	bl	8001450 <main>
  bx  lr    
 8002c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c8c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c90:	0800d73c 	.word	0x0800d73c
  ldr r2, =_sbss
 8002c94:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c98:	200051f0 	.word	0x200051f0

08002c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c9c:	e7fe      	b.n	8002c9c <ADC_IRQHandler>
	...

08002ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <HAL_Init+0x40>)
 8002caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <HAL_Init+0x40>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	@ (8002ce0 <HAL_Init+0x40>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 fd0c 	bl	80036e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	200f      	movs	r0, #15
 8002cd0:	f7ff fb42 	bl	8002358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd4:	f7ff fb14 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023c00 	.word	0x40023c00

08002ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_IncTick+0x20>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_IncTick+0x24>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_IncTick+0x24>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	2000002c 	.word	0x2000002c
 8002d08:	20000750 	.word	0x20000750

08002d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <HAL_GetTick+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000750 	.word	0x20000750

08002d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff ffee 	bl	8002d0c <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d3c:	d005      	beq.n	8002d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <HAL_Delay+0x44>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d4a:	bf00      	nop
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8f7      	bhi.n	8002d4c <HAL_Delay+0x28>
  {
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000002c 	.word	0x2000002c

08002d6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e033      	b.n	8002dea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe f850 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002db2:	f023 0302 	bic.w	r3, r3, #2
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fae8 	bl	8003394 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dda:	e001      	b.n	8002de0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_Start+0x1a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0b2      	b.n	8002f74 <HAL_ADC_Start+0x180>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d018      	beq.n	8002e56 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e34:	4b52      	ldr	r3, [pc, #328]	@ (8002f80 <HAL_ADC_Start+0x18c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_ADC_Start+0x190>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0c9a      	lsrs	r2, r3, #18
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d17a      	bne.n	8002f5a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	f023 0206 	bic.w	r2, r3, #6
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	645a      	str	r2, [r3, #68]	@ 0x44
 8002eb0:	e002      	b.n	8002eb8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec0:	4b31      	ldr	r3, [pc, #196]	@ (8002f88 <HAL_ADC_Start+0x194>)
 8002ec2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12a      	bne.n	8002f30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_ADC_Start+0x198>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d015      	beq.n	8002f10 <HAL_ADC_Start+0x11c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a29      	ldr	r2, [pc, #164]	@ (8002f90 <HAL_ADC_Start+0x19c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d105      	bne.n	8002efa <HAL_ADC_Start+0x106>
 8002eee:	4b26      	ldr	r3, [pc, #152]	@ (8002f88 <HAL_ADC_Start+0x194>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a25      	ldr	r2, [pc, #148]	@ (8002f94 <HAL_ADC_Start+0x1a0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d136      	bne.n	8002f72 <HAL_ADC_Start+0x17e>
 8002f04:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_ADC_Start+0x194>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d130      	bne.n	8002f72 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d129      	bne.n	8002f72 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	e020      	b.n	8002f72 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <HAL_ADC_Start+0x198>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d11b      	bne.n	8002f72 <HAL_ADC_Start+0x17e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d114      	bne.n	8002f72 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	e00b      	b.n	8002f72 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f043 0210 	orr.w	r2, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	20000024 	.word	0x20000024
 8002f84:	431bde83 	.word	0x431bde83
 8002f88:	40012300 	.word	0x40012300
 8002f8c:	40012000 	.word	0x40012000
 8002f90:	40012100 	.word	0x40012100
 8002f94:	40012200 	.word	0x40012200

08002f98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Stop+0x16>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e021      	b.n	8002ff2 <HAL_ADC_Stop+0x5a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800301a:	d113      	bne.n	8003044 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800302a:	d10b      	bne.n	8003044 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e063      	b.n	800310c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003044:	f7ff fe62 	bl	8002d0c <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800304a:	e021      	b.n	8003090 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003052:	d01d      	beq.n	8003090 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_ADC_PollForConversion+0x6c>
 800305a:	f7ff fe57 	bl	8002d0c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d212      	bcs.n	8003090 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b02      	cmp	r3, #2
 8003076:	d00b      	beq.n	8003090 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e03d      	b.n	800310c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d1d6      	bne.n	800304c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0212 	mvn.w	r2, #18
 80030a6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d123      	bne.n	800310a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11f      	bne.n	800310a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d111      	bne.n	800310a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1c>
 8003148:	2302      	movs	r3, #2
 800314a:	e113      	b.n	8003374 <HAL_ADC_ConfigChannel+0x244>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d925      	bls.n	80031a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	3b1e      	subs	r3, #30
 8003172:	2207      	movs	r2, #7
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43da      	mvns	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	400a      	ands	r2, r1
 8003180:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68d9      	ldr	r1, [r3, #12]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	4603      	mov	r3, r0
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4403      	add	r3, r0
 800319a:	3b1e      	subs	r3, #30
 800319c:	409a      	lsls	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e022      	b.n	80031ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6919      	ldr	r1, [r3, #16]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	2207      	movs	r2, #7
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6919      	ldr	r1, [r3, #16]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4403      	add	r3, r0
 80031e4:	409a      	lsls	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d824      	bhi.n	8003240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	3b05      	subs	r3, #5
 8003208:	221f      	movs	r2, #31
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	400a      	ands	r2, r1
 8003216:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b05      	subs	r3, #5
 8003232:	fa00 f203 	lsl.w	r2, r0, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	635a      	str	r2, [r3, #52]	@ 0x34
 800323e:	e04c      	b.n	80032da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d824      	bhi.n	8003292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b23      	subs	r3, #35	@ 0x23
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43da      	mvns	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	4618      	mov	r0, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b23      	subs	r3, #35	@ 0x23
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003290:	e023      	b.n	80032da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	3b41      	subs	r3, #65	@ 0x41
 80032a4:	221f      	movs	r2, #31
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	400a      	ands	r2, r1
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b41      	subs	r3, #65	@ 0x41
 80032ce:	fa00 f203 	lsl.w	r2, r0, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032da:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <HAL_ADC_ConfigChannel+0x250>)
 80032dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a28      	ldr	r2, [pc, #160]	@ (8003384 <HAL_ADC_ConfigChannel+0x254>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10f      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1d8>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	d10b      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1d      	ldr	r2, [pc, #116]	@ (8003384 <HAL_ADC_ConfigChannel+0x254>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d12b      	bne.n	800336a <HAL_ADC_ConfigChannel+0x23a>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <HAL_ADC_ConfigChannel+0x258>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x1f4>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b11      	cmp	r3, #17
 8003322:	d122      	bne.n	800336a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a11      	ldr	r2, [pc, #68]	@ (8003388 <HAL_ADC_ConfigChannel+0x258>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d111      	bne.n	800336a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_ADC_ConfigChannel+0x25c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <HAL_ADC_ConfigChannel+0x260>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	0c9a      	lsrs	r2, r3, #18
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800335c:	e002      	b.n	8003364 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3b01      	subs	r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f9      	bne.n	800335e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40012300 	.word	0x40012300
 8003384:	40012000 	.word	0x40012000
 8003388:	10000012 	.word	0x10000012
 800338c:	20000024 	.word	0x20000024
 8003390:	431bde83 	.word	0x431bde83

08003394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800339c:	4b79      	ldr	r3, [pc, #484]	@ (8003584 <ADC_Init+0x1f0>)
 800339e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	021a      	lsls	r2, r3, #8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <ADC_Init+0x1f4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800343a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6899      	ldr	r1, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800345c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e00f      	b.n	8003492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0202 	bic.w	r2, r2, #2
 80034a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e1b      	ldrb	r3, [r3, #24]
 80034ac:	005a      	lsls	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	3b01      	subs	r3, #1
 80034ec:	035a      	lsls	r2, r3, #13
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	e007      	b.n	8003508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	3b01      	subs	r3, #1
 8003524:	051a      	lsls	r2, r3, #20
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800353c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800354a:	025a      	lsls	r2, r3, #9
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	029a      	lsls	r2, r3, #10
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012300 	.word	0x40012300
 8003588:	0f000001 	.word	0x0f000001

0800358c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <__NVIC_SetPriorityGrouping+0x44>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035a8:	4013      	ands	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035be:	4a04      	ldr	r2, [pc, #16]	@ (80035d0 <__NVIC_SetPriorityGrouping+0x44>)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	60d3      	str	r3, [r2, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d8:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <__NVIC_GetPriorityGrouping+0x18>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	f003 0307 	and.w	r3, r3, #7
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	db0b      	blt.n	800361a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	f003 021f 	and.w	r2, r3, #31
 8003608:	4907      	ldr	r1, [pc, #28]	@ (8003628 <__NVIC_EnableIRQ+0x38>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2001      	movs	r0, #1
 8003612:	fa00 f202 	lsl.w	r2, r0, r2
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000e100 	.word	0xe000e100

0800362c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	db0a      	blt.n	8003656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	490c      	ldr	r1, [pc, #48]	@ (8003678 <__NVIC_SetPriority+0x4c>)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	440b      	add	r3, r1
 8003650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003654:	e00a      	b.n	800366c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4908      	ldr	r1, [pc, #32]	@ (800367c <__NVIC_SetPriority+0x50>)
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	3b04      	subs	r3, #4
 8003664:	0112      	lsls	r2, r2, #4
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	440b      	add	r3, r1
 800366a:	761a      	strb	r2, [r3, #24]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000e100 	.word	0xe000e100
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	@ 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f1c3 0307 	rsb	r3, r3, #7
 800369a:	2b04      	cmp	r3, #4
 800369c:	bf28      	it	cs
 800369e:	2304      	movcs	r3, #4
 80036a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d902      	bls.n	80036b0 <NVIC_EncodePriority+0x30>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3b03      	subs	r3, #3
 80036ae:	e000      	b.n	80036b2 <NVIC_EncodePriority+0x32>
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43da      	mvns	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	401a      	ands	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	43d9      	mvns	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	4313      	orrs	r3, r2
         );
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	@ 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff4c 	bl	800358c <__NVIC_SetPriorityGrouping>
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370e:	f7ff ff61 	bl	80035d4 <__NVIC_GetPriorityGrouping>
 8003712:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	6978      	ldr	r0, [r7, #20]
 800371a:	f7ff ffb1 	bl	8003680 <NVIC_EncodePriority>
 800371e:	4602      	mov	r2, r0
 8003720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff ff80 	bl	800362c <__NVIC_SetPriority>
}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff54 	bl	80035f0 <__NVIC_EnableIRQ>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800375e:	f7ff fad5 	bl	8002d0c <HAL_GetTick>
 8003762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d008      	beq.n	8003782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2280      	movs	r2, #128	@ 0x80
 8003774:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e052      	b.n	8003828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0216 	bic.w	r2, r2, #22
 8003790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_DMA_Abort+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0208 	bic.w	r2, r2, #8
 80037c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d2:	e013      	b.n	80037fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d4:	f7ff fa9a 	bl	8002d0c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b05      	cmp	r3, #5
 80037e0:	d90c      	bls.n	80037fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e015      	b.n	8003828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e4      	bne.n	80037d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	223f      	movs	r2, #63	@ 0x3f
 8003810:	409a      	lsls	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d004      	beq.n	800384e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2280      	movs	r2, #128	@ 0x80
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00c      	b.n	8003868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2205      	movs	r2, #5
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e165      	b.n	8003b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8154 	bne.w	8003b56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d005      	beq.n	80038c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d130      	bne.n	8003928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0201 	and.w	r2, r3, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b03      	cmp	r3, #3
 8003932:	d017      	beq.n	8003964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80ae 	beq.w	8003b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003b74 <HAL_GPIO_Init+0x300>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	4a5c      	ldr	r2, [pc, #368]	@ (8003b74 <HAL_GPIO_Init+0x300>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003b74 <HAL_GPIO_Init+0x300>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a16:	4a58      	ldr	r2, [pc, #352]	@ (8003b78 <HAL_GPIO_Init+0x304>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b7c <HAL_GPIO_Init+0x308>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d025      	beq.n	8003a8e <HAL_GPIO_Init+0x21a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4e      	ldr	r2, [pc, #312]	@ (8003b80 <HAL_GPIO_Init+0x30c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01f      	beq.n	8003a8a <HAL_GPIO_Init+0x216>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b84 <HAL_GPIO_Init+0x310>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_Init+0x212>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4c      	ldr	r2, [pc, #304]	@ (8003b88 <HAL_GPIO_Init+0x314>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0x20e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b8c <HAL_GPIO_Init+0x318>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_Init+0x20a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <HAL_GPIO_Init+0x31c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a49      	ldr	r2, [pc, #292]	@ (8003b94 <HAL_GPIO_Init+0x320>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_Init+0x202>
 8003a72:	2306      	movs	r3, #6
 8003a74:	e00c      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a76:	2307      	movs	r3, #7
 8003a78:	e00a      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	e008      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a82:	2303      	movs	r3, #3
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x21c>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa0:	4935      	ldr	r1, [pc, #212]	@ (8003b78 <HAL_GPIO_Init+0x304>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aae:	4b3a      	ldr	r3, [pc, #232]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad2:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003afc:	4a26      	ldr	r2, [pc, #152]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b02:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b26:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b50:	4a11      	ldr	r2, [pc, #68]	@ (8003b98 <HAL_GPIO_Init+0x324>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	f67f ae96 	bls.w	8003890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020800 	.word	0x40020800
 8003b88:	40020c00 	.word	0x40020c00
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40021400 	.word	0x40021400
 8003b94:	40021800 	.word	0x40021800
 8003b98:	40013c00 	.word	0x40013c00

08003b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e001      	b.n	8003bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be8:	e003      	b.n	8003bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e12b      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fbb0 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	@ 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c64:	f000 fe8a 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a81      	ldr	r2, [pc, #516]	@ (8003e74 <HAL_I2C_Init+0x274>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d807      	bhi.n	8003c84 <HAL_I2C_Init+0x84>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a80      	ldr	r2, [pc, #512]	@ (8003e78 <HAL_I2C_Init+0x278>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e006      	b.n	8003c92 <HAL_I2C_Init+0x92>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a7d      	ldr	r2, [pc, #500]	@ (8003e7c <HAL_I2C_Init+0x27c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bf94      	ite	ls
 8003c8c:	2301      	movls	r3, #1
 8003c8e:	2300      	movhi	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0e7      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a78      	ldr	r2, [pc, #480]	@ (8003e80 <HAL_I2C_Init+0x280>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8003e74 <HAL_I2C_Init+0x274>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d802      	bhi.n	8003cd4 <HAL_I2C_Init+0xd4>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	e009      	b.n	8003ce8 <HAL_I2C_Init+0xe8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a69      	ldr	r2, [pc, #420]	@ (8003e84 <HAL_I2C_Init+0x284>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	495c      	ldr	r1, [pc, #368]	@ (8003e74 <HAL_I2C_Init+0x274>)
 8003d04:	428b      	cmp	r3, r1
 8003d06:	d819      	bhi.n	8003d3c <HAL_I2C_Init+0x13c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e59      	subs	r1, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d1c:	400b      	ands	r3, r1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_I2C_Init+0x138>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e59      	subs	r1, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d36:	e051      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e04f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d111      	bne.n	8003d68 <HAL_I2C_Init+0x168>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e012      	b.n	8003d8e <HAL_I2C_Init+0x18e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Init+0x196>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e022      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10e      	bne.n	8003dbc <HAL_I2C_Init+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e58      	subs	r0, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	440b      	add	r3, r1
 8003dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1e58      	subs	r0, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	0099      	lsls	r1, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6809      	ldr	r1, [r1, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6911      	ldr	r1, [r2, #16]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	000186a0 	.word	0x000186a0
 8003e78:	001e847f 	.word	0x001e847f
 8003e7c:	003d08ff 	.word	0x003d08ff
 8003e80:	431bde83 	.word	0x431bde83
 8003e84:	10624dd3 	.word	0x10624dd3

08003e88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	817b      	strh	r3, [r7, #10]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e9c:	f7fe ff36 	bl	8002d0c <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	f040 80e0 	bne.w	8004070 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2319      	movs	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4970      	ldr	r1, [pc, #448]	@ (800407c <HAL_I2C_Master_Transmit+0x1f4>)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa92 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0d3      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2C_Master_Transmit+0x50>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0cc      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ea>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d007      	beq.n	8003efe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2221      	movs	r2, #33	@ 0x21
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	893a      	ldrh	r2, [r7, #8]
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a50      	ldr	r2, [pc, #320]	@ (8004080 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f40:	8979      	ldrh	r1, [r7, #10]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f9ca 	bl	80042e0 <I2C_MasterRequestWrite>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e08d      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f6c:	e066      	b.n	800403c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	6a39      	ldr	r1, [r7, #32]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fb50 	bl	8004618 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d107      	bne.n	8003f96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e06b      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d11b      	bne.n	8004010 <HAL_I2C_Master_Transmit+0x188>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d017      	beq.n	8004010 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fb47 	bl	80046a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	2b04      	cmp	r3, #4
 8004026:	d107      	bne.n	8004038 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004036:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01a      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d194      	bne.n	8003f6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	00100002 	.word	0x00100002
 8004080:	ffff0000 	.word	0xffff0000

08004084 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	@ 0x28
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	460b      	mov	r3, r1
 8004092:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7fe fe3a 	bl	8002d0c <HAL_GetTick>
 8004098:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	f040 8111 	bne.w	80042ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2319      	movs	r3, #25
 80040b2:	2201      	movs	r2, #1
 80040b4:	4988      	ldr	r1, [pc, #544]	@ (80042d8 <HAL_I2C_IsDeviceReady+0x254>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f994 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
 80040c4:	e104      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_I2C_IsDeviceReady+0x50>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e0fd      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d007      	beq.n	80040fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2224      	movs	r2, #36	@ 0x24
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a70      	ldr	r2, [pc, #448]	@ (80042dc <HAL_I2C_IsDeviceReady+0x258>)
 800411c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f952 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004154:	d103      	bne.n	800415e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0b6      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004170:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004172:	f7fe fdcb 	bl	8002d0c <HAL_GetTick>
 8004176:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041a6:	e025      	b.n	80041f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fe fdb0 	bl	8002d0c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <HAL_I2C_IsDeviceReady+0x13a>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	22a0      	movs	r2, #160	@ 0xa0
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80041fe:	d005      	beq.n	800420c <HAL_I2C_IsDeviceReady+0x188>
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <HAL_I2C_IsDeviceReady+0x188>
 8004206:	7dbb      	ldrb	r3, [r7, #22]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0cd      	beq.n	80041a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d129      	bne.n	8004276 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004230:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2319      	movs	r3, #25
 800424e:	2201      	movs	r2, #1
 8004250:	4921      	ldr	r1, [pc, #132]	@ (80042d8 <HAL_I2C_IsDeviceReady+0x254>)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f8c6 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e036      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e02c      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004284:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800428e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2319      	movs	r3, #25
 8004296:	2201      	movs	r2, #1
 8004298:	490f      	ldr	r1, [pc, #60]	@ (80042d8 <HAL_I2C_IsDeviceReady+0x254>)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8a2 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e012      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	f4ff af32 	bcc.w	800411e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00100002 	.word	0x00100002
 80042dc:	ffff0000 	.word	0xffff0000

080042e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	460b      	mov	r3, r1
 80042ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d006      	beq.n	800430a <I2C_MasterRequestWrite+0x2a>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d003      	beq.n	800430a <I2C_MasterRequestWrite+0x2a>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004308:	d108      	bne.n	800431c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e00b      	b.n	8004334 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	2b12      	cmp	r3, #18
 8004322:	d107      	bne.n	8004334 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004332:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f84f 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435a:	d103      	bne.n	8004364 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e035      	b.n	80043d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004370:	d108      	bne.n	8004384 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004372:	897b      	ldrh	r3, [r7, #10]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004380:	611a      	str	r2, [r3, #16]
 8004382:	e01b      	b.n	80043bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004384:	897b      	ldrh	r3, [r7, #10]
 8004386:	11db      	asrs	r3, r3, #7
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f063 030f 	orn	r3, r3, #15
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	490e      	ldr	r1, [pc, #56]	@ (80043dc <I2C_MasterRequestWrite+0xfc>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f898 	bl	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e010      	b.n	80043d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4907      	ldr	r1, [pc, #28]	@ (80043e0 <I2C_MasterRequestWrite+0x100>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f888 	bl	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010008 	.word	0x00010008
 80043e0:	00010002 	.word	0x00010002

080043e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f4:	e048      	b.n	8004488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043fc:	d044      	beq.n	8004488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fe fc85 	bl	8002d0c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d139      	bne.n	8004488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10d      	bne.n	800443a <I2C_WaitOnFlagUntilTimeout+0x56>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	43da      	mvns	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	e00c      	b.n	8004454 <I2C_WaitOnFlagUntilTimeout+0x70>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	429a      	cmp	r2, r3
 8004458:	d116      	bne.n	8004488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e023      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d10d      	bne.n	80044ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	e00c      	b.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d093      	beq.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e6:	e071      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f6:	d123      	bne.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e067      	b.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004546:	d041      	beq.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004548:	f7fe fbe0 	bl	8002d0c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d136      	bne.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10c      	bne.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	43da      	mvns	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4013      	ands	r3, r2
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2301      	movne	r3, #1
 800457c:	2300      	moveq	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	e00b      	b.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	43da      	mvns	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4013      	ands	r3, r2
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e021      	b.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10c      	bne.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	43da      	mvns	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e00b      	b.n	8004608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f af6d 	bne.w	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004624:	e034      	b.n	8004690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f886 	bl	8004738 <I2C_IsAcknowledgeFailed>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e034      	b.n	80046a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800463c:	d028      	beq.n	8004690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463e:	f7fe fb65 	bl	8002d0c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11d      	bne.n	8004690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b80      	cmp	r3, #128	@ 0x80
 8004660:	d016      	beq.n	8004690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e007      	b.n	80046a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b80      	cmp	r3, #128	@ 0x80
 800469c:	d1c3      	bne.n	8004626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b4:	e034      	b.n	8004720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f83e 	bl	8004738 <I2C_IsAcknowledgeFailed>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e034      	b.n	8004730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046cc:	d028      	beq.n	8004720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7fe fb1d 	bl	8002d0c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d11d      	bne.n	8004720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d016      	beq.n	8004720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e007      	b.n	8004730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d1c3      	bne.n	80046b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474e:	d11b      	bne.n	8004788 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004758:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	f043 0204 	orr.w	r2, r3, #4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fe fa40 	bl	8002d0c <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fe fa3c 	bl	8002d0c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f887 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	@ (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fd0a 	bl	8002358 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	0800d6e0 	.word	0x0800d6e0
 800495c:	20000024 	.word	0x20000024
 8004960:	20000028 	.word	0x20000028

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	@ (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000024 	.word	0x20000024

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	0800d6f0 	.word	0x0800d6f0

080049a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049a8:	f7ff ffdc 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	0b5b      	lsrs	r3, r3, #13
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4903      	ldr	r1, [pc, #12]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40023800 	.word	0x40023800
 80049c8:	0800d6f0 	.word	0x0800d6f0

080049cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	220f      	movs	r2, #15
 80049da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <HAL_RCC_GetClockConfig+0x60>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40023c00 	.word	0x40023c00

08004a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b0ae      	sub	sp, #184	@ 0xb8
 8004a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a56:	4bcb      	ldr	r3, [pc, #812]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	f200 8206 	bhi.w	8004e70 <HAL_RCC_GetSysClockFreq+0x440>
 8004a64:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004e71 	.word	0x08004e71
 8004a74:	08004e71 	.word	0x08004e71
 8004a78:	08004e71 	.word	0x08004e71
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004e71 	.word	0x08004e71
 8004a84:	08004e71 	.word	0x08004e71
 8004a88:	08004e71 	.word	0x08004e71
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004e71 	.word	0x08004e71
 8004a94:	08004e71 	.word	0x08004e71
 8004a98:	08004e71 	.word	0x08004e71
 8004a9c:	08004ca1 	.word	0x08004ca1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa0:	4bb9      	ldr	r3, [pc, #740]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004aa6:	e1e7      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa8:	4bb8      	ldr	r3, [pc, #736]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004aae:	e1e3      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab0:	4bb4      	ldr	r3, [pc, #720]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004abc:	4bb1      	ldr	r3, [pc, #708]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d071      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac8:	4bae      	ldr	r3, [pc, #696]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ad4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	0159      	lsls	r1, r3, #5
 8004afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b00:	0150      	lsls	r0, r2, #5
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4621      	mov	r1, r4
 8004b08:	1a51      	subs	r1, r2, r1
 8004b0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b20:	4649      	mov	r1, r9
 8004b22:	018b      	lsls	r3, r1, #6
 8004b24:	4641      	mov	r1, r8
 8004b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	018a      	lsls	r2, r1, #6
 8004b2e:	4641      	mov	r1, r8
 8004b30:	1a51      	subs	r1, r2, r1
 8004b32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b34:	4649      	mov	r1, r9
 8004b36:	eb63 0301 	sbc.w	r3, r3, r1
 8004b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b48:	4649      	mov	r1, r9
 8004b4a:	00cb      	lsls	r3, r1, #3
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b52:	4641      	mov	r1, r8
 8004b54:	00ca      	lsls	r2, r1, #3
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b62:	462b      	mov	r3, r5
 8004b64:	460a      	mov	r2, r1
 8004b66:	eb42 0303 	adc.w	r3, r2, r3
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b78:	4629      	mov	r1, r5
 8004b7a:	024b      	lsls	r3, r1, #9
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b82:	4621      	mov	r1, r4
 8004b84:	024a      	lsls	r2, r1, #9
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b9c:	f7fb ff7e 	bl	8000a9c <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004baa:	e067      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bac:	4b75      	ldr	r3, [pc, #468]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	0159      	lsls	r1, r3, #5
 8004bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be0:	0150      	lsls	r0, r2, #5
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4621      	mov	r1, r4
 8004be8:	1a51      	subs	r1, r2, r1
 8004bea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c00:	4649      	mov	r1, r9
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	018a      	lsls	r2, r1, #6
 8004c0e:	4641      	mov	r1, r8
 8004c10:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c14:	4649      	mov	r1, r9
 8004c16:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c2e:	4692      	mov	sl, r2
 8004c30:	469b      	mov	fp, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	eb1a 0303 	adds.w	r3, sl, r3
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	028b      	lsls	r3, r1, #10
 8004c52:	4621      	mov	r1, r4
 8004c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c58:	4621      	mov	r1, r4
 8004c5a:	028a      	lsls	r2, r1, #10
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c64:	2200      	movs	r2, #0
 8004c66:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c68:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c6e:	f7fb ff15 	bl	8000a9c <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4613      	mov	r3, r2
 8004c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c7c:	4b41      	ldr	r3, [pc, #260]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	3301      	adds	r3, #1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c9e:	e0eb      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca0:	4b38      	ldr	r3, [pc, #224]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cac:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d06b      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb8:	4b32      	ldr	r3, [pc, #200]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ccc:	2300      	movs	r3, #0
 8004cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	0159      	lsls	r1, r3, #5
 8004ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce6:	0150      	lsls	r0, r2, #5
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4621      	mov	r1, r4
 8004cee:	1a51      	subs	r1, r2, r1
 8004cf0:	61b9      	str	r1, [r7, #24]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d06:	4659      	mov	r1, fp
 8004d08:	018b      	lsls	r3, r1, #6
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d10:	4651      	mov	r1, sl
 8004d12:	018a      	lsls	r2, r1, #6
 8004d14:	4651      	mov	r1, sl
 8004d16:	ebb2 0801 	subs.w	r8, r2, r1
 8004d1a:	4659      	mov	r1, fp
 8004d1c:	eb63 0901 	sbc.w	r9, r3, r1
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d34:	4690      	mov	r8, r2
 8004d36:	4699      	mov	r9, r3
 8004d38:	4623      	mov	r3, r4
 8004d3a:	eb18 0303 	adds.w	r3, r8, r3
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	462b      	mov	r3, r5
 8004d42:	eb49 0303 	adc.w	r3, r9, r3
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d54:	4629      	mov	r1, r5
 8004d56:	024b      	lsls	r3, r1, #9
 8004d58:	4621      	mov	r1, r4
 8004d5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d5e:	4621      	mov	r1, r4
 8004d60:	024a      	lsls	r2, r1, #9
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d74:	f7fb fe92 	bl	8000a9c <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d82:	e065      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x420>
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400
 8004d8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d90:	4b3d      	ldr	r3, [pc, #244]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	2200      	movs	r2, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004da2:	2300      	movs	r3, #0
 8004da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004da6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	0159      	lsls	r1, r3, #5
 8004db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dbc:	0150      	lsls	r0, r2, #5
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1a51      	subs	r1, r2, r1
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	4649      	mov	r1, r9
 8004dca:	eb63 0301 	sbc.w	r3, r3, r1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ddc:	4659      	mov	r1, fp
 8004dde:	018b      	lsls	r3, r1, #6
 8004de0:	4651      	mov	r1, sl
 8004de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004de6:	4651      	mov	r1, sl
 8004de8:	018a      	lsls	r2, r1, #6
 8004dea:	4651      	mov	r1, sl
 8004dec:	1a54      	subs	r4, r2, r1
 8004dee:	4659      	mov	r1, fp
 8004df0:	eb63 0501 	sbc.w	r5, r3, r1
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	00eb      	lsls	r3, r5, #3
 8004dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e02:	00e2      	lsls	r2, r4, #3
 8004e04:	4614      	mov	r4, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	4643      	mov	r3, r8
 8004e0a:	18e3      	adds	r3, r4, r3
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	464b      	mov	r3, r9
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e22:	4629      	mov	r1, r5
 8004e24:	028b      	lsls	r3, r1, #10
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	028a      	lsls	r2, r1, #10
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e38:	2200      	movs	r2, #0
 8004e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e3c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e42:	f7fb fe2b 	bl	8000a9c <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e50:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	0f1b      	lsrs	r3, r3, #28
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e6e:	e003      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	37b8      	adds	r7, #184	@ 0xb8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e28d      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8083 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eb0:	4b94      	ldr	r3, [pc, #592]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d019      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ebc:	4b91      	ldr	r3, [pc, #580]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d112      	bne.n	8004f08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ee2:	4b88      	ldr	r3, [pc, #544]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eee:	d10b      	bne.n	8004f08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	4b84      	ldr	r3, [pc, #528]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05b      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x124>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d157      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e25a      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f10:	d106      	bne.n	8004f20 <HAL_RCC_OscConfig+0x90>
 8004f12:	4b7c      	ldr	r3, [pc, #496]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7b      	ldr	r2, [pc, #492]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e01d      	b.n	8004f5c <HAL_RCC_OscConfig+0xcc>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0xb4>
 8004f2a:	4b76      	ldr	r3, [pc, #472]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a75      	ldr	r2, [pc, #468]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4b73      	ldr	r3, [pc, #460]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a72      	ldr	r2, [pc, #456]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e00b      	b.n	8004f5c <HAL_RCC_OscConfig+0xcc>
 8004f44:	4b6f      	ldr	r3, [pc, #444]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	4b6c      	ldr	r3, [pc, #432]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a6b      	ldr	r2, [pc, #428]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d013      	beq.n	8004f8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fd fed2 	bl	8002d0c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fd fece 	bl	8002d0c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e21f      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	4b61      	ldr	r3, [pc, #388]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0xdc>
 8004f8a:	e014      	b.n	8004fb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fd febe 	bl	8002d0c <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f94:	f7fd feba 	bl	8002d0c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	@ 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e20b      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa6:	4b57      	ldr	r3, [pc, #348]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x104>
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d06f      	beq.n	80050a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fc2:	4b50      	ldr	r3, [pc, #320]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d017      	beq.n	8004ffe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fce:	4b4d      	ldr	r3, [pc, #308]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d105      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fda:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe6:	4b47      	ldr	r3, [pc, #284]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	d11c      	bne.n	800502c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff2:	4b44      	ldr	r3, [pc, #272]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	4b41      	ldr	r3, [pc, #260]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_RCC_OscConfig+0x186>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e1d3      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b3b      	ldr	r3, [pc, #236]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4937      	ldr	r1, [pc, #220]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502a:	e03a      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005034:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_OscConfig+0x278>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fd fe67 	bl	8002d0c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005042:	f7fd fe63 	bl	8002d0c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e1b4      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4925      	ldr	r1, [pc, #148]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]
 8005074:	e015      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <HAL_RCC_OscConfig+0x278>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fd fe46 	bl	8002d0c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005084:	f7fd fe42 	bl	8002d0c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e193      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d036      	beq.n	800511c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b6:	4b15      	ldr	r3, [pc, #84]	@ (800510c <HAL_RCC_OscConfig+0x27c>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fd fe26 	bl	8002d0c <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c4:	f7fd fe22 	bl	8002d0c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e173      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_OscConfig+0x274>)
 80050d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x234>
 80050e2:	e01b      	b.n	800511c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <HAL_RCC_OscConfig+0x27c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fd fe0f 	bl	8002d0c <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	e00e      	b.n	8005110 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f2:	f7fd fe0b 	bl	8002d0c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d907      	bls.n	8005110 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e15c      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
 8005104:	40023800 	.word	0x40023800
 8005108:	42470000 	.word	0x42470000
 800510c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005110:	4b8a      	ldr	r3, [pc, #552]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ea      	bne.n	80050f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8097 	beq.w	8005258 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800512e:	4b83      	ldr	r3, [pc, #524]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	4b7f      	ldr	r3, [pc, #508]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	4a7e      	ldr	r2, [pc, #504]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6413      	str	r3, [r2, #64]	@ 0x40
 800514a:	4b7c      	ldr	r3, [pc, #496]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515a:	4b79      	ldr	r3, [pc, #484]	@ (8005340 <HAL_RCC_OscConfig+0x4b0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d118      	bne.n	8005198 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005166:	4b76      	ldr	r3, [pc, #472]	@ (8005340 <HAL_RCC_OscConfig+0x4b0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a75      	ldr	r2, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x4b0>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005172:	f7fd fdcb 	bl	8002d0c <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517a:	f7fd fdc7 	bl	8002d0c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e118      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518c:	4b6c      	ldr	r3, [pc, #432]	@ (8005340 <HAL_RCC_OscConfig+0x4b0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d106      	bne.n	80051ae <HAL_RCC_OscConfig+0x31e>
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	4a65      	ldr	r2, [pc, #404]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ac:	e01c      	b.n	80051e8 <HAL_RCC_OscConfig+0x358>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x340>
 80051b6:	4b61      	ldr	r3, [pc, #388]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ba:	4a60      	ldr	r2, [pc, #384]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c2:	4b5e      	ldr	r3, [pc, #376]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	4a5d      	ldr	r2, [pc, #372]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0x358>
 80051d0:	4b5a      	ldr	r3, [pc, #360]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d4:	4a59      	ldr	r2, [pc, #356]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	6713      	str	r3, [r2, #112]	@ 0x70
 80051dc:	4b57      	ldr	r3, [pc, #348]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e0:	4a56      	ldr	r2, [pc, #344]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80051e2:	f023 0304 	bic.w	r3, r3, #4
 80051e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fd fd8c 	bl	8002d0c <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd fd88 	bl	8002d0c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0d7      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	4b4b      	ldr	r3, [pc, #300]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ee      	beq.n	80051f8 <HAL_RCC_OscConfig+0x368>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fd fd76 	bl	8002d0c <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005222:	e00a      	b.n	800523a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fd fd72 	bl	8002d0c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0c1      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ee      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524c:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	4a3a      	ldr	r2, [pc, #232]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005256:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80ad 	beq.w	80053bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005262:	4b36      	ldr	r3, [pc, #216]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	2b08      	cmp	r3, #8
 800526c:	d060      	beq.n	8005330 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d145      	bne.n	8005302 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <HAL_RCC_OscConfig+0x4b4>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fd fd46 	bl	8002d0c <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7fd fd42 	bl	8002d0c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e093      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	4b29      	ldr	r3, [pc, #164]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	3b01      	subs	r3, #1
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	491b      	ldr	r1, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <HAL_RCC_OscConfig+0x4b4>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fd fd17 	bl	8002d0c <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fd fd13 	bl	8002d0c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e064      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x452>
 8005300:	e05c      	b.n	80053bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005302:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <HAL_RCC_OscConfig+0x4b4>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd fd00 	bl	8002d0c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005310:	f7fd fcfc 	bl	8002d0c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e04d      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x480>
 800532e:	e045      	b.n	80053bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e040      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
 800533c:	40023800 	.word	0x40023800
 8005340:	40007000 	.word	0x40007000
 8005344:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005348:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <HAL_RCC_OscConfig+0x538>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d030      	beq.n	80053b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d129      	bne.n	80053b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d122      	bne.n	80053b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800537e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005380:	4293      	cmp	r3, r2
 8005382:	d119      	bne.n	80053b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	3b01      	subs	r3, #1
 8005392:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d10f      	bne.n	80053b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800

080053cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e041      	b.n	8005462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd fa6c 	bl	80028d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f000 feb0 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d001      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e04e      	b.n	8005522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a23      	ldr	r2, [pc, #140]	@ (8005530 <HAL_TIM_Base_Start_IT+0xc4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d01d      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <HAL_TIM_Base_Start_IT+0xc8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <HAL_TIM_Base_Start_IT+0xcc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <HAL_TIM_Base_Start_IT+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <HAL_TIM_Base_Start_IT+0xd4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a19      	ldr	r2, [pc, #100]	@ (8005544 <HAL_TIM_Base_Start_IT+0xd8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a18      	ldr	r2, [pc, #96]	@ (8005548 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d111      	bne.n	8005510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d010      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550e:	e007      	b.n	8005520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e041      	b.n	80055e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f839 	bl	80055ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fdf0 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <HAL_TIM_PWM_Start+0x24>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e022      	b.n	800566a <HAL_TIM_PWM_Start+0x6a>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b04      	cmp	r3, #4
 8005628:	d109      	bne.n	800563e <HAL_TIM_PWM_Start+0x3e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b01      	cmp	r3, #1
 8005634:	bf14      	ite	ne
 8005636:	2301      	movne	r3, #1
 8005638:	2300      	moveq	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e015      	b.n	800566a <HAL_TIM_PWM_Start+0x6a>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d109      	bne.n	8005658 <HAL_TIM_PWM_Start+0x58>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e008      	b.n	800566a <HAL_TIM_PWM_Start+0x6a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e07c      	b.n	800576c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_TIM_PWM_Start+0x82>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005680:	e013      	b.n	80056aa <HAL_TIM_PWM_Start+0xaa>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d104      	bne.n	8005692 <HAL_TIM_PWM_Start+0x92>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005690:	e00b      	b.n	80056aa <HAL_TIM_PWM_Start+0xaa>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_PWM_Start+0xa2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a0:	e003      	b.n	80056aa <HAL_TIM_PWM_Start+0xaa>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2201      	movs	r2, #1
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 f97c 	bl	80069b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005774 <HAL_TIM_PWM_Start+0x174>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_PWM_Start+0xcc>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005778 <HAL_TIM_PWM_Start+0x178>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_PWM_Start+0xd0>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_TIM_PWM_Start+0xd2>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a22      	ldr	r2, [pc, #136]	@ (8005774 <HAL_TIM_PWM_Start+0x174>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d022      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f8:	d01d      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1f      	ldr	r2, [pc, #124]	@ (800577c <HAL_TIM_PWM_Start+0x17c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <HAL_TIM_PWM_Start+0x180>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <HAL_TIM_PWM_Start+0x184>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a16      	ldr	r2, [pc, #88]	@ (8005778 <HAL_TIM_PWM_Start+0x178>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a18      	ldr	r2, [pc, #96]	@ (8005788 <HAL_TIM_PWM_Start+0x188>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIM_PWM_Start+0x136>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a16      	ldr	r2, [pc, #88]	@ (800578c <HAL_TIM_PWM_Start+0x18c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d111      	bne.n	800575a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b06      	cmp	r3, #6
 8005746:	d010      	beq.n	800576a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005758:	e007      	b.n	800576a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40010000 	.word	0x40010000
 8005778:	40010400 	.word	0x40010400
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40014000 	.word	0x40014000
 800578c:	40001800 	.word	0x40001800

08005790 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e041      	b.n	8005826 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fd f8c0 	bl	800293c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fcce 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_TIM_IC_Start_IT+0x1e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800584a:	b2db      	uxtb	r3, r3
 800584c:	e013      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x46>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d104      	bne.n	800585e <HAL_TIM_IC_Start_IT+0x2e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800585a:	b2db      	uxtb	r3, r3
 800585c:	e00b      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x46>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d104      	bne.n	800586e <HAL_TIM_IC_Start_IT+0x3e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800586a:	b2db      	uxtb	r3, r3
 800586c:	e003      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x46>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <HAL_TIM_IC_Start_IT+0x58>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005884:	b2db      	uxtb	r3, r3
 8005886:	e013      	b.n	80058b0 <HAL_TIM_IC_Start_IT+0x80>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b04      	cmp	r3, #4
 800588c:	d104      	bne.n	8005898 <HAL_TIM_IC_Start_IT+0x68>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e00b      	b.n	80058b0 <HAL_TIM_IC_Start_IT+0x80>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d104      	bne.n	80058a8 <HAL_TIM_IC_Start_IT+0x78>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e003      	b.n	80058b0 <HAL_TIM_IC_Start_IT+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b8:	7b7b      	ldrb	r3, [r7, #13]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e0cc      	b.n	8005a5c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_IC_Start_IT+0xa2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d0:	e013      	b.n	80058fa <HAL_TIM_IC_Start_IT+0xca>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_IC_Start_IT+0xb2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e0:	e00b      	b.n	80058fa <HAL_TIM_IC_Start_IT+0xca>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_IC_Start_IT+0xc2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f0:	e003      	b.n	80058fa <HAL_TIM_IC_Start_IT+0xca>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_TIM_IC_Start_IT+0xda>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005908:	e013      	b.n	8005932 <HAL_TIM_IC_Start_IT+0x102>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d104      	bne.n	800591a <HAL_TIM_IC_Start_IT+0xea>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005918:	e00b      	b.n	8005932 <HAL_TIM_IC_Start_IT+0x102>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d104      	bne.n	800592a <HAL_TIM_IC_Start_IT+0xfa>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005928:	e003      	b.n	8005932 <HAL_TIM_IC_Start_IT+0x102>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b0c      	cmp	r3, #12
 8005936:	d841      	bhi.n	80059bc <HAL_TIM_IC_Start_IT+0x18c>
 8005938:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <HAL_TIM_IC_Start_IT+0x110>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005975 	.word	0x08005975
 8005944:	080059bd 	.word	0x080059bd
 8005948:	080059bd 	.word	0x080059bd
 800594c:	080059bd 	.word	0x080059bd
 8005950:	08005987 	.word	0x08005987
 8005954:	080059bd 	.word	0x080059bd
 8005958:	080059bd 	.word	0x080059bd
 800595c:	080059bd 	.word	0x080059bd
 8005960:	08005999 	.word	0x08005999
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059bd 	.word	0x080059bd
 800596c:	080059bd 	.word	0x080059bd
 8005970:	080059ab 	.word	0x080059ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0202 	orr.w	r2, r2, #2
 8005982:	60da      	str	r2, [r3, #12]
      break;
 8005984:	e01d      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0204 	orr.w	r2, r2, #4
 8005994:	60da      	str	r2, [r3, #12]
      break;
 8005996:	e014      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0208 	orr.w	r2, r2, #8
 80059a6:	60da      	str	r2, [r3, #12]
      break;
 80059a8:	e00b      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0210 	orr.w	r2, r2, #16
 80059b8:	60da      	str	r2, [r3, #12]
      break;
 80059ba:	e002      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d148      	bne.n	8005a5a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 ffed 	bl	80069b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a22      	ldr	r2, [pc, #136]	@ (8005a64 <HAL_TIM_IC_Start_IT+0x234>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e8:	d01d      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <HAL_TIM_IC_Start_IT+0x238>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <HAL_TIM_IC_Start_IT+0x23c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <HAL_TIM_IC_Start_IT+0x240>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	@ (8005a74 <HAL_TIM_IC_Start_IT+0x244>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	@ (8005a78 <HAL_TIM_IC_Start_IT+0x248>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a16      	ldr	r2, [pc, #88]	@ (8005a7c <HAL_TIM_IC_Start_IT+0x24c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d111      	bne.n	8005a4a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d010      	beq.n	8005a5a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	e007      	b.n	8005a5a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40001800 	.word	0x40001800

08005a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d020      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0202 	mvn.w	r2, #2
 8005ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc f888 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fb2e 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb35 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d020      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0204 	mvn.w	r2, #4
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc f862 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb08 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb0f 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d020      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0208 	mvn.w	r2, #8
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2204      	movs	r2, #4
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fc f83c 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fae2 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fae9 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0210 	mvn.w	r2, #16
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fc f816 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fabc 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fac3 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0201 	mvn.w	r2, #1
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb fd8e 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 ffce 	bl	8006bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa94 	bl	800615c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0220 	mvn.w	r2, #32
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 ffa0 	bl	8006b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e088      	b.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c9c:	f000 fcc4 	bl	8006628 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 020c 	bic.w	r2, r2, #12
 8005cae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6999      	ldr	r1, [r3, #24]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	619a      	str	r2, [r3, #24]
 8005cc2:	e060      	b.n	8005d86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d11c      	bne.n	8005d04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005cda:	f000 fd48 	bl	800676e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6999      	ldr	r1, [r3, #24]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	619a      	str	r2, [r3, #24]
 8005d02:	e040      	b.n	8005d86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d11b      	bne.n	8005d42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d1a:	f000 fd95 	bl	8006848 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 020c 	bic.w	r2, r2, #12
 8005d2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69d9      	ldr	r1, [r3, #28]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	61da      	str	r2, [r3, #28]
 8005d40:	e021      	b.n	8005d86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d11c      	bne.n	8005d82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d58:	f000 fdb2 	bl	80068c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69d9      	ldr	r1, [r3, #28]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	021a      	lsls	r2, r3, #8
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	61da      	str	r2, [r3, #28]
 8005d80:	e001      	b.n	8005d86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e0ae      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	f200 809f 	bhi.w	8005f04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005f05 	.word	0x08005f05
 8005dd4:	08005f05 	.word	0x08005f05
 8005dd8:	08005f05 	.word	0x08005f05
 8005ddc:	08005e41 	.word	0x08005e41
 8005de0:	08005f05 	.word	0x08005f05
 8005de4:	08005f05 	.word	0x08005f05
 8005de8:	08005f05 	.word	0x08005f05
 8005dec:	08005e83 	.word	0x08005e83
 8005df0:	08005f05 	.word	0x08005f05
 8005df4:	08005f05 	.word	0x08005f05
 8005df8:	08005f05 	.word	0x08005f05
 8005dfc:	08005ec3 	.word	0x08005ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fa5e 	bl	80062c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0204 	bic.w	r2, r2, #4
 8005e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	619a      	str	r2, [r3, #24]
      break;
 8005e3e:	e064      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 faae 	bl	80063a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6999      	ldr	r1, [r3, #24]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	619a      	str	r2, [r3, #24]
      break;
 8005e80:	e043      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fb03 	bl	8006494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0208 	orr.w	r2, r2, #8
 8005e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0204 	bic.w	r2, r2, #4
 8005eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69d9      	ldr	r1, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	61da      	str	r2, [r3, #28]
      break;
 8005ec0:	e023      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fb57 	bl	800657c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69d9      	ldr	r1, [r3, #28]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	021a      	lsls	r2, r3, #8
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	61da      	str	r2, [r3, #28]
      break;
 8005f02:	e002      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
      break;
 8005f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIM_ConfigClockSource+0x1c>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e0b4      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x186>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f70:	d03e      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f76:	f200 8087 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7e:	f000 8086 	beq.w	800608e <HAL_TIM_ConfigClockSource+0x172>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f86:	d87f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b70      	cmp	r3, #112	@ 0x70
 8005f8a:	d01a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0xa6>
 8005f8c:	2b70      	cmp	r3, #112	@ 0x70
 8005f8e:	d87b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b60      	cmp	r3, #96	@ 0x60
 8005f92:	d050      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x11a>
 8005f94:	2b60      	cmp	r3, #96	@ 0x60
 8005f96:	d877      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b50      	cmp	r3, #80	@ 0x50
 8005f9a:	d03c      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0xfa>
 8005f9c:	2b50      	cmp	r3, #80	@ 0x50
 8005f9e:	d873      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d058      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x13a>
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d86f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b30      	cmp	r3, #48	@ 0x30
 8005faa:	d064      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	2b30      	cmp	r3, #48	@ 0x30
 8005fae:	d86b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d060      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d867      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15a>
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d05a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc0:	e062      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd2:	f000 fccd 	bl	8006970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	609a      	str	r2, [r3, #8]
      break;
 8005fee:	e04f      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006000:	f000 fcb6 	bl	8006970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006012:	609a      	str	r2, [r3, #8]
      break;
 8006014:	e03c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 fb74 	bl	8006710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2150      	movs	r1, #80	@ 0x50
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fc83 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 8006034:	e02c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	461a      	mov	r2, r3
 8006044:	f000 fbd0 	bl	80067e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2160      	movs	r1, #96	@ 0x60
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fc73 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 8006054:	e01c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	461a      	mov	r2, r3
 8006064:	f000 fb54 	bl	8006710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2140      	movs	r1, #64	@ 0x40
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fc63 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 8006074:	e00c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fc5a 	bl	800693a <TIM_ITRx_SetConfig>
      break;
 8006086:	e003      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      break;
 800608c:	e000      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800608e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	d831      	bhi.n	8006124 <HAL_TIM_ReadCapturedValue+0x78>
 80060c0:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	08006125 	.word	0x08006125
 80060d0:	08006125 	.word	0x08006125
 80060d4:	08006125 	.word	0x08006125
 80060d8:	08006107 	.word	0x08006107
 80060dc:	08006125 	.word	0x08006125
 80060e0:	08006125 	.word	0x08006125
 80060e4:	08006125 	.word	0x08006125
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006125 	.word	0x08006125
 80060f0:	08006125 	.word	0x08006125
 80060f4:	08006125 	.word	0x08006125
 80060f8:	0800611b 	.word	0x0800611b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	60fb      	str	r3, [r7, #12]

      break;
 8006104:	e00f      	b.n	8006126 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	60fb      	str	r3, [r7, #12]

      break;
 800610e:	e00a      	b.n	8006126 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	60fb      	str	r3, [r7, #12]

      break;
 8006118:	e005      	b.n	8006126 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	60fb      	str	r3, [r7, #12]

      break;
 8006122:	e000      	b.n	8006126 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006124:	bf00      	nop
  }

  return tmpreg;
 8006126:	68fb      	ldr	r3, [r7, #12]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a46      	ldr	r2, [pc, #280]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a43      	ldr	r2, [pc, #268]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a42      	ldr	r2, [pc, #264]	@ (80062a4 <TIM_Base_SetConfig+0x134>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a41      	ldr	r2, [pc, #260]	@ (80062a8 <TIM_Base_SetConfig+0x138>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a40      	ldr	r2, [pc, #256]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a35      	ldr	r2, [pc, #212]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d02b      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d027      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a32      	ldr	r2, [pc, #200]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d023      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a31      	ldr	r2, [pc, #196]	@ (80062a4 <TIM_Base_SetConfig+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01f      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a30      	ldr	r2, [pc, #192]	@ (80062a8 <TIM_Base_SetConfig+0x138>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01b      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2f      	ldr	r2, [pc, #188]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d017      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2e      	ldr	r2, [pc, #184]	@ (80062b0 <TIM_Base_SetConfig+0x140>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2d      	ldr	r2, [pc, #180]	@ (80062b4 <TIM_Base_SetConfig+0x144>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	@ (80062b8 <TIM_Base_SetConfig+0x148>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2b      	ldr	r2, [pc, #172]	@ (80062bc <TIM_Base_SetConfig+0x14c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2a      	ldr	r2, [pc, #168]	@ (80062c0 <TIM_Base_SetConfig+0x150>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a29      	ldr	r2, [pc, #164]	@ (80062c4 <TIM_Base_SetConfig+0x154>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a10      	ldr	r2, [pc, #64]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a12      	ldr	r2, [pc, #72]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]
  }
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40010400 	.word	0x40010400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800
 80062bc:	40001800 	.word	0x40001800
 80062c0:	40001c00 	.word	0x40001c00
 80062c4:	40002000 	.word	0x40002000

080062c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 0201 	bic.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0303 	bic.w	r3, r3, #3
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 0302 	bic.w	r3, r3, #2
 8006310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a20      	ldr	r2, [pc, #128]	@ (80063a0 <TIM_OC1_SetConfig+0xd8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC1_SetConfig+0x64>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a1f      	ldr	r2, [pc, #124]	@ (80063a4 <TIM_OC1_SetConfig+0xdc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10c      	bne.n	8006346 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0308 	bic.w	r3, r3, #8
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 0304 	bic.w	r3, r3, #4
 8006344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <TIM_OC1_SetConfig+0xd8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_OC1_SetConfig+0x8e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	@ (80063a4 <TIM_OC1_SetConfig+0xdc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d111      	bne.n	800637a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800635c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	621a      	str	r2, [r3, #32]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0210 	bic.w	r2, r3, #16
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a22      	ldr	r2, [pc, #136]	@ (800648c <TIM_OC2_SetConfig+0xe4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC2_SetConfig+0x68>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a21      	ldr	r2, [pc, #132]	@ (8006490 <TIM_OC2_SetConfig+0xe8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10d      	bne.n	800642c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a17      	ldr	r2, [pc, #92]	@ (800648c <TIM_OC2_SetConfig+0xe4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC2_SetConfig+0x94>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a16      	ldr	r2, [pc, #88]	@ (8006490 <TIM_OC2_SetConfig+0xe8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d113      	bne.n	8006464 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a21      	ldr	r2, [pc, #132]	@ (8006574 <TIM_OC3_SetConfig+0xe0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC3_SetConfig+0x66>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a20      	ldr	r2, [pc, #128]	@ (8006578 <TIM_OC3_SetConfig+0xe4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10d      	bne.n	8006516 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a16      	ldr	r2, [pc, #88]	@ (8006574 <TIM_OC3_SetConfig+0xe0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_OC3_SetConfig+0x92>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <TIM_OC3_SetConfig+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d113      	bne.n	800654e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800652c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	621a      	str	r2, [r3, #32]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40010000 	.word	0x40010000
 8006578:	40010400 	.word	0x40010400

0800657c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	031b      	lsls	r3, r3, #12
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a12      	ldr	r2, [pc, #72]	@ (8006620 <TIM_OC4_SetConfig+0xa4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_OC4_SetConfig+0x68>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a11      	ldr	r2, [pc, #68]	@ (8006624 <TIM_OC4_SetConfig+0xa8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d109      	bne.n	80065f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f023 0201 	bic.w	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4a28      	ldr	r2, [pc, #160]	@ (80066f4 <TIM_TI1_SetConfig+0xcc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665c:	d017      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a25      	ldr	r2, [pc, #148]	@ (80066f8 <TIM_TI1_SetConfig+0xd0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a24      	ldr	r2, [pc, #144]	@ (80066fc <TIM_TI1_SetConfig+0xd4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a23      	ldr	r2, [pc, #140]	@ (8006700 <TIM_TI1_SetConfig+0xd8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a22      	ldr	r2, [pc, #136]	@ (8006704 <TIM_TI1_SetConfig+0xdc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a21      	ldr	r2, [pc, #132]	@ (8006708 <TIM_TI1_SetConfig+0xe0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a20      	ldr	r2, [pc, #128]	@ (800670c <TIM_TI1_SetConfig+0xe4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <TIM_TI1_SetConfig+0x6a>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <TIM_TI1_SetConfig+0x6c>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e003      	b.n	80066b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f023 030a 	bic.w	r3, r3, #10
 80066cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f003 030a 	and.w	r3, r3, #10
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40010400 	.word	0x40010400
 8006708:	40014000 	.word	0x40014000
 800670c:	40001800 	.word	0x40001800

08006710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0201 	bic.w	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800673a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f023 030a 	bic.w	r3, r3, #10
 800674c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800676e:	b480      	push	{r7}
 8006770:	b087      	sub	sp, #28
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0210 	bic.w	r2, r3, #16
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800679a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	031b      	lsls	r3, r3, #12
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0210 	bic.w	r2, r3, #16
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	031b      	lsls	r3, r3, #12
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006824:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f023 0303 	bic.w	r3, r3, #3
 8006874:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006884:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	b2db      	uxtb	r3, r3
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006898:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	031b      	lsls	r3, r3, #12
 8006904:	b29b      	uxth	r3, r3
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006912:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	031b      	lsls	r3, r3, #12
 8006918:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	f043 0307 	orr.w	r3, r3, #7
 800695c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800698a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	021a      	lsls	r2, r3, #8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	431a      	orrs	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4313      	orrs	r3, r2
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	609a      	str	r2, [r3, #8]
}
 80069a4:	bf00      	nop
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	2201      	movs	r2, #1
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	fa01 f303 	lsl.w	r3, r1, r3
 80069e8:	431a      	orrs	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e05a      	b.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d022      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a60:	d01d      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1d      	ldr	r2, [pc, #116]	@ (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d018      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a18      	ldr	r2, [pc, #96]	@ (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40001800 	.word	0x40001800

08006af4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e03d      	b.n	8006b8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e042      	b.n	8006c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fb ffac 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	@ 0x24
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fdff 	bl	8007808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695a      	ldr	r2, [r3, #20]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08a      	sub	sp, #40	@ 0x28
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d175      	bne.n	8006d6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_UART_Transmit+0x2c>
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e06e      	b.n	8006d6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2221      	movs	r2, #33	@ 0x21
 8006c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c9e:	f7fc f835 	bl	8002d0c <HAL_GetTick>
 8006ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb8:	d108      	bne.n	8006ccc <HAL_UART_Transmit+0x6c>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e003      	b.n	8006cd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cd4:	e02e      	b.n	8006d34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	@ 0x80
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fb9b 	bl	800741c <UART_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e03a      	b.n	8006d6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	3302      	adds	r3, #2
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	e007      	b.n	8006d26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	3301      	adds	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1cb      	bne.n	8006cd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2140      	movs	r1, #64	@ 0x40
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fb67 	bl	800741c <UART_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e006      	b.n	8006d6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b08a      	sub	sp, #40	@ 0x28
 8006d7a:	af02      	add	r7, sp, #8
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	f040 8081 	bne.w	8006e9a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_UART_Receive+0x2e>
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e079      	b.n	8006e9c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2222      	movs	r2, #34	@ 0x22
 8006db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dbc:	f7fb ffa6 	bl	8002d0c <HAL_GetTick>
 8006dc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd6:	d108      	bne.n	8006dea <HAL_UART_Receive+0x74>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e003      	b.n	8006df2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006df2:	e047      	b.n	8006e84 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2120      	movs	r1, #32
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fb0c 	bl	800741c <UART_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e042      	b.n	8006e9c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3302      	adds	r3, #2
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e01f      	b.n	8006e76 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3e:	d007      	beq.n	8006e50 <HAL_UART_Receive+0xda>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <HAL_UART_Receive+0xe8>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e008      	b.n	8006e70 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	3301      	adds	r3, #1
 8006e74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1b2      	bne.n	8006df4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3720      	adds	r7, #32
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_UART_IRQHandler+0x66>
 8006ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fbc2 	bl	800768c <UART_Receive_IT>
      return;
 8006f08:	e25b      	b.n	80073c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80de 	beq.w	80070d0 <HAL_UART_IRQHandler+0x22c>
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80d1 	beq.w	80070d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_UART_IRQHandler+0xae>
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_UART_IRQHandler+0xd2>
 8006f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6e:	f043 0202 	orr.w	r2, r3, #2
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_UART_IRQHandler+0xf6>
 8006f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	f043 0204 	orr.w	r2, r3, #4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_UART_IRQHandler+0x126>
 8006fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d105      	bne.n	8006fbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 81f2 	beq.w	80073b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x14e>
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fb4d 	bl	800768c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <HAL_UART_IRQHandler+0x17a>
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d04f      	beq.n	80070be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa55 	bl	80074ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702e:	2b40      	cmp	r3, #64	@ 0x40
 8007030:	d141      	bne.n	80070b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007048:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800704c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800705e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007062:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800706a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d9      	bne.n	8007032 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d013      	beq.n	80070ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708a:	4a7e      	ldr	r2, [pc, #504]	@ (8007284 <HAL_UART_IRQHandler+0x3e0>)
 800708c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc fbcc 	bl	8003830 <HAL_DMA_Abort_IT>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d016      	beq.n	80070cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	e00e      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f99e 	bl	80073f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00a      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f99a 	bl	80073f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e006      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f996 	bl	80073f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070ca:	e175      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	bf00      	nop
    return;
 80070ce:	e173      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f040 814f 	bne.w	8007378 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8148 	beq.w	8007378 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8141 	beq.w	8007378 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	f040 80b6 	bne.w	8007288 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8145 	beq.w	80073bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800713a:	429a      	cmp	r2, r3
 800713c:	f080 813e 	bcs.w	80073bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007146:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007152:	f000 8088 	beq.w	8007266 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800716c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007182:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800718e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800719a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1d9      	bne.n	8007156 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e1      	bne.n	80071a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3314      	adds	r3, #20
 80071e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007202:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007204:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007208:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e3      	bne.n	80071de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	330c      	adds	r3, #12
 8007244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007248:	65ba      	str	r2, [r7, #88]	@ 0x58
 800724a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800724e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e3      	bne.n	8007224 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007260:	4618      	mov	r0, r3
 8007262:	f7fc fa75 	bl	8003750 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2202      	movs	r2, #2
 800726a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007274:	b29b      	uxth	r3, r3
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	b29b      	uxth	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8c1 	bl	8007404 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007282:	e09b      	b.n	80073bc <HAL_UART_IRQHandler+0x518>
 8007284:	08007595 	.word	0x08007595
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007290:	b29b      	uxth	r3, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 808e 	beq.w	80073c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8089 	beq.w	80073c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	330c      	adds	r3, #12
 80072b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80072d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e3      	bne.n	80072ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3314      	adds	r3, #20
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	623b      	str	r3, [r7, #32]
   return(result);
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3314      	adds	r3, #20
 8007306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800730a:	633a      	str	r2, [r7, #48]	@ 0x30
 800730c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e3      	bne.n	80072e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	60fb      	str	r3, [r7, #12]
   return(result);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0310 	bic.w	r3, r3, #16
 8007342:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007350:	61fa      	str	r2, [r7, #28]
 8007352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	69b9      	ldr	r1, [r7, #24]
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	617b      	str	r3, [r7, #20]
   return(result);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e3      	bne.n	800732c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800736a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f847 	bl	8007404 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007376:	e023      	b.n	80073c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <HAL_UART_IRQHandler+0x4f4>
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f913 	bl	80075bc <UART_Transmit_IT>
    return;
 8007396:	e014      	b.n	80073c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00e      	beq.n	80073c2 <HAL_UART_IRQHandler+0x51e>
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f953 	bl	800765c <UART_EndTransmit_IT>
    return;
 80073b6:	e004      	b.n	80073c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80073b8:	bf00      	nop
 80073ba:	e002      	b.n	80073c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80073bc:	bf00      	nop
 80073be:	e000      	b.n	80073c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80073c0:	bf00      	nop
  }
}
 80073c2:	37e8      	adds	r7, #232	@ 0xe8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742c:	e03b      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007434:	d037      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fb fc69 	bl	8002d0c <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <UART_WaitOnFlagUntilTimeout+0x30>
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e03a      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d023      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b80      	cmp	r3, #128	@ 0x80
 8007462:	d020      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b40      	cmp	r3, #64	@ 0x40
 8007468:	d01d      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d116      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f81d 	bl	80074ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2208      	movs	r2, #8
 8007498:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e00f      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4013      	ands	r3, r2
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	bf0c      	ite	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	2300      	movne	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d0b4      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b095      	sub	sp, #84	@ 0x54
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330c      	adds	r3, #12
 80074f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e5      	bne.n	80074d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	61fb      	str	r3, [r7, #28]
   return(result);
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800752c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	2b01      	cmp	r3, #1
 8007544:	d119      	bne.n	800757a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	60bb      	str	r3, [r7, #8]
   return(result);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f023 0310 	bic.w	r3, r3, #16
 800755c:	647b      	str	r3, [r7, #68]	@ 0x44
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007566:	61ba      	str	r2, [r7, #24]
 8007568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6979      	ldr	r1, [r7, #20]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007588:	bf00      	nop
 800758a:	3754      	adds	r7, #84	@ 0x54
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff ff1e 	bl	80073f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b21      	cmp	r3, #33	@ 0x21
 80075ce:	d13e      	bne.n	800764e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d8:	d114      	bne.n	8007604 <UART_Transmit_IT+0x48>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d110      	bne.n	8007604 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	621a      	str	r2, [r3, #32]
 8007602:	e008      	b.n	8007616 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	1c59      	adds	r1, r3, #1
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6211      	str	r1, [r2, #32]
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4619      	mov	r1, r3
 8007624:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10f      	bne.n	800764a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007638:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007648:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007672:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fea3 	bl	80073c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	@ 0x30
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b22      	cmp	r3, #34	@ 0x22
 800769e:	f040 80ae 	bne.w	80077fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076aa:	d117      	bne.n	80076dc <UART_Receive_IT+0x50>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d113      	bne.n	80076dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	1c9a      	adds	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80076da:	e026      	b.n	800772a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ee:	d007      	beq.n	8007700 <UART_Receive_IT+0x74>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <UART_Receive_IT+0x82>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e008      	b.n	8007720 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771a:	b2da      	uxtb	r2, r3
 800771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800773a:	2b00      	cmp	r3, #0
 800773c:	d15d      	bne.n	80077fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0220 	bic.w	r2, r2, #32
 800774c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800775c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	2b01      	cmp	r3, #1
 8007782:	d135      	bne.n	80077f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	330c      	adds	r3, #12
 80077a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077aa:	623a      	str	r2, [r7, #32]
 80077ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	69f9      	ldr	r1, [r7, #28]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e5      	bne.n	800778a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d10a      	bne.n	80077e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fe0b 	bl	8007404 <HAL_UARTEx_RxEventCallback>
 80077ee:	e002      	b.n	80077f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff fdf3 	bl	80073dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e002      	b.n	8007800 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e000      	b.n	8007800 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3730      	adds	r7, #48	@ 0x30
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800780c:	b0c0      	sub	sp, #256	@ 0x100
 800780e:	af00      	add	r7, sp, #0
 8007810:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007824:	68d9      	ldr	r1, [r3, #12]
 8007826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	ea40 0301 	orr.w	r3, r0, r1
 8007830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	431a      	orrs	r2, r3
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	431a      	orrs	r2, r3
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007860:	f021 010c 	bic.w	r1, r1, #12
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800786e:	430b      	orrs	r3, r1
 8007870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007882:	6999      	ldr	r1, [r3, #24]
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	ea40 0301 	orr.w	r3, r0, r1
 800788e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b8f      	ldr	r3, [pc, #572]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 8007898:	429a      	cmp	r2, r3
 800789a:	d005      	beq.n	80078a8 <UART_SetConfig+0xa0>
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad8 <UART_SetConfig+0x2d0>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d104      	bne.n	80078b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078a8:	f7fd f87c 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 80078ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078b0:	e003      	b.n	80078ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078b2:	f7fd f863 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 80078b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c4:	f040 810c 	bne.w	8007ae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078da:	4622      	mov	r2, r4
 80078dc:	462b      	mov	r3, r5
 80078de:	1891      	adds	r1, r2, r2
 80078e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078e2:	415b      	adcs	r3, r3
 80078e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078ea:	4621      	mov	r1, r4
 80078ec:	eb12 0801 	adds.w	r8, r2, r1
 80078f0:	4629      	mov	r1, r5
 80078f2:	eb43 0901 	adc.w	r9, r3, r1
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800790a:	4690      	mov	r8, r2
 800790c:	4699      	mov	r9, r3
 800790e:	4623      	mov	r3, r4
 8007910:	eb18 0303 	adds.w	r3, r8, r3
 8007914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007918:	462b      	mov	r3, r5
 800791a:	eb49 0303 	adc.w	r3, r9, r3
 800791e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800792e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007936:	460b      	mov	r3, r1
 8007938:	18db      	adds	r3, r3, r3
 800793a:	653b      	str	r3, [r7, #80]	@ 0x50
 800793c:	4613      	mov	r3, r2
 800793e:	eb42 0303 	adc.w	r3, r2, r3
 8007942:	657b      	str	r3, [r7, #84]	@ 0x54
 8007944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800794c:	f7f9 f8a6 	bl	8000a9c <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4b61      	ldr	r3, [pc, #388]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007956:	fba3 2302 	umull	r2, r3, r3, r2
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	011c      	lsls	r4, r3, #4
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007968:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800796c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	1891      	adds	r1, r2, r2
 8007976:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007978:	415b      	adcs	r3, r3
 800797a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800797c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007980:	4641      	mov	r1, r8
 8007982:	eb12 0a01 	adds.w	sl, r2, r1
 8007986:	4649      	mov	r1, r9
 8007988:	eb43 0b01 	adc.w	fp, r3, r1
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800799c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079a0:	4692      	mov	sl, r2
 80079a2:	469b      	mov	fp, r3
 80079a4:	4643      	mov	r3, r8
 80079a6:	eb1a 0303 	adds.w	r3, sl, r3
 80079aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ae:	464b      	mov	r3, r9
 80079b0:	eb4b 0303 	adc.w	r3, fp, r3
 80079b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079cc:	460b      	mov	r3, r1
 80079ce:	18db      	adds	r3, r3, r3
 80079d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d2:	4613      	mov	r3, r2
 80079d4:	eb42 0303 	adc.w	r3, r2, r3
 80079d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079e2:	f7f9 f85b 	bl	8000a9c <__aeabi_uldivmod>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	4b3b      	ldr	r3, [pc, #236]	@ (8007adc <UART_SetConfig+0x2d4>)
 80079ee:	fba3 2301 	umull	r2, r3, r3, r1
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	2264      	movs	r2, #100	@ 0x64
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	1acb      	subs	r3, r1, r3
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a02:	4b36      	ldr	r3, [pc, #216]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007a04:	fba3 2302 	umull	r2, r3, r3, r2
 8007a08:	095b      	lsrs	r3, r3, #5
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a10:	441c      	add	r4, r3
 8007a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	1891      	adds	r1, r2, r2
 8007a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a2c:	415b      	adcs	r3, r3
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a34:	4641      	mov	r1, r8
 8007a36:	1851      	adds	r1, r2, r1
 8007a38:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	414b      	adcs	r3, r1
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	00cb      	lsls	r3, r1, #3
 8007a50:	4651      	mov	r1, sl
 8007a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a56:	4651      	mov	r1, sl
 8007a58:	00ca      	lsls	r2, r1, #3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4642      	mov	r2, r8
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a68:	464b      	mov	r3, r9
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	eb42 0303 	adc.w	r3, r2, r3
 8007a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a88:	460b      	mov	r3, r1
 8007a8a:	18db      	adds	r3, r3, r3
 8007a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a8e:	4613      	mov	r3, r2
 8007a90:	eb42 0303 	adc.w	r3, r2, r3
 8007a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a9e:	f7f8 fffd 	bl	8000a9c <__aeabi_uldivmod>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	2164      	movs	r1, #100	@ 0x64
 8007ab0:	fb01 f303 	mul.w	r3, r1, r3
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	3332      	adds	r3, #50	@ 0x32
 8007aba:	4a08      	ldr	r2, [pc, #32]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007abc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac0:	095b      	lsrs	r3, r3, #5
 8007ac2:	f003 0207 	and.w	r2, r3, #7
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4422      	add	r2, r4
 8007ace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ad0:	e106      	b.n	8007ce0 <UART_SetConfig+0x4d8>
 8007ad2:	bf00      	nop
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007aea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007aee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	1891      	adds	r1, r2, r2
 8007af8:	6239      	str	r1, [r7, #32]
 8007afa:	415b      	adcs	r3, r3
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b02:	4641      	mov	r1, r8
 8007b04:	1854      	adds	r4, r2, r1
 8007b06:	4649      	mov	r1, r9
 8007b08:	eb43 0501 	adc.w	r5, r3, r1
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	00eb      	lsls	r3, r5, #3
 8007b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b1a:	00e2      	lsls	r2, r4, #3
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	461d      	mov	r5, r3
 8007b20:	4643      	mov	r3, r8
 8007b22:	18e3      	adds	r3, r4, r3
 8007b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b28:	464b      	mov	r3, r9
 8007b2a:	eb45 0303 	adc.w	r3, r5, r3
 8007b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b42:	f04f 0200 	mov.w	r2, #0
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b4e:	4629      	mov	r1, r5
 8007b50:	008b      	lsls	r3, r1, #2
 8007b52:	4621      	mov	r1, r4
 8007b54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b58:	4621      	mov	r1, r4
 8007b5a:	008a      	lsls	r2, r1, #2
 8007b5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b60:	f7f8 ff9c 	bl	8000a9c <__aeabi_uldivmod>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4b60      	ldr	r3, [pc, #384]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	011c      	lsls	r4, r3, #4
 8007b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	1891      	adds	r1, r2, r2
 8007b8a:	61b9      	str	r1, [r7, #24]
 8007b8c:	415b      	adcs	r3, r3
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b94:	4641      	mov	r1, r8
 8007b96:	1851      	adds	r1, r2, r1
 8007b98:	6139      	str	r1, [r7, #16]
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	414b      	adcs	r3, r1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bac:	4659      	mov	r1, fp
 8007bae:	00cb      	lsls	r3, r1, #3
 8007bb0:	4651      	mov	r1, sl
 8007bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bb6:	4651      	mov	r1, sl
 8007bb8:	00ca      	lsls	r2, r1, #3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bc8:	464b      	mov	r3, r9
 8007bca:	460a      	mov	r2, r1
 8007bcc:	eb42 0303 	adc.w	r3, r2, r3
 8007bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bec:	4649      	mov	r1, r9
 8007bee:	008b      	lsls	r3, r1, #2
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf6:	4641      	mov	r1, r8
 8007bf8:	008a      	lsls	r2, r1, #2
 8007bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007bfe:	f7f8 ff4d 	bl	8000a9c <__aeabi_uldivmod>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	4b38      	ldr	r3, [pc, #224]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	2264      	movs	r2, #100	@ 0x64
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	1acb      	subs	r3, r1, r3
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	3332      	adds	r3, #50	@ 0x32
 8007c1c:	4a33      	ldr	r2, [pc, #204]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c28:	441c      	add	r4, r3
 8007c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c2e:	2200      	movs	r2, #0
 8007c30:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c32:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	415b      	adcs	r3, r3
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c48:	4641      	mov	r1, r8
 8007c4a:	1851      	adds	r1, r2, r1
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	4649      	mov	r1, r9
 8007c50:	414b      	adcs	r3, r1
 8007c52:	607b      	str	r3, [r7, #4]
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c60:	4659      	mov	r1, fp
 8007c62:	00cb      	lsls	r3, r1, #3
 8007c64:	4651      	mov	r1, sl
 8007c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c6a:	4651      	mov	r1, sl
 8007c6c:	00ca      	lsls	r2, r1, #3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	4642      	mov	r2, r8
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	460a      	mov	r2, r1
 8007c7e:	eb42 0303 	adc.w	r3, r2, r3
 8007c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	008b      	lsls	r3, r1, #2
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	008a      	lsls	r2, r1, #2
 8007caa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cae:	f7f8 fef5 	bl	8000a9c <__aeabi_uldivmod>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	2164      	movs	r1, #100	@ 0x64
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	3332      	adds	r3, #50	@ 0x32
 8007cca:	4a08      	ldr	r2, [pc, #32]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	f003 020f 	and.w	r2, r3, #15
 8007cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4422      	add	r2, r4
 8007cde:	609a      	str	r2, [r3, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cec:	51eb851f 	.word	0x51eb851f

08007cf0 <__NVIC_SetPriority>:
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db0a      	blt.n	8007d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	490c      	ldr	r1, [pc, #48]	@ (8007d3c <__NVIC_SetPriority+0x4c>)
 8007d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d0e:	0112      	lsls	r2, r2, #4
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	440b      	add	r3, r1
 8007d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d18:	e00a      	b.n	8007d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	4908      	ldr	r1, [pc, #32]	@ (8007d40 <__NVIC_SetPriority+0x50>)
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	3b04      	subs	r3, #4
 8007d28:	0112      	lsls	r2, r2, #4
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	761a      	strb	r2, [r3, #24]
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	e000e100 	.word	0xe000e100
 8007d40:	e000ed00 	.word	0xe000ed00

08007d44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d48:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <SysTick_Handler+0x1c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d4c:	f002 f852 	bl	8009df4 <xTaskGetSchedulerState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d001      	beq.n	8007d5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d56:	f002 ff47 	bl	800abe8 <xPortSysTickHandler>
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	e000e010 	.word	0xe000e010

08007d64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f06f 0004 	mvn.w	r0, #4
 8007d6e:	f7ff ffbf 	bl	8007cf0 <__NVIC_SetPriority>
#endif
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	603b      	str	r3, [r7, #0]
  return(result);
 8007d84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d8a:	f06f 0305 	mvn.w	r3, #5
 8007d8e:	607b      	str	r3, [r7, #4]
 8007d90:	e00c      	b.n	8007dac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d92:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <osKernelInitialize+0x44>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d9a:	4b08      	ldr	r3, [pc, #32]	@ (8007dbc <osKernelInitialize+0x44>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	607b      	str	r3, [r7, #4]
 8007da4:	e002      	b.n	8007dac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007daa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dac:	687b      	ldr	r3, [r7, #4]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	20000754 	.word	0x20000754

08007dc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dc6:	f3ef 8305 	mrs	r3, IPSR
 8007dca:	603b      	str	r3, [r7, #0]
  return(result);
 8007dcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <osKernelStart+0x1a>
    stat = osErrorISR;
 8007dd2:	f06f 0305 	mvn.w	r3, #5
 8007dd6:	607b      	str	r3, [r7, #4]
 8007dd8:	e010      	b.n	8007dfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dda:	4b0b      	ldr	r3, [pc, #44]	@ (8007e08 <osKernelStart+0x48>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d109      	bne.n	8007df6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007de2:	f7ff ffbf 	bl	8007d64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007de6:	4b08      	ldr	r3, [pc, #32]	@ (8007e08 <osKernelStart+0x48>)
 8007de8:	2202      	movs	r2, #2
 8007dea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007dec:	f001 fba4 	bl	8009538 <vTaskStartScheduler>
      stat = osOK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	607b      	str	r3, [r7, #4]
 8007df4:	e002      	b.n	8007dfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dfc:	687b      	ldr	r3, [r7, #4]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000754 	.word	0x20000754

08007e0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08e      	sub	sp, #56	@ 0x38
 8007e10:	af04      	add	r7, sp, #16
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1c:	f3ef 8305 	mrs	r3, IPSR
 8007e20:	617b      	str	r3, [r7, #20]
  return(result);
 8007e22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d17e      	bne.n	8007f26 <osThreadNew+0x11a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d07b      	beq.n	8007f26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e2e:	2380      	movs	r3, #128	@ 0x80
 8007e30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e32:	2318      	movs	r3, #24
 8007e34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d045      	beq.n	8007ed2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <osThreadNew+0x48>
        name = attr->name;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d008      	beq.n	8007e7a <osThreadNew+0x6e>
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2b38      	cmp	r3, #56	@ 0x38
 8007e6c:	d805      	bhi.n	8007e7a <osThreadNew+0x6e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <osThreadNew+0x72>
        return (NULL);
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e054      	b.n	8007f28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	089b      	lsrs	r3, r3, #2
 8007e8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <osThreadNew+0xa8>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b5b      	cmp	r3, #91	@ 0x5b
 8007e9c:	d90a      	bls.n	8007eb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <osThreadNew+0xa8>
        mem = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	e010      	b.n	8007ed6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10c      	bne.n	8007ed6 <osThreadNew+0xca>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d108      	bne.n	8007ed6 <osThreadNew+0xca>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <osThreadNew+0xca>
          mem = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	e001      	b.n	8007ed6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d110      	bne.n	8007efe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ee4:	9202      	str	r2, [sp, #8]
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f001 f944 	bl	8009180 <xTaskCreateStatic>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	e013      	b.n	8007f26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d110      	bne.n	8007f26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f107 0310 	add.w	r3, r7, #16
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f001 f992 	bl	8009240 <xTaskCreate>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d001      	beq.n	8007f26 <osThreadNew+0x11a>
            hTask = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f26:	693b      	ldr	r3, [r7, #16]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3728      	adds	r7, #40	@ 0x28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f38:	f3ef 8305 	mrs	r3, IPSR
 8007f3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <osDelay+0x1c>
    stat = osErrorISR;
 8007f44:	f06f 0305 	mvn.w	r3, #5
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e007      	b.n	8007f5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fab8 	bl	80094cc <vTaskDelay>
    }
  }

  return (stat);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b088      	sub	sp, #32
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f72:	f3ef 8305 	mrs	r3, IPSR
 8007f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f78:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d174      	bne.n	8008068 <osMutexNew+0x102>
    if (attr != NULL) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	e001      	b.n	8007f90 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <osMutexNew+0x3a>
      rmtx = 1U;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	e001      	b.n	8007fa4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d15c      	bne.n	8008068 <osMutexNew+0x102>
      mem = -1;
 8007fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fb2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d015      	beq.n	8007fe6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d006      	beq.n	8007fd0 <osMutexNew+0x6a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fc8:	d902      	bls.n	8007fd0 <osMutexNew+0x6a>
          mem = 1;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	e00c      	b.n	8007fea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d108      	bne.n	8007fea <osMutexNew+0x84>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d104      	bne.n	8007fea <osMutexNew+0x84>
            mem = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	e001      	b.n	8007fea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d112      	bne.n	8008016 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	2004      	movs	r0, #4
 8007ffe:	f000 fb20 	bl	8008642 <xQueueCreateMutexStatic>
 8008002:	61f8      	str	r0, [r7, #28]
 8008004:	e016      	b.n	8008034 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	4619      	mov	r1, r3
 800800c:	2001      	movs	r0, #1
 800800e:	f000 fb18 	bl	8008642 <xQueueCreateMutexStatic>
 8008012:	61f8      	str	r0, [r7, #28]
 8008014:	e00e      	b.n	8008034 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008022:	2004      	movs	r0, #4
 8008024:	f000 faf5 	bl	8008612 <xQueueCreateMutex>
 8008028:	61f8      	str	r0, [r7, #28]
 800802a:	e003      	b.n	8008034 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800802c:	2001      	movs	r0, #1
 800802e:	f000 faf0 	bl	8008612 <xQueueCreateMutex>
 8008032:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00c      	beq.n	8008054 <osMutexNew+0xee>
        if (attr != NULL) {
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <osMutexNew+0xe2>
          name = attr->name;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e001      	b.n	800804c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800804c:	68f9      	ldr	r1, [r7, #12]
 800804e:	69f8      	ldr	r0, [r7, #28]
 8008050:	f001 f838 	bl	80090c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <osMutexNew+0x102>
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f043 0301 	orr.w	r3, r3, #1
 8008066:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008068:	69fb      	ldr	r3, [r7, #28]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008090:	f3ef 8305 	mrs	r3, IPSR
 8008094:	60bb      	str	r3, [r7, #8]
  return(result);
 8008096:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800809c:	f06f 0305 	mvn.w	r3, #5
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	e02c      	b.n	80080fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80080aa:	f06f 0303 	mvn.w	r3, #3
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e025      	b.n	80080fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d011      	beq.n	80080dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6938      	ldr	r0, [r7, #16]
 80080bc:	f000 fb11 	bl	80086e2 <xQueueTakeMutexRecursive>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d01b      	beq.n	80080fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80080cc:	f06f 0301 	mvn.w	r3, #1
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	e014      	b.n	80080fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080d4:	f06f 0302 	mvn.w	r3, #2
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e010      	b.n	80080fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6938      	ldr	r0, [r7, #16]
 80080e0:	f000 fdb8 	bl	8008c54 <xQueueSemaphoreTake>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d009      	beq.n	80080fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80080f0:	f06f 0301 	mvn.w	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e002      	b.n	80080fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080f8:	f06f 0302 	mvn.w	r3, #2
 80080fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80080fe:	697b      	ldr	r3, [r7, #20]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008124:	f3ef 8305 	mrs	r3, IPSR
 8008128:	60bb      	str	r3, [r7, #8]
  return(result);
 800812a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008130:	f06f 0305 	mvn.w	r3, #5
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	e01f      	b.n	8008178 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800813e:	f06f 0303 	mvn.w	r3, #3
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	e018      	b.n	8008178 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800814c:	6938      	ldr	r0, [r7, #16]
 800814e:	f000 fa93 	bl	8008678 <xQueueGiveMutexRecursive>
 8008152:	4603      	mov	r3, r0
 8008154:	2b01      	cmp	r3, #1
 8008156:	d00f      	beq.n	8008178 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008158:	f06f 0302 	mvn.w	r3, #2
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	e00b      	b.n	8008178 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	6938      	ldr	r0, [r7, #16]
 8008168:	f000 faf2 	bl	8008750 <xQueueGenericSend>
 800816c:	4603      	mov	r3, r0
 800816e:	2b01      	cmp	r3, #1
 8008170:	d002      	beq.n	8008178 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008172:	f06f 0302 	mvn.w	r3, #2
 8008176:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008178:	697b      	ldr	r3, [r7, #20]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a07      	ldr	r2, [pc, #28]	@ (80081b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008194:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4a06      	ldr	r2, [pc, #24]	@ (80081b4 <vApplicationGetIdleTaskMemory+0x30>)
 800819a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2280      	movs	r2, #128	@ 0x80
 80081a0:	601a      	str	r2, [r3, #0]
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	20000758 	.word	0x20000758
 80081b4:	200007b4 	.word	0x200007b4

080081b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a07      	ldr	r2, [pc, #28]	@ (80081e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80081c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	4a06      	ldr	r2, [pc, #24]	@ (80081e8 <vApplicationGetTimerTaskMemory+0x30>)
 80081ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081d6:	601a      	str	r2, [r3, #0]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	200009b4 	.word	0x200009b4
 80081e8:	20000a10 	.word	0x20000a10

080081ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f103 0208 	add.w	r2, r3, #8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f103 0208 	add.w	r2, r3, #8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f103 0208 	add.w	r2, r3, #8
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082a4:	d103      	bne.n	80082ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e00c      	b.n	80082c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3308      	adds	r3, #8
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e002      	b.n	80082bc <vListInsert+0x2e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d2f6      	bcs.n	80082b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6892      	ldr	r2, [r2, #8]
 8008316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6852      	ldr	r2, [r2, #4]
 8008320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d103      	bne.n	8008334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	1e5a      	subs	r2, r3, #1
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008380:	f002 fba2 	bl	800aac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	441a      	add	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b0:	3b01      	subs	r3, #1
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	441a      	add	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	22ff      	movs	r2, #255	@ 0xff
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	22ff      	movs	r2, #255	@ 0xff
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d114      	bne.n	8008400 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01a      	beq.n	8008414 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3310      	adds	r3, #16
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fb36 	bl	8009a54 <xTaskRemoveFromEventList>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d012      	beq.n	8008414 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <xQueueGenericReset+0xd0>)
 80083f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	e009      	b.n	8008414 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3310      	adds	r3, #16
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff fef1 	bl	80081ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3324      	adds	r3, #36	@ 0x24
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff feec 	bl	80081ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008414:	f002 fb8a 	bl	800ab2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008418:	2301      	movs	r3, #1
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08e      	sub	sp, #56	@ 0x38
 800842c:	af02      	add	r7, sp, #8
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10b      	bne.n	8008454 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <xQueueGenericCreateStatic+0x56>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <xQueueGenericCreateStatic+0x5a>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <xQueueGenericCreateStatic+0x5c>
 8008482:	2300      	movs	r3, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <xQueueGenericCreateStatic+0x84>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <xQueueGenericCreateStatic+0x88>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <xQueueGenericCreateStatic+0x8a>
 80084b0:	2300      	movs	r3, #0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	61fb      	str	r3, [r7, #28]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084ce:	2350      	movs	r3, #80	@ 0x50
 80084d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b50      	cmp	r3, #80	@ 0x50
 80084d6:	d00b      	beq.n	80084f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	61bb      	str	r3, [r7, #24]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00d      	beq.n	8008518 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008504:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68b9      	ldr	r1, [r7, #8]
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 f840 	bl	8008598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3730      	adds	r7, #48	@ 0x30
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008522:	b580      	push	{r7, lr}
 8008524:	b08a      	sub	sp, #40	@ 0x28
 8008526:	af02      	add	r7, sp, #8
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	4613      	mov	r3, r2
 800852e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10b      	bne.n	800854e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	613b      	str	r3, [r7, #16]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	fb02 f303 	mul.w	r3, r2, r3
 8008556:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	3350      	adds	r3, #80	@ 0x50
 800855c:	4618      	mov	r0, r3
 800855e:	f002 fbd5 	bl	800ad0c <pvPortMalloc>
 8008562:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d011      	beq.n	800858e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	3350      	adds	r3, #80	@ 0x50
 8008572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800857c:	79fa      	ldrb	r2, [r7, #7]
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	4613      	mov	r3, r2
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 f805 	bl	8008598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800858e:	69bb      	ldr	r3, [r7, #24]
	}
 8008590:	4618      	mov	r0, r3
 8008592:	3720      	adds	r7, #32
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d103      	bne.n	80085b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	e002      	b.n	80085ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085c6:	2101      	movs	r1, #1
 80085c8:	69b8      	ldr	r0, [r7, #24]
 80085ca:	f7ff fec3 	bl	8008354 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085fe:	2300      	movs	r3, #0
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f8a3 	bl	8008750 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	4603      	mov	r3, r0
 800861a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800861c:	2301      	movs	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	2300      	movs	r3, #0
 8008622:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	461a      	mov	r2, r3
 8008628:	6939      	ldr	r1, [r7, #16]
 800862a:	6978      	ldr	r0, [r7, #20]
 800862c:	f7ff ff79 	bl	8008522 <xQueueGenericCreate>
 8008630:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff ffd3 	bl	80085de <prvInitialiseMutex>

		return xNewQueue;
 8008638:	68fb      	ldr	r3, [r7, #12]
	}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008642:	b580      	push	{r7, lr}
 8008644:	b088      	sub	sp, #32
 8008646:	af02      	add	r7, sp, #8
 8008648:	4603      	mov	r3, r0
 800864a:	6039      	str	r1, [r7, #0]
 800864c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800864e:	2301      	movs	r3, #1
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	2300      	movs	r3, #0
 8008654:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	6939      	ldr	r1, [r7, #16]
 8008660:	6978      	ldr	r0, [r7, #20]
 8008662:	f7ff fee1 	bl	8008428 <xQueueGenericCreateStatic>
 8008666:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff ffb8 	bl	80085de <prvInitialiseMutex>

		return xNewQueue;
 800866e:	68fb      	ldr	r3, [r7, #12]
	}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	60fb      	str	r3, [r7, #12]
}
 800869c:	bf00      	nop
 800869e:	bf00      	nop
 80086a0:	e7fd      	b.n	800869e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	689c      	ldr	r4, [r3, #8]
 80086a6:	f001 fb95 	bl	8009dd4 <xTaskGetCurrentTaskHandle>
 80086aa:	4603      	mov	r3, r0
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d111      	bne.n	80086d4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	1e5a      	subs	r2, r3, #1
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80086c2:	2300      	movs	r3, #0
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	6938      	ldr	r0, [r7, #16]
 80086ca:	f000 f841 	bl	8008750 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80086ce:	2301      	movs	r3, #1
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	e001      	b.n	80086d8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80086d8:	697b      	ldr	r3, [r7, #20]
	}
 80086da:	4618      	mov	r0, r3
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd90      	pop	{r4, r7, pc}

080086e2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80086e2:	b590      	push	{r4, r7, lr}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	689c      	ldr	r4, [r3, #8]
 8008712:	f001 fb5f 	bl	8009dd4 <xTaskGetCurrentTaskHandle>
 8008716:	4603      	mov	r3, r0
 8008718:	429c      	cmp	r4, r3
 800871a:	d107      	bne.n	800872c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008726:	2301      	movs	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e00c      	b.n	8008746 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6938      	ldr	r0, [r7, #16]
 8008730:	f000 fa90 	bl	8008c54 <xQueueSemaphoreTake>
 8008734:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008746:	697b      	ldr	r3, [r7, #20]
	}
 8008748:	4618      	mov	r0, r3
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}

08008750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	@ 0x38
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800875e:	2300      	movs	r3, #0
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <xQueueGenericSend+0x34>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <xQueueGenericSend+0x42>
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <xQueueGenericSend+0x46>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <xQueueGenericSend+0x48>
 8008796:	2300      	movs	r3, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <xQueueGenericSend+0x64>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d103      	bne.n	80087c2 <xQueueGenericSend+0x72>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <xQueueGenericSend+0x76>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericSend+0x78>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10b      	bne.n	80087e4 <xQueueGenericSend+0x94>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	623b      	str	r3, [r7, #32]
}
 80087de:	bf00      	nop
 80087e0:	bf00      	nop
 80087e2:	e7fd      	b.n	80087e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e4:	f001 fb06 	bl	8009df4 <xTaskGetSchedulerState>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <xQueueGenericSend+0xa4>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <xQueueGenericSend+0xa8>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e000      	b.n	80087fa <xQueueGenericSend+0xaa>
 80087f8:	2300      	movs	r3, #0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10b      	bne.n	8008816 <xQueueGenericSend+0xc6>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	61fb      	str	r3, [r7, #28]
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008816:	f002 f957 	bl	800aac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <xQueueGenericSend+0xdc>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d129      	bne.n	8008880 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008832:	f000 fb37 	bl	8008ea4 <prvCopyDataToQueue>
 8008836:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d010      	beq.n	8008862 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	3324      	adds	r3, #36	@ 0x24
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f905 	bl	8009a54 <xTaskRemoveFromEventList>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d013      	beq.n	8008878 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008850:	4b3f      	ldr	r3, [pc, #252]	@ (8008950 <xQueueGenericSend+0x200>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	e00a      	b.n	8008878 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008868:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <xQueueGenericSend+0x200>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008878:	f002 f958 	bl	800ab2c <vPortExitCritical>
				return pdPASS;
 800887c:	2301      	movs	r3, #1
 800887e:	e063      	b.n	8008948 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008886:	f002 f951 	bl	800ab2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800888a:	2300      	movs	r3, #0
 800888c:	e05c      	b.n	8008948 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800888e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f93f 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800889e:	2301      	movs	r3, #1
 80088a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a2:	f002 f943 	bl	800ab2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088a6:	f000 feaf 	bl	8009608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088aa:	f002 f90d 	bl	800aac8 <vPortEnterCritical>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ba:	d103      	bne.n	80088c4 <xQueueGenericSend+0x174>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ca:	b25b      	sxtb	r3, r3
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088d0:	d103      	bne.n	80088da <xQueueGenericSend+0x18a>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088da:	f002 f927 	bl	800ab2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088de:	1d3a      	adds	r2, r7, #4
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f92e 	bl	8009b48 <xTaskCheckForTimeOut>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d124      	bne.n	800893c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088f4:	f000 fbce 	bl	8009094 <prvIsQueueFull>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d018      	beq.n	8008930 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	3310      	adds	r3, #16
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f001 f852 	bl	80099b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800890c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800890e:	f000 fb59 	bl	8008fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008912:	f000 fe87 	bl	8009624 <xTaskResumeAll>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	f47f af7c 	bne.w	8008816 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800891e:	4b0c      	ldr	r3, [pc, #48]	@ (8008950 <xQueueGenericSend+0x200>)
 8008920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	e772      	b.n	8008816 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008932:	f000 fb47 	bl	8008fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008936:	f000 fe75 	bl	8009624 <xTaskResumeAll>
 800893a:	e76c      	b.n	8008816 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800893c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800893e:	f000 fb41 	bl	8008fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008942:	f000 fe6f 	bl	8009624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008946:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008948:	4618      	mov	r0, r3
 800894a:	3738      	adds	r7, #56	@ 0x38
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b090      	sub	sp, #64	@ 0x40
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10b      	bne.n	8008984 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	e7fd      	b.n	8008980 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <xQueueGenericSendFromISR+0x3e>
 800898a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <xQueueGenericSendFromISR+0x42>
 8008992:	2301      	movs	r3, #1
 8008994:	e000      	b.n	8008998 <xQueueGenericSendFromISR+0x44>
 8008996:	2300      	movs	r3, #0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10b      	bne.n	80089b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089ae:	bf00      	nop
 80089b0:	bf00      	nop
 80089b2:	e7fd      	b.n	80089b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d103      	bne.n	80089c2 <xQueueGenericSendFromISR+0x6e>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <xQueueGenericSendFromISR+0x72>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueGenericSendFromISR+0x74>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	623b      	str	r3, [r7, #32]
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	e7fd      	b.n	80089e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e4:	f002 f950 	bl	800ac88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089e8:	f3ef 8211 	mrs	r2, BASEPRI
 80089ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	61fa      	str	r2, [r7, #28]
 80089fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d302      	bcc.n	8008a16 <xQueueGenericSendFromISR+0xc2>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d12f      	bne.n	8008a76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a2c:	f000 fa3a 	bl	8008ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a38:	d112      	bne.n	8008a60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d016      	beq.n	8008a70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	3324      	adds	r3, #36	@ 0x24
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 f804 	bl	8009a54 <xTaskRemoveFromEventList>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00e      	beq.n	8008a70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e007      	b.n	8008a70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a64:	3301      	adds	r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	b25a      	sxtb	r2, r3
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a70:	2301      	movs	r3, #1
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a74:	e001      	b.n	8008a7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3740      	adds	r7, #64	@ 0x40
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08c      	sub	sp, #48	@ 0x30
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10b      	bne.n	8008ac2 <xQueueReceive+0x32>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	623b      	str	r3, [r7, #32]
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d103      	bne.n	8008ad0 <xQueueReceive+0x40>
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <xQueueReceive+0x44>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e000      	b.n	8008ad6 <xQueueReceive+0x46>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <xQueueReceive+0x62>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	61fb      	str	r3, [r7, #28]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008af2:	f001 f97f 	bl	8009df4 <xTaskGetSchedulerState>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <xQueueReceive+0x72>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <xQueueReceive+0x76>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <xQueueReceive+0x78>
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <xQueueReceive+0x94>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	61bb      	str	r3, [r7, #24]
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b24:	f001 ffd0 	bl	800aac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01f      	beq.n	8008b74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b38:	f000 fa1e 	bl	8008f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	1e5a      	subs	r2, r3, #1
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00f      	beq.n	8008b6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4e:	3310      	adds	r3, #16
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 ff7f 	bl	8009a54 <xTaskRemoveFromEventList>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8008c50 <xQueueReceive+0x1c0>)
 8008b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b6c:	f001 ffde 	bl	800ab2c <vPortExitCritical>
				return pdPASS;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e069      	b.n	8008c48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b7a:	f001 ffd7 	bl	800ab2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e062      	b.n	8008c48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d106      	bne.n	8008b96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b88:	f107 0310 	add.w	r3, r7, #16
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 ffc5 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b92:	2301      	movs	r3, #1
 8008b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b96:	f001 ffc9 	bl	800ab2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b9a:	f000 fd35 	bl	8009608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b9e:	f001 ff93 	bl	800aac8 <vPortEnterCritical>
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ba8:	b25b      	sxtb	r3, r3
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bae:	d103      	bne.n	8008bb8 <xQueueReceive+0x128>
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bbe:	b25b      	sxtb	r3, r3
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bc4:	d103      	bne.n	8008bce <xQueueReceive+0x13e>
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bce:	f001 ffad 	bl	800ab2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bd2:	1d3a      	adds	r2, r7, #4
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 ffb4 	bl	8009b48 <xTaskCheckForTimeOut>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d123      	bne.n	8008c2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be8:	f000 fa3e 	bl	8009068 <prvIsQueueEmpty>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d017      	beq.n	8008c22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf4:	3324      	adds	r3, #36	@ 0x24
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fed8 	bl	80099b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c02:	f000 f9df 	bl	8008fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c06:	f000 fd0d 	bl	8009624 <xTaskResumeAll>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d189      	bne.n	8008b24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c10:	4b0f      	ldr	r3, [pc, #60]	@ (8008c50 <xQueueReceive+0x1c0>)
 8008c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	e780      	b.n	8008b24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c24:	f000 f9ce 	bl	8008fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c28:	f000 fcfc 	bl	8009624 <xTaskResumeAll>
 8008c2c:	e77a      	b.n	8008b24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c30:	f000 f9c8 	bl	8008fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c34:	f000 fcf6 	bl	8009624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c3a:	f000 fa15 	bl	8009068 <prvIsQueueEmpty>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f43f af6f 	beq.w	8008b24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3730      	adds	r7, #48	@ 0x30
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08e      	sub	sp, #56	@ 0x38
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	623b      	str	r3, [r7, #32]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61fb      	str	r3, [r7, #28]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ca8:	f001 f8a4 	bl	8009df4 <xTaskGetSchedulerState>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <xQueueSemaphoreTake+0x64>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <xQueueSemaphoreTake+0x68>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <xQueueSemaphoreTake+0x6a>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	61bb      	str	r3, [r7, #24]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cda:	f001 fef5 	bl	800aac8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d024      	beq.n	8008d34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cec:	1e5a      	subs	r2, r3, #1
 8008cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cfa:	f001 f9f5 	bl	800a0e8 <pvTaskIncrementMutexHeldCount>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00f      	beq.n	8008d2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	3310      	adds	r3, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fe9f 	bl	8009a54 <xTaskRemoveFromEventList>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d007      	beq.n	8008d2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d1c:	4b54      	ldr	r3, [pc, #336]	@ (8008e70 <xQueueSemaphoreTake+0x21c>)
 8008d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d2c:	f001 fefe 	bl	800ab2c <vPortExitCritical>
				return pdPASS;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e098      	b.n	8008e66 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d112      	bne.n	8008d60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	617b      	str	r3, [r7, #20]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d58:	f001 fee8 	bl	800ab2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e082      	b.n	8008e66 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d106      	bne.n	8008d74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d66:	f107 030c 	add.w	r3, r7, #12
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fed6 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d70:	2301      	movs	r3, #1
 8008d72:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d74:	f001 feda 	bl	800ab2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d78:	f000 fc46 	bl	8009608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d7c:	f001 fea4 	bl	800aac8 <vPortEnterCritical>
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d86:	b25b      	sxtb	r3, r3
 8008d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d8c:	d103      	bne.n	8008d96 <xQueueSemaphoreTake+0x142>
 8008d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008da2:	d103      	bne.n	8008dac <xQueueSemaphoreTake+0x158>
 8008da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dac:	f001 febe 	bl	800ab2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008db0:	463a      	mov	r2, r7
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fec5 	bl	8009b48 <xTaskCheckForTimeOut>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d132      	bne.n	8008e2a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dc6:	f000 f94f 	bl	8009068 <prvIsQueueEmpty>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d026      	beq.n	8008e1e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008dd8:	f001 fe76 	bl	800aac8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f825 	bl	8009e30 <xTaskPriorityInherit>
 8008de6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008de8:	f001 fea0 	bl	800ab2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dee:	3324      	adds	r3, #36	@ 0x24
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	4611      	mov	r1, r2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fddb 	bl	80099b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dfc:	f000 f8e2 	bl	8008fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e00:	f000 fc10 	bl	8009624 <xTaskResumeAll>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f47f af67 	bne.w	8008cda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008e0c:	4b18      	ldr	r3, [pc, #96]	@ (8008e70 <xQueueSemaphoreTake+0x21c>)
 8008e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	e75d      	b.n	8008cda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e20:	f000 f8d0 	bl	8008fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e24:	f000 fbfe 	bl	8009624 <xTaskResumeAll>
 8008e28:	e757      	b.n	8008cda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e2c:	f000 f8ca 	bl	8008fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e30:	f000 fbf8 	bl	8009624 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e36:	f000 f917 	bl	8009068 <prvIsQueueEmpty>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f43f af4c 	beq.w	8008cda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00d      	beq.n	8008e64 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e48:	f001 fe3e 	bl	800aac8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e4e:	f000 f811 	bl	8008e74 <prvGetDisinheritPriorityAfterTimeout>
 8008e52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 f8c0 	bl	8009fe0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e60:	f001 fe64 	bl	800ab2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3738      	adds	r7, #56	@ 0x38
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d006      	beq.n	8008e92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	e001      	b.n	8008e96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e96:	68fb      	ldr	r3, [r7, #12]
	}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10d      	bne.n	8008ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d14d      	bne.n	8008f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 f816 	bl	8009f00 <xTaskPriorityDisinherit>
 8008ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	609a      	str	r2, [r3, #8]
 8008edc:	e043      	b.n	8008f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d119      	bne.n	8008f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6858      	ldr	r0, [r3, #4]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eec:	461a      	mov	r2, r3
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	f002 fa97 	bl	800b422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efc:	441a      	add	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d32b      	bcc.n	8008f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	605a      	str	r2, [r3, #4]
 8008f16:	e026      	b.n	8008f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68d8      	ldr	r0, [r3, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f20:	461a      	mov	r2, r3
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	f002 fa7d 	bl	800b422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	425b      	negs	r3, r3
 8008f32:	441a      	add	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d207      	bcs.n	8008f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4c:	425b      	negs	r3, r3
 8008f4e:	441a      	add	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d105      	bne.n	8008f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f6e:	697b      	ldr	r3, [r7, #20]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d018      	beq.n	8008fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f92:	441a      	add	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d303      	bcc.n	8008fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68d9      	ldr	r1, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	6838      	ldr	r0, [r7, #0]
 8008fb8:	f002 fa33 	bl	800b422 <memcpy>
	}
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fcc:	f001 fd7c 	bl	800aac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd8:	e011      	b.n	8008ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d012      	beq.n	8009008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	3324      	adds	r3, #36	@ 0x24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fd34 	bl	8009a54 <xTaskRemoveFromEventList>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ff2:	f000 fe0d 	bl	8009c10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009002:	2b00      	cmp	r3, #0
 8009004:	dce9      	bgt.n	8008fda <prvUnlockQueue+0x16>
 8009006:	e000      	b.n	800900a <prvUnlockQueue+0x46>
					break;
 8009008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	22ff      	movs	r2, #255	@ 0xff
 800900e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009012:	f001 fd8b 	bl	800ab2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009016:	f001 fd57 	bl	800aac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009022:	e011      	b.n	8009048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d012      	beq.n	8009052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3310      	adds	r3, #16
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fd0f 	bl	8009a54 <xTaskRemoveFromEventList>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800903c:	f000 fde8 	bl	8009c10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	3b01      	subs	r3, #1
 8009044:	b2db      	uxtb	r3, r3
 8009046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	dce9      	bgt.n	8009024 <prvUnlockQueue+0x60>
 8009050:	e000      	b.n	8009054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	22ff      	movs	r2, #255	@ 0xff
 8009058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800905c:	f001 fd66 	bl	800ab2c <vPortExitCritical>
}
 8009060:	bf00      	nop
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009070:	f001 fd2a 	bl	800aac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800907c:	2301      	movs	r3, #1
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e001      	b.n	8009086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009086:	f001 fd51 	bl	800ab2c <vPortExitCritical>

	return xReturn;
 800908a:	68fb      	ldr	r3, [r7, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800909c:	f001 fd14 	bl	800aac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d102      	bne.n	80090b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	e001      	b.n	80090b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090b6:	f001 fd39 	bl	800ab2c <vPortExitCritical>

	return xReturn;
 80090ba:	68fb      	ldr	r3, [r7, #12]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	e014      	b.n	80090fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090d4:	4a0f      	ldr	r2, [pc, #60]	@ (8009114 <vQueueAddToRegistry+0x50>)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10b      	bne.n	80090f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090e0:	490c      	ldr	r1, [pc, #48]	@ (8009114 <vQueueAddToRegistry+0x50>)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009114 <vQueueAddToRegistry+0x50>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	4413      	add	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090f6:	e006      	b.n	8009106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b07      	cmp	r3, #7
 8009102:	d9e7      	bls.n	80090d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20000e10 	.word	0x20000e10

08009118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009128:	f001 fcce 	bl	800aac8 <vPortEnterCritical>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009132:	b25b      	sxtb	r3, r3
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009138:	d103      	bne.n	8009142 <vQueueWaitForMessageRestricted+0x2a>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009148:	b25b      	sxtb	r3, r3
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800914e:	d103      	bne.n	8009158 <vQueueWaitForMessageRestricted+0x40>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009158:	f001 fce8 	bl	800ab2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	3324      	adds	r3, #36	@ 0x24
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fc45 	bl	80099fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f7ff ff26 	bl	8008fc4 <prvUnlockQueue>
	}
 8009178:	bf00      	nop
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	@ 0x38
 8009184:	af04      	add	r7, sp, #16
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800918e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	623b      	str	r3, [r7, #32]
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	e7fd      	b.n	80091a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10b      	bne.n	80091ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	61fb      	str	r3, [r7, #28]
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	e7fd      	b.n	80091c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091ca:	235c      	movs	r3, #92	@ 0x5c
 80091cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80091d2:	d00b      	beq.n	80091ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61bb      	str	r3, [r7, #24]
}
 80091e6:	bf00      	nop
 80091e8:	bf00      	nop
 80091ea:	e7fd      	b.n	80091e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01e      	beq.n	8009232 <xTaskCreateStatic+0xb2>
 80091f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01b      	beq.n	8009232 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009202:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	2202      	movs	r2, #2
 8009208:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800920c:	2300      	movs	r3, #0
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	9302      	str	r3, [sp, #8]
 8009214:	f107 0314 	add.w	r3, r7, #20
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f850 	bl	80092ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800922a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800922c:	f000 f8de 	bl	80093ec <prvAddNewTaskToReadyList>
 8009230:	e001      	b.n	8009236 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009236:	697b      	ldr	r3, [r7, #20]
	}
 8009238:	4618      	mov	r0, r3
 800923a:	3728      	adds	r7, #40	@ 0x28
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08c      	sub	sp, #48	@ 0x30
 8009244:	af04      	add	r7, sp, #16
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	4613      	mov	r3, r2
 800924e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4618      	mov	r0, r3
 8009256:	f001 fd59 	bl	800ad0c <pvPortMalloc>
 800925a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00e      	beq.n	8009280 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009262:	205c      	movs	r0, #92	@ 0x5c
 8009264:	f001 fd52 	bl	800ad0c <pvPortMalloc>
 8009268:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	631a      	str	r2, [r3, #48]	@ 0x30
 8009276:	e005      	b.n	8009284 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009278:	6978      	ldr	r0, [r7, #20]
 800927a:	f001 fe15 	bl	800aea8 <vPortFree>
 800927e:	e001      	b.n	8009284 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009280:	2300      	movs	r3, #0
 8009282:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d017      	beq.n	80092ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	2300      	movs	r3, #0
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	9302      	str	r3, [sp, #8]
 800929c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f80e 	bl	80092ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ae:	69f8      	ldr	r0, [r7, #28]
 80092b0:	f000 f89c 	bl	80093ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092b4:	2301      	movs	r3, #1
 80092b6:	61bb      	str	r3, [r7, #24]
 80092b8:	e002      	b.n	80092c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092c0:	69bb      	ldr	r3, [r7, #24]
	}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3720      	adds	r7, #32
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b088      	sub	sp, #32
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
 80092d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	461a      	mov	r2, r3
 80092e2:	21a5      	movs	r1, #165	@ 0xa5
 80092e4:	f002 f868 	bl	800b3b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092f2:	3b01      	subs	r3, #1
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	617b      	str	r3, [r7, #20]
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01f      	beq.n	800936a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800932a:	2300      	movs	r3, #0
 800932c:	61fb      	str	r3, [r7, #28]
 800932e:	e012      	b.n	8009356 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	4413      	add	r3, r2
 8009336:	7819      	ldrb	r1, [r3, #0]
 8009338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	3334      	adds	r3, #52	@ 0x34
 8009340:	460a      	mov	r2, r1
 8009342:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4413      	add	r3, r2
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d006      	beq.n	800935e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	3301      	adds	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	2b0f      	cmp	r3, #15
 800935a:	d9e9      	bls.n	8009330 <prvInitialiseNewTask+0x66>
 800935c:	e000      	b.n	8009360 <prvInitialiseNewTask+0x96>
			{
				break;
 800935e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009368:	e003      	b.n	8009372 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	2b37      	cmp	r3, #55	@ 0x37
 8009376:	d901      	bls.n	800937c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009378:	2337      	movs	r3, #55	@ 0x37
 800937a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009380:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009386:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	2200      	movs	r2, #0
 800938c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800938e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009390:	3304      	adds	r3, #4
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe ff4a 	bl	800822c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	3318      	adds	r3, #24
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe ff45 	bl	800822c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2200      	movs	r2, #0
 80093bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	68f9      	ldr	r1, [r7, #12]
 80093ca:	69b8      	ldr	r0, [r7, #24]
 80093cc:	f001 fa4e 	bl	800a86c <pxPortInitialiseStack>
 80093d0:	4602      	mov	r2, r0
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e2:	bf00      	nop
 80093e4:	3720      	adds	r7, #32
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093f4:	f001 fb68 	bl	800aac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093f8:	4b2d      	ldr	r3, [pc, #180]	@ (80094b0 <prvAddNewTaskToReadyList+0xc4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3301      	adds	r3, #1
 80093fe:	4a2c      	ldr	r2, [pc, #176]	@ (80094b0 <prvAddNewTaskToReadyList+0xc4>)
 8009400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009402:	4b2c      	ldr	r3, [pc, #176]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800940a:	4a2a      	ldr	r2, [pc, #168]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009410:	4b27      	ldr	r3, [pc, #156]	@ (80094b0 <prvAddNewTaskToReadyList+0xc4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d110      	bne.n	800943a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009418:	f000 fc1e 	bl	8009c58 <prvInitialiseTaskLists>
 800941c:	e00d      	b.n	800943a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800941e:	4b26      	ldr	r3, [pc, #152]	@ (80094b8 <prvAddNewTaskToReadyList+0xcc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009426:	4b23      	ldr	r3, [pc, #140]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009430:	429a      	cmp	r2, r3
 8009432:	d802      	bhi.n	800943a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800943a:	4b20      	ldr	r3, [pc, #128]	@ (80094bc <prvAddNewTaskToReadyList+0xd0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	4a1e      	ldr	r2, [pc, #120]	@ (80094bc <prvAddNewTaskToReadyList+0xd0>)
 8009442:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009444:	4b1d      	ldr	r3, [pc, #116]	@ (80094bc <prvAddNewTaskToReadyList+0xd0>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	4b1b      	ldr	r3, [pc, #108]	@ (80094c0 <prvAddNewTaskToReadyList+0xd4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d903      	bls.n	8009460 <prvAddNewTaskToReadyList+0x74>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	4a18      	ldr	r2, [pc, #96]	@ (80094c0 <prvAddNewTaskToReadyList+0xd4>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <prvAddNewTaskToReadyList+0xd8>)
 800946e:	441a      	add	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7fe fee5 	bl	8008246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800947c:	f001 fb56 	bl	800ab2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009480:	4b0d      	ldr	r3, [pc, #52]	@ (80094b8 <prvAddNewTaskToReadyList+0xcc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009488:	4b0a      	ldr	r3, [pc, #40]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	429a      	cmp	r2, r3
 8009494:	d207      	bcs.n	80094a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009496:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <prvAddNewTaskToReadyList+0xdc>)
 8009498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20001324 	.word	0x20001324
 80094b4:	20000e50 	.word	0x20000e50
 80094b8:	20001330 	.word	0x20001330
 80094bc:	20001340 	.word	0x20001340
 80094c0:	2000132c 	.word	0x2000132c
 80094c4:	20000e54 	.word	0x20000e54
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d018      	beq.n	8009510 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094de:	4b14      	ldr	r3, [pc, #80]	@ (8009530 <vTaskDelay+0x64>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <vTaskDelay+0x32>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60bb      	str	r3, [r7, #8]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094fe:	f000 f883 	bl	8009608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009502:	2100      	movs	r1, #0
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fe03 	bl	800a110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800950a:	f000 f88b 	bl	8009624 <xTaskResumeAll>
 800950e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009516:	4b07      	ldr	r3, [pc, #28]	@ (8009534 <vTaskDelay+0x68>)
 8009518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	2000134c 	.word	0x2000134c
 8009534:	e000ed04 	.word	0xe000ed04

08009538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	@ 0x28
 800953c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009546:	463a      	mov	r2, r7
 8009548:	1d39      	adds	r1, r7, #4
 800954a:	f107 0308 	add.w	r3, r7, #8
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fe18 	bl	8008184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	9202      	str	r2, [sp, #8]
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	2300      	movs	r3, #0
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	2300      	movs	r3, #0
 8009564:	460a      	mov	r2, r1
 8009566:	4922      	ldr	r1, [pc, #136]	@ (80095f0 <vTaskStartScheduler+0xb8>)
 8009568:	4822      	ldr	r0, [pc, #136]	@ (80095f4 <vTaskStartScheduler+0xbc>)
 800956a:	f7ff fe09 	bl	8009180 <xTaskCreateStatic>
 800956e:	4603      	mov	r3, r0
 8009570:	4a21      	ldr	r2, [pc, #132]	@ (80095f8 <vTaskStartScheduler+0xc0>)
 8009572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009574:	4b20      	ldr	r3, [pc, #128]	@ (80095f8 <vTaskStartScheduler+0xc0>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e001      	b.n	8009586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009582:	2300      	movs	r3, #0
 8009584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d102      	bne.n	8009592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800958c:	f000 fe14 	bl	800a1b8 <xTimerCreateTimerTask>
 8009590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d116      	bne.n	80095c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	613b      	str	r3, [r7, #16]
}
 80095aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095ac:	4b13      	ldr	r3, [pc, #76]	@ (80095fc <vTaskStartScheduler+0xc4>)
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095b4:	4b12      	ldr	r3, [pc, #72]	@ (8009600 <vTaskStartScheduler+0xc8>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095ba:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <vTaskStartScheduler+0xcc>)
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095c0:	f001 f9de 	bl	800a980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095c4:	e00f      	b.n	80095e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095cc:	d10b      	bne.n	80095e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60fb      	str	r3, [r7, #12]
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	e7fd      	b.n	80095e2 <vTaskStartScheduler+0xaa>
}
 80095e6:	bf00      	nop
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	0800c7d0 	.word	0x0800c7d0
 80095f4:	08009c29 	.word	0x08009c29
 80095f8:	20001348 	.word	0x20001348
 80095fc:	20001344 	.word	0x20001344
 8009600:	20001330 	.word	0x20001330
 8009604:	20001328 	.word	0x20001328

08009608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800960c:	4b04      	ldr	r3, [pc, #16]	@ (8009620 <vTaskSuspendAll+0x18>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3301      	adds	r3, #1
 8009612:	4a03      	ldr	r2, [pc, #12]	@ (8009620 <vTaskSuspendAll+0x18>)
 8009614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009616:	bf00      	nop
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	2000134c 	.word	0x2000134c

08009624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800962e:	2300      	movs	r3, #0
 8009630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009632:	4b42      	ldr	r3, [pc, #264]	@ (800973c <xTaskResumeAll+0x118>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <xTaskResumeAll+0x2e>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009652:	f001 fa39 	bl	800aac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009656:	4b39      	ldr	r3, [pc, #228]	@ (800973c <xTaskResumeAll+0x118>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3b01      	subs	r3, #1
 800965c:	4a37      	ldr	r2, [pc, #220]	@ (800973c <xTaskResumeAll+0x118>)
 800965e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009660:	4b36      	ldr	r3, [pc, #216]	@ (800973c <xTaskResumeAll+0x118>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d162      	bne.n	800972e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009668:	4b35      	ldr	r3, [pc, #212]	@ (8009740 <xTaskResumeAll+0x11c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d05e      	beq.n	800972e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009670:	e02f      	b.n	80096d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009672:	4b34      	ldr	r3, [pc, #208]	@ (8009744 <xTaskResumeAll+0x120>)
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3318      	adds	r3, #24
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fe3e 	bl	8008300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3304      	adds	r3, #4
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe fe39 	bl	8008300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009692:	4b2d      	ldr	r3, [pc, #180]	@ (8009748 <xTaskResumeAll+0x124>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d903      	bls.n	80096a2 <xTaskResumeAll+0x7e>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969e:	4a2a      	ldr	r2, [pc, #168]	@ (8009748 <xTaskResumeAll+0x124>)
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4a27      	ldr	r2, [pc, #156]	@ (800974c <xTaskResumeAll+0x128>)
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4619      	mov	r1, r3
 80096b8:	4610      	mov	r0, r2
 80096ba:	f7fe fdc4 	bl	8008246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c2:	4b23      	ldr	r3, [pc, #140]	@ (8009750 <xTaskResumeAll+0x12c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d302      	bcc.n	80096d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096cc:	4b21      	ldr	r3, [pc, #132]	@ (8009754 <xTaskResumeAll+0x130>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009744 <xTaskResumeAll+0x120>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1cb      	bne.n	8009672 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096e0:	f000 fb58 	bl	8009d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009758 <xTaskResumeAll+0x134>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d010      	beq.n	8009712 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096f0:	f000 f846 	bl	8009780 <xTaskIncrementTick>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096fa:	4b16      	ldr	r3, [pc, #88]	@ (8009754 <xTaskResumeAll+0x130>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3b01      	subs	r3, #1
 8009704:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f1      	bne.n	80096f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800970c:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <xTaskResumeAll+0x134>)
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009712:	4b10      	ldr	r3, [pc, #64]	@ (8009754 <xTaskResumeAll+0x130>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d009      	beq.n	800972e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800971a:	2301      	movs	r3, #1
 800971c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800971e:	4b0f      	ldr	r3, [pc, #60]	@ (800975c <xTaskResumeAll+0x138>)
 8009720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800972e:	f001 f9fd 	bl	800ab2c <vPortExitCritical>

	return xAlreadyYielded;
 8009732:	68bb      	ldr	r3, [r7, #8]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	2000134c 	.word	0x2000134c
 8009740:	20001324 	.word	0x20001324
 8009744:	200012e4 	.word	0x200012e4
 8009748:	2000132c 	.word	0x2000132c
 800974c:	20000e54 	.word	0x20000e54
 8009750:	20000e50 	.word	0x20000e50
 8009754:	20001338 	.word	0x20001338
 8009758:	20001334 	.word	0x20001334
 800975c:	e000ed04 	.word	0xe000ed04

08009760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009766:	4b05      	ldr	r3, [pc, #20]	@ (800977c <xTaskGetTickCount+0x1c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800976c:	687b      	ldr	r3, [r7, #4]
}
 800976e:	4618      	mov	r0, r3
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20001328 	.word	0x20001328

08009780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978a:	4b4f      	ldr	r3, [pc, #316]	@ (80098c8 <xTaskIncrementTick+0x148>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f040 8090 	bne.w	80098b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009794:	4b4d      	ldr	r3, [pc, #308]	@ (80098cc <xTaskIncrementTick+0x14c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800979c:	4a4b      	ldr	r2, [pc, #300]	@ (80098cc <xTaskIncrementTick+0x14c>)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d121      	bne.n	80097ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097a8:	4b49      	ldr	r3, [pc, #292]	@ (80098d0 <xTaskIncrementTick+0x150>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	603b      	str	r3, [r7, #0]
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	e7fd      	b.n	80097c6 <xTaskIncrementTick+0x46>
 80097ca:	4b41      	ldr	r3, [pc, #260]	@ (80098d0 <xTaskIncrementTick+0x150>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	4b40      	ldr	r3, [pc, #256]	@ (80098d4 <xTaskIncrementTick+0x154>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a3e      	ldr	r2, [pc, #248]	@ (80098d0 <xTaskIncrementTick+0x150>)
 80097d6:	6013      	str	r3, [r2, #0]
 80097d8:	4a3e      	ldr	r2, [pc, #248]	@ (80098d4 <xTaskIncrementTick+0x154>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	4b3e      	ldr	r3, [pc, #248]	@ (80098d8 <xTaskIncrementTick+0x158>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	4a3c      	ldr	r2, [pc, #240]	@ (80098d8 <xTaskIncrementTick+0x158>)
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	f000 fad4 	bl	8009d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097ec:	4b3b      	ldr	r3, [pc, #236]	@ (80098dc <xTaskIncrementTick+0x15c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d349      	bcc.n	800988a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f6:	4b36      	ldr	r3, [pc, #216]	@ (80098d0 <xTaskIncrementTick+0x150>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009800:	4b36      	ldr	r3, [pc, #216]	@ (80098dc <xTaskIncrementTick+0x15c>)
 8009802:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009806:	601a      	str	r2, [r3, #0]
					break;
 8009808:	e03f      	b.n	800988a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980a:	4b31      	ldr	r3, [pc, #196]	@ (80098d0 <xTaskIncrementTick+0x150>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	429a      	cmp	r2, r3
 8009820:	d203      	bcs.n	800982a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009822:	4a2e      	ldr	r2, [pc, #184]	@ (80098dc <xTaskIncrementTick+0x15c>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009828:	e02f      	b.n	800988a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	3304      	adds	r3, #4
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fd66 	bl	8008300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	3318      	adds	r3, #24
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fd5d 	bl	8008300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984a:	4b25      	ldr	r3, [pc, #148]	@ (80098e0 <xTaskIncrementTick+0x160>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d903      	bls.n	800985a <xTaskIncrementTick+0xda>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009856:	4a22      	ldr	r2, [pc, #136]	@ (80098e0 <xTaskIncrementTick+0x160>)
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4a1f      	ldr	r2, [pc, #124]	@ (80098e4 <xTaskIncrementTick+0x164>)
 8009868:	441a      	add	r2, r3
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f7fe fce8 	bl	8008246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987a:	4b1b      	ldr	r3, [pc, #108]	@ (80098e8 <xTaskIncrementTick+0x168>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	429a      	cmp	r2, r3
 8009882:	d3b8      	bcc.n	80097f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009888:	e7b5      	b.n	80097f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800988a:	4b17      	ldr	r3, [pc, #92]	@ (80098e8 <xTaskIncrementTick+0x168>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009890:	4914      	ldr	r1, [pc, #80]	@ (80098e4 <xTaskIncrementTick+0x164>)
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d901      	bls.n	80098a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098a2:	2301      	movs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098a6:	4b11      	ldr	r3, [pc, #68]	@ (80098ec <xTaskIncrementTick+0x16c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098ae:	2301      	movs	r3, #1
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	e004      	b.n	80098be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098b4:	4b0e      	ldr	r3, [pc, #56]	@ (80098f0 <xTaskIncrementTick+0x170>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3301      	adds	r3, #1
 80098ba:	4a0d      	ldr	r2, [pc, #52]	@ (80098f0 <xTaskIncrementTick+0x170>)
 80098bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098be:	697b      	ldr	r3, [r7, #20]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	2000134c 	.word	0x2000134c
 80098cc:	20001328 	.word	0x20001328
 80098d0:	200012dc 	.word	0x200012dc
 80098d4:	200012e0 	.word	0x200012e0
 80098d8:	2000133c 	.word	0x2000133c
 80098dc:	20001344 	.word	0x20001344
 80098e0:	2000132c 	.word	0x2000132c
 80098e4:	20000e54 	.word	0x20000e54
 80098e8:	20000e50 	.word	0x20000e50
 80098ec:	20001338 	.word	0x20001338
 80098f0:	20001334 	.word	0x20001334

080098f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098fa:	4b28      	ldr	r3, [pc, #160]	@ (800999c <vTaskSwitchContext+0xa8>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009902:	4b27      	ldr	r3, [pc, #156]	@ (80099a0 <vTaskSwitchContext+0xac>)
 8009904:	2201      	movs	r2, #1
 8009906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009908:	e042      	b.n	8009990 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800990a:	4b25      	ldr	r3, [pc, #148]	@ (80099a0 <vTaskSwitchContext+0xac>)
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009910:	4b24      	ldr	r3, [pc, #144]	@ (80099a4 <vTaskSwitchContext+0xb0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	e011      	b.n	800993c <vTaskSwitchContext+0x48>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10b      	bne.n	8009936 <vTaskSwitchContext+0x42>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	607b      	str	r3, [r7, #4]
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <vTaskSwitchContext+0x3e>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b01      	subs	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	491a      	ldr	r1, [pc, #104]	@ (80099a8 <vTaskSwitchContext+0xb4>)
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	440b      	add	r3, r1
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0e3      	beq.n	8009918 <vTaskSwitchContext+0x24>
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4a13      	ldr	r2, [pc, #76]	@ (80099a8 <vTaskSwitchContext+0xb4>)
 800995c:	4413      	add	r3, r2
 800995e:	60bb      	str	r3, [r7, #8]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	605a      	str	r2, [r3, #4]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3308      	adds	r3, #8
 8009972:	429a      	cmp	r2, r3
 8009974:	d104      	bne.n	8009980 <vTaskSwitchContext+0x8c>
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	605a      	str	r2, [r3, #4]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	4a09      	ldr	r2, [pc, #36]	@ (80099ac <vTaskSwitchContext+0xb8>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	4a06      	ldr	r2, [pc, #24]	@ (80099a4 <vTaskSwitchContext+0xb0>)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6013      	str	r3, [r2, #0]
}
 8009990:	bf00      	nop
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	2000134c 	.word	0x2000134c
 80099a0:	20001338 	.word	0x20001338
 80099a4:	2000132c 	.word	0x2000132c
 80099a8:	20000e54 	.word	0x20000e54
 80099ac:	20000e50 	.word	0x20000e50

080099b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10b      	bne.n	80099d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60fb      	str	r3, [r7, #12]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099d8:	4b07      	ldr	r3, [pc, #28]	@ (80099f8 <vTaskPlaceOnEventList+0x48>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3318      	adds	r3, #24
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7fe fc54 	bl	800828e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099e6:	2101      	movs	r1, #1
 80099e8:	6838      	ldr	r0, [r7, #0]
 80099ea:	f000 fb91 	bl	800a110 <prvAddCurrentTaskToDelayedList>
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000e50 	.word	0x20000e50

080099fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	617b      	str	r3, [r7, #20]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a26:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3318      	adds	r3, #24
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7fe fc09 	bl	8008246 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	68b8      	ldr	r0, [r7, #8]
 8009a44:	f000 fb64 	bl	800a110 <prvAddCurrentTaskToDelayedList>
	}
 8009a48:	bf00      	nop
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20000e50 	.word	0x20000e50

08009a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10b      	bne.n	8009a82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	60fb      	str	r3, [r7, #12]
}
 8009a7c:	bf00      	nop
 8009a7e:	bf00      	nop
 8009a80:	e7fd      	b.n	8009a7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	3318      	adds	r3, #24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fc3a 	bl	8008300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b04 <xTaskRemoveFromEventList+0xb0>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d11d      	bne.n	8009ad0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fc31 	bl	8008300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa2:	4b19      	ldr	r3, [pc, #100]	@ (8009b08 <xTaskRemoveFromEventList+0xb4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d903      	bls.n	8009ab2 <xTaskRemoveFromEventList+0x5e>
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aae:	4a16      	ldr	r2, [pc, #88]	@ (8009b08 <xTaskRemoveFromEventList+0xb4>)
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4a13      	ldr	r2, [pc, #76]	@ (8009b0c <xTaskRemoveFromEventList+0xb8>)
 8009ac0:	441a      	add	r2, r3
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fe fbbc 	bl	8008246 <vListInsertEnd>
 8009ace:	e005      	b.n	8009adc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	3318      	adds	r3, #24
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	480e      	ldr	r0, [pc, #56]	@ (8009b10 <xTaskRemoveFromEventList+0xbc>)
 8009ad8:	f7fe fbb5 	bl	8008246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <xTaskRemoveFromEventList+0xc0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d905      	bls.n	8009af6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009aea:	2301      	movs	r3, #1
 8009aec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009aee:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <xTaskRemoveFromEventList+0xc4>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	e001      	b.n	8009afa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009afa:	697b      	ldr	r3, [r7, #20]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	2000134c 	.word	0x2000134c
 8009b08:	2000132c 	.word	0x2000132c
 8009b0c:	20000e54 	.word	0x20000e54
 8009b10:	200012e4 	.word	0x200012e4
 8009b14:	20000e50 	.word	0x20000e50
 8009b18:	20001338 	.word	0x20001338

08009b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b24:	4b06      	ldr	r3, [pc, #24]	@ (8009b40 <vTaskInternalSetTimeOutState+0x24>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <vTaskInternalSetTimeOutState+0x28>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	605a      	str	r2, [r3, #4]
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	2000133c 	.word	0x2000133c
 8009b44:	20001328 	.word	0x20001328

08009b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10b      	bne.n	8009b70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	613b      	str	r3, [r7, #16]
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10b      	bne.n	8009b8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	60fb      	str	r3, [r7, #12]
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	e7fd      	b.n	8009b8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b8e:	f000 ff9b 	bl	800aac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b92:	4b1d      	ldr	r3, [pc, #116]	@ (8009c08 <xTaskCheckForTimeOut+0xc0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009baa:	d102      	bne.n	8009bb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	e023      	b.n	8009bfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b15      	ldr	r3, [pc, #84]	@ (8009c0c <xTaskCheckForTimeOut+0xc4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d007      	beq.n	8009bce <xTaskCheckForTimeOut+0x86>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d302      	bcc.n	8009bce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	61fb      	str	r3, [r7, #28]
 8009bcc:	e015      	b.n	8009bfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d20b      	bcs.n	8009bf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff99 	bl	8009b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bea:	2300      	movs	r3, #0
 8009bec:	61fb      	str	r3, [r7, #28]
 8009bee:	e004      	b.n	8009bfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bfa:	f000 ff97 	bl	800ab2c <vPortExitCritical>

	return xReturn;
 8009bfe:	69fb      	ldr	r3, [r7, #28]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3720      	adds	r7, #32
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20001328 	.word	0x20001328
 8009c0c:	2000133c 	.word	0x2000133c

08009c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c14:	4b03      	ldr	r3, [pc, #12]	@ (8009c24 <vTaskMissedYield+0x14>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	601a      	str	r2, [r3, #0]
}
 8009c1a:	bf00      	nop
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	20001338 	.word	0x20001338

08009c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c30:	f000 f852 	bl	8009cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c34:	4b06      	ldr	r3, [pc, #24]	@ (8009c50 <prvIdleTask+0x28>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d9f9      	bls.n	8009c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c3c:	4b05      	ldr	r3, [pc, #20]	@ (8009c54 <prvIdleTask+0x2c>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c4c:	e7f0      	b.n	8009c30 <prvIdleTask+0x8>
 8009c4e:	bf00      	nop
 8009c50:	20000e54 	.word	0x20000e54
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c5e:	2300      	movs	r3, #0
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	e00c      	b.n	8009c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4a12      	ldr	r2, [pc, #72]	@ (8009cb8 <prvInitialiseTaskLists+0x60>)
 8009c70:	4413      	add	r3, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe faba 	bl	80081ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b37      	cmp	r3, #55	@ 0x37
 8009c82:	d9ef      	bls.n	8009c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c84:	480d      	ldr	r0, [pc, #52]	@ (8009cbc <prvInitialiseTaskLists+0x64>)
 8009c86:	f7fe fab1 	bl	80081ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c8a:	480d      	ldr	r0, [pc, #52]	@ (8009cc0 <prvInitialiseTaskLists+0x68>)
 8009c8c:	f7fe faae 	bl	80081ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c90:	480c      	ldr	r0, [pc, #48]	@ (8009cc4 <prvInitialiseTaskLists+0x6c>)
 8009c92:	f7fe faab 	bl	80081ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c96:	480c      	ldr	r0, [pc, #48]	@ (8009cc8 <prvInitialiseTaskLists+0x70>)
 8009c98:	f7fe faa8 	bl	80081ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c9c:	480b      	ldr	r0, [pc, #44]	@ (8009ccc <prvInitialiseTaskLists+0x74>)
 8009c9e:	f7fe faa5 	bl	80081ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd0 <prvInitialiseTaskLists+0x78>)
 8009ca4:	4a05      	ldr	r2, [pc, #20]	@ (8009cbc <prvInitialiseTaskLists+0x64>)
 8009ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd4 <prvInitialiseTaskLists+0x7c>)
 8009caa:	4a05      	ldr	r2, [pc, #20]	@ (8009cc0 <prvInitialiseTaskLists+0x68>)
 8009cac:	601a      	str	r2, [r3, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000e54 	.word	0x20000e54
 8009cbc:	200012b4 	.word	0x200012b4
 8009cc0:	200012c8 	.word	0x200012c8
 8009cc4:	200012e4 	.word	0x200012e4
 8009cc8:	200012f8 	.word	0x200012f8
 8009ccc:	20001310 	.word	0x20001310
 8009cd0:	200012dc 	.word	0x200012dc
 8009cd4:	200012e0 	.word	0x200012e0

08009cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cde:	e019      	b.n	8009d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ce0:	f000 fef2 	bl	800aac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce4:	4b10      	ldr	r3, [pc, #64]	@ (8009d28 <prvCheckTasksWaitingTermination+0x50>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe fb05 	bl	8008300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <prvCheckTasksWaitingTermination+0x54>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8009d2c <prvCheckTasksWaitingTermination+0x54>)
 8009cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d00:	4b0b      	ldr	r3, [pc, #44]	@ (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	4a0a      	ldr	r2, [pc, #40]	@ (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d0a:	f000 ff0f 	bl	800ab2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f810 	bl	8009d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d14:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e1      	bne.n	8009ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200012f8 	.word	0x200012f8
 8009d2c:	20001324 	.word	0x20001324
 8009d30:	2000130c 	.word	0x2000130c

08009d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d108      	bne.n	8009d58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 f8ac 	bl	800aea8 <vPortFree>
				vPortFree( pxTCB );
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 f8a9 	bl	800aea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d56:	e019      	b.n	8009d8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d103      	bne.n	8009d6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 f8a0 	bl	800aea8 <vPortFree>
	}
 8009d68:	e010      	b.n	8009d8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d00b      	beq.n	8009d8c <prvDeleteTCB+0x58>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	60fb      	str	r3, [r7, #12]
}
 8009d86:	bf00      	nop
 8009d88:	bf00      	nop
 8009d8a:	e7fd      	b.n	8009d88 <prvDeleteTCB+0x54>
	}
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dcc <prvResetNextTaskUnblockTime+0x38>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009da4:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dac:	e008      	b.n	8009dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dae:	4b07      	ldr	r3, [pc, #28]	@ (8009dcc <prvResetNextTaskUnblockTime+0x38>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4a04      	ldr	r2, [pc, #16]	@ (8009dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009dbe:	6013      	str	r3, [r2, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	200012dc 	.word	0x200012dc
 8009dd0:	20001344 	.word	0x20001344

08009dd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009dda:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <xTaskGetCurrentTaskHandle+0x1c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009de0:	687b      	ldr	r3, [r7, #4]
	}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000e50 	.word	0x20000e50

08009df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <xTaskGetSchedulerState+0x34>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e02:	2301      	movs	r3, #1
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	e008      	b.n	8009e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e08:	4b08      	ldr	r3, [pc, #32]	@ (8009e2c <xTaskGetSchedulerState+0x38>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e10:	2302      	movs	r3, #2
 8009e12:	607b      	str	r3, [r7, #4]
 8009e14:	e001      	b.n	8009e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e1a:	687b      	ldr	r3, [r7, #4]
	}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	20001330 	.word	0x20001330
 8009e2c:	2000134c 	.word	0x2000134c

08009e30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d051      	beq.n	8009eea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ef4 <xTaskPriorityInherit+0xc4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d241      	bcs.n	8009ed8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	db06      	blt.n	8009e6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5c:	4b25      	ldr	r3, [pc, #148]	@ (8009ef4 <xTaskPriorityInherit+0xc4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6959      	ldr	r1, [r3, #20]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef8 <xTaskPriorityInherit+0xc8>)
 8009e7c:	4413      	add	r3, r2
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	d122      	bne.n	8009ec8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fa3a 	bl	8008300 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e8c:	4b19      	ldr	r3, [pc, #100]	@ (8009ef4 <xTaskPriorityInherit+0xc4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9a:	4b18      	ldr	r3, [pc, #96]	@ (8009efc <xTaskPriorityInherit+0xcc>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d903      	bls.n	8009eaa <xTaskPriorityInherit+0x7a>
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea6:	4a15      	ldr	r2, [pc, #84]	@ (8009efc <xTaskPriorityInherit+0xcc>)
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4a10      	ldr	r2, [pc, #64]	@ (8009ef8 <xTaskPriorityInherit+0xc8>)
 8009eb8:	441a      	add	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f7fe f9c0 	bl	8008246 <vListInsertEnd>
 8009ec6:	e004      	b.n	8009ed2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef4 <xTaskPriorityInherit+0xc4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	e008      	b.n	8009eea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009edc:	4b05      	ldr	r3, [pc, #20]	@ (8009ef4 <xTaskPriorityInherit+0xc4>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d201      	bcs.n	8009eea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eea:	68fb      	ldr	r3, [r7, #12]
	}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000e50 	.word	0x20000e50
 8009ef8:	20000e54 	.word	0x20000e54
 8009efc:	2000132c 	.word	0x2000132c

08009f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d058      	beq.n	8009fc8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f16:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd4 <xTaskPriorityDisinherit+0xd4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d00b      	beq.n	8009f38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60fb      	str	r3, [r7, #12]
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	e7fd      	b.n	8009f34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10b      	bne.n	8009f58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60bb      	str	r3, [r7, #8]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f5c:	1e5a      	subs	r2, r3, #1
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d02c      	beq.n	8009fc8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d128      	bne.n	8009fc8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe f9c0 	bl	8008300 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f98:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd8 <xTaskPriorityDisinherit+0xd8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d903      	bls.n	8009fa8 <xTaskPriorityDisinherit+0xa8>
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8009fd8 <xTaskPriorityDisinherit+0xd8>)
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4a09      	ldr	r2, [pc, #36]	@ (8009fdc <xTaskPriorityDisinherit+0xdc>)
 8009fb6:	441a      	add	r2, r3
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	f7fe f941 	bl	8008246 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fc8:	697b      	ldr	r3, [r7, #20]
	}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000e50 	.word	0x20000e50
 8009fd8:	2000132c 	.word	0x2000132c
 8009fdc:	20000e54 	.word	0x20000e54

08009fe0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d06c      	beq.n	800a0d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	60fb      	str	r3, [r7, #12]
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d902      	bls.n	800a028 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	61fb      	str	r3, [r7, #28]
 800a026:	e002      	b.n	800a02e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a02c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	429a      	cmp	r2, r3
 800a036:	d04c      	beq.n	800a0d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d147      	bne.n	800a0d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a042:	4b26      	ldr	r3, [pc, #152]	@ (800a0dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d10b      	bne.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	60bb      	str	r3, [r7, #8]
}
 800a05e:	bf00      	nop
 800a060:	bf00      	nop
 800a062:	e7fd      	b.n	800a060 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a068:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	db04      	blt.n	800a082 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	6959      	ldr	r1, [r3, #20]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4a13      	ldr	r2, [pc, #76]	@ (800a0e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a092:	4413      	add	r3, r2
 800a094:	4299      	cmp	r1, r3
 800a096:	d11c      	bne.n	800a0d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe f92f 	bl	8008300 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d903      	bls.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b2:	4a0c      	ldr	r2, [pc, #48]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4a07      	ldr	r2, [pc, #28]	@ (800a0e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0c4:	441a      	add	r2, r3
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f7fe f8ba 	bl	8008246 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0d2:	bf00      	nop
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000e50 	.word	0x20000e50
 800a0e0:	20000e54 	.word	0x20000e54
 800a0e4:	2000132c 	.word	0x2000132c

0800a0e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0ec:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	@ (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a100:	681b      	ldr	r3, [r3, #0]
	}
 800a102:	4618      	mov	r0, r3
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20000e50 	.word	0x20000e50

0800a110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11a:	4b21      	ldr	r3, [pc, #132]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a120:	4b20      	ldr	r3, [pc, #128]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe f8ea 	bl	8008300 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a132:	d10a      	bne.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a13a:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4819      	ldr	r0, [pc, #100]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a144:	f7fe f87f 	bl	8008246 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a148:	e026      	b.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a152:	4b14      	ldr	r3, [pc, #80]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d209      	bcs.n	800a176 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a162:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7fe f88d 	bl	800828e <vListInsert>
}
 800a174:	e010      	b.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a176:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe f883 	bl	800828e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a188:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d202      	bcs.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a192:	4a08      	ldr	r2, [pc, #32]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20001328 	.word	0x20001328
 800a1a4:	20000e50 	.word	0x20000e50
 800a1a8:	20001310 	.word	0x20001310
 800a1ac:	200012e0 	.word	0x200012e0
 800a1b0:	200012dc 	.word	0x200012dc
 800a1b4:	20001344 	.word	0x20001344

0800a1b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	@ 0x28
 800a1bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1c2:	f000 fb13 	bl	800a7ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a23c <xTimerCreateTimerTask+0x84>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d021      	beq.n	800a212 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1d6:	1d3a      	adds	r2, r7, #4
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fd ffe9 	bl	80081b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	9202      	str	r2, [sp, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	460a      	mov	r2, r1
 800a1f8:	4911      	ldr	r1, [pc, #68]	@ (800a240 <xTimerCreateTimerTask+0x88>)
 800a1fa:	4812      	ldr	r0, [pc, #72]	@ (800a244 <xTimerCreateTimerTask+0x8c>)
 800a1fc:	f7fe ffc0 	bl	8009180 <xTaskCreateStatic>
 800a200:	4603      	mov	r3, r0
 800a202:	4a11      	ldr	r2, [pc, #68]	@ (800a248 <xTimerCreateTimerTask+0x90>)
 800a204:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a206:	4b10      	ldr	r3, [pc, #64]	@ (800a248 <xTimerCreateTimerTask+0x90>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a20e:	2301      	movs	r3, #1
 800a210:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10b      	bne.n	800a230 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	613b      	str	r3, [r7, #16]
}
 800a22a:	bf00      	nop
 800a22c:	bf00      	nop
 800a22e:	e7fd      	b.n	800a22c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a230:	697b      	ldr	r3, [r7, #20]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20001380 	.word	0x20001380
 800a240:	0800c7d8 	.word	0x0800c7d8
 800a244:	0800a385 	.word	0x0800a385
 800a248:	20001384 	.word	0x20001384

0800a24c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	@ 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <xTimerGenericCommand+0x30>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	623b      	str	r3, [r7, #32]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a27c:	4b19      	ldr	r3, [pc, #100]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d02a      	beq.n	800a2da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b05      	cmp	r3, #5
 800a294:	dc18      	bgt.n	800a2c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a296:	f7ff fdad 	bl	8009df4 <xTaskGetSchedulerState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d109      	bne.n	800a2b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2a0:	4b10      	ldr	r3, [pc, #64]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	f107 0110 	add.w	r1, r7, #16
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ac:	f7fe fa50 	bl	8008750 <xQueueGenericSend>
 800a2b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2b2:	e012      	b.n	800a2da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	f107 0110 	add.w	r1, r7, #16
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f7fe fa46 	bl	8008750 <xQueueGenericSend>
 800a2c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2c6:	e008      	b.n	800a2da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2c8:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <xTimerGenericCommand+0x98>)
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	f107 0110 	add.w	r1, r7, #16
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	f7fe fb3e 	bl	8008954 <xQueueGenericSendFromISR>
 800a2d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3728      	adds	r7, #40	@ 0x28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20001380 	.word	0x20001380

0800a2e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f2:	4b23      	ldr	r3, [pc, #140]	@ (800a380 <prvProcessExpiredTimer+0x98>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4618      	mov	r0, r3
 800a302:	f7fd fffd 	bl	8008300 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b00      	cmp	r3, #0
 800a312:	d023      	beq.n	800a35c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	699a      	ldr	r2, [r3, #24]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	18d1      	adds	r1, r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	6978      	ldr	r0, [r7, #20]
 800a322:	f000 f8d5 	bl	800a4d0 <prvInsertTimerInActiveList>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d020      	beq.n	800a36e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a32c:	2300      	movs	r3, #0
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	2300      	movs	r3, #0
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	2100      	movs	r1, #0
 800a336:	6978      	ldr	r0, [r7, #20]
 800a338:	f7ff ff88 	bl	800a24c <xTimerGenericCommand>
 800a33c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d114      	bne.n	800a36e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	60fb      	str	r3, [r7, #12]
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	e7fd      	b.n	800a358 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	6978      	ldr	r0, [r7, #20]
 800a374:	4798      	blx	r3
}
 800a376:	bf00      	nop
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20001378 	.word	0x20001378

0800a384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a38c:	f107 0308 	add.w	r3, r7, #8
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f859 	bl	800a448 <prvGetNextExpireTime>
 800a396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4619      	mov	r1, r3
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f805 	bl	800a3ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3a2:	f000 f8d7 	bl	800a554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3a6:	bf00      	nop
 800a3a8:	e7f0      	b.n	800a38c <prvTimerTask+0x8>
	...

0800a3ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3b6:	f7ff f927 	bl	8009608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f866 	bl	800a490 <prvSampleTimeNow>
 800a3c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d130      	bne.n	800a42e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <prvProcessTimerOrBlockTask+0x3c>
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d806      	bhi.n	800a3e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3da:	f7ff f923 	bl	8009624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff81 	bl	800a2e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3e6:	e024      	b.n	800a432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3ee:	4b13      	ldr	r3, [pc, #76]	@ (800a43c <prvProcessTimerOrBlockTask+0x90>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <prvProcessTimerOrBlockTask+0x50>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <prvProcessTimerOrBlockTask+0x52>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a400:	4b0f      	ldr	r3, [pc, #60]	@ (800a440 <prvProcessTimerOrBlockTask+0x94>)
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7fe fe83 	bl	8009118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a412:	f7ff f907 	bl	8009624 <xTaskResumeAll>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a41c:	4b09      	ldr	r3, [pc, #36]	@ (800a444 <prvProcessTimerOrBlockTask+0x98>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
}
 800a42c:	e001      	b.n	800a432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a42e:	f7ff f8f9 	bl	8009624 <xTaskResumeAll>
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	2000137c 	.word	0x2000137c
 800a440:	20001380 	.word	0x20001380
 800a444:	e000ed04 	.word	0xe000ed04

0800a448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a450:	4b0e      	ldr	r3, [pc, #56]	@ (800a48c <prvGetNextExpireTime+0x44>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <prvGetNextExpireTime+0x16>
 800a45a:	2201      	movs	r2, #1
 800a45c:	e000      	b.n	800a460 <prvGetNextExpireTime+0x18>
 800a45e:	2200      	movs	r2, #0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d105      	bne.n	800a478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <prvGetNextExpireTime+0x44>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e001      	b.n	800a47c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	20001378 	.word	0x20001378

0800a490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a498:	f7ff f962 	bl	8009760 <xTaskGetTickCount>
 800a49c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a49e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4cc <prvSampleTimeNow+0x3c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d205      	bcs.n	800a4b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4a8:	f000 f93a 	bl	800a720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e002      	b.n	800a4ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4ba:	4a04      	ldr	r2, [pc, #16]	@ (800a4cc <prvSampleTimeNow+0x3c>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20001388 	.word	0x20001388

0800a4d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d812      	bhi.n	800a51c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	1ad2      	subs	r2, r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	429a      	cmp	r2, r3
 800a502:	d302      	bcc.n	800a50a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	e01b      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a50a:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <prvInsertTimerInActiveList+0x7c>)
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7fd feba 	bl	800828e <vListInsert>
 800a51a:	e012      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d206      	bcs.n	800a532 <prvInsertTimerInActiveList+0x62>
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e007      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a532:	4b07      	ldr	r3, [pc, #28]	@ (800a550 <prvInsertTimerInActiveList+0x80>)
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3304      	adds	r3, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7fd fea6 	bl	800828e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a542:	697b      	ldr	r3, [r7, #20]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	2000137c 	.word	0x2000137c
 800a550:	20001378 	.word	0x20001378

0800a554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08e      	sub	sp, #56	@ 0x38
 800a558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a55a:	e0ce      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	da19      	bge.n	800a596 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	3304      	adds	r3, #4
 800a566:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10b      	bne.n	800a586 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	61fb      	str	r3, [r7, #28]
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	e7fd      	b.n	800a582 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a58c:	6850      	ldr	r0, [r2, #4]
 800a58e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a590:	6892      	ldr	r2, [r2, #8]
 800a592:	4611      	mov	r1, r2
 800a594:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f2c0 80ae 	blt.w	800a6fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fd fea6 	bl	8008300 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff ff6a 	bl	800a490 <prvSampleTimeNow>
 800a5bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b09      	cmp	r3, #9
 800a5c2:	f200 8097 	bhi.w	800a6f4 <prvProcessReceivedCommands+0x1a0>
 800a5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5cc <prvProcessReceivedCommands+0x78>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a5f5 	.word	0x0800a5f5
 800a5d8:	0800a66b 	.word	0x0800a66b
 800a5dc:	0800a67f 	.word	0x0800a67f
 800a5e0:	0800a6cb 	.word	0x0800a6cb
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a5f5 	.word	0x0800a5f5
 800a5ec:	0800a66b 	.word	0x0800a66b
 800a5f0:	0800a67f 	.word	0x0800a67f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	18d1      	adds	r1, r2, r3
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a614:	f7ff ff5c 	bl	800a4d0 <prvInsertTimerInActiveList>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d06c      	beq.n	800a6f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a624:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d061      	beq.n	800a6f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	441a      	add	r2, r3
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a646:	f7ff fe01 	bl	800a24c <xTimerGenericCommand>
 800a64a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d152      	bne.n	800a6f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	61bb      	str	r3, [r7, #24]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a670:	f023 0301 	bic.w	r3, r3, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a67c:	e03d      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	617b      	str	r3, [r7, #20]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	18d1      	adds	r1, r2, r3
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6c4:	f7ff ff04 	bl	800a4d0 <prvInsertTimerInActiveList>
					break;
 800a6c8:	e017      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6da:	f000 fbe5 	bl	800aea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6de:	e00c      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6e6:	f023 0301 	bic.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6f2:	e002      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <prvProcessReceivedCommands+0x1a6>
					break;
 800a6f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6fa:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <prvProcessReceivedCommands+0x1c8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	1d39      	adds	r1, r7, #4
 800a700:	2200      	movs	r2, #0
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe f9c4 	bl	8008a90 <xQueueReceive>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f47f af26 	bne.w	800a55c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	3730      	adds	r7, #48	@ 0x30
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20001380 	.word	0x20001380

0800a720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a726:	e049      	b.n	800a7bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a728:	4b2e      	ldr	r3, [pc, #184]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a732:	4b2c      	ldr	r3, [pc, #176]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3304      	adds	r3, #4
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd fddd 	bl	8008300 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d02f      	beq.n	800a7bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	4413      	add	r3, r2
 800a764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d90e      	bls.n	800a78c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a77a:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3304      	adds	r3, #4
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7fd fd82 	bl	800828e <vListInsert>
 800a78a:	e017      	b.n	800a7bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a78c:	2300      	movs	r3, #0
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	2300      	movs	r3, #0
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	2100      	movs	r1, #0
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff fd58 	bl	800a24c <xTimerGenericCommand>
 800a79c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	603b      	str	r3, [r7, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7bc:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1b0      	bne.n	800a728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7c6:	4b07      	ldr	r3, [pc, #28]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <prvSwitchTimerLists+0xc8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a04      	ldr	r2, [pc, #16]	@ (800a7e4 <prvSwitchTimerLists+0xc4>)
 800a7d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7d4:	4a04      	ldr	r2, [pc, #16]	@ (800a7e8 <prvSwitchTimerLists+0xc8>)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	6013      	str	r3, [r2, #0]
}
 800a7da:	bf00      	nop
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20001378 	.word	0x20001378
 800a7e8:	2000137c 	.word	0x2000137c

0800a7ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7f2:	f000 f969 	bl	800aac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7f6:	4b15      	ldr	r3, [pc, #84]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d120      	bne.n	800a840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7fe:	4814      	ldr	r0, [pc, #80]	@ (800a850 <prvCheckForValidListAndQueue+0x64>)
 800a800:	f7fd fcf4 	bl	80081ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a804:	4813      	ldr	r0, [pc, #76]	@ (800a854 <prvCheckForValidListAndQueue+0x68>)
 800a806:	f7fd fcf1 	bl	80081ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a80a:	4b13      	ldr	r3, [pc, #76]	@ (800a858 <prvCheckForValidListAndQueue+0x6c>)
 800a80c:	4a10      	ldr	r2, [pc, #64]	@ (800a850 <prvCheckForValidListAndQueue+0x64>)
 800a80e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a810:	4b12      	ldr	r3, [pc, #72]	@ (800a85c <prvCheckForValidListAndQueue+0x70>)
 800a812:	4a10      	ldr	r2, [pc, #64]	@ (800a854 <prvCheckForValidListAndQueue+0x68>)
 800a814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a816:	2300      	movs	r3, #0
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4b11      	ldr	r3, [pc, #68]	@ (800a860 <prvCheckForValidListAndQueue+0x74>)
 800a81c:	4a11      	ldr	r2, [pc, #68]	@ (800a864 <prvCheckForValidListAndQueue+0x78>)
 800a81e:	2110      	movs	r1, #16
 800a820:	200a      	movs	r0, #10
 800a822:	f7fd fe01 	bl	8008428 <xQueueGenericCreateStatic>
 800a826:	4603      	mov	r3, r0
 800a828:	4a08      	ldr	r2, [pc, #32]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a82a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d005      	beq.n	800a840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a834:	4b05      	ldr	r3, [pc, #20]	@ (800a84c <prvCheckForValidListAndQueue+0x60>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	490b      	ldr	r1, [pc, #44]	@ (800a868 <prvCheckForValidListAndQueue+0x7c>)
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fc42 	bl	80090c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a840:	f000 f974 	bl	800ab2c <vPortExitCritical>
}
 800a844:	bf00      	nop
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20001380 	.word	0x20001380
 800a850:	20001350 	.word	0x20001350
 800a854:	20001364 	.word	0x20001364
 800a858:	20001378 	.word	0x20001378
 800a85c:	2000137c 	.word	0x2000137c
 800a860:	2000142c 	.word	0x2000142c
 800a864:	2000138c 	.word	0x2000138c
 800a868:	0800c7e0 	.word	0x0800c7e0

0800a86c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3b04      	subs	r3, #4
 800a87c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b04      	subs	r3, #4
 800a88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	f023 0201 	bic.w	r2, r3, #1
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3b04      	subs	r3, #4
 800a89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a89c:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d0 <pxPortInitialiseStack+0x64>)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3b14      	subs	r3, #20
 800a8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f06f 0202 	mvn.w	r2, #2
 800a8ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3b20      	subs	r3, #32
 800a8c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	0800a8d5 	.word	0x0800a8d5

0800a8d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8de:	4b13      	ldr	r3, [pc, #76]	@ (800a92c <prvTaskExitError+0x58>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8e6:	d00b      	beq.n	800a900 <prvTaskExitError+0x2c>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	60fb      	str	r3, [r7, #12]
}
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
 800a8fe:	e7fd      	b.n	800a8fc <prvTaskExitError+0x28>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	60bb      	str	r3, [r7, #8]
}
 800a912:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a914:	bf00      	nop
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0fc      	beq.n	800a916 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20000030 	.word	0x20000030

0800a930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a930:	4b07      	ldr	r3, [pc, #28]	@ (800a950 <pxCurrentTCBConst2>)
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	6808      	ldr	r0, [r1, #0]
 800a936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93a:	f380 8809 	msr	PSP, r0
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8811 	msr	BASEPRI, r0
 800a94a:	4770      	bx	lr
 800a94c:	f3af 8000 	nop.w

0800a950 <pxCurrentTCBConst2>:
 800a950:	20000e50 	.word	0x20000e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a958:	4808      	ldr	r0, [pc, #32]	@ (800a97c <prvPortStartFirstTask+0x24>)
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	6800      	ldr	r0, [r0, #0]
 800a95e:	f380 8808 	msr	MSP, r0
 800a962:	f04f 0000 	mov.w	r0, #0
 800a966:	f380 8814 	msr	CONTROL, r0
 800a96a:	b662      	cpsie	i
 800a96c:	b661      	cpsie	f
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	df00      	svc	0
 800a978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a97a:	bf00      	nop
 800a97c:	e000ed08 	.word	0xe000ed08

0800a980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a986:	4b47      	ldr	r3, [pc, #284]	@ (800aaa4 <xPortStartScheduler+0x124>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a47      	ldr	r2, [pc, #284]	@ (800aaa8 <xPortStartScheduler+0x128>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d10b      	bne.n	800a9a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	613b      	str	r3, [r7, #16]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9a8:	4b3e      	ldr	r3, [pc, #248]	@ (800aaa4 <xPortStartScheduler+0x124>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a3f      	ldr	r2, [pc, #252]	@ (800aaac <xPortStartScheduler+0x12c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d10b      	bne.n	800a9ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60fb      	str	r3, [r7, #12]
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	e7fd      	b.n	800a9c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9ca:	4b39      	ldr	r3, [pc, #228]	@ (800aab0 <xPortStartScheduler+0x130>)
 800a9cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	22ff      	movs	r2, #255	@ 0xff
 800a9da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	4b31      	ldr	r3, [pc, #196]	@ (800aab4 <xPortStartScheduler+0x134>)
 800a9f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9f2:	4b31      	ldr	r3, [pc, #196]	@ (800aab8 <xPortStartScheduler+0x138>)
 800a9f4:	2207      	movs	r2, #7
 800a9f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9f8:	e009      	b.n	800aa0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9fa:	4b2f      	ldr	r3, [pc, #188]	@ (800aab8 <xPortStartScheduler+0x138>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4a2d      	ldr	r2, [pc, #180]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa16:	2b80      	cmp	r3, #128	@ 0x80
 800aa18:	d0ef      	beq.n	800a9fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa1a:	4b27      	ldr	r3, [pc, #156]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f1c3 0307 	rsb	r3, r3, #7
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d00b      	beq.n	800aa3e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60bb      	str	r3, [r7, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	e7fd      	b.n	800aa3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa3e:	4b1e      	ldr	r3, [pc, #120]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	4a1c      	ldr	r2, [pc, #112]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa48:	4b1b      	ldr	r3, [pc, #108]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa50:	4a19      	ldr	r2, [pc, #100]	@ (800aab8 <xPortStartScheduler+0x138>)
 800aa52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa5c:	4b17      	ldr	r3, [pc, #92]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a16      	ldr	r2, [pc, #88]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa68:	4b14      	ldr	r3, [pc, #80]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a13      	ldr	r2, [pc, #76]	@ (800aabc <xPortStartScheduler+0x13c>)
 800aa6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa74:	f000 f8da 	bl	800ac2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa78:	4b11      	ldr	r3, [pc, #68]	@ (800aac0 <xPortStartScheduler+0x140>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa7e:	f000 f8f9 	bl	800ac74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa82:	4b10      	ldr	r3, [pc, #64]	@ (800aac4 <xPortStartScheduler+0x144>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a0f      	ldr	r2, [pc, #60]	@ (800aac4 <xPortStartScheduler+0x144>)
 800aa88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa8e:	f7ff ff63 	bl	800a958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa92:	f7fe ff2f 	bl	80098f4 <vTaskSwitchContext>
	prvTaskExitError();
 800aa96:	f7ff ff1d 	bl	800a8d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	e000ed00 	.word	0xe000ed00
 800aaa8:	410fc271 	.word	0x410fc271
 800aaac:	410fc270 	.word	0x410fc270
 800aab0:	e000e400 	.word	0xe000e400
 800aab4:	2000147c 	.word	0x2000147c
 800aab8:	20001480 	.word	0x20001480
 800aabc:	e000ed20 	.word	0xe000ed20
 800aac0:	20000030 	.word	0x20000030
 800aac4:	e000ef34 	.word	0xe000ef34

0800aac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	607b      	str	r3, [r7, #4]
}
 800aae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aae2:	4b10      	ldr	r3, [pc, #64]	@ (800ab24 <vPortEnterCritical+0x5c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3301      	adds	r3, #1
 800aae8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab24 <vPortEnterCritical+0x5c>)
 800aaea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aaec:	4b0d      	ldr	r3, [pc, #52]	@ (800ab24 <vPortEnterCritical+0x5c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d110      	bne.n	800ab16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab28 <vPortEnterCritical+0x60>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00b      	beq.n	800ab16 <vPortEnterCritical+0x4e>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	603b      	str	r3, [r7, #0]
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	e7fd      	b.n	800ab12 <vPortEnterCritical+0x4a>
	}
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20000030 	.word	0x20000030
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab32:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10b      	bne.n	800ab52 <vPortExitCritical+0x26>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	607b      	str	r3, [r7, #4]
}
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	e7fd      	b.n	800ab4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab52:	4b0a      	ldr	r3, [pc, #40]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	4a08      	ldr	r2, [pc, #32]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab5c:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <vPortExitCritical+0x50>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d105      	bne.n	800ab70 <vPortExitCritical+0x44>
 800ab64:	2300      	movs	r3, #0
 800ab66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	f383 8811 	msr	BASEPRI, r3
}
 800ab6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	20000030 	.word	0x20000030

0800ab80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab80:	f3ef 8009 	mrs	r0, PSP
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	4b15      	ldr	r3, [pc, #84]	@ (800abe0 <pxCurrentTCBConst>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	f01e 0f10 	tst.w	lr, #16
 800ab90:	bf08      	it	eq
 800ab92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	6010      	str	r0, [r2, #0]
 800ab9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aba4:	f380 8811 	msr	BASEPRI, r0
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f7fe fea0 	bl	80098f4 <vTaskSwitchContext>
 800abb4:	f04f 0000 	mov.w	r0, #0
 800abb8:	f380 8811 	msr	BASEPRI, r0
 800abbc:	bc09      	pop	{r0, r3}
 800abbe:	6819      	ldr	r1, [r3, #0]
 800abc0:	6808      	ldr	r0, [r1, #0]
 800abc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc6:	f01e 0f10 	tst.w	lr, #16
 800abca:	bf08      	it	eq
 800abcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abd0:	f380 8809 	msr	PSP, r0
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w

0800abe0 <pxCurrentTCBConst>:
 800abe0:	20000e50 	.word	0x20000e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop

0800abe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	607b      	str	r3, [r7, #4]
}
 800ac00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac02:	f7fe fdbd 	bl	8009780 <xTaskIncrementTick>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <xPortSysTickHandler+0x40>)
 800ac0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	2300      	movs	r3, #0
 800ac16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	f383 8811 	msr	BASEPRI, r3
}
 800ac1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac30:	4b0b      	ldr	r3, [pc, #44]	@ (800ac60 <vPortSetupTimerInterrupt+0x34>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac36:	4b0b      	ldr	r3, [pc, #44]	@ (800ac64 <vPortSetupTimerInterrupt+0x38>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <vPortSetupTimerInterrupt+0x3c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a0a      	ldr	r2, [pc, #40]	@ (800ac6c <vPortSetupTimerInterrupt+0x40>)
 800ac42:	fba2 2303 	umull	r2, r3, r2, r3
 800ac46:	099b      	lsrs	r3, r3, #6
 800ac48:	4a09      	ldr	r2, [pc, #36]	@ (800ac70 <vPortSetupTimerInterrupt+0x44>)
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac4e:	4b04      	ldr	r3, [pc, #16]	@ (800ac60 <vPortSetupTimerInterrupt+0x34>)
 800ac50:	2207      	movs	r2, #7
 800ac52:	601a      	str	r2, [r3, #0]
}
 800ac54:	bf00      	nop
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	e000e010 	.word	0xe000e010
 800ac64:	e000e018 	.word	0xe000e018
 800ac68:	20000024 	.word	0x20000024
 800ac6c:	10624dd3 	.word	0x10624dd3
 800ac70:	e000e014 	.word	0xe000e014

0800ac74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac84 <vPortEnableVFP+0x10>
 800ac78:	6801      	ldr	r1, [r0, #0]
 800ac7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac7e:	6001      	str	r1, [r0, #0]
 800ac80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac82:	bf00      	nop
 800ac84:	e000ed88 	.word	0xe000ed88

0800ac88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac8e:	f3ef 8305 	mrs	r3, IPSR
 800ac92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b0f      	cmp	r3, #15
 800ac98:	d915      	bls.n	800acc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac9a:	4a18      	ldr	r2, [pc, #96]	@ (800acfc <vPortValidateInterruptPriority+0x74>)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aca4:	4b16      	ldr	r3, [pc, #88]	@ (800ad00 <vPortValidateInterruptPriority+0x78>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	7afa      	ldrb	r2, [r7, #11]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d20b      	bcs.n	800acc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	607b      	str	r3, [r7, #4]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad04 <vPortValidateInterruptPriority+0x7c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acce:	4b0e      	ldr	r3, [pc, #56]	@ (800ad08 <vPortValidateInterruptPriority+0x80>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d90b      	bls.n	800acee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	603b      	str	r3, [r7, #0]
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	e7fd      	b.n	800acea <vPortValidateInterruptPriority+0x62>
	}
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	e000e3f0 	.word	0xe000e3f0
 800ad00:	2000147c 	.word	0x2000147c
 800ad04:	e000ed0c 	.word	0xe000ed0c
 800ad08:	20001480 	.word	0x20001480

0800ad0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	@ 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad14:	2300      	movs	r3, #0
 800ad16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad18:	f7fe fc76 	bl	8009608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae90 <pvPortMalloc+0x184>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad24:	f000 f924 	bl	800af70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad28:	4b5a      	ldr	r3, [pc, #360]	@ (800ae94 <pvPortMalloc+0x188>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f040 8095 	bne.w	800ae60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01e      	beq.n	800ad7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4413      	add	r3, r2
 800ad42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f003 0307 	and.w	r3, r3, #7
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d015      	beq.n	800ad7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f023 0307 	bic.w	r3, r3, #7
 800ad54:	3308      	adds	r3, #8
 800ad56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00b      	beq.n	800ad7a <pvPortMalloc+0x6e>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	617b      	str	r3, [r7, #20]
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	e7fd      	b.n	800ad76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d06f      	beq.n	800ae60 <pvPortMalloc+0x154>
 800ad80:	4b45      	ldr	r3, [pc, #276]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d86a      	bhi.n	800ae60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad8a:	4b44      	ldr	r3, [pc, #272]	@ (800ae9c <pvPortMalloc+0x190>)
 800ad8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad8e:	4b43      	ldr	r3, [pc, #268]	@ (800ae9c <pvPortMalloc+0x190>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad94:	e004      	b.n	800ada0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d903      	bls.n	800adb2 <pvPortMalloc+0xa6>
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f1      	bne.n	800ad96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adb2:	4b37      	ldr	r3, [pc, #220]	@ (800ae90 <pvPortMalloc+0x184>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb8:	429a      	cmp	r2, r3
 800adba:	d051      	beq.n	800ae60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2208      	movs	r2, #8
 800adc2:	4413      	add	r3, r2
 800adc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	1ad2      	subs	r2, r2, r3
 800add6:	2308      	movs	r3, #8
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	429a      	cmp	r2, r3
 800addc:	d920      	bls.n	800ae20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <pvPortMalloc+0xfc>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	613b      	str	r3, [r7, #16]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae1a:	69b8      	ldr	r0, [r7, #24]
 800ae1c:	f000 f90a 	bl	800b034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae20:	4b1d      	ldr	r3, [pc, #116]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	4b1b      	ldr	r3, [pc, #108]	@ (800aea0 <pvPortMalloc+0x194>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d203      	bcs.n	800ae42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae3a:	4b17      	ldr	r3, [pc, #92]	@ (800ae98 <pvPortMalloc+0x18c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a18      	ldr	r2, [pc, #96]	@ (800aea0 <pvPortMalloc+0x194>)
 800ae40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <pvPortMalloc+0x188>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae56:	4b13      	ldr	r3, [pc, #76]	@ (800aea4 <pvPortMalloc+0x198>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	4a11      	ldr	r2, [pc, #68]	@ (800aea4 <pvPortMalloc+0x198>)
 800ae5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae60:	f7fe fbe0 	bl	8009624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <pvPortMalloc+0x17a>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	60fb      	str	r3, [r7, #12]
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	e7fd      	b.n	800ae82 <pvPortMalloc+0x176>
	return pvReturn;
 800ae86:	69fb      	ldr	r3, [r7, #28]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3728      	adds	r7, #40	@ 0x28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	2000508c 	.word	0x2000508c
 800ae94:	200050a0 	.word	0x200050a0
 800ae98:	20005090 	.word	0x20005090
 800ae9c:	20005084 	.word	0x20005084
 800aea0:	20005094 	.word	0x20005094
 800aea4:	20005098 	.word	0x20005098

0800aea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d04f      	beq.n	800af5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeba:	2308      	movs	r3, #8
 800aebc:	425b      	negs	r3, r3
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4413      	add	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	4b25      	ldr	r3, [pc, #148]	@ (800af64 <vPortFree+0xbc>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4013      	ands	r3, r2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10b      	bne.n	800aeee <vPortFree+0x46>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	60fb      	str	r3, [r7, #12]
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	e7fd      	b.n	800aeea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <vPortFree+0x66>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	60bb      	str	r3, [r7, #8]
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	e7fd      	b.n	800af0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	4b14      	ldr	r3, [pc, #80]	@ (800af64 <vPortFree+0xbc>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4013      	ands	r3, r2
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01e      	beq.n	800af5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d11a      	bne.n	800af5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	4b0e      	ldr	r3, [pc, #56]	@ (800af64 <vPortFree+0xbc>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	43db      	mvns	r3, r3
 800af2e:	401a      	ands	r2, r3
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af34:	f7fe fb68 	bl	8009608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	4b0a      	ldr	r3, [pc, #40]	@ (800af68 <vPortFree+0xc0>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4413      	add	r3, r2
 800af42:	4a09      	ldr	r2, [pc, #36]	@ (800af68 <vPortFree+0xc0>)
 800af44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f000 f874 	bl	800b034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af4c:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <vPortFree+0xc4>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3301      	adds	r3, #1
 800af52:	4a06      	ldr	r2, [pc, #24]	@ (800af6c <vPortFree+0xc4>)
 800af54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af56:	f7fe fb65 	bl	8009624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af5a:	bf00      	nop
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	200050a0 	.word	0x200050a0
 800af68:	20005090 	.word	0x20005090
 800af6c:	2000509c 	.word	0x2000509c

0800af70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af7c:	4b27      	ldr	r3, [pc, #156]	@ (800b01c <prvHeapInit+0xac>)
 800af7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f003 0307 	and.w	r3, r3, #7
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3307      	adds	r3, #7
 800af8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	4a1f      	ldr	r2, [pc, #124]	@ (800b01c <prvHeapInit+0xac>)
 800afa0:	4413      	add	r3, r2
 800afa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afa8:	4a1d      	ldr	r2, [pc, #116]	@ (800b020 <prvHeapInit+0xb0>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afae:	4b1c      	ldr	r3, [pc, #112]	@ (800b020 <prvHeapInit+0xb0>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	4413      	add	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afbc:	2208      	movs	r2, #8
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	1a9b      	subs	r3, r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4a15      	ldr	r2, [pc, #84]	@ (800b024 <prvHeapInit+0xb4>)
 800afd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afd2:	4b14      	ldr	r3, [pc, #80]	@ (800b024 <prvHeapInit+0xb4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afda:	4b12      	ldr	r3, [pc, #72]	@ (800b024 <prvHeapInit+0xb4>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aff0:	4b0c      	ldr	r3, [pc, #48]	@ (800b024 <prvHeapInit+0xb4>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	4a0a      	ldr	r2, [pc, #40]	@ (800b028 <prvHeapInit+0xb8>)
 800affe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4a09      	ldr	r2, [pc, #36]	@ (800b02c <prvHeapInit+0xbc>)
 800b006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b008:	4b09      	ldr	r3, [pc, #36]	@ (800b030 <prvHeapInit+0xc0>)
 800b00a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b00e:	601a      	str	r2, [r3, #0]
}
 800b010:	bf00      	nop
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20001484 	.word	0x20001484
 800b020:	20005084 	.word	0x20005084
 800b024:	2000508c 	.word	0x2000508c
 800b028:	20005094 	.word	0x20005094
 800b02c:	20005090 	.word	0x20005090
 800b030:	200050a0 	.word	0x200050a0

0800b034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b03c:	4b28      	ldr	r3, [pc, #160]	@ (800b0e0 <prvInsertBlockIntoFreeList+0xac>)
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	e002      	b.n	800b048 <prvInsertBlockIntoFreeList+0x14>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d8f7      	bhi.n	800b042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	4413      	add	r3, r2
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d108      	bne.n	800b076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	441a      	add	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d118      	bne.n	800b0bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b15      	ldr	r3, [pc, #84]	@ (800b0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d00d      	beq.n	800b0b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	441a      	add	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	e008      	b.n	800b0c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	e003      	b.n	800b0c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d002      	beq.n	800b0d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0d2:	bf00      	nop
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	20005084 	.word	0x20005084
 800b0e4:	2000508c 	.word	0x2000508c

0800b0e8 <siprintf>:
 800b0e8:	b40e      	push	{r1, r2, r3}
 800b0ea:	b500      	push	{lr}
 800b0ec:	b09c      	sub	sp, #112	@ 0x70
 800b0ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0f0:	9002      	str	r0, [sp, #8]
 800b0f2:	9006      	str	r0, [sp, #24]
 800b0f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0f8:	4809      	ldr	r0, [pc, #36]	@ (800b120 <siprintf+0x38>)
 800b0fa:	9107      	str	r1, [sp, #28]
 800b0fc:	9104      	str	r1, [sp, #16]
 800b0fe:	4909      	ldr	r1, [pc, #36]	@ (800b124 <siprintf+0x3c>)
 800b100:	f853 2b04 	ldr.w	r2, [r3], #4
 800b104:	9105      	str	r1, [sp, #20]
 800b106:	6800      	ldr	r0, [r0, #0]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	a902      	add	r1, sp, #8
 800b10c:	f000 f9f2 	bl	800b4f4 <_svfiprintf_r>
 800b110:	9b02      	ldr	r3, [sp, #8]
 800b112:	2200      	movs	r2, #0
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	b01c      	add	sp, #112	@ 0x70
 800b118:	f85d eb04 	ldr.w	lr, [sp], #4
 800b11c:	b003      	add	sp, #12
 800b11e:	4770      	bx	lr
 800b120:	20000040 	.word	0x20000040
 800b124:	ffff0208 	.word	0xffff0208

0800b128 <std>:
 800b128:	2300      	movs	r3, #0
 800b12a:	b510      	push	{r4, lr}
 800b12c:	4604      	mov	r4, r0
 800b12e:	e9c0 3300 	strd	r3, r3, [r0]
 800b132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b136:	6083      	str	r3, [r0, #8]
 800b138:	8181      	strh	r1, [r0, #12]
 800b13a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b13c:	81c2      	strh	r2, [r0, #14]
 800b13e:	6183      	str	r3, [r0, #24]
 800b140:	4619      	mov	r1, r3
 800b142:	2208      	movs	r2, #8
 800b144:	305c      	adds	r0, #92	@ 0x5c
 800b146:	f000 f937 	bl	800b3b8 <memset>
 800b14a:	4b0d      	ldr	r3, [pc, #52]	@ (800b180 <std+0x58>)
 800b14c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b14e:	4b0d      	ldr	r3, [pc, #52]	@ (800b184 <std+0x5c>)
 800b150:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b152:	4b0d      	ldr	r3, [pc, #52]	@ (800b188 <std+0x60>)
 800b154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b156:	4b0d      	ldr	r3, [pc, #52]	@ (800b18c <std+0x64>)
 800b158:	6323      	str	r3, [r4, #48]	@ 0x30
 800b15a:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <std+0x68>)
 800b15c:	6224      	str	r4, [r4, #32]
 800b15e:	429c      	cmp	r4, r3
 800b160:	d006      	beq.n	800b170 <std+0x48>
 800b162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b166:	4294      	cmp	r4, r2
 800b168:	d002      	beq.n	800b170 <std+0x48>
 800b16a:	33d0      	adds	r3, #208	@ 0xd0
 800b16c:	429c      	cmp	r4, r3
 800b16e:	d105      	bne.n	800b17c <std+0x54>
 800b170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b178:	f000 b950 	b.w	800b41c <__retarget_lock_init_recursive>
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	bf00      	nop
 800b180:	0800bf41 	.word	0x0800bf41
 800b184:	0800bf63 	.word	0x0800bf63
 800b188:	0800bf9b 	.word	0x0800bf9b
 800b18c:	0800bfbf 	.word	0x0800bfbf
 800b190:	200050a4 	.word	0x200050a4

0800b194 <stdio_exit_handler>:
 800b194:	4a02      	ldr	r2, [pc, #8]	@ (800b1a0 <stdio_exit_handler+0xc>)
 800b196:	4903      	ldr	r1, [pc, #12]	@ (800b1a4 <stdio_exit_handler+0x10>)
 800b198:	4803      	ldr	r0, [pc, #12]	@ (800b1a8 <stdio_exit_handler+0x14>)
 800b19a:	f000 b869 	b.w	800b270 <_fwalk_sglue>
 800b19e:	bf00      	nop
 800b1a0:	20000034 	.word	0x20000034
 800b1a4:	0800bed9 	.word	0x0800bed9
 800b1a8:	20000044 	.word	0x20000044

0800b1ac <cleanup_stdio>:
 800b1ac:	6841      	ldr	r1, [r0, #4]
 800b1ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b1e0 <cleanup_stdio+0x34>)
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	b510      	push	{r4, lr}
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	d001      	beq.n	800b1bc <cleanup_stdio+0x10>
 800b1b8:	f000 fe8e 	bl	800bed8 <_fflush_r>
 800b1bc:	68a1      	ldr	r1, [r4, #8]
 800b1be:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <cleanup_stdio+0x38>)
 800b1c0:	4299      	cmp	r1, r3
 800b1c2:	d002      	beq.n	800b1ca <cleanup_stdio+0x1e>
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fe87 	bl	800bed8 <_fflush_r>
 800b1ca:	68e1      	ldr	r1, [r4, #12]
 800b1cc:	4b06      	ldr	r3, [pc, #24]	@ (800b1e8 <cleanup_stdio+0x3c>)
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	d004      	beq.n	800b1dc <cleanup_stdio+0x30>
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d8:	f000 be7e 	b.w	800bed8 <_fflush_r>
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	bf00      	nop
 800b1e0:	200050a4 	.word	0x200050a4
 800b1e4:	2000510c 	.word	0x2000510c
 800b1e8:	20005174 	.word	0x20005174

0800b1ec <global_stdio_init.part.0>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b21c <global_stdio_init.part.0+0x30>)
 800b1f0:	4c0b      	ldr	r4, [pc, #44]	@ (800b220 <global_stdio_init.part.0+0x34>)
 800b1f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b224 <global_stdio_init.part.0+0x38>)
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2104      	movs	r1, #4
 800b1fc:	f7ff ff94 	bl	800b128 <std>
 800b200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b204:	2201      	movs	r2, #1
 800b206:	2109      	movs	r1, #9
 800b208:	f7ff ff8e 	bl	800b128 <std>
 800b20c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b210:	2202      	movs	r2, #2
 800b212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b216:	2112      	movs	r1, #18
 800b218:	f7ff bf86 	b.w	800b128 <std>
 800b21c:	200051dc 	.word	0x200051dc
 800b220:	200050a4 	.word	0x200050a4
 800b224:	0800b195 	.word	0x0800b195

0800b228 <__sfp_lock_acquire>:
 800b228:	4801      	ldr	r0, [pc, #4]	@ (800b230 <__sfp_lock_acquire+0x8>)
 800b22a:	f000 b8f8 	b.w	800b41e <__retarget_lock_acquire_recursive>
 800b22e:	bf00      	nop
 800b230:	200051e1 	.word	0x200051e1

0800b234 <__sfp_lock_release>:
 800b234:	4801      	ldr	r0, [pc, #4]	@ (800b23c <__sfp_lock_release+0x8>)
 800b236:	f000 b8f3 	b.w	800b420 <__retarget_lock_release_recursive>
 800b23a:	bf00      	nop
 800b23c:	200051e1 	.word	0x200051e1

0800b240 <__sinit>:
 800b240:	b510      	push	{r4, lr}
 800b242:	4604      	mov	r4, r0
 800b244:	f7ff fff0 	bl	800b228 <__sfp_lock_acquire>
 800b248:	6a23      	ldr	r3, [r4, #32]
 800b24a:	b11b      	cbz	r3, 800b254 <__sinit+0x14>
 800b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b250:	f7ff bff0 	b.w	800b234 <__sfp_lock_release>
 800b254:	4b04      	ldr	r3, [pc, #16]	@ (800b268 <__sinit+0x28>)
 800b256:	6223      	str	r3, [r4, #32]
 800b258:	4b04      	ldr	r3, [pc, #16]	@ (800b26c <__sinit+0x2c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1f5      	bne.n	800b24c <__sinit+0xc>
 800b260:	f7ff ffc4 	bl	800b1ec <global_stdio_init.part.0>
 800b264:	e7f2      	b.n	800b24c <__sinit+0xc>
 800b266:	bf00      	nop
 800b268:	0800b1ad 	.word	0x0800b1ad
 800b26c:	200051dc 	.word	0x200051dc

0800b270 <_fwalk_sglue>:
 800b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b274:	4607      	mov	r7, r0
 800b276:	4688      	mov	r8, r1
 800b278:	4614      	mov	r4, r2
 800b27a:	2600      	movs	r6, #0
 800b27c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b280:	f1b9 0901 	subs.w	r9, r9, #1
 800b284:	d505      	bpl.n	800b292 <_fwalk_sglue+0x22>
 800b286:	6824      	ldr	r4, [r4, #0]
 800b288:	2c00      	cmp	r4, #0
 800b28a:	d1f7      	bne.n	800b27c <_fwalk_sglue+0xc>
 800b28c:	4630      	mov	r0, r6
 800b28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b292:	89ab      	ldrh	r3, [r5, #12]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d907      	bls.n	800b2a8 <_fwalk_sglue+0x38>
 800b298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b29c:	3301      	adds	r3, #1
 800b29e:	d003      	beq.n	800b2a8 <_fwalk_sglue+0x38>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	47c0      	blx	r8
 800b2a6:	4306      	orrs	r6, r0
 800b2a8:	3568      	adds	r5, #104	@ 0x68
 800b2aa:	e7e9      	b.n	800b280 <_fwalk_sglue+0x10>

0800b2ac <iprintf>:
 800b2ac:	b40f      	push	{r0, r1, r2, r3}
 800b2ae:	b507      	push	{r0, r1, r2, lr}
 800b2b0:	4906      	ldr	r1, [pc, #24]	@ (800b2cc <iprintf+0x20>)
 800b2b2:	ab04      	add	r3, sp, #16
 800b2b4:	6808      	ldr	r0, [r1, #0]
 800b2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ba:	6881      	ldr	r1, [r0, #8]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	f000 fa3f 	bl	800b740 <_vfiprintf_r>
 800b2c2:	b003      	add	sp, #12
 800b2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c8:	b004      	add	sp, #16
 800b2ca:	4770      	bx	lr
 800b2cc:	20000040 	.word	0x20000040

0800b2d0 <_puts_r>:
 800b2d0:	6a03      	ldr	r3, [r0, #32]
 800b2d2:	b570      	push	{r4, r5, r6, lr}
 800b2d4:	6884      	ldr	r4, [r0, #8]
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	460e      	mov	r6, r1
 800b2da:	b90b      	cbnz	r3, 800b2e0 <_puts_r+0x10>
 800b2dc:	f7ff ffb0 	bl	800b240 <__sinit>
 800b2e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2e2:	07db      	lsls	r3, r3, #31
 800b2e4:	d405      	bmi.n	800b2f2 <_puts_r+0x22>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	0598      	lsls	r0, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_puts_r+0x22>
 800b2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ee:	f000 f896 	bl	800b41e <__retarget_lock_acquire_recursive>
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	0719      	lsls	r1, r3, #28
 800b2f6:	d502      	bpl.n	800b2fe <_puts_r+0x2e>
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d135      	bne.n	800b36a <_puts_r+0x9a>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f000 fecd 	bl	800c0a0 <__swsetup_r>
 800b306:	b380      	cbz	r0, 800b36a <_puts_r+0x9a>
 800b308:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b30c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b30e:	07da      	lsls	r2, r3, #31
 800b310:	d405      	bmi.n	800b31e <_puts_r+0x4e>
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	059b      	lsls	r3, r3, #22
 800b316:	d402      	bmi.n	800b31e <_puts_r+0x4e>
 800b318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b31a:	f000 f881 	bl	800b420 <__retarget_lock_release_recursive>
 800b31e:	4628      	mov	r0, r5
 800b320:	bd70      	pop	{r4, r5, r6, pc}
 800b322:	2b00      	cmp	r3, #0
 800b324:	da04      	bge.n	800b330 <_puts_r+0x60>
 800b326:	69a2      	ldr	r2, [r4, #24]
 800b328:	429a      	cmp	r2, r3
 800b32a:	dc17      	bgt.n	800b35c <_puts_r+0x8c>
 800b32c:	290a      	cmp	r1, #10
 800b32e:	d015      	beq.n	800b35c <_puts_r+0x8c>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	7019      	strb	r1, [r3, #0]
 800b338:	68a3      	ldr	r3, [r4, #8]
 800b33a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b33e:	3b01      	subs	r3, #1
 800b340:	60a3      	str	r3, [r4, #8]
 800b342:	2900      	cmp	r1, #0
 800b344:	d1ed      	bne.n	800b322 <_puts_r+0x52>
 800b346:	2b00      	cmp	r3, #0
 800b348:	da11      	bge.n	800b36e <_puts_r+0x9e>
 800b34a:	4622      	mov	r2, r4
 800b34c:	210a      	movs	r1, #10
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 fe67 	bl	800c022 <__swbuf_r>
 800b354:	3001      	adds	r0, #1
 800b356:	d0d7      	beq.n	800b308 <_puts_r+0x38>
 800b358:	250a      	movs	r5, #10
 800b35a:	e7d7      	b.n	800b30c <_puts_r+0x3c>
 800b35c:	4622      	mov	r2, r4
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 fe5f 	bl	800c022 <__swbuf_r>
 800b364:	3001      	adds	r0, #1
 800b366:	d1e7      	bne.n	800b338 <_puts_r+0x68>
 800b368:	e7ce      	b.n	800b308 <_puts_r+0x38>
 800b36a:	3e01      	subs	r6, #1
 800b36c:	e7e4      	b.n	800b338 <_puts_r+0x68>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	6022      	str	r2, [r4, #0]
 800b374:	220a      	movs	r2, #10
 800b376:	701a      	strb	r2, [r3, #0]
 800b378:	e7ee      	b.n	800b358 <_puts_r+0x88>
	...

0800b37c <puts>:
 800b37c:	4b02      	ldr	r3, [pc, #8]	@ (800b388 <puts+0xc>)
 800b37e:	4601      	mov	r1, r0
 800b380:	6818      	ldr	r0, [r3, #0]
 800b382:	f7ff bfa5 	b.w	800b2d0 <_puts_r>
 800b386:	bf00      	nop
 800b388:	20000040 	.word	0x20000040

0800b38c <strstr>:
 800b38c:	780a      	ldrb	r2, [r1, #0]
 800b38e:	b570      	push	{r4, r5, r6, lr}
 800b390:	b96a      	cbnz	r2, 800b3ae <strstr+0x22>
 800b392:	bd70      	pop	{r4, r5, r6, pc}
 800b394:	429a      	cmp	r2, r3
 800b396:	d109      	bne.n	800b3ac <strstr+0x20>
 800b398:	460c      	mov	r4, r1
 800b39a:	4605      	mov	r5, r0
 800b39c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0f6      	beq.n	800b392 <strstr+0x6>
 800b3a4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b3a8:	429e      	cmp	r6, r3
 800b3aa:	d0f7      	beq.n	800b39c <strstr+0x10>
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	7803      	ldrb	r3, [r0, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1ef      	bne.n	800b394 <strstr+0x8>
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	e7ec      	b.n	800b392 <strstr+0x6>

0800b3b8 <memset>:
 800b3b8:	4402      	add	r2, r0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d100      	bne.n	800b3c2 <memset+0xa>
 800b3c0:	4770      	bx	lr
 800b3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c6:	e7f9      	b.n	800b3bc <memset+0x4>

0800b3c8 <__errno>:
 800b3c8:	4b01      	ldr	r3, [pc, #4]	@ (800b3d0 <__errno+0x8>)
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	20000040 	.word	0x20000040

0800b3d4 <__libc_init_array>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	4d0d      	ldr	r5, [pc, #52]	@ (800b40c <__libc_init_array+0x38>)
 800b3d8:	4c0d      	ldr	r4, [pc, #52]	@ (800b410 <__libc_init_array+0x3c>)
 800b3da:	1b64      	subs	r4, r4, r5
 800b3dc:	10a4      	asrs	r4, r4, #2
 800b3de:	2600      	movs	r6, #0
 800b3e0:	42a6      	cmp	r6, r4
 800b3e2:	d109      	bne.n	800b3f8 <__libc_init_array+0x24>
 800b3e4:	4d0b      	ldr	r5, [pc, #44]	@ (800b414 <__libc_init_array+0x40>)
 800b3e6:	4c0c      	ldr	r4, [pc, #48]	@ (800b418 <__libc_init_array+0x44>)
 800b3e8:	f000 fff6 	bl	800c3d8 <_init>
 800b3ec:	1b64      	subs	r4, r4, r5
 800b3ee:	10a4      	asrs	r4, r4, #2
 800b3f0:	2600      	movs	r6, #0
 800b3f2:	42a6      	cmp	r6, r4
 800b3f4:	d105      	bne.n	800b402 <__libc_init_array+0x2e>
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fc:	4798      	blx	r3
 800b3fe:	3601      	adds	r6, #1
 800b400:	e7ee      	b.n	800b3e0 <__libc_init_array+0xc>
 800b402:	f855 3b04 	ldr.w	r3, [r5], #4
 800b406:	4798      	blx	r3
 800b408:	3601      	adds	r6, #1
 800b40a:	e7f2      	b.n	800b3f2 <__libc_init_array+0x1e>
 800b40c:	0800d734 	.word	0x0800d734
 800b410:	0800d734 	.word	0x0800d734
 800b414:	0800d734 	.word	0x0800d734
 800b418:	0800d738 	.word	0x0800d738

0800b41c <__retarget_lock_init_recursive>:
 800b41c:	4770      	bx	lr

0800b41e <__retarget_lock_acquire_recursive>:
 800b41e:	4770      	bx	lr

0800b420 <__retarget_lock_release_recursive>:
 800b420:	4770      	bx	lr

0800b422 <memcpy>:
 800b422:	440a      	add	r2, r1
 800b424:	4291      	cmp	r1, r2
 800b426:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b42a:	d100      	bne.n	800b42e <memcpy+0xc>
 800b42c:	4770      	bx	lr
 800b42e:	b510      	push	{r4, lr}
 800b430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b434:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b438:	4291      	cmp	r1, r2
 800b43a:	d1f9      	bne.n	800b430 <memcpy+0xe>
 800b43c:	bd10      	pop	{r4, pc}

0800b43e <__ssputs_r>:
 800b43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b442:	688e      	ldr	r6, [r1, #8]
 800b444:	461f      	mov	r7, r3
 800b446:	42be      	cmp	r6, r7
 800b448:	680b      	ldr	r3, [r1, #0]
 800b44a:	4682      	mov	sl, r0
 800b44c:	460c      	mov	r4, r1
 800b44e:	4690      	mov	r8, r2
 800b450:	d82d      	bhi.n	800b4ae <__ssputs_r+0x70>
 800b452:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b456:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b45a:	d026      	beq.n	800b4aa <__ssputs_r+0x6c>
 800b45c:	6965      	ldr	r5, [r4, #20]
 800b45e:	6909      	ldr	r1, [r1, #16]
 800b460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b464:	eba3 0901 	sub.w	r9, r3, r1
 800b468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b46c:	1c7b      	adds	r3, r7, #1
 800b46e:	444b      	add	r3, r9
 800b470:	106d      	asrs	r5, r5, #1
 800b472:	429d      	cmp	r5, r3
 800b474:	bf38      	it	cc
 800b476:	461d      	movcc	r5, r3
 800b478:	0553      	lsls	r3, r2, #21
 800b47a:	d527      	bpl.n	800b4cc <__ssputs_r+0x8e>
 800b47c:	4629      	mov	r1, r5
 800b47e:	f000 fa99 	bl	800b9b4 <_malloc_r>
 800b482:	4606      	mov	r6, r0
 800b484:	b360      	cbz	r0, 800b4e0 <__ssputs_r+0xa2>
 800b486:	6921      	ldr	r1, [r4, #16]
 800b488:	464a      	mov	r2, r9
 800b48a:	f7ff ffca 	bl	800b422 <memcpy>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	6126      	str	r6, [r4, #16]
 800b49c:	6165      	str	r5, [r4, #20]
 800b49e:	444e      	add	r6, r9
 800b4a0:	eba5 0509 	sub.w	r5, r5, r9
 800b4a4:	6026      	str	r6, [r4, #0]
 800b4a6:	60a5      	str	r5, [r4, #8]
 800b4a8:	463e      	mov	r6, r7
 800b4aa:	42be      	cmp	r6, r7
 800b4ac:	d900      	bls.n	800b4b0 <__ssputs_r+0x72>
 800b4ae:	463e      	mov	r6, r7
 800b4b0:	6820      	ldr	r0, [r4, #0]
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	f000 feab 	bl	800c210 <memmove>
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	1b9b      	subs	r3, r3, r6
 800b4be:	60a3      	str	r3, [r4, #8]
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	4433      	add	r3, r6
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4cc:	462a      	mov	r2, r5
 800b4ce:	f000 fd7a 	bl	800bfc6 <_realloc_r>
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d1e0      	bne.n	800b49a <__ssputs_r+0x5c>
 800b4d8:	6921      	ldr	r1, [r4, #16]
 800b4da:	4650      	mov	r0, sl
 800b4dc:	f000 ff2a 	bl	800c334 <_free_r>
 800b4e0:	230c      	movs	r3, #12
 800b4e2:	f8ca 3000 	str.w	r3, [sl]
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4f2:	e7e9      	b.n	800b4c8 <__ssputs_r+0x8a>

0800b4f4 <_svfiprintf_r>:
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	4698      	mov	r8, r3
 800b4fa:	898b      	ldrh	r3, [r1, #12]
 800b4fc:	061b      	lsls	r3, r3, #24
 800b4fe:	b09d      	sub	sp, #116	@ 0x74
 800b500:	4607      	mov	r7, r0
 800b502:	460d      	mov	r5, r1
 800b504:	4614      	mov	r4, r2
 800b506:	d510      	bpl.n	800b52a <_svfiprintf_r+0x36>
 800b508:	690b      	ldr	r3, [r1, #16]
 800b50a:	b973      	cbnz	r3, 800b52a <_svfiprintf_r+0x36>
 800b50c:	2140      	movs	r1, #64	@ 0x40
 800b50e:	f000 fa51 	bl	800b9b4 <_malloc_r>
 800b512:	6028      	str	r0, [r5, #0]
 800b514:	6128      	str	r0, [r5, #16]
 800b516:	b930      	cbnz	r0, 800b526 <_svfiprintf_r+0x32>
 800b518:	230c      	movs	r3, #12
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b520:	b01d      	add	sp, #116	@ 0x74
 800b522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b526:	2340      	movs	r3, #64	@ 0x40
 800b528:	616b      	str	r3, [r5, #20]
 800b52a:	2300      	movs	r3, #0
 800b52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b52e:	2320      	movs	r3, #32
 800b530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b534:	f8cd 800c 	str.w	r8, [sp, #12]
 800b538:	2330      	movs	r3, #48	@ 0x30
 800b53a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6d8 <_svfiprintf_r+0x1e4>
 800b53e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b542:	f04f 0901 	mov.w	r9, #1
 800b546:	4623      	mov	r3, r4
 800b548:	469a      	mov	sl, r3
 800b54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b54e:	b10a      	cbz	r2, 800b554 <_svfiprintf_r+0x60>
 800b550:	2a25      	cmp	r2, #37	@ 0x25
 800b552:	d1f9      	bne.n	800b548 <_svfiprintf_r+0x54>
 800b554:	ebba 0b04 	subs.w	fp, sl, r4
 800b558:	d00b      	beq.n	800b572 <_svfiprintf_r+0x7e>
 800b55a:	465b      	mov	r3, fp
 800b55c:	4622      	mov	r2, r4
 800b55e:	4629      	mov	r1, r5
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ff6c 	bl	800b43e <__ssputs_r>
 800b566:	3001      	adds	r0, #1
 800b568:	f000 80a7 	beq.w	800b6ba <_svfiprintf_r+0x1c6>
 800b56c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b56e:	445a      	add	r2, fp
 800b570:	9209      	str	r2, [sp, #36]	@ 0x24
 800b572:	f89a 3000 	ldrb.w	r3, [sl]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 809f 	beq.w	800b6ba <_svfiprintf_r+0x1c6>
 800b57c:	2300      	movs	r3, #0
 800b57e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b586:	f10a 0a01 	add.w	sl, sl, #1
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	9307      	str	r3, [sp, #28]
 800b58e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b592:	931a      	str	r3, [sp, #104]	@ 0x68
 800b594:	4654      	mov	r4, sl
 800b596:	2205      	movs	r2, #5
 800b598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59c:	484e      	ldr	r0, [pc, #312]	@ (800b6d8 <_svfiprintf_r+0x1e4>)
 800b59e:	f7f4 fe3f 	bl	8000220 <memchr>
 800b5a2:	9a04      	ldr	r2, [sp, #16]
 800b5a4:	b9d8      	cbnz	r0, 800b5de <_svfiprintf_r+0xea>
 800b5a6:	06d0      	lsls	r0, r2, #27
 800b5a8:	bf44      	itt	mi
 800b5aa:	2320      	movmi	r3, #32
 800b5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5b0:	0711      	lsls	r1, r2, #28
 800b5b2:	bf44      	itt	mi
 800b5b4:	232b      	movmi	r3, #43	@ 0x2b
 800b5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b5be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5c0:	d015      	beq.n	800b5ee <_svfiprintf_r+0xfa>
 800b5c2:	9a07      	ldr	r2, [sp, #28]
 800b5c4:	4654      	mov	r4, sl
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	f04f 0c0a 	mov.w	ip, #10
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d2:	3b30      	subs	r3, #48	@ 0x30
 800b5d4:	2b09      	cmp	r3, #9
 800b5d6:	d94b      	bls.n	800b670 <_svfiprintf_r+0x17c>
 800b5d8:	b1b0      	cbz	r0, 800b608 <_svfiprintf_r+0x114>
 800b5da:	9207      	str	r2, [sp, #28]
 800b5dc:	e014      	b.n	800b608 <_svfiprintf_r+0x114>
 800b5de:	eba0 0308 	sub.w	r3, r0, r8
 800b5e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	9304      	str	r3, [sp, #16]
 800b5ea:	46a2      	mov	sl, r4
 800b5ec:	e7d2      	b.n	800b594 <_svfiprintf_r+0xa0>
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	1d19      	adds	r1, r3, #4
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	9103      	str	r1, [sp, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	bfbb      	ittet	lt
 800b5fa:	425b      	neglt	r3, r3
 800b5fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b600:	9307      	strge	r3, [sp, #28]
 800b602:	9307      	strlt	r3, [sp, #28]
 800b604:	bfb8      	it	lt
 800b606:	9204      	strlt	r2, [sp, #16]
 800b608:	7823      	ldrb	r3, [r4, #0]
 800b60a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b60c:	d10a      	bne.n	800b624 <_svfiprintf_r+0x130>
 800b60e:	7863      	ldrb	r3, [r4, #1]
 800b610:	2b2a      	cmp	r3, #42	@ 0x2a
 800b612:	d132      	bne.n	800b67a <_svfiprintf_r+0x186>
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	1d1a      	adds	r2, r3, #4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	9203      	str	r2, [sp, #12]
 800b61c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b620:	3402      	adds	r4, #2
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6e8 <_svfiprintf_r+0x1f4>
 800b628:	7821      	ldrb	r1, [r4, #0]
 800b62a:	2203      	movs	r2, #3
 800b62c:	4650      	mov	r0, sl
 800b62e:	f7f4 fdf7 	bl	8000220 <memchr>
 800b632:	b138      	cbz	r0, 800b644 <_svfiprintf_r+0x150>
 800b634:	9b04      	ldr	r3, [sp, #16]
 800b636:	eba0 000a 	sub.w	r0, r0, sl
 800b63a:	2240      	movs	r2, #64	@ 0x40
 800b63c:	4082      	lsls	r2, r0
 800b63e:	4313      	orrs	r3, r2
 800b640:	3401      	adds	r4, #1
 800b642:	9304      	str	r3, [sp, #16]
 800b644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b648:	4824      	ldr	r0, [pc, #144]	@ (800b6dc <_svfiprintf_r+0x1e8>)
 800b64a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b64e:	2206      	movs	r2, #6
 800b650:	f7f4 fde6 	bl	8000220 <memchr>
 800b654:	2800      	cmp	r0, #0
 800b656:	d036      	beq.n	800b6c6 <_svfiprintf_r+0x1d2>
 800b658:	4b21      	ldr	r3, [pc, #132]	@ (800b6e0 <_svfiprintf_r+0x1ec>)
 800b65a:	bb1b      	cbnz	r3, 800b6a4 <_svfiprintf_r+0x1b0>
 800b65c:	9b03      	ldr	r3, [sp, #12]
 800b65e:	3307      	adds	r3, #7
 800b660:	f023 0307 	bic.w	r3, r3, #7
 800b664:	3308      	adds	r3, #8
 800b666:	9303      	str	r3, [sp, #12]
 800b668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b66a:	4433      	add	r3, r6
 800b66c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b66e:	e76a      	b.n	800b546 <_svfiprintf_r+0x52>
 800b670:	fb0c 3202 	mla	r2, ip, r2, r3
 800b674:	460c      	mov	r4, r1
 800b676:	2001      	movs	r0, #1
 800b678:	e7a8      	b.n	800b5cc <_svfiprintf_r+0xd8>
 800b67a:	2300      	movs	r3, #0
 800b67c:	3401      	adds	r4, #1
 800b67e:	9305      	str	r3, [sp, #20]
 800b680:	4619      	mov	r1, r3
 800b682:	f04f 0c0a 	mov.w	ip, #10
 800b686:	4620      	mov	r0, r4
 800b688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b68c:	3a30      	subs	r2, #48	@ 0x30
 800b68e:	2a09      	cmp	r2, #9
 800b690:	d903      	bls.n	800b69a <_svfiprintf_r+0x1a6>
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0c6      	beq.n	800b624 <_svfiprintf_r+0x130>
 800b696:	9105      	str	r1, [sp, #20]
 800b698:	e7c4      	b.n	800b624 <_svfiprintf_r+0x130>
 800b69a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b69e:	4604      	mov	r4, r0
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e7f0      	b.n	800b686 <_svfiprintf_r+0x192>
 800b6a4:	ab03      	add	r3, sp, #12
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	462a      	mov	r2, r5
 800b6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e4 <_svfiprintf_r+0x1f0>)
 800b6ac:	a904      	add	r1, sp, #16
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f3af 8000 	nop.w
 800b6b4:	1c42      	adds	r2, r0, #1
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	d1d6      	bne.n	800b668 <_svfiprintf_r+0x174>
 800b6ba:	89ab      	ldrh	r3, [r5, #12]
 800b6bc:	065b      	lsls	r3, r3, #25
 800b6be:	f53f af2d 	bmi.w	800b51c <_svfiprintf_r+0x28>
 800b6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6c4:	e72c      	b.n	800b520 <_svfiprintf_r+0x2c>
 800b6c6:	ab03      	add	r3, sp, #12
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	4b05      	ldr	r3, [pc, #20]	@ (800b6e4 <_svfiprintf_r+0x1f0>)
 800b6ce:	a904      	add	r1, sp, #16
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f000 fa5d 	bl	800bb90 <_printf_i>
 800b6d6:	e7ed      	b.n	800b6b4 <_svfiprintf_r+0x1c0>
 800b6d8:	0800d6f8 	.word	0x0800d6f8
 800b6dc:	0800d702 	.word	0x0800d702
 800b6e0:	00000000 	.word	0x00000000
 800b6e4:	0800b43f 	.word	0x0800b43f
 800b6e8:	0800d6fe 	.word	0x0800d6fe

0800b6ec <__sfputc_r>:
 800b6ec:	6893      	ldr	r3, [r2, #8]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	b410      	push	{r4}
 800b6f4:	6093      	str	r3, [r2, #8]
 800b6f6:	da08      	bge.n	800b70a <__sfputc_r+0x1e>
 800b6f8:	6994      	ldr	r4, [r2, #24]
 800b6fa:	42a3      	cmp	r3, r4
 800b6fc:	db01      	blt.n	800b702 <__sfputc_r+0x16>
 800b6fe:	290a      	cmp	r1, #10
 800b700:	d103      	bne.n	800b70a <__sfputc_r+0x1e>
 800b702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b706:	f000 bc8c 	b.w	800c022 <__swbuf_r>
 800b70a:	6813      	ldr	r3, [r2, #0]
 800b70c:	1c58      	adds	r0, r3, #1
 800b70e:	6010      	str	r0, [r2, #0]
 800b710:	7019      	strb	r1, [r3, #0]
 800b712:	4608      	mov	r0, r1
 800b714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <__sfputs_r>:
 800b71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71c:	4606      	mov	r6, r0
 800b71e:	460f      	mov	r7, r1
 800b720:	4614      	mov	r4, r2
 800b722:	18d5      	adds	r5, r2, r3
 800b724:	42ac      	cmp	r4, r5
 800b726:	d101      	bne.n	800b72c <__sfputs_r+0x12>
 800b728:	2000      	movs	r0, #0
 800b72a:	e007      	b.n	800b73c <__sfputs_r+0x22>
 800b72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b730:	463a      	mov	r2, r7
 800b732:	4630      	mov	r0, r6
 800b734:	f7ff ffda 	bl	800b6ec <__sfputc_r>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d1f3      	bne.n	800b724 <__sfputs_r+0xa>
 800b73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b740 <_vfiprintf_r>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	460d      	mov	r5, r1
 800b746:	b09d      	sub	sp, #116	@ 0x74
 800b748:	4614      	mov	r4, r2
 800b74a:	4698      	mov	r8, r3
 800b74c:	4606      	mov	r6, r0
 800b74e:	b118      	cbz	r0, 800b758 <_vfiprintf_r+0x18>
 800b750:	6a03      	ldr	r3, [r0, #32]
 800b752:	b90b      	cbnz	r3, 800b758 <_vfiprintf_r+0x18>
 800b754:	f7ff fd74 	bl	800b240 <__sinit>
 800b758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b75a:	07d9      	lsls	r1, r3, #31
 800b75c:	d405      	bmi.n	800b76a <_vfiprintf_r+0x2a>
 800b75e:	89ab      	ldrh	r3, [r5, #12]
 800b760:	059a      	lsls	r2, r3, #22
 800b762:	d402      	bmi.n	800b76a <_vfiprintf_r+0x2a>
 800b764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b766:	f7ff fe5a 	bl	800b41e <__retarget_lock_acquire_recursive>
 800b76a:	89ab      	ldrh	r3, [r5, #12]
 800b76c:	071b      	lsls	r3, r3, #28
 800b76e:	d501      	bpl.n	800b774 <_vfiprintf_r+0x34>
 800b770:	692b      	ldr	r3, [r5, #16]
 800b772:	b99b      	cbnz	r3, 800b79c <_vfiprintf_r+0x5c>
 800b774:	4629      	mov	r1, r5
 800b776:	4630      	mov	r0, r6
 800b778:	f000 fc92 	bl	800c0a0 <__swsetup_r>
 800b77c:	b170      	cbz	r0, 800b79c <_vfiprintf_r+0x5c>
 800b77e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b780:	07dc      	lsls	r4, r3, #31
 800b782:	d504      	bpl.n	800b78e <_vfiprintf_r+0x4e>
 800b784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b788:	b01d      	add	sp, #116	@ 0x74
 800b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	0598      	lsls	r0, r3, #22
 800b792:	d4f7      	bmi.n	800b784 <_vfiprintf_r+0x44>
 800b794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b796:	f7ff fe43 	bl	800b420 <__retarget_lock_release_recursive>
 800b79a:	e7f3      	b.n	800b784 <_vfiprintf_r+0x44>
 800b79c:	2300      	movs	r3, #0
 800b79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7a0:	2320      	movs	r3, #32
 800b7a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7aa:	2330      	movs	r3, #48	@ 0x30
 800b7ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b95c <_vfiprintf_r+0x21c>
 800b7b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7b4:	f04f 0901 	mov.w	r9, #1
 800b7b8:	4623      	mov	r3, r4
 800b7ba:	469a      	mov	sl, r3
 800b7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c0:	b10a      	cbz	r2, 800b7c6 <_vfiprintf_r+0x86>
 800b7c2:	2a25      	cmp	r2, #37	@ 0x25
 800b7c4:	d1f9      	bne.n	800b7ba <_vfiprintf_r+0x7a>
 800b7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ca:	d00b      	beq.n	800b7e4 <_vfiprintf_r+0xa4>
 800b7cc:	465b      	mov	r3, fp
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7ff ffa1 	bl	800b71a <__sfputs_r>
 800b7d8:	3001      	adds	r0, #1
 800b7da:	f000 80a7 	beq.w	800b92c <_vfiprintf_r+0x1ec>
 800b7de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7e0:	445a      	add	r2, fp
 800b7e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f000 809f 	beq.w	800b92c <_vfiprintf_r+0x1ec>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7f8:	f10a 0a01 	add.w	sl, sl, #1
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b804:	931a      	str	r3, [sp, #104]	@ 0x68
 800b806:	4654      	mov	r4, sl
 800b808:	2205      	movs	r2, #5
 800b80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80e:	4853      	ldr	r0, [pc, #332]	@ (800b95c <_vfiprintf_r+0x21c>)
 800b810:	f7f4 fd06 	bl	8000220 <memchr>
 800b814:	9a04      	ldr	r2, [sp, #16]
 800b816:	b9d8      	cbnz	r0, 800b850 <_vfiprintf_r+0x110>
 800b818:	06d1      	lsls	r1, r2, #27
 800b81a:	bf44      	itt	mi
 800b81c:	2320      	movmi	r3, #32
 800b81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b822:	0713      	lsls	r3, r2, #28
 800b824:	bf44      	itt	mi
 800b826:	232b      	movmi	r3, #43	@ 0x2b
 800b828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b82c:	f89a 3000 	ldrb.w	r3, [sl]
 800b830:	2b2a      	cmp	r3, #42	@ 0x2a
 800b832:	d015      	beq.n	800b860 <_vfiprintf_r+0x120>
 800b834:	9a07      	ldr	r2, [sp, #28]
 800b836:	4654      	mov	r4, sl
 800b838:	2000      	movs	r0, #0
 800b83a:	f04f 0c0a 	mov.w	ip, #10
 800b83e:	4621      	mov	r1, r4
 800b840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b844:	3b30      	subs	r3, #48	@ 0x30
 800b846:	2b09      	cmp	r3, #9
 800b848:	d94b      	bls.n	800b8e2 <_vfiprintf_r+0x1a2>
 800b84a:	b1b0      	cbz	r0, 800b87a <_vfiprintf_r+0x13a>
 800b84c:	9207      	str	r2, [sp, #28]
 800b84e:	e014      	b.n	800b87a <_vfiprintf_r+0x13a>
 800b850:	eba0 0308 	sub.w	r3, r0, r8
 800b854:	fa09 f303 	lsl.w	r3, r9, r3
 800b858:	4313      	orrs	r3, r2
 800b85a:	9304      	str	r3, [sp, #16]
 800b85c:	46a2      	mov	sl, r4
 800b85e:	e7d2      	b.n	800b806 <_vfiprintf_r+0xc6>
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	1d19      	adds	r1, r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	9103      	str	r1, [sp, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bfbb      	ittet	lt
 800b86c:	425b      	neglt	r3, r3
 800b86e:	f042 0202 	orrlt.w	r2, r2, #2
 800b872:	9307      	strge	r3, [sp, #28]
 800b874:	9307      	strlt	r3, [sp, #28]
 800b876:	bfb8      	it	lt
 800b878:	9204      	strlt	r2, [sp, #16]
 800b87a:	7823      	ldrb	r3, [r4, #0]
 800b87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b87e:	d10a      	bne.n	800b896 <_vfiprintf_r+0x156>
 800b880:	7863      	ldrb	r3, [r4, #1]
 800b882:	2b2a      	cmp	r3, #42	@ 0x2a
 800b884:	d132      	bne.n	800b8ec <_vfiprintf_r+0x1ac>
 800b886:	9b03      	ldr	r3, [sp, #12]
 800b888:	1d1a      	adds	r2, r3, #4
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	9203      	str	r2, [sp, #12]
 800b88e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b892:	3402      	adds	r4, #2
 800b894:	9305      	str	r3, [sp, #20]
 800b896:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b96c <_vfiprintf_r+0x22c>
 800b89a:	7821      	ldrb	r1, [r4, #0]
 800b89c:	2203      	movs	r2, #3
 800b89e:	4650      	mov	r0, sl
 800b8a0:	f7f4 fcbe 	bl	8000220 <memchr>
 800b8a4:	b138      	cbz	r0, 800b8b6 <_vfiprintf_r+0x176>
 800b8a6:	9b04      	ldr	r3, [sp, #16]
 800b8a8:	eba0 000a 	sub.w	r0, r0, sl
 800b8ac:	2240      	movs	r2, #64	@ 0x40
 800b8ae:	4082      	lsls	r2, r0
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	3401      	adds	r4, #1
 800b8b4:	9304      	str	r3, [sp, #16]
 800b8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ba:	4829      	ldr	r0, [pc, #164]	@ (800b960 <_vfiprintf_r+0x220>)
 800b8bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8c0:	2206      	movs	r2, #6
 800b8c2:	f7f4 fcad 	bl	8000220 <memchr>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d03f      	beq.n	800b94a <_vfiprintf_r+0x20a>
 800b8ca:	4b26      	ldr	r3, [pc, #152]	@ (800b964 <_vfiprintf_r+0x224>)
 800b8cc:	bb1b      	cbnz	r3, 800b916 <_vfiprintf_r+0x1d6>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	3307      	adds	r3, #7
 800b8d2:	f023 0307 	bic.w	r3, r3, #7
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8dc:	443b      	add	r3, r7
 800b8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8e0:	e76a      	b.n	800b7b8 <_vfiprintf_r+0x78>
 800b8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	e7a8      	b.n	800b83e <_vfiprintf_r+0xfe>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	9305      	str	r3, [sp, #20]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f04f 0c0a 	mov.w	ip, #10
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8fe:	3a30      	subs	r2, #48	@ 0x30
 800b900:	2a09      	cmp	r2, #9
 800b902:	d903      	bls.n	800b90c <_vfiprintf_r+0x1cc>
 800b904:	2b00      	cmp	r3, #0
 800b906:	d0c6      	beq.n	800b896 <_vfiprintf_r+0x156>
 800b908:	9105      	str	r1, [sp, #20]
 800b90a:	e7c4      	b.n	800b896 <_vfiprintf_r+0x156>
 800b90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b910:	4604      	mov	r4, r0
 800b912:	2301      	movs	r3, #1
 800b914:	e7f0      	b.n	800b8f8 <_vfiprintf_r+0x1b8>
 800b916:	ab03      	add	r3, sp, #12
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	462a      	mov	r2, r5
 800b91c:	4b12      	ldr	r3, [pc, #72]	@ (800b968 <_vfiprintf_r+0x228>)
 800b91e:	a904      	add	r1, sp, #16
 800b920:	4630      	mov	r0, r6
 800b922:	f3af 8000 	nop.w
 800b926:	4607      	mov	r7, r0
 800b928:	1c78      	adds	r0, r7, #1
 800b92a:	d1d6      	bne.n	800b8da <_vfiprintf_r+0x19a>
 800b92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b92e:	07d9      	lsls	r1, r3, #31
 800b930:	d405      	bmi.n	800b93e <_vfiprintf_r+0x1fe>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	059a      	lsls	r2, r3, #22
 800b936:	d402      	bmi.n	800b93e <_vfiprintf_r+0x1fe>
 800b938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b93a:	f7ff fd71 	bl	800b420 <__retarget_lock_release_recursive>
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	065b      	lsls	r3, r3, #25
 800b942:	f53f af1f 	bmi.w	800b784 <_vfiprintf_r+0x44>
 800b946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b948:	e71e      	b.n	800b788 <_vfiprintf_r+0x48>
 800b94a:	ab03      	add	r3, sp, #12
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	462a      	mov	r2, r5
 800b950:	4b05      	ldr	r3, [pc, #20]	@ (800b968 <_vfiprintf_r+0x228>)
 800b952:	a904      	add	r1, sp, #16
 800b954:	4630      	mov	r0, r6
 800b956:	f000 f91b 	bl	800bb90 <_printf_i>
 800b95a:	e7e4      	b.n	800b926 <_vfiprintf_r+0x1e6>
 800b95c:	0800d6f8 	.word	0x0800d6f8
 800b960:	0800d702 	.word	0x0800d702
 800b964:	00000000 	.word	0x00000000
 800b968:	0800b71b 	.word	0x0800b71b
 800b96c:	0800d6fe 	.word	0x0800d6fe

0800b970 <sbrk_aligned>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	4e0f      	ldr	r6, [pc, #60]	@ (800b9b0 <sbrk_aligned+0x40>)
 800b974:	460c      	mov	r4, r1
 800b976:	6831      	ldr	r1, [r6, #0]
 800b978:	4605      	mov	r5, r0
 800b97a:	b911      	cbnz	r1, 800b982 <sbrk_aligned+0x12>
 800b97c:	f000 fcb8 	bl	800c2f0 <_sbrk_r>
 800b980:	6030      	str	r0, [r6, #0]
 800b982:	4621      	mov	r1, r4
 800b984:	4628      	mov	r0, r5
 800b986:	f000 fcb3 	bl	800c2f0 <_sbrk_r>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	d103      	bne.n	800b996 <sbrk_aligned+0x26>
 800b98e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b992:	4620      	mov	r0, r4
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	1cc4      	adds	r4, r0, #3
 800b998:	f024 0403 	bic.w	r4, r4, #3
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	d0f8      	beq.n	800b992 <sbrk_aligned+0x22>
 800b9a0:	1a21      	subs	r1, r4, r0
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f000 fca4 	bl	800c2f0 <_sbrk_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d1f2      	bne.n	800b992 <sbrk_aligned+0x22>
 800b9ac:	e7ef      	b.n	800b98e <sbrk_aligned+0x1e>
 800b9ae:	bf00      	nop
 800b9b0:	200051e4 	.word	0x200051e4

0800b9b4 <_malloc_r>:
 800b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	1ccd      	adds	r5, r1, #3
 800b9ba:	f025 0503 	bic.w	r5, r5, #3
 800b9be:	3508      	adds	r5, #8
 800b9c0:	2d0c      	cmp	r5, #12
 800b9c2:	bf38      	it	cc
 800b9c4:	250c      	movcc	r5, #12
 800b9c6:	2d00      	cmp	r5, #0
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	db01      	blt.n	800b9d0 <_malloc_r+0x1c>
 800b9cc:	42a9      	cmp	r1, r5
 800b9ce:	d904      	bls.n	800b9da <_malloc_r+0x26>
 800b9d0:	230c      	movs	r3, #12
 800b9d2:	6033      	str	r3, [r6, #0]
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bab0 <_malloc_r+0xfc>
 800b9de:	f000 faa3 	bl	800bf28 <__malloc_lock>
 800b9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	bb44      	cbnz	r4, 800ba3c <_malloc_r+0x88>
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ffbf 	bl	800b970 <sbrk_aligned>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	d158      	bne.n	800baaa <_malloc_r+0xf6>
 800b9f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b9fc:	4627      	mov	r7, r4
 800b9fe:	2f00      	cmp	r7, #0
 800ba00:	d143      	bne.n	800ba8a <_malloc_r+0xd6>
 800ba02:	2c00      	cmp	r4, #0
 800ba04:	d04b      	beq.n	800ba9e <_malloc_r+0xea>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	4639      	mov	r1, r7
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	eb04 0903 	add.w	r9, r4, r3
 800ba10:	f000 fc6e 	bl	800c2f0 <_sbrk_r>
 800ba14:	4581      	cmp	r9, r0
 800ba16:	d142      	bne.n	800ba9e <_malloc_r+0xea>
 800ba18:	6821      	ldr	r1, [r4, #0]
 800ba1a:	1a6d      	subs	r5, r5, r1
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7ff ffa6 	bl	800b970 <sbrk_aligned>
 800ba24:	3001      	adds	r0, #1
 800ba26:	d03a      	beq.n	800ba9e <_malloc_r+0xea>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	442b      	add	r3, r5
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	bb62      	cbnz	r2, 800ba90 <_malloc_r+0xdc>
 800ba36:	f8c8 7000 	str.w	r7, [r8]
 800ba3a:	e00f      	b.n	800ba5c <_malloc_r+0xa8>
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	1b52      	subs	r2, r2, r5
 800ba40:	d420      	bmi.n	800ba84 <_malloc_r+0xd0>
 800ba42:	2a0b      	cmp	r2, #11
 800ba44:	d917      	bls.n	800ba76 <_malloc_r+0xc2>
 800ba46:	1961      	adds	r1, r4, r5
 800ba48:	42a3      	cmp	r3, r4
 800ba4a:	6025      	str	r5, [r4, #0]
 800ba4c:	bf18      	it	ne
 800ba4e:	6059      	strne	r1, [r3, #4]
 800ba50:	6863      	ldr	r3, [r4, #4]
 800ba52:	bf08      	it	eq
 800ba54:	f8c8 1000 	streq.w	r1, [r8]
 800ba58:	5162      	str	r2, [r4, r5]
 800ba5a:	604b      	str	r3, [r1, #4]
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f000 fa69 	bl	800bf34 <__malloc_unlock>
 800ba62:	f104 000b 	add.w	r0, r4, #11
 800ba66:	1d23      	adds	r3, r4, #4
 800ba68:	f020 0007 	bic.w	r0, r0, #7
 800ba6c:	1ac2      	subs	r2, r0, r3
 800ba6e:	bf1c      	itt	ne
 800ba70:	1a1b      	subne	r3, r3, r0
 800ba72:	50a3      	strne	r3, [r4, r2]
 800ba74:	e7af      	b.n	800b9d6 <_malloc_r+0x22>
 800ba76:	6862      	ldr	r2, [r4, #4]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	bf0c      	ite	eq
 800ba7c:	f8c8 2000 	streq.w	r2, [r8]
 800ba80:	605a      	strne	r2, [r3, #4]
 800ba82:	e7eb      	b.n	800ba5c <_malloc_r+0xa8>
 800ba84:	4623      	mov	r3, r4
 800ba86:	6864      	ldr	r4, [r4, #4]
 800ba88:	e7ae      	b.n	800b9e8 <_malloc_r+0x34>
 800ba8a:	463c      	mov	r4, r7
 800ba8c:	687f      	ldr	r7, [r7, #4]
 800ba8e:	e7b6      	b.n	800b9fe <_malloc_r+0x4a>
 800ba90:	461a      	mov	r2, r3
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d1fb      	bne.n	800ba90 <_malloc_r+0xdc>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	6053      	str	r3, [r2, #4]
 800ba9c:	e7de      	b.n	800ba5c <_malloc_r+0xa8>
 800ba9e:	230c      	movs	r3, #12
 800baa0:	6033      	str	r3, [r6, #0]
 800baa2:	4630      	mov	r0, r6
 800baa4:	f000 fa46 	bl	800bf34 <__malloc_unlock>
 800baa8:	e794      	b.n	800b9d4 <_malloc_r+0x20>
 800baaa:	6005      	str	r5, [r0, #0]
 800baac:	e7d6      	b.n	800ba5c <_malloc_r+0xa8>
 800baae:	bf00      	nop
 800bab0:	200051e8 	.word	0x200051e8

0800bab4 <_printf_common>:
 800bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	4616      	mov	r6, r2
 800baba:	4698      	mov	r8, r3
 800babc:	688a      	ldr	r2, [r1, #8]
 800babe:	690b      	ldr	r3, [r1, #16]
 800bac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bac4:	4293      	cmp	r3, r2
 800bac6:	bfb8      	it	lt
 800bac8:	4613      	movlt	r3, r2
 800baca:	6033      	str	r3, [r6, #0]
 800bacc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bad0:	4607      	mov	r7, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	b10a      	cbz	r2, 800bada <_printf_common+0x26>
 800bad6:	3301      	adds	r3, #1
 800bad8:	6033      	str	r3, [r6, #0]
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	0699      	lsls	r1, r3, #26
 800bade:	bf42      	ittt	mi
 800bae0:	6833      	ldrmi	r3, [r6, #0]
 800bae2:	3302      	addmi	r3, #2
 800bae4:	6033      	strmi	r3, [r6, #0]
 800bae6:	6825      	ldr	r5, [r4, #0]
 800bae8:	f015 0506 	ands.w	r5, r5, #6
 800baec:	d106      	bne.n	800bafc <_printf_common+0x48>
 800baee:	f104 0a19 	add.w	sl, r4, #25
 800baf2:	68e3      	ldr	r3, [r4, #12]
 800baf4:	6832      	ldr	r2, [r6, #0]
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	42ab      	cmp	r3, r5
 800bafa:	dc26      	bgt.n	800bb4a <_printf_common+0x96>
 800bafc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb00:	6822      	ldr	r2, [r4, #0]
 800bb02:	3b00      	subs	r3, #0
 800bb04:	bf18      	it	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	0692      	lsls	r2, r2, #26
 800bb0a:	d42b      	bmi.n	800bb64 <_printf_common+0xb0>
 800bb0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb10:	4641      	mov	r1, r8
 800bb12:	4638      	mov	r0, r7
 800bb14:	47c8      	blx	r9
 800bb16:	3001      	adds	r0, #1
 800bb18:	d01e      	beq.n	800bb58 <_printf_common+0xa4>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	6922      	ldr	r2, [r4, #16]
 800bb1e:	f003 0306 	and.w	r3, r3, #6
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	bf02      	ittt	eq
 800bb26:	68e5      	ldreq	r5, [r4, #12]
 800bb28:	6833      	ldreq	r3, [r6, #0]
 800bb2a:	1aed      	subeq	r5, r5, r3
 800bb2c:	68a3      	ldr	r3, [r4, #8]
 800bb2e:	bf0c      	ite	eq
 800bb30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb34:	2500      	movne	r5, #0
 800bb36:	4293      	cmp	r3, r2
 800bb38:	bfc4      	itt	gt
 800bb3a:	1a9b      	subgt	r3, r3, r2
 800bb3c:	18ed      	addgt	r5, r5, r3
 800bb3e:	2600      	movs	r6, #0
 800bb40:	341a      	adds	r4, #26
 800bb42:	42b5      	cmp	r5, r6
 800bb44:	d11a      	bne.n	800bb7c <_printf_common+0xc8>
 800bb46:	2000      	movs	r0, #0
 800bb48:	e008      	b.n	800bb5c <_printf_common+0xa8>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	4641      	mov	r1, r8
 800bb50:	4638      	mov	r0, r7
 800bb52:	47c8      	blx	r9
 800bb54:	3001      	adds	r0, #1
 800bb56:	d103      	bne.n	800bb60 <_printf_common+0xac>
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb60:	3501      	adds	r5, #1
 800bb62:	e7c6      	b.n	800baf2 <_printf_common+0x3e>
 800bb64:	18e1      	adds	r1, r4, r3
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	2030      	movs	r0, #48	@ 0x30
 800bb6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb6e:	4422      	add	r2, r4
 800bb70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb78:	3302      	adds	r3, #2
 800bb7a:	e7c7      	b.n	800bb0c <_printf_common+0x58>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4641      	mov	r1, r8
 800bb82:	4638      	mov	r0, r7
 800bb84:	47c8      	blx	r9
 800bb86:	3001      	adds	r0, #1
 800bb88:	d0e6      	beq.n	800bb58 <_printf_common+0xa4>
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	e7d9      	b.n	800bb42 <_printf_common+0x8e>
	...

0800bb90 <_printf_i>:
 800bb90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb94:	7e0f      	ldrb	r7, [r1, #24]
 800bb96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb98:	2f78      	cmp	r7, #120	@ 0x78
 800bb9a:	4691      	mov	r9, r2
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	469a      	mov	sl, r3
 800bba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bba6:	d807      	bhi.n	800bbb8 <_printf_i+0x28>
 800bba8:	2f62      	cmp	r7, #98	@ 0x62
 800bbaa:	d80a      	bhi.n	800bbc2 <_printf_i+0x32>
 800bbac:	2f00      	cmp	r7, #0
 800bbae:	f000 80d2 	beq.w	800bd56 <_printf_i+0x1c6>
 800bbb2:	2f58      	cmp	r7, #88	@ 0x58
 800bbb4:	f000 80b9 	beq.w	800bd2a <_printf_i+0x19a>
 800bbb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbc0:	e03a      	b.n	800bc38 <_printf_i+0xa8>
 800bbc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbc6:	2b15      	cmp	r3, #21
 800bbc8:	d8f6      	bhi.n	800bbb8 <_printf_i+0x28>
 800bbca:	a101      	add	r1, pc, #4	@ (adr r1, 800bbd0 <_printf_i+0x40>)
 800bbcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbd0:	0800bc29 	.word	0x0800bc29
 800bbd4:	0800bc3d 	.word	0x0800bc3d
 800bbd8:	0800bbb9 	.word	0x0800bbb9
 800bbdc:	0800bbb9 	.word	0x0800bbb9
 800bbe0:	0800bbb9 	.word	0x0800bbb9
 800bbe4:	0800bbb9 	.word	0x0800bbb9
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bbb9 	.word	0x0800bbb9
 800bbf0:	0800bbb9 	.word	0x0800bbb9
 800bbf4:	0800bbb9 	.word	0x0800bbb9
 800bbf8:	0800bbb9 	.word	0x0800bbb9
 800bbfc:	0800bd3d 	.word	0x0800bd3d
 800bc00:	0800bc67 	.word	0x0800bc67
 800bc04:	0800bcf7 	.word	0x0800bcf7
 800bc08:	0800bbb9 	.word	0x0800bbb9
 800bc0c:	0800bbb9 	.word	0x0800bbb9
 800bc10:	0800bd5f 	.word	0x0800bd5f
 800bc14:	0800bbb9 	.word	0x0800bbb9
 800bc18:	0800bc67 	.word	0x0800bc67
 800bc1c:	0800bbb9 	.word	0x0800bbb9
 800bc20:	0800bbb9 	.word	0x0800bbb9
 800bc24:	0800bcff 	.word	0x0800bcff
 800bc28:	6833      	ldr	r3, [r6, #0]
 800bc2a:	1d1a      	adds	r2, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6032      	str	r2, [r6, #0]
 800bc30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e09d      	b.n	800bd78 <_printf_i+0x1e8>
 800bc3c:	6833      	ldr	r3, [r6, #0]
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	1d19      	adds	r1, r3, #4
 800bc42:	6031      	str	r1, [r6, #0]
 800bc44:	0606      	lsls	r6, r0, #24
 800bc46:	d501      	bpl.n	800bc4c <_printf_i+0xbc>
 800bc48:	681d      	ldr	r5, [r3, #0]
 800bc4a:	e003      	b.n	800bc54 <_printf_i+0xc4>
 800bc4c:	0645      	lsls	r5, r0, #25
 800bc4e:	d5fb      	bpl.n	800bc48 <_printf_i+0xb8>
 800bc50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	da03      	bge.n	800bc60 <_printf_i+0xd0>
 800bc58:	232d      	movs	r3, #45	@ 0x2d
 800bc5a:	426d      	negs	r5, r5
 800bc5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc60:	4859      	ldr	r0, [pc, #356]	@ (800bdc8 <_printf_i+0x238>)
 800bc62:	230a      	movs	r3, #10
 800bc64:	e011      	b.n	800bc8a <_printf_i+0xfa>
 800bc66:	6821      	ldr	r1, [r4, #0]
 800bc68:	6833      	ldr	r3, [r6, #0]
 800bc6a:	0608      	lsls	r0, r1, #24
 800bc6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc70:	d402      	bmi.n	800bc78 <_printf_i+0xe8>
 800bc72:	0649      	lsls	r1, r1, #25
 800bc74:	bf48      	it	mi
 800bc76:	b2ad      	uxthmi	r5, r5
 800bc78:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc7a:	4853      	ldr	r0, [pc, #332]	@ (800bdc8 <_printf_i+0x238>)
 800bc7c:	6033      	str	r3, [r6, #0]
 800bc7e:	bf14      	ite	ne
 800bc80:	230a      	movne	r3, #10
 800bc82:	2308      	moveq	r3, #8
 800bc84:	2100      	movs	r1, #0
 800bc86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc8a:	6866      	ldr	r6, [r4, #4]
 800bc8c:	60a6      	str	r6, [r4, #8]
 800bc8e:	2e00      	cmp	r6, #0
 800bc90:	bfa2      	ittt	ge
 800bc92:	6821      	ldrge	r1, [r4, #0]
 800bc94:	f021 0104 	bicge.w	r1, r1, #4
 800bc98:	6021      	strge	r1, [r4, #0]
 800bc9a:	b90d      	cbnz	r5, 800bca0 <_printf_i+0x110>
 800bc9c:	2e00      	cmp	r6, #0
 800bc9e:	d04b      	beq.n	800bd38 <_printf_i+0x1a8>
 800bca0:	4616      	mov	r6, r2
 800bca2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bca6:	fb03 5711 	mls	r7, r3, r1, r5
 800bcaa:	5dc7      	ldrb	r7, [r0, r7]
 800bcac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcb0:	462f      	mov	r7, r5
 800bcb2:	42bb      	cmp	r3, r7
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	d9f4      	bls.n	800bca2 <_printf_i+0x112>
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d10b      	bne.n	800bcd4 <_printf_i+0x144>
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	07df      	lsls	r7, r3, #31
 800bcc0:	d508      	bpl.n	800bcd4 <_printf_i+0x144>
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	4299      	cmp	r1, r3
 800bcc8:	bfde      	ittt	le
 800bcca:	2330      	movle	r3, #48	@ 0x30
 800bccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bcd4:	1b92      	subs	r2, r2, r6
 800bcd6:	6122      	str	r2, [r4, #16]
 800bcd8:	f8cd a000 	str.w	sl, [sp]
 800bcdc:	464b      	mov	r3, r9
 800bcde:	aa03      	add	r2, sp, #12
 800bce0:	4621      	mov	r1, r4
 800bce2:	4640      	mov	r0, r8
 800bce4:	f7ff fee6 	bl	800bab4 <_printf_common>
 800bce8:	3001      	adds	r0, #1
 800bcea:	d14a      	bne.n	800bd82 <_printf_i+0x1f2>
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcf0:	b004      	add	sp, #16
 800bcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	f043 0320 	orr.w	r3, r3, #32
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	4833      	ldr	r0, [pc, #204]	@ (800bdcc <_printf_i+0x23c>)
 800bd00:	2778      	movs	r7, #120	@ 0x78
 800bd02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	6831      	ldr	r1, [r6, #0]
 800bd0a:	061f      	lsls	r7, r3, #24
 800bd0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd10:	d402      	bmi.n	800bd18 <_printf_i+0x188>
 800bd12:	065f      	lsls	r7, r3, #25
 800bd14:	bf48      	it	mi
 800bd16:	b2ad      	uxthmi	r5, r5
 800bd18:	6031      	str	r1, [r6, #0]
 800bd1a:	07d9      	lsls	r1, r3, #31
 800bd1c:	bf44      	itt	mi
 800bd1e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd22:	6023      	strmi	r3, [r4, #0]
 800bd24:	b11d      	cbz	r5, 800bd2e <_printf_i+0x19e>
 800bd26:	2310      	movs	r3, #16
 800bd28:	e7ac      	b.n	800bc84 <_printf_i+0xf4>
 800bd2a:	4827      	ldr	r0, [pc, #156]	@ (800bdc8 <_printf_i+0x238>)
 800bd2c:	e7e9      	b.n	800bd02 <_printf_i+0x172>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	f023 0320 	bic.w	r3, r3, #32
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	e7f6      	b.n	800bd26 <_printf_i+0x196>
 800bd38:	4616      	mov	r6, r2
 800bd3a:	e7bd      	b.n	800bcb8 <_printf_i+0x128>
 800bd3c:	6833      	ldr	r3, [r6, #0]
 800bd3e:	6825      	ldr	r5, [r4, #0]
 800bd40:	6961      	ldr	r1, [r4, #20]
 800bd42:	1d18      	adds	r0, r3, #4
 800bd44:	6030      	str	r0, [r6, #0]
 800bd46:	062e      	lsls	r6, r5, #24
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	d501      	bpl.n	800bd50 <_printf_i+0x1c0>
 800bd4c:	6019      	str	r1, [r3, #0]
 800bd4e:	e002      	b.n	800bd56 <_printf_i+0x1c6>
 800bd50:	0668      	lsls	r0, r5, #25
 800bd52:	d5fb      	bpl.n	800bd4c <_printf_i+0x1bc>
 800bd54:	8019      	strh	r1, [r3, #0]
 800bd56:	2300      	movs	r3, #0
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	4616      	mov	r6, r2
 800bd5c:	e7bc      	b.n	800bcd8 <_printf_i+0x148>
 800bd5e:	6833      	ldr	r3, [r6, #0]
 800bd60:	1d1a      	adds	r2, r3, #4
 800bd62:	6032      	str	r2, [r6, #0]
 800bd64:	681e      	ldr	r6, [r3, #0]
 800bd66:	6862      	ldr	r2, [r4, #4]
 800bd68:	2100      	movs	r1, #0
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7f4 fa58 	bl	8000220 <memchr>
 800bd70:	b108      	cbz	r0, 800bd76 <_printf_i+0x1e6>
 800bd72:	1b80      	subs	r0, r0, r6
 800bd74:	6060      	str	r0, [r4, #4]
 800bd76:	6863      	ldr	r3, [r4, #4]
 800bd78:	6123      	str	r3, [r4, #16]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd80:	e7aa      	b.n	800bcd8 <_printf_i+0x148>
 800bd82:	6923      	ldr	r3, [r4, #16]
 800bd84:	4632      	mov	r2, r6
 800bd86:	4649      	mov	r1, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	47d0      	blx	sl
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d0ad      	beq.n	800bcec <_printf_i+0x15c>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	079b      	lsls	r3, r3, #30
 800bd94:	d413      	bmi.n	800bdbe <_printf_i+0x22e>
 800bd96:	68e0      	ldr	r0, [r4, #12]
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	4298      	cmp	r0, r3
 800bd9c:	bfb8      	it	lt
 800bd9e:	4618      	movlt	r0, r3
 800bda0:	e7a6      	b.n	800bcf0 <_printf_i+0x160>
 800bda2:	2301      	movs	r3, #1
 800bda4:	4632      	mov	r2, r6
 800bda6:	4649      	mov	r1, r9
 800bda8:	4640      	mov	r0, r8
 800bdaa:	47d0      	blx	sl
 800bdac:	3001      	adds	r0, #1
 800bdae:	d09d      	beq.n	800bcec <_printf_i+0x15c>
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	68e3      	ldr	r3, [r4, #12]
 800bdb4:	9903      	ldr	r1, [sp, #12]
 800bdb6:	1a5b      	subs	r3, r3, r1
 800bdb8:	42ab      	cmp	r3, r5
 800bdba:	dcf2      	bgt.n	800bda2 <_printf_i+0x212>
 800bdbc:	e7eb      	b.n	800bd96 <_printf_i+0x206>
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	f104 0619 	add.w	r6, r4, #25
 800bdc4:	e7f5      	b.n	800bdb2 <_printf_i+0x222>
 800bdc6:	bf00      	nop
 800bdc8:	0800d709 	.word	0x0800d709
 800bdcc:	0800d71a 	.word	0x0800d71a

0800bdd0 <__sflush_r>:
 800bdd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd8:	0716      	lsls	r6, r2, #28
 800bdda:	4605      	mov	r5, r0
 800bddc:	460c      	mov	r4, r1
 800bdde:	d454      	bmi.n	800be8a <__sflush_r+0xba>
 800bde0:	684b      	ldr	r3, [r1, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dc02      	bgt.n	800bdec <__sflush_r+0x1c>
 800bde6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dd48      	ble.n	800be7e <__sflush_r+0xae>
 800bdec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	d045      	beq.n	800be7e <__sflush_r+0xae>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdf8:	682f      	ldr	r7, [r5, #0]
 800bdfa:	6a21      	ldr	r1, [r4, #32]
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	d030      	beq.n	800be62 <__sflush_r+0x92>
 800be00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	0759      	lsls	r1, r3, #29
 800be06:	d505      	bpl.n	800be14 <__sflush_r+0x44>
 800be08:	6863      	ldr	r3, [r4, #4]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be0e:	b10b      	cbz	r3, 800be14 <__sflush_r+0x44>
 800be10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	2300      	movs	r3, #0
 800be16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be18:	6a21      	ldr	r1, [r4, #32]
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b0      	blx	r6
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	d106      	bne.n	800be32 <__sflush_r+0x62>
 800be24:	6829      	ldr	r1, [r5, #0]
 800be26:	291d      	cmp	r1, #29
 800be28:	d82b      	bhi.n	800be82 <__sflush_r+0xb2>
 800be2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bed4 <__sflush_r+0x104>)
 800be2c:	410a      	asrs	r2, r1
 800be2e:	07d6      	lsls	r6, r2, #31
 800be30:	d427      	bmi.n	800be82 <__sflush_r+0xb2>
 800be32:	2200      	movs	r2, #0
 800be34:	6062      	str	r2, [r4, #4]
 800be36:	04d9      	lsls	r1, r3, #19
 800be38:	6922      	ldr	r2, [r4, #16]
 800be3a:	6022      	str	r2, [r4, #0]
 800be3c:	d504      	bpl.n	800be48 <__sflush_r+0x78>
 800be3e:	1c42      	adds	r2, r0, #1
 800be40:	d101      	bne.n	800be46 <__sflush_r+0x76>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b903      	cbnz	r3, 800be48 <__sflush_r+0x78>
 800be46:	6560      	str	r0, [r4, #84]	@ 0x54
 800be48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be4a:	602f      	str	r7, [r5, #0]
 800be4c:	b1b9      	cbz	r1, 800be7e <__sflush_r+0xae>
 800be4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be52:	4299      	cmp	r1, r3
 800be54:	d002      	beq.n	800be5c <__sflush_r+0x8c>
 800be56:	4628      	mov	r0, r5
 800be58:	f000 fa6c 	bl	800c334 <_free_r>
 800be5c:	2300      	movs	r3, #0
 800be5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be60:	e00d      	b.n	800be7e <__sflush_r+0xae>
 800be62:	2301      	movs	r3, #1
 800be64:	4628      	mov	r0, r5
 800be66:	47b0      	blx	r6
 800be68:	4602      	mov	r2, r0
 800be6a:	1c50      	adds	r0, r2, #1
 800be6c:	d1c9      	bne.n	800be02 <__sflush_r+0x32>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0c6      	beq.n	800be02 <__sflush_r+0x32>
 800be74:	2b1d      	cmp	r3, #29
 800be76:	d001      	beq.n	800be7c <__sflush_r+0xac>
 800be78:	2b16      	cmp	r3, #22
 800be7a:	d11e      	bne.n	800beba <__sflush_r+0xea>
 800be7c:	602f      	str	r7, [r5, #0]
 800be7e:	2000      	movs	r0, #0
 800be80:	e022      	b.n	800bec8 <__sflush_r+0xf8>
 800be82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be86:	b21b      	sxth	r3, r3
 800be88:	e01b      	b.n	800bec2 <__sflush_r+0xf2>
 800be8a:	690f      	ldr	r7, [r1, #16]
 800be8c:	2f00      	cmp	r7, #0
 800be8e:	d0f6      	beq.n	800be7e <__sflush_r+0xae>
 800be90:	0793      	lsls	r3, r2, #30
 800be92:	680e      	ldr	r6, [r1, #0]
 800be94:	bf08      	it	eq
 800be96:	694b      	ldreq	r3, [r1, #20]
 800be98:	600f      	str	r7, [r1, #0]
 800be9a:	bf18      	it	ne
 800be9c:	2300      	movne	r3, #0
 800be9e:	eba6 0807 	sub.w	r8, r6, r7
 800bea2:	608b      	str	r3, [r1, #8]
 800bea4:	f1b8 0f00 	cmp.w	r8, #0
 800bea8:	dde9      	ble.n	800be7e <__sflush_r+0xae>
 800beaa:	6a21      	ldr	r1, [r4, #32]
 800beac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800beae:	4643      	mov	r3, r8
 800beb0:	463a      	mov	r2, r7
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b0      	blx	r6
 800beb6:	2800      	cmp	r0, #0
 800beb8:	dc08      	bgt.n	800becc <__sflush_r+0xfc>
 800beba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800becc:	4407      	add	r7, r0
 800bece:	eba8 0800 	sub.w	r8, r8, r0
 800bed2:	e7e7      	b.n	800bea4 <__sflush_r+0xd4>
 800bed4:	dfbffffe 	.word	0xdfbffffe

0800bed8 <_fflush_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	4605      	mov	r5, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	b913      	cbnz	r3, 800bee8 <_fflush_r+0x10>
 800bee2:	2500      	movs	r5, #0
 800bee4:	4628      	mov	r0, r5
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	b118      	cbz	r0, 800bef2 <_fflush_r+0x1a>
 800beea:	6a03      	ldr	r3, [r0, #32]
 800beec:	b90b      	cbnz	r3, 800bef2 <_fflush_r+0x1a>
 800beee:	f7ff f9a7 	bl	800b240 <__sinit>
 800bef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0f3      	beq.n	800bee2 <_fflush_r+0xa>
 800befa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800befc:	07d0      	lsls	r0, r2, #31
 800befe:	d404      	bmi.n	800bf0a <_fflush_r+0x32>
 800bf00:	0599      	lsls	r1, r3, #22
 800bf02:	d402      	bmi.n	800bf0a <_fflush_r+0x32>
 800bf04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf06:	f7ff fa8a 	bl	800b41e <__retarget_lock_acquire_recursive>
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	f7ff ff5f 	bl	800bdd0 <__sflush_r>
 800bf12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf14:	07da      	lsls	r2, r3, #31
 800bf16:	4605      	mov	r5, r0
 800bf18:	d4e4      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	059b      	lsls	r3, r3, #22
 800bf1e:	d4e1      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf22:	f7ff fa7d 	bl	800b420 <__retarget_lock_release_recursive>
 800bf26:	e7dd      	b.n	800bee4 <_fflush_r+0xc>

0800bf28 <__malloc_lock>:
 800bf28:	4801      	ldr	r0, [pc, #4]	@ (800bf30 <__malloc_lock+0x8>)
 800bf2a:	f7ff ba78 	b.w	800b41e <__retarget_lock_acquire_recursive>
 800bf2e:	bf00      	nop
 800bf30:	200051e0 	.word	0x200051e0

0800bf34 <__malloc_unlock>:
 800bf34:	4801      	ldr	r0, [pc, #4]	@ (800bf3c <__malloc_unlock+0x8>)
 800bf36:	f7ff ba73 	b.w	800b420 <__retarget_lock_release_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	200051e0 	.word	0x200051e0

0800bf40 <__sread>:
 800bf40:	b510      	push	{r4, lr}
 800bf42:	460c      	mov	r4, r1
 800bf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf48:	f000 f9c0 	bl	800c2cc <_read_r>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	bfab      	itete	ge
 800bf50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf52:	89a3      	ldrhlt	r3, [r4, #12]
 800bf54:	181b      	addge	r3, r3, r0
 800bf56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf5a:	bfac      	ite	ge
 800bf5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf5e:	81a3      	strhlt	r3, [r4, #12]
 800bf60:	bd10      	pop	{r4, pc}

0800bf62 <__swrite>:
 800bf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf66:	461f      	mov	r7, r3
 800bf68:	898b      	ldrh	r3, [r1, #12]
 800bf6a:	05db      	lsls	r3, r3, #23
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	460c      	mov	r4, r1
 800bf70:	4616      	mov	r6, r2
 800bf72:	d505      	bpl.n	800bf80 <__swrite+0x1e>
 800bf74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf78:	2302      	movs	r3, #2
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f000 f994 	bl	800c2a8 <_lseek_r>
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	463b      	mov	r3, r7
 800bf90:	4628      	mov	r0, r5
 800bf92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	f000 b9bb 	b.w	800c310 <_write_r>

0800bf9a <__sseek>:
 800bf9a:	b510      	push	{r4, lr}
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa2:	f000 f981 	bl	800c2a8 <_lseek_r>
 800bfa6:	1c43      	adds	r3, r0, #1
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	bf15      	itete	ne
 800bfac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bfae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bfb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bfb6:	81a3      	strheq	r3, [r4, #12]
 800bfb8:	bf18      	it	ne
 800bfba:	81a3      	strhne	r3, [r4, #12]
 800bfbc:	bd10      	pop	{r4, pc}

0800bfbe <__sclose>:
 800bfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc2:	f000 b93f 	b.w	800c244 <_close_r>

0800bfc6 <_realloc_r>:
 800bfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfca:	4680      	mov	r8, r0
 800bfcc:	4615      	mov	r5, r2
 800bfce:	460c      	mov	r4, r1
 800bfd0:	b921      	cbnz	r1, 800bfdc <_realloc_r+0x16>
 800bfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	f7ff bcec 	b.w	800b9b4 <_malloc_r>
 800bfdc:	b92a      	cbnz	r2, 800bfea <_realloc_r+0x24>
 800bfde:	f000 f9a9 	bl	800c334 <_free_r>
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfea:	f000 f9ed 	bl	800c3c8 <_malloc_usable_size_r>
 800bfee:	4285      	cmp	r5, r0
 800bff0:	4606      	mov	r6, r0
 800bff2:	d802      	bhi.n	800bffa <_realloc_r+0x34>
 800bff4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bff8:	d8f4      	bhi.n	800bfe4 <_realloc_r+0x1e>
 800bffa:	4629      	mov	r1, r5
 800bffc:	4640      	mov	r0, r8
 800bffe:	f7ff fcd9 	bl	800b9b4 <_malloc_r>
 800c002:	4607      	mov	r7, r0
 800c004:	2800      	cmp	r0, #0
 800c006:	d0ec      	beq.n	800bfe2 <_realloc_r+0x1c>
 800c008:	42b5      	cmp	r5, r6
 800c00a:	462a      	mov	r2, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	bf28      	it	cs
 800c010:	4632      	movcs	r2, r6
 800c012:	f7ff fa06 	bl	800b422 <memcpy>
 800c016:	4621      	mov	r1, r4
 800c018:	4640      	mov	r0, r8
 800c01a:	f000 f98b 	bl	800c334 <_free_r>
 800c01e:	463c      	mov	r4, r7
 800c020:	e7e0      	b.n	800bfe4 <_realloc_r+0x1e>

0800c022 <__swbuf_r>:
 800c022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c024:	460e      	mov	r6, r1
 800c026:	4614      	mov	r4, r2
 800c028:	4605      	mov	r5, r0
 800c02a:	b118      	cbz	r0, 800c034 <__swbuf_r+0x12>
 800c02c:	6a03      	ldr	r3, [r0, #32]
 800c02e:	b90b      	cbnz	r3, 800c034 <__swbuf_r+0x12>
 800c030:	f7ff f906 	bl	800b240 <__sinit>
 800c034:	69a3      	ldr	r3, [r4, #24]
 800c036:	60a3      	str	r3, [r4, #8]
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	071a      	lsls	r2, r3, #28
 800c03c:	d501      	bpl.n	800c042 <__swbuf_r+0x20>
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	b943      	cbnz	r3, 800c054 <__swbuf_r+0x32>
 800c042:	4621      	mov	r1, r4
 800c044:	4628      	mov	r0, r5
 800c046:	f000 f82b 	bl	800c0a0 <__swsetup_r>
 800c04a:	b118      	cbz	r0, 800c054 <__swbuf_r+0x32>
 800c04c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c050:	4638      	mov	r0, r7
 800c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	6922      	ldr	r2, [r4, #16]
 800c058:	1a98      	subs	r0, r3, r2
 800c05a:	6963      	ldr	r3, [r4, #20]
 800c05c:	b2f6      	uxtb	r6, r6
 800c05e:	4283      	cmp	r3, r0
 800c060:	4637      	mov	r7, r6
 800c062:	dc05      	bgt.n	800c070 <__swbuf_r+0x4e>
 800c064:	4621      	mov	r1, r4
 800c066:	4628      	mov	r0, r5
 800c068:	f7ff ff36 	bl	800bed8 <_fflush_r>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d1ed      	bne.n	800c04c <__swbuf_r+0x2a>
 800c070:	68a3      	ldr	r3, [r4, #8]
 800c072:	3b01      	subs	r3, #1
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	6022      	str	r2, [r4, #0]
 800c07c:	701e      	strb	r6, [r3, #0]
 800c07e:	6962      	ldr	r2, [r4, #20]
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	429a      	cmp	r2, r3
 800c084:	d004      	beq.n	800c090 <__swbuf_r+0x6e>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	07db      	lsls	r3, r3, #31
 800c08a:	d5e1      	bpl.n	800c050 <__swbuf_r+0x2e>
 800c08c:	2e0a      	cmp	r6, #10
 800c08e:	d1df      	bne.n	800c050 <__swbuf_r+0x2e>
 800c090:	4621      	mov	r1, r4
 800c092:	4628      	mov	r0, r5
 800c094:	f7ff ff20 	bl	800bed8 <_fflush_r>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d0d9      	beq.n	800c050 <__swbuf_r+0x2e>
 800c09c:	e7d6      	b.n	800c04c <__swbuf_r+0x2a>
	...

0800c0a0 <__swsetup_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4b29      	ldr	r3, [pc, #164]	@ (800c148 <__swsetup_r+0xa8>)
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	6818      	ldr	r0, [r3, #0]
 800c0a8:	460c      	mov	r4, r1
 800c0aa:	b118      	cbz	r0, 800c0b4 <__swsetup_r+0x14>
 800c0ac:	6a03      	ldr	r3, [r0, #32]
 800c0ae:	b90b      	cbnz	r3, 800c0b4 <__swsetup_r+0x14>
 800c0b0:	f7ff f8c6 	bl	800b240 <__sinit>
 800c0b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b8:	0719      	lsls	r1, r3, #28
 800c0ba:	d422      	bmi.n	800c102 <__swsetup_r+0x62>
 800c0bc:	06da      	lsls	r2, r3, #27
 800c0be:	d407      	bmi.n	800c0d0 <__swsetup_r+0x30>
 800c0c0:	2209      	movs	r2, #9
 800c0c2:	602a      	str	r2, [r5, #0]
 800c0c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0ce:	e033      	b.n	800c138 <__swsetup_r+0x98>
 800c0d0:	0758      	lsls	r0, r3, #29
 800c0d2:	d512      	bpl.n	800c0fa <__swsetup_r+0x5a>
 800c0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0d6:	b141      	cbz	r1, 800c0ea <__swsetup_r+0x4a>
 800c0d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0dc:	4299      	cmp	r1, r3
 800c0de:	d002      	beq.n	800c0e6 <__swsetup_r+0x46>
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 f927 	bl	800c334 <_free_r>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	6063      	str	r3, [r4, #4]
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	f043 0308 	orr.w	r3, r3, #8
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	b94b      	cbnz	r3, 800c11a <__swsetup_r+0x7a>
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c110:	d003      	beq.n	800c11a <__swsetup_r+0x7a>
 800c112:	4621      	mov	r1, r4
 800c114:	4628      	mov	r0, r5
 800c116:	f000 f83f 	bl	800c198 <__smakebuf_r>
 800c11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c11e:	f013 0201 	ands.w	r2, r3, #1
 800c122:	d00a      	beq.n	800c13a <__swsetup_r+0x9a>
 800c124:	2200      	movs	r2, #0
 800c126:	60a2      	str	r2, [r4, #8]
 800c128:	6962      	ldr	r2, [r4, #20]
 800c12a:	4252      	negs	r2, r2
 800c12c:	61a2      	str	r2, [r4, #24]
 800c12e:	6922      	ldr	r2, [r4, #16]
 800c130:	b942      	cbnz	r2, 800c144 <__swsetup_r+0xa4>
 800c132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c136:	d1c5      	bne.n	800c0c4 <__swsetup_r+0x24>
 800c138:	bd38      	pop	{r3, r4, r5, pc}
 800c13a:	0799      	lsls	r1, r3, #30
 800c13c:	bf58      	it	pl
 800c13e:	6962      	ldrpl	r2, [r4, #20]
 800c140:	60a2      	str	r2, [r4, #8]
 800c142:	e7f4      	b.n	800c12e <__swsetup_r+0x8e>
 800c144:	2000      	movs	r0, #0
 800c146:	e7f7      	b.n	800c138 <__swsetup_r+0x98>
 800c148:	20000040 	.word	0x20000040

0800c14c <__swhatbuf_r>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	460c      	mov	r4, r1
 800c150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c154:	2900      	cmp	r1, #0
 800c156:	b096      	sub	sp, #88	@ 0x58
 800c158:	4615      	mov	r5, r2
 800c15a:	461e      	mov	r6, r3
 800c15c:	da0d      	bge.n	800c17a <__swhatbuf_r+0x2e>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c164:	f04f 0100 	mov.w	r1, #0
 800c168:	bf14      	ite	ne
 800c16a:	2340      	movne	r3, #64	@ 0x40
 800c16c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c170:	2000      	movs	r0, #0
 800c172:	6031      	str	r1, [r6, #0]
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	b016      	add	sp, #88	@ 0x58
 800c178:	bd70      	pop	{r4, r5, r6, pc}
 800c17a:	466a      	mov	r2, sp
 800c17c:	f000 f872 	bl	800c264 <_fstat_r>
 800c180:	2800      	cmp	r0, #0
 800c182:	dbec      	blt.n	800c15e <__swhatbuf_r+0x12>
 800c184:	9901      	ldr	r1, [sp, #4]
 800c186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c18a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c18e:	4259      	negs	r1, r3
 800c190:	4159      	adcs	r1, r3
 800c192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c196:	e7eb      	b.n	800c170 <__swhatbuf_r+0x24>

0800c198 <__smakebuf_r>:
 800c198:	898b      	ldrh	r3, [r1, #12]
 800c19a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c19c:	079d      	lsls	r5, r3, #30
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	d507      	bpl.n	800c1b4 <__smakebuf_r+0x1c>
 800c1a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	6123      	str	r3, [r4, #16]
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	6163      	str	r3, [r4, #20]
 800c1b0:	b003      	add	sp, #12
 800c1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b4:	ab01      	add	r3, sp, #4
 800c1b6:	466a      	mov	r2, sp
 800c1b8:	f7ff ffc8 	bl	800c14c <__swhatbuf_r>
 800c1bc:	9f00      	ldr	r7, [sp, #0]
 800c1be:	4605      	mov	r5, r0
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff fbf6 	bl	800b9b4 <_malloc_r>
 800c1c8:	b948      	cbnz	r0, 800c1de <__smakebuf_r+0x46>
 800c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ce:	059a      	lsls	r2, r3, #22
 800c1d0:	d4ee      	bmi.n	800c1b0 <__smakebuf_r+0x18>
 800c1d2:	f023 0303 	bic.w	r3, r3, #3
 800c1d6:	f043 0302 	orr.w	r3, r3, #2
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	e7e2      	b.n	800c1a4 <__smakebuf_r+0xc>
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	6020      	str	r0, [r4, #0]
 800c1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	9b01      	ldr	r3, [sp, #4]
 800c1ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ee:	b15b      	cbz	r3, 800c208 <__smakebuf_r+0x70>
 800c1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f000 f847 	bl	800c288 <_isatty_r>
 800c1fa:	b128      	cbz	r0, 800c208 <__smakebuf_r+0x70>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f023 0303 	bic.w	r3, r3, #3
 800c202:	f043 0301 	orr.w	r3, r3, #1
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	431d      	orrs	r5, r3
 800c20c:	81a5      	strh	r5, [r4, #12]
 800c20e:	e7cf      	b.n	800c1b0 <__smakebuf_r+0x18>

0800c210 <memmove>:
 800c210:	4288      	cmp	r0, r1
 800c212:	b510      	push	{r4, lr}
 800c214:	eb01 0402 	add.w	r4, r1, r2
 800c218:	d902      	bls.n	800c220 <memmove+0x10>
 800c21a:	4284      	cmp	r4, r0
 800c21c:	4623      	mov	r3, r4
 800c21e:	d807      	bhi.n	800c230 <memmove+0x20>
 800c220:	1e43      	subs	r3, r0, #1
 800c222:	42a1      	cmp	r1, r4
 800c224:	d008      	beq.n	800c238 <memmove+0x28>
 800c226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c22e:	e7f8      	b.n	800c222 <memmove+0x12>
 800c230:	4402      	add	r2, r0
 800c232:	4601      	mov	r1, r0
 800c234:	428a      	cmp	r2, r1
 800c236:	d100      	bne.n	800c23a <memmove+0x2a>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c242:	e7f7      	b.n	800c234 <memmove+0x24>

0800c244 <_close_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d06      	ldr	r5, [pc, #24]	@ (800c260 <_close_r+0x1c>)
 800c248:	2300      	movs	r3, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	602b      	str	r3, [r5, #0]
 800c250:	f7f6 f955 	bl	80024fe <_close>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_close_r+0x1a>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_close_r+0x1a>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	200051ec 	.word	0x200051ec

0800c264 <_fstat_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	@ (800c284 <_fstat_r+0x20>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	f7f6 f950 	bl	8002516 <_fstat>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d102      	bne.n	800c280 <_fstat_r+0x1c>
 800c27a:	682b      	ldr	r3, [r5, #0]
 800c27c:	b103      	cbz	r3, 800c280 <_fstat_r+0x1c>
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	bd38      	pop	{r3, r4, r5, pc}
 800c282:	bf00      	nop
 800c284:	200051ec 	.word	0x200051ec

0800c288 <_isatty_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	@ (800c2a4 <_isatty_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f6 f94f 	bl	8002536 <_isatty>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_isatty_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_isatty_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	200051ec 	.word	0x200051ec

0800c2a8 <_lseek_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	@ (800c2c8 <_lseek_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f6 f948 	bl	800254c <_lseek>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_lseek_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_lseek_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200051ec 	.word	0x200051ec

0800c2cc <_read_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	@ (800c2ec <_read_r+0x20>)
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	602a      	str	r2, [r5, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f7f6 f8f2 	bl	80024c4 <_read>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_read_r+0x1e>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_read_r+0x1e>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	200051ec 	.word	0x200051ec

0800c2f0 <_sbrk_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	@ (800c30c <_sbrk_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f6 f934 	bl	8002568 <_sbrk>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_sbrk_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_sbrk_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200051ec 	.word	0x200051ec

0800c310 <_write_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	@ (800c330 <_write_r+0x20>)
 800c314:	4604      	mov	r4, r0
 800c316:	4608      	mov	r0, r1
 800c318:	4611      	mov	r1, r2
 800c31a:	2200      	movs	r2, #0
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f7f5 fd12 	bl	8001d48 <_write>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_write_r+0x1e>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_write_r+0x1e>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	200051ec 	.word	0x200051ec

0800c334 <_free_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4605      	mov	r5, r0
 800c338:	2900      	cmp	r1, #0
 800c33a:	d041      	beq.n	800c3c0 <_free_r+0x8c>
 800c33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c340:	1f0c      	subs	r4, r1, #4
 800c342:	2b00      	cmp	r3, #0
 800c344:	bfb8      	it	lt
 800c346:	18e4      	addlt	r4, r4, r3
 800c348:	f7ff fdee 	bl	800bf28 <__malloc_lock>
 800c34c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3c4 <_free_r+0x90>)
 800c34e:	6813      	ldr	r3, [r2, #0]
 800c350:	b933      	cbnz	r3, 800c360 <_free_r+0x2c>
 800c352:	6063      	str	r3, [r4, #4]
 800c354:	6014      	str	r4, [r2, #0]
 800c356:	4628      	mov	r0, r5
 800c358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c35c:	f7ff bdea 	b.w	800bf34 <__malloc_unlock>
 800c360:	42a3      	cmp	r3, r4
 800c362:	d908      	bls.n	800c376 <_free_r+0x42>
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	1821      	adds	r1, r4, r0
 800c368:	428b      	cmp	r3, r1
 800c36a:	bf01      	itttt	eq
 800c36c:	6819      	ldreq	r1, [r3, #0]
 800c36e:	685b      	ldreq	r3, [r3, #4]
 800c370:	1809      	addeq	r1, r1, r0
 800c372:	6021      	streq	r1, [r4, #0]
 800c374:	e7ed      	b.n	800c352 <_free_r+0x1e>
 800c376:	461a      	mov	r2, r3
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	b10b      	cbz	r3, 800c380 <_free_r+0x4c>
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	d9fa      	bls.n	800c376 <_free_r+0x42>
 800c380:	6811      	ldr	r1, [r2, #0]
 800c382:	1850      	adds	r0, r2, r1
 800c384:	42a0      	cmp	r0, r4
 800c386:	d10b      	bne.n	800c3a0 <_free_r+0x6c>
 800c388:	6820      	ldr	r0, [r4, #0]
 800c38a:	4401      	add	r1, r0
 800c38c:	1850      	adds	r0, r2, r1
 800c38e:	4283      	cmp	r3, r0
 800c390:	6011      	str	r1, [r2, #0]
 800c392:	d1e0      	bne.n	800c356 <_free_r+0x22>
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	6053      	str	r3, [r2, #4]
 800c39a:	4408      	add	r0, r1
 800c39c:	6010      	str	r0, [r2, #0]
 800c39e:	e7da      	b.n	800c356 <_free_r+0x22>
 800c3a0:	d902      	bls.n	800c3a8 <_free_r+0x74>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	602b      	str	r3, [r5, #0]
 800c3a6:	e7d6      	b.n	800c356 <_free_r+0x22>
 800c3a8:	6820      	ldr	r0, [r4, #0]
 800c3aa:	1821      	adds	r1, r4, r0
 800c3ac:	428b      	cmp	r3, r1
 800c3ae:	bf04      	itt	eq
 800c3b0:	6819      	ldreq	r1, [r3, #0]
 800c3b2:	685b      	ldreq	r3, [r3, #4]
 800c3b4:	6063      	str	r3, [r4, #4]
 800c3b6:	bf04      	itt	eq
 800c3b8:	1809      	addeq	r1, r1, r0
 800c3ba:	6021      	streq	r1, [r4, #0]
 800c3bc:	6054      	str	r4, [r2, #4]
 800c3be:	e7ca      	b.n	800c356 <_free_r+0x22>
 800c3c0:	bd38      	pop	{r3, r4, r5, pc}
 800c3c2:	bf00      	nop
 800c3c4:	200051e8 	.word	0x200051e8

0800c3c8 <_malloc_usable_size_r>:
 800c3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3cc:	1f18      	subs	r0, r3, #4
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bfbc      	itt	lt
 800c3d2:	580b      	ldrlt	r3, [r1, r0]
 800c3d4:	18c0      	addlt	r0, r0, r3
 800c3d6:	4770      	bx	lr

0800c3d8 <_init>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	bf00      	nop
 800c3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3de:	bc08      	pop	{r3}
 800c3e0:	469e      	mov	lr, r3
 800c3e2:	4770      	bx	lr

0800c3e4 <_fini>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	bf00      	nop
 800c3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ea:	bc08      	pop	{r3}
 800c3ec:	469e      	mov	lr, r3
 800c3ee:	4770      	bx	lr
