
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c4  080068c4  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080068c4  080068c4  000078c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068cc  080068cc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068d0  080068d0  000078d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000068  0800693c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800693c  00008820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abc3  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1e  00000000  00000000  00022c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00026a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001253  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005099  00000000  00000000  00029453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d825  00000000  00000000  0002e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb722  00000000  00000000  0004bd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd8  00000000  00000000  00137478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800658c 	.word	0x0800658c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800658c 	.word	0x0800658c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0xa0>)
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000612:	f000 ff55 	bl	80014c0 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 fba2 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000628:	2305      	movs	r3, #5
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000632:	f000 ff89 	bl	8001548 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 fb92 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000084 	.word	0x20000084
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_ADC_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d127      	bne.n	80006c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <HAL_ADC_MspInit+0x84>)
 80006c2:	f001 fae3 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000

080006dc <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <send_AT_command+0x48>)
 80006ec:	f004 feb8 	bl	8005460 <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <send_AT_command+0x4c>)
 8000702:	f003 fb61 	bl	8003dc8 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f000 f811 	bl	8000730 <waitFor>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <send_AT_command+0x50>)
 8000718:	f004 fea2 	bl	8005460 <iprintf>
    }
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	080065a4 	.word	0x080065a4
 8000728:	200001b4 	.word	0x200001b4
 800072c:	080065b0 	.word	0x080065b0

08000730 <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b6      	sub	sp, #216	@ 0xd8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	22c4      	movs	r2, #196	@ 0xc4
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 ff10 	bl	800556c <memset>
    uint32_t startTick = HAL_GetTick();
 800074c:	f000 fe88 	bl	8001460 <HAL_GetTick>
 8000750:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 800075a:	e044      	b.n	80007e6 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 800075c:	f107 0208 	add.w	r2, r7, #8
 8000760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000764:	18d1      	adds	r1, r2, r3
 8000766:	2364      	movs	r3, #100	@ 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	4828      	ldr	r0, [pc, #160]	@ (800080c <waitFor+0xdc>)
 800076c:	f003 fbb7 	bl	8003ede <HAL_UART_Receive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d137      	bne.n	80007e6 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d007      	beq.n	8000796 <waitFor+0x66>
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0d      	cmp	r3, #13
 8000794:	d11b      	bne.n	80007ce <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800079e:	4413      	add	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fec8 	bl	8005540 <strstr>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4814      	ldr	r0, [pc, #80]	@ (8000810 <waitFor+0xe0>)
 80007be:	f004 fe4f 	bl	8005460 <iprintf>
                    return 1;  // Found the expected response
 80007c2:	2301      	movs	r3, #1
 80007c4:	e01d      	b.n	8000802 <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80007cc:	e00b      	b.n	80007e6 <waitFor+0xb6>
            } else {
                index++;
 80007ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 80007d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007dc:	2bc6      	cmp	r3, #198	@ 0xc6
 80007de:	d902      	bls.n	80007e6 <waitFor+0xb6>
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 80007e6:	f000 fe3b 	bl	8001460 <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8b1      	bhi.n	800075c <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <waitFor+0xe4>)
 80007fc:	f004 fe30 	bl	8005460 <iprintf>
    return 0;  // Timeout reached without expected response
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	37d8      	adds	r7, #216	@ 0xd8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001b4 	.word	0x200001b4
 8000810:	080065d4 	.word	0x080065d4
 8000814:	080065e8 	.word	0x080065e8

08000818 <ESP_Server_Init>:
void ESP_Server_Init() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    printf("RESETTING ESP8266...\n");
 800081c:	481b      	ldr	r0, [pc, #108]	@ (800088c <ESP_Server_Init+0x74>)
 800081e:	f004 fe87 	bl	8005530 <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8000822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000826:	491a      	ldr	r1, [pc, #104]	@ (8000890 <ESP_Server_Init+0x78>)
 8000828:	481a      	ldr	r0, [pc, #104]	@ (8000894 <ESP_Server_Init+0x7c>)
 800082a:	f7ff ff57 	bl	80006dc <send_AT_command>

    printf("Testing AT Command...\n");
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <ESP_Server_Init+0x80>)
 8000830:	f004 fe7e 	bl	8005530 <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 8000834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000838:	4915      	ldr	r1, [pc, #84]	@ (8000890 <ESP_Server_Init+0x78>)
 800083a:	4818      	ldr	r0, [pc, #96]	@ (800089c <ESP_Server_Init+0x84>)
 800083c:	f7ff ff4e 	bl	80006dc <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8000840:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <ESP_Server_Init+0x88>)
 8000842:	f004 fe75 	bl	8005530 <puts>
    send_AT_command("AT+CWJAP=\"Abraham_Nguero\",\"@Ramadjita1\"\r\n", "WIFI CONNECTED", 15000);
 8000846:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800084a:	4916      	ldr	r1, [pc, #88]	@ (80008a4 <ESP_Server_Init+0x8c>)
 800084c:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <ESP_Server_Init+0x90>)
 800084e:	f7ff ff45 	bl	80006dc <send_AT_command>

    printf("Checking assigned IP address...\n");
 8000852:	4816      	ldr	r0, [pc, #88]	@ (80008ac <ESP_Server_Init+0x94>)
 8000854:	f004 fe6c 	bl	8005530 <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 8000858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800085c:	4914      	ldr	r1, [pc, #80]	@ (80008b0 <ESP_Server_Init+0x98>)
 800085e:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <ESP_Server_Init+0x9c>)
 8000860:	f7ff ff3c 	bl	80006dc <send_AT_command>

    printf("Enabling multiple connections...\n");
 8000864:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <ESP_Server_Init+0xa0>)
 8000866:	f004 fe63 	bl	8005530 <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 800086a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800086e:	4908      	ldr	r1, [pc, #32]	@ (8000890 <ESP_Server_Init+0x78>)
 8000870:	4812      	ldr	r0, [pc, #72]	@ (80008bc <ESP_Server_Init+0xa4>)
 8000872:	f7ff ff33 	bl	80006dc <send_AT_command>

    //printf("Starting TCP Server...\n");
    //send_AT_command("AT+CIPSERVER=1,80\r\n", "OK", 3000);

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <ESP_Server_Init+0xa8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <ESP_Server_Init+0xa8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 0220 	orr.w	r2, r2, #32
 8000884:	60da      	str	r2, [r3, #12]
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08006604 	.word	0x08006604
 8000890:	0800661c 	.word	0x0800661c
 8000894:	08006620 	.word	0x08006620
 8000898:	0800662c 	.word	0x0800662c
 800089c:	08006644 	.word	0x08006644
 80008a0:	0800664c 	.word	0x0800664c
 80008a4:	08006664 	.word	0x08006664
 80008a8:	08006674 	.word	0x08006674
 80008ac:	080066a0 	.word	0x080066a0
 80008b0:	080066c0 	.word	0x080066c0
 80008b4:	080066c8 	.word	0x080066c8
 80008b8:	080066d4 	.word	0x080066d4
 80008bc:	080066f8 	.word	0x080066f8
 80008c0:	200001b4 	.word	0x200001b4

080008c4 <sendDataToThingSpeak>:

    ESP_Clear_Buffer();
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // Re-enable interrupt
}

void sendDataToThingSpeak(const char *apiKey, int fieldNumber, int value) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0d2      	sub	sp, #328	@ 0x148
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80008d2:	6018      	str	r0, [r3, #0]
 80008d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008d8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80008dc:	6019      	str	r1, [r3, #0]
 80008de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80008e6:	601a      	str	r2, [r3, #0]
    char cmdBuffer[200];
    char responseBuffer[100];
    printf("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80008e8:	4835      	ldr	r0, [pc, #212]	@ (80009c0 <sendDataToThingSpeak+0xfc>)
 80008ea:	f004 fe21 	bl	8005530 <puts>
    // **Step 1: Connect to ThingSpeak's Server**
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80008ee:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008f2:	4934      	ldr	r1, [pc, #208]	@ (80009c4 <sendDataToThingSpeak+0x100>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fcd1 	bl	800529c <siprintf>
    send_AT_command(cmdBuffer, "OK", 5000);
 80008fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000902:	4931      	ldr	r1, [pc, #196]	@ (80009c8 <sendDataToThingSpeak+0x104>)
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fee9 	bl	80006dc <send_AT_command>

    printf("GET /update");
 800090a:	4830      	ldr	r0, [pc, #192]	@ (80009cc <sendDataToThingSpeak+0x108>)
 800090c:	f004 fda8 	bl	8005460 <iprintf>
    // **Step 2: Prepare HTTP GET Request with API Key and Field Number**
    sprintf(cmdBuffer, "GET /update?api_key=%s&field%d=%d\r\n", apiKey, fieldNumber, value);
 8000910:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000914:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000918:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800091c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8000920:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8000924:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8000928:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800092c:	6809      	ldr	r1, [r1, #0]
 800092e:	9100      	str	r1, [sp, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	4926      	ldr	r1, [pc, #152]	@ (80009d0 <sendDataToThingSpeak+0x10c>)
 8000936:	f004 fcb1 	bl	800529c <siprintf>
    int requestLength = strlen(cmdBuffer);
 800093a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc66 	bl	8000210 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    // **Step 3: Send the Length of the Request**
    printf("AT+CIPSEND");
 800094a:	4822      	ldr	r0, [pc, #136]	@ (80009d4 <sendDataToThingSpeak+0x110>)
 800094c:	f004 fd88 	bl	8005460 <iprintf>
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000958:	491f      	ldr	r1, [pc, #124]	@ (80009d8 <sendDataToThingSpeak+0x114>)
 800095a:	4618      	mov	r0, r3
 800095c:	f004 fc9e 	bl	800529c <siprintf>
    send_AT_command(responseBuffer, ">", 5000);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000968:	491c      	ldr	r1, [pc, #112]	@ (80009dc <sendDataToThingSpeak+0x118>)
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff feb6 	bl	80006dc <send_AT_command>

    printf("Data sent to ThingSpeak: API_KEY=%s, Field=%d, Value=%d\n", apiKey, fieldNumber, value);
 8000970:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000974:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000978:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800097c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000980:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8000984:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <sendDataToThingSpeak+0x11c>)
 8000990:	f004 fd66 	bl	8005460 <iprintf>
    // **Step 4: Send the Actual Data**
    send_AT_command(cmdBuffer, "SEND OK", 5000);
 8000994:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800099c:	4911      	ldr	r1, [pc, #68]	@ (80009e4 <sendDataToThingSpeak+0x120>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe9c 	bl	80006dc <send_AT_command>

    printf("AT+CIPCLOSE");
 80009a4:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <sendDataToThingSpeak+0x124>)
 80009a6:	f004 fd5b 	bl	8005460 <iprintf>
    // **Step 5: Close the Connection**
    send_AT_command("AT+CIPCLOSE\r\n", "OK",5000);  // Send AT command and print response
 80009aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009ae:	4906      	ldr	r1, [pc, #24]	@ (80009c8 <sendDataToThingSpeak+0x104>)
 80009b0:	480e      	ldr	r0, [pc, #56]	@ (80009ec <sendDataToThingSpeak+0x128>)
 80009b2:	f7ff fe93 	bl	80006dc <send_AT_command>
}
 80009b6:	bf00      	nop
 80009b8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	0800675c 	.word	0x0800675c
 80009c4:	08006788 	.word	0x08006788
 80009c8:	0800661c 	.word	0x0800661c
 80009cc:	080067b4 	.word	0x080067b4
 80009d0:	080067c0 	.word	0x080067c0
 80009d4:	080067e4 	.word	0x080067e4
 80009d8:	080067f0 	.word	0x080067f0
 80009dc:	08006800 	.word	0x08006800
 80009e0:	08006804 	.word	0x08006804
 80009e4:	08006840 	.word	0x08006840
 80009e8:	08006848 	.word	0x08006848
 80009ec:	08006854 	.word	0x08006854

080009f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a36      	ldr	r2, [pc, #216]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b34      	ldr	r3, [pc, #208]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b30      	ldr	r3, [pc, #192]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a28      	ldr	r2, [pc, #160]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_GPIO_Init+0xf8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2120      	movs	r1, #32
 8000a7a:	481c      	ldr	r0, [pc, #112]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a7c:	f001 fa9a 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2103      	movs	r1, #3
 8000a84:	481a      	ldr	r0, [pc, #104]	@ (8000af0 <MX_GPIO_Init+0x100>)
 8000a86:	f001 fa95 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4814      	ldr	r0, [pc, #80]	@ (8000af4 <MX_GPIO_Init+0x104>)
 8000aa2:	f001 f8f3 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	480b      	ldr	r0, [pc, #44]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000abe:	f001 f8e5 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_GPIO_Init+0x100>)
 8000ada:	f001 f8d7 	bl	8001c8c <HAL_GPIO_Init>

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40020800 	.word	0x40020800

08000af8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_I2C1_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_I2C1_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b36:	f001 fa57 	bl	8001fe8 <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f910 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000cc 	.word	0x200000cc
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	00061a80 	.word	0x00061a80

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b92:	23c0      	movs	r3, #192	@ 0xc0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <HAL_I2C_MspInit+0x8c>)
 8000bae:	f001 f86d 	bl	8001c8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f000 fc03 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f823 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f7ff fefd 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf6:	f000 fb25 	bl	8001244 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bfa:	f7ff ff7d 	bl	8000af8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000bfe:	f7ff fcd7 	bl	80005b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c02:	f000 fa27 	bl	8001054 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c06:	f000 faf3 	bl	80011f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Server_Init();
 8000c0a:	f7ff fe05 	bl	8000818 <ESP_Server_Init>
  int sensorValue = 25;
 8000c0e:	2319      	movs	r3, #25
 8000c10:	607b      	str	r3, [r7, #4]
  // test_ESP8266();
  // test_Button();

  /* USER CODE END 2 */

  const char *apiKey = "0J00SUVFH8BB3OGK";
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <main+0x50>)
 8000c14:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      // 4. **Read Sensor Data (Example: Temperature)**
      sensorValue += 25; // Example sensor data
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3319      	adds	r3, #25
 8000c1a:	607b      	str	r3, [r7, #4]

      // 5. **Send Data to ThingSpeak**
     sendDataToThingSpeak(apiKey, 1, sensorValue);
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	2101      	movs	r1, #1
 8000c20:	6838      	ldr	r0, [r7, #0]
 8000c22:	f7ff fe4f 	bl	80008c4 <sendDataToThingSpeak>

      // 6. **Wait Before Sending Again (ThingSpeak has a 15s limit for free users)**
      HAL_Delay(16000); // 16 seconds to be safe
 8000c26:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8000c2a:	f000 fc25 	bl	8001478 <HAL_Delay>
  {
 8000c2e:	bf00      	nop
 8000c30:	e7f1      	b.n	8000c16 <main+0x32>
 8000c32:	bf00      	nop
 8000c34:	08006864 	.word	0x08006864

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	@ 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2234      	movs	r2, #52	@ 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 fc90 	bl	800556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <SystemClock_Config+0xd4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a29      	ldr	r2, [pc, #164]	@ (8000d0c <SystemClock_Config+0xd4>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6c:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <SystemClock_Config+0xd4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <SystemClock_Config+0xd8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c84:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <SystemClock_Config+0xd8>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <SystemClock_Config+0xd8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cac:	2310      	movs	r3, #16
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fe4e 	bl	8002968 <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cd2:	f000 f847 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fabc 	bl	8002270 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cfe:	f000 f831 	bl	8000d64 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	@ 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <_write>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
int _write(int file, char *ptr, int len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <_write+0x28>)
 8000d2c:	f003 f84c 	bl	8003dc8 <HAL_UART_Transmit>
    return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001fc 	.word	0x200001fc

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d52:	f000 fb71 	bl	8001438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40001000 	.word	0x40001000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_MspInit+0x54>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <HAL_MspInit+0x54>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_MspInit+0x54>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <HAL_MspInit+0x54>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_MspInit+0x54>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_MspInit+0x54>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	210f      	movs	r1, #15
 8000db2:	f06f 0001 	mvn.w	r0, #1
 8000db6:	f000 fead 	bl	8001b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	@ 0x38
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b33      	ldr	r3, [pc, #204]	@ (8000eac <HAL_InitTick+0xe4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a32      	ldr	r2, [pc, #200]	@ (8000eac <HAL_InitTick+0xe4>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <HAL_InitTick+0xe4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df4:	f107 0210 	add.w	r2, r7, #16
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fb50 	bl	80024a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d103      	bne.n	8000e16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e0e:	f001 fb21 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8000e12:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e16:	f001 fb1d 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e22:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <HAL_InitTick+0xe8>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	0c9b      	lsrs	r3, r3, #18
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <HAL_InitTick+0xf0>)
 8000e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e54:	4817      	ldr	r0, [pc, #92]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e56:	f002 f825 	bl	8002ea4 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d11b      	bne.n	8000ea0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e68:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <HAL_InitTick+0xec>)
 8000e6a:	f002 f86b 	bl	8002f44 <HAL_TIM_Base_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e7c:	2036      	movs	r0, #54	@ 0x36
 8000e7e:	f000 fe65 	bl	8001b4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d808      	bhi.n	8000e9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2036      	movs	r0, #54	@ 0x36
 8000e8e:	f000 fe41 	bl	8001b14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_InitTick+0xf4>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e002      	b.n	8000ea0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3738      	adds	r7, #56	@ 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	20000120 	.word	0x20000120
 8000eb8:	40001000 	.word	0x40001000
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <USART1_IRQHandler+0x10>)
 8000efe:	f003 f885 	bl	800400c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001b4 	.word	0x200001b4

08000f0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <TIM6_DAC_IRQHandler+0x10>)
 8000f12:	f002 f8e0 	bl	80030d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000120 	.word	0x20000120

08000f20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
  }

  return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f82:	605a      	str	r2, [r3, #4]
  return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_isatty>:

int _isatty(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	@ (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f004 fac2 	bl	800557c <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20020000 	.word	0x20020000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000168 	.word	0x20000168
 800102c:	20000820 	.word	0x20000820

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	@ 0x38
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <MX_TIM2_Init+0xe8>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_TIM2_Init+0xe8>)
 800108e:	2253      	movs	r2, #83	@ 0x53
 8001090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <MX_TIM2_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_TIM2_Init+0xe8>)
 800109a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_TIM2_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_TIM2_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ac:	4823      	ldr	r0, [pc, #140]	@ (800113c <MX_TIM2_Init+0xe8>)
 80010ae:	f001 fef9 	bl	8002ea4 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010b8:	f7ff fe54 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481c      	ldr	r0, [pc, #112]	@ (800113c <MX_TIM2_Init+0xe8>)
 80010ca:	f002 f9b7 	bl	800343c <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010d4:	f7ff fe46 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_TIM2_Init+0xe8>)
 80010da:	f001 ffa3 	bl	8003024 <HAL_TIM_PWM_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010e4:	f7ff fe3e 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_TIM2_Init+0xe8>)
 80010f8:	f002 fd86 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001102:	f7ff fe2f 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	@ 0x60
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800110a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800110e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <MX_TIM2_Init+0xe8>)
 8001120:	f002 f8ca 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800112a:	f7ff fe1b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <MX_TIM2_Init+0xe8>)
 8001130:	f000 f826 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3738      	adds	r7, #56	@ 0x38
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000016c 	.word	0x2000016c

08001140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001150:	d10d      	bne.n	800116e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_TIM_Base_MspInit+0x3c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_TIM_Base_MspInit+0x3c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_TIM_Base_MspInit+0x3c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a0:	d11e      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_TIM_MspPostInit+0x68>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <HAL_TIM_MspPostInit+0x68>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_TIM_MspPostInit+0x68>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	4804      	ldr	r0, [pc, #16]	@ (80011ec <HAL_TIM_MspPostInit+0x6c>)
 80011dc:	f000 fd56 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000

080011f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <MX_USART1_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001228:	f002 fd7e 	bl	8003d28 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f7ff fd97 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001b4 	.word	0x200001b4
 8001240:	40011000 	.word	0x40011000

08001244 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_USART2_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_USART2_UART_Init+0x4c>)
 800127c:	f002 fd54 	bl	8003d28 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f7ff fd6d 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001fc 	.word	0x200001fc
 8001294:	40004400 	.word	0x40004400

08001298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a36      	ldr	r2, [pc, #216]	@ (8001390 <HAL_UART_MspInit+0xf8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d135      	bne.n	8001326 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	4a34      	ldr	r2, [pc, #208]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ca:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a2d      	ldr	r2, [pc, #180]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001304:	2307      	movs	r3, #7
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4822      	ldr	r0, [pc, #136]	@ (8001398 <HAL_UART_MspInit+0x100>)
 8001310:	f000 fcbc 	bl	8001c8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2105      	movs	r1, #5
 8001318:	2025      	movs	r0, #37	@ 0x25
 800131a:	f000 fbfb 	bl	8001b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800131e:	2025      	movs	r0, #37	@ 0x25
 8001320:	f000 fc14 	bl	8001b4c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001324:	e030      	b.n	8001388 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <HAL_UART_MspInit+0x104>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d12b      	bne.n	8001388 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6313      	str	r3, [r2, #48]	@ 0x30
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_UART_MspInit+0xfc>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001368:	230c      	movs	r3, #12
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001378:	2307      	movs	r3, #7
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <HAL_UART_MspInit+0x100>)
 8001384:	f000 fc82 	bl	8001c8c <HAL_GPIO_Init>
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	@ 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40011000 	.word	0x40011000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40004400 	.word	0x40004400

080013a0 <Reset_Handler>:
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d8 <LoopFillZerobss+0xe>
 80013a4:	f7ff fe44 	bl	8001030 <SystemInit>
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <LoopFillZerobss+0x12>)
 80013aa:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LoopFillZerobss+0x16>)
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x1a>)
 80013ae:	2300      	movs	r3, #0
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:
 80013b2:	58d4      	ldr	r4, [r2, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:
 80013b8:	18c4      	adds	r4, r0, r3
 80013ba:	428c      	cmp	r4, r1
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopFillZerobss+0x1e>)
 80013c0:	4c0a      	ldr	r4, [pc, #40]	@ (80013ec <LoopFillZerobss+0x22>)
 80013c2:	2300      	movs	r3, #0
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:
 80013ca:	42a2      	cmp	r2, r4
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>
 80013ce:	f004 f8db 	bl	8005588 <__libc_init_array>
 80013d2:	f7ff fc07 	bl	8000be4 <main>
 80013d6:	4770      	bx	lr
 80013d8:	20020000 	.word	0x20020000
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000068 	.word	0x20000068
 80013e4:	080068d4 	.word	0x080068d4
 80013e8:	20000068 	.word	0x20000068
 80013ec:	20000820 	.word	0x20000820

080013f0 <ADC_IRQHandler>:
 80013f0:	e7fe      	b.n	80013f0 <ADC_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <HAL_Init+0x40>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <HAL_Init+0x40>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <HAL_Init+0x40>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 fb6e 	bl	8001afe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	200f      	movs	r0, #15
 8001424:	f7ff fcd0 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fca2 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	20000244 	.word	0x20000244

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000244 	.word	0x20000244

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008

080014c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e033      	b.n	800153e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff f8b8 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001506:	f023 0302 	bic.w	r3, r3, #2
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f94a 	bl	80017ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f023 0303 	bic.w	r3, r3, #3
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
 800152e:	e001      	b.n	8001534 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1c>
 8001560:	2302      	movs	r3, #2
 8001562:	e113      	b.n	800178c <HAL_ADC_ConfigChannel+0x244>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b09      	cmp	r3, #9
 8001572:	d925      	bls.n	80015c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68d9      	ldr	r1, [r3, #12]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	3b1e      	subs	r3, #30
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43da      	mvns	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68d9      	ldr	r1, [r3, #12]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	4603      	mov	r3, r0
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4403      	add	r3, r0
 80015b2:	3b1e      	subs	r3, #30
 80015b4:	409a      	lsls	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	e022      	b.n	8001606 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6919      	ldr	r1, [r3, #16]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	2207      	movs	r2, #7
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6919      	ldr	r1, [r3, #16]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4403      	add	r3, r0
 80015fc:	409a      	lsls	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b06      	cmp	r3, #6
 800160c:	d824      	bhi.n	8001658 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b05      	subs	r3, #5
 8001620:	221f      	movs	r2, #31
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	400a      	ands	r2, r1
 800162e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b05      	subs	r3, #5
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	635a      	str	r2, [r3, #52]	@ 0x34
 8001656:	e04c      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b0c      	cmp	r3, #12
 800165e:	d824      	bhi.n	80016aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	3b23      	subs	r3, #35	@ 0x23
 8001672:	221f      	movs	r2, #31
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43da      	mvns	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	400a      	ands	r2, r1
 8001680:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b23      	subs	r3, #35	@ 0x23
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016a8:	e023      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b41      	subs	r3, #65	@ 0x41
 80016bc:	221f      	movs	r2, #31
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	400a      	ands	r2, r1
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b41      	subs	r3, #65	@ 0x41
 80016e6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f2:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_ADC_ConfigChannel+0x250>)
 80016f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a28      	ldr	r2, [pc, #160]	@ (800179c <HAL_ADC_ConfigChannel+0x254>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d10f      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1d8>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b12      	cmp	r3, #18
 8001706:	d10b      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <HAL_ADC_ConfigChannel+0x254>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12b      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x23a>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <HAL_ADC_ConfigChannel+0x258>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d003      	beq.n	800173c <HAL_ADC_ConfigChannel+0x1f4>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b11      	cmp	r3, #17
 800173a:	d122      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <HAL_ADC_ConfigChannel+0x258>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d111      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_ADC_ConfigChannel+0x260>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9a      	lsrs	r2, r3, #18
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40012300 	.word	0x40012300
 800179c:	40012000 	.word	0x40012000
 80017a0:	10000012 	.word	0x10000012
 80017a4:	20000000 	.word	0x20000000
 80017a8:	431bde83 	.word	0x431bde83

080017ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b4:	4b79      	ldr	r3, [pc, #484]	@ (800199c <ADC_Init+0x1f0>)
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	021a      	lsls	r2, r3, #8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	4a58      	ldr	r2, [pc, #352]	@ (80019a0 <ADC_Init+0x1f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d022      	beq.n	800188a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001852:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6899      	ldr	r1, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6899      	ldr	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	e00f      	b.n	80018aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0202 	bic.w	r2, r2, #2
 80018b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e1b      	ldrb	r3, [r3, #24]
 80018c4:	005a      	lsls	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6859      	ldr	r1, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	3b01      	subs	r3, #1
 8001904:	035a      	lsls	r2, r3, #13
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	e007      	b.n	8001920 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	3b01      	subs	r3, #1
 800193c:	051a      	lsls	r2, r3, #20
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6899      	ldr	r1, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001962:	025a      	lsls	r2, r3, #9
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800197a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6899      	ldr	r1, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	029a      	lsls	r2, r3, #10
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40012300 	.word	0x40012300
 80019a0:	0f000001 	.word	0x0f000001

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	@ (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	@ (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	@ 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	@ 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff4c 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b26:	f7ff ff61 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f7ff ffb1 	bl	8001a98 <NVIC_EncodePriority>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff80 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff54 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b76:	f7ff fc73 	bl	8001460 <HAL_GetTick>
 8001b7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d008      	beq.n	8001b9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2280      	movs	r2, #128	@ 0x80
 8001b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e052      	b.n	8001c40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0216 	bic.w	r2, r2, #22
 8001ba8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <HAL_DMA_Abort+0x62>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0208 	bic.w	r2, r2, #8
 8001bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bea:	e013      	b.n	8001c14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bec:	f7ff fc38 	bl	8001460 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d90c      	bls.n	8001c14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e015      	b.n	8001c40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e4      	bne.n	8001bec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	223f      	movs	r2, #63	@ 0x3f
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00c      	b.n	8001c80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e165      	b.n	8001f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8154 	bne.w	8001f6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d005      	beq.n	8001cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d017      	beq.n	8001d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80ae 	beq.w	8001f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b5a      	ldr	r3, [pc, #360]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <HAL_GPIO_Init+0x304>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	@ (8001f94 <HAL_GPIO_Init+0x308>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	@ (8001f9c <HAL_GPIO_Init+0x310>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa0 <HAL_GPIO_Init+0x314>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa4 <HAL_GPIO_Init+0x318>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x20a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa8 <HAL_GPIO_Init+0x31c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x206>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a49      	ldr	r2, [pc, #292]	@ (8001fac <HAL_GPIO_Init+0x320>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x202>
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	e00c      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00a      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	@ (8001f90 <HAL_GPIO_Init+0x304>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a26      	ldr	r2, [pc, #152]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f ae96 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40021400 	.word	0x40021400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e12b      	b.n	8002252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fda0 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	@ 0x24
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800203a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800204a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800204c:	f000 fa02 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a81      	ldr	r2, [pc, #516]	@ (800225c <HAL_I2C_Init+0x274>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d807      	bhi.n	800206c <HAL_I2C_Init+0x84>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a80      	ldr	r2, [pc, #512]	@ (8002260 <HAL_I2C_Init+0x278>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e006      	b.n	800207a <HAL_I2C_Init+0x92>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a7d      	ldr	r2, [pc, #500]	@ (8002264 <HAL_I2C_Init+0x27c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0e7      	b.n	8002252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a78      	ldr	r2, [pc, #480]	@ (8002268 <HAL_I2C_Init+0x280>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	@ (800225c <HAL_I2C_Init+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d802      	bhi.n	80020bc <HAL_I2C_Init+0xd4>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3301      	adds	r3, #1
 80020ba:	e009      	b.n	80020d0 <HAL_I2C_Init+0xe8>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4a69      	ldr	r2, [pc, #420]	@ (800226c <HAL_I2C_Init+0x284>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	3301      	adds	r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	495c      	ldr	r1, [pc, #368]	@ (800225c <HAL_I2C_Init+0x274>)
 80020ec:	428b      	cmp	r3, r1
 80020ee:	d819      	bhi.n	8002124 <HAL_I2C_Init+0x13c>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e59      	subs	r1, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002104:	400b      	ands	r3, r1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_I2C_Init+0x138>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1e59      	subs	r1, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fbb1 f3f3 	udiv	r3, r1, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	e051      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002120:	2304      	movs	r3, #4
 8002122:	e04f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <HAL_I2C_Init+0x168>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_I2C_Init+0x18e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	0099      	lsls	r1, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Init+0x196>
 800217a:	2301      	movs	r3, #1
 800217c:	e022      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <HAL_I2C_Init+0x1bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e58      	subs	r0, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	440b      	add	r3, r1
 8002194:	fbb0 f3f3 	udiv	r3, r0, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e58      	subs	r0, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	0099      	lsls	r1, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6911      	ldr	r1, [r2, #16]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68d2      	ldr	r2, [r2, #12]
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	430b      	orrs	r3, r1
 8002206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	000186a0 	.word	0x000186a0
 8002260:	001e847f 	.word	0x001e847f
 8002264:	003d08ff 	.word	0x003d08ff
 8002268:	431bde83 	.word	0x431bde83
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cc      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b68      	ldr	r3, [pc, #416]	@ (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d90c      	bls.n	80022ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b65      	ldr	r3, [pc, #404]	@ (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b63      	ldr	r3, [pc, #396]	@ (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b8      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c4:	4b59      	ldr	r3, [pc, #356]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a58      	ldr	r2, [pc, #352]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	4b53      	ldr	r3, [pc, #332]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b50      	ldr	r3, [pc, #320]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	494d      	ldr	r1, [pc, #308]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d044      	beq.n	8002390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d119      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d003      	beq.n	800232e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232a:	2b03      	cmp	r3, #3
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b3f      	ldr	r3, [pc, #252]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e067      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b37      	ldr	r3, [pc, #220]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4934      	ldr	r1, [pc, #208]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7ff f87e 	bl	8001460 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7ff f87a 	bl	8001460 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e04f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d20c      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e032      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4916      	ldr	r1, [pc, #88]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e2:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490e      	ldr	r1, [pc, #56]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023f6:	f000 f887 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490a      	ldr	r1, [pc, #40]	@ (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a09      	ldr	r2, [pc, #36]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fcd6 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00
 800242c:	40023800 	.word	0x40023800
 8002430:	08006878 	.word	0x08006878
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_RCC_GetHCLKFreq+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002458:	f7ff fff0 	bl	800243c <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0a9b      	lsrs	r3, r3, #10
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	08006888 	.word	0x08006888

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002480:	f7ff ffdc 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0b5b      	lsrs	r3, r3, #13
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4903      	ldr	r1, [pc, #12]	@ (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	08006888 	.word	0x08006888

080024a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	220f      	movs	r2, #15
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_RCC_GetClockConfig+0x5c>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <HAL_RCC_GetClockConfig+0x5c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <HAL_RCC_GetClockConfig+0x5c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_GetClockConfig+0x5c>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <HAL_RCC_GetClockConfig+0x60>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b0ae      	sub	sp, #184	@ 0xb8
 800250e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800252e:	4bcb      	ldr	r3, [pc, #812]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b0c      	cmp	r3, #12
 8002538:	f200 8206 	bhi.w	8002948 <HAL_RCC_GetSysClockFreq+0x440>
 800253c:	a201      	add	r2, pc, #4	@ (adr r2, 8002544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002579 	.word	0x08002579
 8002548:	08002949 	.word	0x08002949
 800254c:	08002949 	.word	0x08002949
 8002550:	08002949 	.word	0x08002949
 8002554:	08002581 	.word	0x08002581
 8002558:	08002949 	.word	0x08002949
 800255c:	08002949 	.word	0x08002949
 8002560:	08002949 	.word	0x08002949
 8002564:	08002589 	.word	0x08002589
 8002568:	08002949 	.word	0x08002949
 800256c:	08002949 	.word	0x08002949
 8002570:	08002949 	.word	0x08002949
 8002574:	08002779 	.word	0x08002779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4bb9      	ldr	r3, [pc, #740]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x358>)
 800257a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800257e:	e1e7      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002580:	4bb8      	ldr	r3, [pc, #736]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002586:	e1e3      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002588:	4bb4      	ldr	r3, [pc, #720]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002594:	4bb1      	ldr	r3, [pc, #708]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d071      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a0:	4bae      	ldr	r3, [pc, #696]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025c6:	4622      	mov	r2, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	0159      	lsls	r1, r3, #5
 80025d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d8:	0150      	lsls	r0, r2, #5
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4621      	mov	r1, r4
 80025e0:	1a51      	subs	r1, r2, r1
 80025e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80025e4:	4629      	mov	r1, r5
 80025e6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025f8:	4649      	mov	r1, r9
 80025fa:	018b      	lsls	r3, r1, #6
 80025fc:	4641      	mov	r1, r8
 80025fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002602:	4641      	mov	r1, r8
 8002604:	018a      	lsls	r2, r1, #6
 8002606:	4641      	mov	r1, r8
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800260c:	4649      	mov	r1, r9
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002620:	4649      	mov	r1, r9
 8002622:	00cb      	lsls	r3, r1, #3
 8002624:	4641      	mov	r1, r8
 8002626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800262a:	4641      	mov	r1, r8
 800262c:	00ca      	lsls	r2, r1, #3
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	4603      	mov	r3, r0
 8002634:	4622      	mov	r2, r4
 8002636:	189b      	adds	r3, r3, r2
 8002638:	633b      	str	r3, [r7, #48]	@ 0x30
 800263a:	462b      	mov	r3, r5
 800263c:	460a      	mov	r2, r1
 800263e:	eb42 0303 	adc.w	r3, r2, r3
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002650:	4629      	mov	r1, r5
 8002652:	024b      	lsls	r3, r1, #9
 8002654:	4621      	mov	r1, r4
 8002656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800265a:	4621      	mov	r1, r4
 800265c:	024a      	lsls	r2, r1, #9
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800266c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002674:	f7fd fe24 	bl	80002c0 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002682:	e067      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002684:	4b75      	ldr	r3, [pc, #468]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	2200      	movs	r2, #0
 800268c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002690:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269e:	2300      	movs	r3, #0
 80026a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0159      	lsls	r1, r3, #5
 80026b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b8:	0150      	lsls	r0, r2, #5
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4621      	mov	r1, r4
 80026c0:	1a51      	subs	r1, r2, r1
 80026c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026d8:	4649      	mov	r1, r9
 80026da:	018b      	lsls	r3, r1, #6
 80026dc:	4641      	mov	r1, r8
 80026de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e2:	4641      	mov	r1, r8
 80026e4:	018a      	lsls	r2, r1, #6
 80026e6:	4641      	mov	r1, r8
 80026e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ec:	4649      	mov	r1, r9
 80026ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002706:	4692      	mov	sl, r2
 8002708:	469b      	mov	fp, r3
 800270a:	4623      	mov	r3, r4
 800270c:	eb1a 0303 	adds.w	r3, sl, r3
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	462b      	mov	r3, r5
 8002714:	eb4b 0303 	adc.w	r3, fp, r3
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800273c:	2200      	movs	r2, #0
 800273e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002740:	677a      	str	r2, [r7, #116]	@ 0x74
 8002742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002746:	f7fd fdbb 	bl	80002c0 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4613      	mov	r3, r2
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800276a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002776:	e0eb      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002778:	4b38      	ldr	r3, [pc, #224]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002784:	4b35      	ldr	r3, [pc, #212]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d06b      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <HAL_RCC_GetSysClockFreq+0x354>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	2200      	movs	r2, #0
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800279a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800279c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027a4:	2300      	movs	r3, #0
 80027a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80027a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027ac:	4622      	mov	r2, r4
 80027ae:	462b      	mov	r3, r5
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	0159      	lsls	r1, r3, #5
 80027ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027be:	0150      	lsls	r0, r2, #5
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4621      	mov	r1, r4
 80027c6:	1a51      	subs	r1, r2, r1
 80027c8:	61b9      	str	r1, [r7, #24]
 80027ca:	4629      	mov	r1, r5
 80027cc:	eb63 0301 	sbc.w	r3, r3, r1
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027de:	4659      	mov	r1, fp
 80027e0:	018b      	lsls	r3, r1, #6
 80027e2:	4651      	mov	r1, sl
 80027e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e8:	4651      	mov	r1, sl
 80027ea:	018a      	lsls	r2, r1, #6
 80027ec:	4651      	mov	r1, sl
 80027ee:	ebb2 0801 	subs.w	r8, r2, r1
 80027f2:	4659      	mov	r1, fp
 80027f4:	eb63 0901 	sbc.w	r9, r3, r1
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280c:	4690      	mov	r8, r2
 800280e:	4699      	mov	r9, r3
 8002810:	4623      	mov	r3, r4
 8002812:	eb18 0303 	adds.w	r3, r8, r3
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	462b      	mov	r3, r5
 800281a:	eb49 0303 	adc.w	r3, r9, r3
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800282c:	4629      	mov	r1, r5
 800282e:	024b      	lsls	r3, r1, #9
 8002830:	4621      	mov	r1, r4
 8002832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002836:	4621      	mov	r1, r4
 8002838:	024a      	lsls	r2, r1, #9
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002842:	2200      	movs	r2, #0
 8002844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002846:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800284c:	f7fd fd38 	bl	80002c0 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800285a:	e065      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x420>
 800285c:	40023800 	.word	0x40023800
 8002860:	00f42400 	.word	0x00f42400
 8002864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002868:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x458>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	2200      	movs	r2, #0
 8002870:	4618      	mov	r0, r3
 8002872:	4611      	mov	r1, r2
 8002874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002878:	653b      	str	r3, [r7, #80]	@ 0x50
 800287a:	2300      	movs	r3, #0
 800287c:	657b      	str	r3, [r7, #84]	@ 0x54
 800287e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002882:	4642      	mov	r2, r8
 8002884:	464b      	mov	r3, r9
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	0159      	lsls	r1, r3, #5
 8002890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002894:	0150      	lsls	r0, r2, #5
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4641      	mov	r1, r8
 800289c:	1a51      	subs	r1, r2, r1
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	4649      	mov	r1, r9
 80028a2:	eb63 0301 	sbc.w	r3, r3, r1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028b4:	4659      	mov	r1, fp
 80028b6:	018b      	lsls	r3, r1, #6
 80028b8:	4651      	mov	r1, sl
 80028ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028be:	4651      	mov	r1, sl
 80028c0:	018a      	lsls	r2, r1, #6
 80028c2:	4651      	mov	r1, sl
 80028c4:	1a54      	subs	r4, r2, r1
 80028c6:	4659      	mov	r1, fp
 80028c8:	eb63 0501 	sbc.w	r5, r3, r1
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	00eb      	lsls	r3, r5, #3
 80028d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028da:	00e2      	lsls	r2, r4, #3
 80028dc:	4614      	mov	r4, r2
 80028de:	461d      	mov	r5, r3
 80028e0:	4643      	mov	r3, r8
 80028e2:	18e3      	adds	r3, r4, r3
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	464b      	mov	r3, r9
 80028e8:	eb45 0303 	adc.w	r3, r5, r3
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fa:	4629      	mov	r1, r5
 80028fc:	028b      	lsls	r3, r1, #10
 80028fe:	4621      	mov	r1, r4
 8002900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002904:	4621      	mov	r1, r4
 8002906:	028a      	lsls	r2, r1, #10
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002910:	2200      	movs	r2, #0
 8002912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002914:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800291a:	f7fd fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4613      	mov	r3, r2
 8002924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x458>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0f1b      	lsrs	r3, r3, #28
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800293a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002946:	e003      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800294a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002954:	4618      	mov	r0, r3
 8002956:	37b8      	adds	r7, #184	@ 0xb8
 8002958:	46bd      	mov	sp, r7
 800295a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	00f42400 	.word	0x00f42400

08002968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e28d      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8083 	beq.w	8002a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002988:	4b94      	ldr	r3, [pc, #592]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d019      	beq.n	80029c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002994:	4b91      	ldr	r3, [pc, #580]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800299c:	2b08      	cmp	r3, #8
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a0:	4b8e      	ldr	r3, [pc, #568]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ac:	d00c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b8b      	ldr	r3, [pc, #556]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d112      	bne.n	80029e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029c6:	d10b      	bne.n	80029e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	4b84      	ldr	r3, [pc, #528]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d05b      	beq.n	8002a8c <HAL_RCC_OscConfig+0x124>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d157      	bne.n	8002a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e25a      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCC_OscConfig+0x90>
 80029ea:	4b7c      	ldr	r3, [pc, #496]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7b      	ldr	r2, [pc, #492]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xcc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xb4>
 8002a02:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a75      	ldr	r2, [pc, #468]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b73      	ldr	r3, [pc, #460]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a72      	ldr	r2, [pc, #456]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xcc>
 8002a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6e      	ldr	r2, [pc, #440]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b6c      	ldr	r3, [pc, #432]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fd10 	bl	8001460 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fd0c 	bl	8001460 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e21f      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b61      	ldr	r3, [pc, #388]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xdc>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fcfc 	bl	8001460 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fcf8 	bl	8001460 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e20b      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b57      	ldr	r3, [pc, #348]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x104>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d06f      	beq.n	8002b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a9a:	4b50      	ldr	r3, [pc, #320]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d017      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d11c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b44      	ldr	r3, [pc, #272]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d116      	bne.n	8002b04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_RCC_OscConfig+0x186>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e1d3      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4937      	ldr	r1, [pc, #220]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	e03a      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0c:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_OscConfig+0x278>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fca5 	bl	8001460 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fca1 	bl	8001460 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1b4      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4925      	ldr	r1, [pc, #148]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <HAL_RCC_OscConfig+0x278>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc84 	bl	8001460 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fc80 	bl	8001460 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e193      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d036      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe fc64 	bl	8001460 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fc60 	bl	8001460 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e173      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x234>
 8002bba:	e01b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbc:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fc4d 	bl	8001460 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	e00e      	b.n	8002be8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe fc49 	bl	8001460 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d907      	bls.n	8002be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e15c      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	42470000 	.word	0x42470000
 8002be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ea      	bne.n	8002bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8097 	beq.w	8002d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b7f      	ldr	r3, [pc, #508]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c22:	4b7c      	ldr	r3, [pc, #496]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <HAL_RCC_OscConfig+0x4b0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b76      	ldr	r3, [pc, #472]	@ (8002e18 <HAL_RCC_OscConfig+0x4b0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a75      	ldr	r2, [pc, #468]	@ (8002e18 <HAL_RCC_OscConfig+0x4b0>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fc09 	bl	8001460 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe fc05 	bl	8001460 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e118      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b6c      	ldr	r3, [pc, #432]	@ (8002e18 <HAL_RCC_OscConfig+0x4b0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x31e>
 8002c78:	4b66      	ldr	r3, [pc, #408]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	e01c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x358>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x340>
 8002c8e:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	4a60      	ldr	r2, [pc, #384]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x358>
 8002ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a59      	ldr	r2, [pc, #356]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	4b57      	ldr	r3, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a56      	ldr	r2, [pc, #344]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fbca 	bl	8001460 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fbc6 	bl	8001460 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0d7      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ee      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x368>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fbb4 	bl	8001460 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fbb0 	bl	8001460 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0c1      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d12:	4b40      	ldr	r3, [pc, #256]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	4a3a      	ldr	r2, [pc, #232]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80ad 	beq.w	8002e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d3a:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d060      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d145      	bne.n	8002dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b33      	ldr	r3, [pc, #204]	@ (8002e1c <HAL_RCC_OscConfig+0x4b4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb84 	bl	8001460 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fb80 	bl	8001460 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e093      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	4b29      	ldr	r3, [pc, #164]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	071b      	lsls	r3, r3, #28
 8002da6:	491b      	ldr	r1, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x4b4>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fb55 	bl	8001460 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fb51 	bl	8001460 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e064      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x452>
 8002dd8:	e05c      	b.n	8002e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_RCC_OscConfig+0x4b4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fb3e 	bl	8001460 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fb3a 	bl	8001460 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04d      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x480>
 8002e06:	e045      	b.n	8002e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e040      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea0 <HAL_RCC_OscConfig+0x538>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d030      	beq.n	8002e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d129      	bne.n	8002e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d122      	bne.n	8002e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d119      	bne.n	8002e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d10f      	bne.n	8002e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e041      	b.n	8002f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe f938 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 fb9a 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04e      	b.n	8002ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a23      	ldr	r2, [pc, #140]	@ (8003008 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f86:	d01d      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_TIM_Base_Start_IT+0xc8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8003014 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	@ (800301c <HAL_TIM_Base_Start_IT+0xd8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	@ (8003020 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d010      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe6:	e007      	b.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40010400 	.word	0x40010400
 800301c:	40014000 	.word	0x40014000
 8003020:	40001800 	.word	0x40001800

08003024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e041      	b.n	80030ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f839 	bl	80030c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 fada 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01b      	beq.n	800313a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0202 	mvn.w	r2, #2
 800310a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fa5c 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 8003126:	e005      	b.n	8003134 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa4e 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa5f 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01b      	beq.n	8003186 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0204 	mvn.w	r2, #4
 8003156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fa36 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 8003172:	e005      	b.n	8003180 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fa28 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa39 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d01b      	beq.n	80031d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0208 	mvn.w	r2, #8
 80031a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2204      	movs	r2, #4
 80031a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fa10 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 80031be:	e005      	b.n	80031cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa02 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa13 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01b      	beq.n	800321e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f06f 0210 	mvn.w	r2, #16
 80031ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2208      	movs	r2, #8
 80031f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f9ea 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 800320a:	e005      	b.n	8003218 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f9dc 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9ed 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0201 	mvn.w	r2, #1
 800323a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fd fd7f 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00c      	beq.n	8003266 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fd57 	bl	8003d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00c      	beq.n	800328a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f9be 	bl	8003606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 0220 	mvn.w	r2, #32
 80032a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fd29 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0ae      	b.n	8003434 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	f200 809f 	bhi.w	8003424 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003425 	.word	0x08003425
 80032f4:	08003425 	.word	0x08003425
 80032f8:	08003425 	.word	0x08003425
 80032fc:	08003361 	.word	0x08003361
 8003300:	08003425 	.word	0x08003425
 8003304:	08003425 	.word	0x08003425
 8003308:	08003425 	.word	0x08003425
 800330c:	080033a3 	.word	0x080033a3
 8003310:	08003425 	.word	0x08003425
 8003314:	08003425 	.word	0x08003425
 8003318:	08003425 	.word	0x08003425
 800331c:	080033e3 	.word	0x080033e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa24 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0208 	orr.w	r2, r2, #8
 800333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	619a      	str	r2, [r3, #24]
      break;
 800335e:	e064      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa74 	bl	8003854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	619a      	str	r2, [r3, #24]
      break;
 80033a0:	e043      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fac9 	bl	8003940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0208 	orr.w	r2, r2, #8
 80033bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0204 	bic.w	r2, r2, #4
 80033cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	61da      	str	r2, [r3, #28]
      break;
 80033e0:	e023      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fb1d 	bl	8003a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69d9      	ldr	r1, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	61da      	str	r2, [r3, #28]
      break;
 8003422:	e002      	b.n	800342a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
      break;
 8003428:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIM_ConfigClockSource+0x1c>
 8003454:	2302      	movs	r3, #2
 8003456:	e0b4      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x186>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800347e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003490:	d03e      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0xd4>
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003496:	f200 8087 	bhi.w	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349e:	f000 8086 	beq.w	80035ae <HAL_TIM_ConfigClockSource+0x172>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a6:	d87f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b70      	cmp	r3, #112	@ 0x70
 80034aa:	d01a      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0xa6>
 80034ac:	2b70      	cmp	r3, #112	@ 0x70
 80034ae:	d87b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b60      	cmp	r3, #96	@ 0x60
 80034b2:	d050      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x11a>
 80034b4:	2b60      	cmp	r3, #96	@ 0x60
 80034b6:	d877      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b50      	cmp	r3, #80	@ 0x50
 80034ba:	d03c      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0xfa>
 80034bc:	2b50      	cmp	r3, #80	@ 0x50
 80034be:	d873      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d058      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x13a>
 80034c4:	2b40      	cmp	r3, #64	@ 0x40
 80034c6:	d86f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b30      	cmp	r3, #48	@ 0x30
 80034ca:	d064      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b30      	cmp	r3, #48	@ 0x30
 80034ce:	d86b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d060      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d867      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05c      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d05a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15a>
 80034e0:	e062      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f2:	f000 fb69 	bl	8003bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	609a      	str	r2, [r3, #8]
      break;
 800350e:	e04f      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	f000 fb52 	bl	8003bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003532:	609a      	str	r2, [r3, #8]
      break;
 8003534:	e03c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fac6 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2150      	movs	r1, #80	@ 0x50
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fb1f 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 8003554:	e02c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	461a      	mov	r2, r3
 8003564:	f000 fae5 	bl	8003b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2160      	movs	r1, #96	@ 0x60
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fb0f 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 8003574:	e01c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	461a      	mov	r2, r3
 8003584:	f000 faa6 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2140      	movs	r1, #64	@ 0x40
 800358e:	4618      	mov	r0, r3
 8003590:	f000 faff 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 8003594:	e00c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f000 faf6 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80035a6:	e003      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e000      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a43      	ldr	r2, [pc, #268]	@ (800374c <TIM_Base_SetConfig+0x130>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a42      	ldr	r2, [pc, #264]	@ (8003750 <TIM_Base_SetConfig+0x134>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a41      	ldr	r2, [pc, #260]	@ (8003754 <TIM_Base_SetConfig+0x138>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a40      	ldr	r2, [pc, #256]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a35      	ldr	r2, [pc, #212]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d027      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a32      	ldr	r2, [pc, #200]	@ (800374c <TIM_Base_SetConfig+0x130>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d023      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a31      	ldr	r2, [pc, #196]	@ (8003750 <TIM_Base_SetConfig+0x134>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a30      	ldr	r2, [pc, #192]	@ (8003754 <TIM_Base_SetConfig+0x138>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d017      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2e      	ldr	r2, [pc, #184]	@ (800375c <TIM_Base_SetConfig+0x140>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003760 <TIM_Base_SetConfig+0x144>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <TIM_Base_SetConfig+0x148>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003768 <TIM_Base_SetConfig+0x14c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	@ (800376c <TIM_Base_SetConfig+0x150>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <TIM_Base_SetConfig+0x154>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a10      	ldr	r2, [pc, #64]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]
  }
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800
 8003768:	40001800 	.word	0x40001800
 800376c:	40001c00 	.word	0x40001c00
 8003770:	40002000 	.word	0x40002000

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 0201 	bic.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a20      	ldr	r2, [pc, #128]	@ (800384c <TIM_OC1_SetConfig+0xd8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_OC1_SetConfig+0x64>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <TIM_OC1_SetConfig+0xdc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10c      	bne.n	80037f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0308 	bic.w	r3, r3, #8
 80037de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a15      	ldr	r2, [pc, #84]	@ (800384c <TIM_OC1_SetConfig+0xd8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_OC1_SetConfig+0x8e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a14      	ldr	r2, [pc, #80]	@ (8003850 <TIM_OC1_SetConfig+0xdc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d111      	bne.n	8003826 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	621a      	str	r2, [r3, #32]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40010000 	.word	0x40010000
 8003850:	40010400 	.word	0x40010400

08003854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f023 0210 	bic.w	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800388a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0320 	bic.w	r3, r3, #32
 800389e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <TIM_OC2_SetConfig+0xe4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_OC2_SetConfig+0x68>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a21      	ldr	r2, [pc, #132]	@ (800393c <TIM_OC2_SetConfig+0xe8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10d      	bne.n	80038d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <TIM_OC2_SetConfig+0xe4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC2_SetConfig+0x94>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a16      	ldr	r2, [pc, #88]	@ (800393c <TIM_OC2_SetConfig+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d113      	bne.n	8003910 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400

08003940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0303 	bic.w	r3, r3, #3
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a21      	ldr	r2, [pc, #132]	@ (8003a20 <TIM_OC3_SetConfig+0xe0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_OC3_SetConfig+0x66>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a20      	ldr	r2, [pc, #128]	@ (8003a24 <TIM_OC3_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <TIM_OC3_SetConfig+0xe0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC3_SetConfig+0x92>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <TIM_OC3_SetConfig+0xe4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400

08003a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a12      	ldr	r2, [pc, #72]	@ (8003acc <TIM_OC4_SetConfig+0xa4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_OC4_SetConfig+0x68>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a11      	ldr	r2, [pc, #68]	@ (8003ad0 <TIM_OC4_SetConfig+0xa8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d109      	bne.n	8003aa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0201 	bic.w	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 030a 	bic.w	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f023 0210 	bic.w	r2, r3, #16
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f043 0307 	orr.w	r3, r3, #7
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e05a      	b.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d022      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d01d      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d018      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a18      	ldr	r2, [pc, #96]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40001800 	.word	0x40001800

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd faa2 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fdff 	bl	8004970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	@ 0x28
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d175      	bne.n	8003ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Transmit+0x2c>
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e06e      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2221      	movs	r2, #33	@ 0x21
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e06:	f7fd fb2b 	bl	8001460 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d108      	bne.n	8003e34 <HAL_UART_Transmit+0x6c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e003      	b.n	8003e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e3c:	e02e      	b.n	8003e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fb9b 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e03a      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3302      	adds	r3, #2
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e007      	b.n	8003e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cb      	bne.n	8003e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	@ 0x40
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fb67 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	@ 0x28
 8003ee2:	af02      	add	r7, sp, #8
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	f040 8081 	bne.w	8004002 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_UART_Receive+0x2e>
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e079      	b.n	8004004 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2222      	movs	r2, #34	@ 0x22
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f24:	f7fd fa9c 	bl	8001460 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d108      	bne.n	8003f52 <HAL_UART_Receive+0x74>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e003      	b.n	8003f5a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f5a:	e047      	b.n	8003fec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2200      	movs	r2, #0
 8003f64:	2120      	movs	r1, #32
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fb0c 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e042      	b.n	8004004 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10c      	bne.n	8003f9e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	e01f      	b.n	8003fde <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa6:	d007      	beq.n	8003fb8 <HAL_UART_Receive+0xda>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_UART_Receive+0xe8>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e008      	b.n	8003fd8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1b2      	bne.n	8003f5c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b0ba      	sub	sp, #232	@ 0xe8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800404a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_UART_IRQHandler+0x66>
 800405e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fbc2 	bl	80047f4 <UART_Receive_IT>
      return;
 8004070:	e25b      	b.n	800452a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80de 	beq.w	8004238 <HAL_UART_IRQHandler+0x22c>
 800407c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800408c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80d1 	beq.w	8004238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_UART_IRQHandler+0xae>
 80040a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <HAL_UART_IRQHandler+0xd2>
 80040c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_UART_IRQHandler+0xf6>
 80040ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d011      	beq.n	8004132 <HAL_UART_IRQHandler+0x126>
 800410e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800411a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 81f2 	beq.w	8004520 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_UART_IRQHandler+0x14e>
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fb4d 	bl	80047f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b40      	cmp	r3, #64	@ 0x40
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <HAL_UART_IRQHandler+0x17a>
 800417e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d04f      	beq.n	8004226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa55 	bl	8004636 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b40      	cmp	r3, #64	@ 0x40
 8004198:	d141      	bne.n	800421e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1d9      	bne.n	800419a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d013      	beq.n	8004216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f2:	4a7e      	ldr	r2, [pc, #504]	@ (80043ec <HAL_UART_IRQHandler+0x3e0>)
 80041f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd fd24 	bl	8001c48 <HAL_DMA_Abort_IT>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004210:	4610      	mov	r0, r2
 8004212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e00e      	b.n	8004234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f99e 	bl	8004558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e00a      	b.n	8004234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f99a 	bl	8004558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e006      	b.n	8004234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f996 	bl	8004558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004232:	e175      	b.n	8004520 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	bf00      	nop
    return;
 8004236:	e173      	b.n	8004520 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	2b01      	cmp	r3, #1
 800423e:	f040 814f 	bne.w	80044e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8148 	beq.w	80044e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8141 	beq.w	80044e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427e:	2b40      	cmp	r3, #64	@ 0x40
 8004280:	f040 80b6 	bne.w	80043f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8145 	beq.w	8004524 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800429e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042a2:	429a      	cmp	r2, r3
 80042a4:	f080 813e 	bcs.w	8004524 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ba:	f000 8088 	beq.w	80043ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1d9      	bne.n	80042be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800431a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800432e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e1      	bne.n	800430a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3314      	adds	r3, #20
 800434c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3314      	adds	r3, #20
 8004366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800436a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800436c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e3      	bne.n	8004346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800439c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e3      	bne.n	800438c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fd fbcd 	bl	8001b68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8c1 	bl	800456c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ea:	e09b      	b.n	8004524 <HAL_UART_IRQHandler+0x518>
 80043ec:	080046fd 	.word	0x080046fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 808e 	beq.w	8004528 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800440c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8089 	beq.w	8004528 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800442c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800443a:	647a      	str	r2, [r7, #68]	@ 0x44
 800443c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3314      	adds	r3, #20
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	623b      	str	r3, [r7, #32]
   return(result);
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004472:	633a      	str	r2, [r7, #48]	@ 0x30
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e3      	bne.n	800444e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0310 	bic.w	r3, r3, #16
 80044aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044b8:	61fa      	str	r2, [r7, #28]
 80044ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	617b      	str	r3, [r7, #20]
   return(result);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e3      	bne.n	8004494 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f847 	bl	800456c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044de:	e023      	b.n	8004528 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_UART_IRQHandler+0x4f4>
 80044ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f913 	bl	8004724 <UART_Transmit_IT>
    return;
 80044fe:	e014      	b.n	800452a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <HAL_UART_IRQHandler+0x51e>
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f953 	bl	80047c4 <UART_EndTransmit_IT>
    return;
 800451e:	e004      	b.n	800452a <HAL_UART_IRQHandler+0x51e>
    return;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <HAL_UART_IRQHandler+0x51e>
      return;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <HAL_UART_IRQHandler+0x51e>
      return;
 8004528:	bf00      	nop
  }
}
 800452a:	37e8      	adds	r7, #232	@ 0xe8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004594:	e03b      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800459c:	d037      	beq.n	800460e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fc ff5f 	bl	8001460 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e03a      	b.n	800462e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d023      	beq.n	800460e <UART_WaitOnFlagUntilTimeout+0x8a>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b80      	cmp	r3, #128	@ 0x80
 80045ca:	d020      	beq.n	800460e <UART_WaitOnFlagUntilTimeout+0x8a>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d01d      	beq.n	800460e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d116      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f81d 	bl	8004636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2208      	movs	r2, #8
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e00f      	b.n	800462e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	429a      	cmp	r2, r3
 800462a:	d0b4      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004636:	b480      	push	{r7}
 8004638:	b095      	sub	sp, #84	@ 0x54
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800465e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004664:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	61fb      	str	r3, [r7, #28]
   return(result);
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d119      	bne.n	80046e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0310 	bic.w	r3, r3, #16
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ce:	61ba      	str	r2, [r7, #24]
 80046d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	613b      	str	r3, [r7, #16]
   return(result);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e5      	bne.n	80046ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046f0:	bf00      	nop
 80046f2:	3754      	adds	r7, #84	@ 0x54
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ff1e 	bl	8004558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b21      	cmp	r3, #33	@ 0x21
 8004736:	d13e      	bne.n	80047b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004740:	d114      	bne.n	800476c <UART_Transmit_IT+0x48>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d110      	bne.n	800476c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800475e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	1c9a      	adds	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]
 800476a:	e008      	b.n	800477e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	1c59      	adds	r1, r3, #1
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6211      	str	r1, [r2, #32]
 8004776:	781a      	ldrb	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29b      	uxth	r3, r3
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4619      	mov	r1, r3
 800478c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10f      	bne.n	80047b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fea3 	bl	8004530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08c      	sub	sp, #48	@ 0x30
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b22      	cmp	r3, #34	@ 0x22
 8004806:	f040 80ae 	bne.w	8004966 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	d117      	bne.n	8004844 <UART_Receive_IT+0x50>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d113      	bne.n	8004844 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	b29a      	uxth	r2, r3
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
 8004842:	e026      	b.n	8004892 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004856:	d007      	beq.n	8004868 <UART_Receive_IT+0x74>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <UART_Receive_IT+0x82>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e008      	b.n	8004888 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d15d      	bne.n	8004962 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0220 	bic.w	r2, r2, #32
 80048b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d135      	bne.n	8004958 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	613b      	str	r3, [r7, #16]
   return(result);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f023 0310 	bic.w	r3, r3, #16
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	623a      	str	r2, [r7, #32]
 8004914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	69f9      	ldr	r1, [r7, #28]
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b10      	cmp	r3, #16
 8004932:	d10a      	bne.n	800494a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fe0b 	bl	800456c <HAL_UARTEx_RxEventCallback>
 8004956:	e002      	b.n	800495e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fdf3 	bl	8004544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e002      	b.n	8004968 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	e000      	b.n	8004968 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3730      	adds	r7, #48	@ 0x30
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004974:	b0c0      	sub	sp, #256	@ 0x100
 8004976:	af00      	add	r7, sp, #0
 8004978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	68d9      	ldr	r1, [r3, #12]
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	ea40 0301 	orr.w	r3, r0, r1
 8004998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049c8:	f021 010c 	bic.w	r1, r1, #12
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049d6:	430b      	orrs	r3, r1
 80049d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	6999      	ldr	r1, [r3, #24]
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	ea40 0301 	orr.w	r3, r0, r1
 80049f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b8f      	ldr	r3, [pc, #572]	@ (8004c3c <UART_SetConfig+0x2cc>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d005      	beq.n	8004a10 <UART_SetConfig+0xa0>
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c40 <UART_SetConfig+0x2d0>)
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d104      	bne.n	8004a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a10:	f7fd fd34 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8004a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a18:	e003      	b.n	8004a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fd fd1b 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2c:	f040 810c 	bne.w	8004c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	1891      	adds	r1, r2, r2
 8004a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a4a:	415b      	adcs	r3, r3
 8004a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a52:	4621      	mov	r1, r4
 8004a54:	eb12 0801 	adds.w	r8, r2, r1
 8004a58:	4629      	mov	r1, r5
 8004a5a:	eb43 0901 	adc.w	r9, r3, r1
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a72:	4690      	mov	r8, r2
 8004a74:	4699      	mov	r9, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	eb18 0303 	adds.w	r3, r8, r3
 8004a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a80:	462b      	mov	r3, r5
 8004a82:	eb49 0303 	adc.w	r3, r9, r3
 8004a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	18db      	adds	r3, r3, r3
 8004aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	eb42 0303 	adc.w	r3, r2, r3
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ab4:	f7fb fc04 	bl	80002c0 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4b61      	ldr	r3, [pc, #388]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011c      	lsls	r4, r3, #4
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ae8:	4641      	mov	r1, r8
 8004aea:	eb12 0a01 	adds.w	sl, r2, r1
 8004aee:	4649      	mov	r1, r9
 8004af0:	eb43 0b01 	adc.w	fp, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b08:	4692      	mov	sl, r2
 8004b0a:	469b      	mov	fp, r3
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b16:	464b      	mov	r3, r9
 8004b18:	eb4b 0303 	adc.w	r3, fp, r3
 8004b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b34:	460b      	mov	r3, r1
 8004b36:	18db      	adds	r3, r3, r3
 8004b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b4a:	f7fb fbb9 	bl	80002c0 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004b56:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2264      	movs	r2, #100	@ 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	1acb      	subs	r3, r1, r3
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b6a:	4b36      	ldr	r3, [pc, #216]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b78:	441c      	add	r4, r3
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b94:	415b      	adcs	r3, r3
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	18db      	adds	r3, r3, r3
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c06:	f7fb fb5b 	bl	80002c0 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	@ 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	3332      	adds	r3, #50	@ 0x32
 8004c22:	4a08      	ldr	r2, [pc, #32]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4422      	add	r2, r4
 8004c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c38:	e106      	b.n	8004e48 <UART_SetConfig+0x4d8>
 8004c3a:	bf00      	nop
 8004c3c:	40011000 	.word	0x40011000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	6239      	str	r1, [r7, #32]
 8004c62:	415b      	adcs	r3, r3
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1854      	adds	r4, r2, r1
 8004c6e:	4649      	mov	r1, r9
 8004c70:	eb43 0501 	adc.w	r5, r3, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	00eb      	lsls	r3, r5, #3
 8004c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c82:	00e2      	lsls	r2, r4, #3
 8004c84:	4614      	mov	r4, r2
 8004c86:	461d      	mov	r5, r3
 8004c88:	4643      	mov	r3, r8
 8004c8a:	18e3      	adds	r3, r4, r3
 8004c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c90:	464b      	mov	r3, r9
 8004c92:	eb45 0303 	adc.w	r3, r5, r3
 8004c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	008b      	lsls	r3, r1, #2
 8004cba:	4621      	mov	r1, r4
 8004cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	008a      	lsls	r2, r1, #2
 8004cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cc8:	f7fb fafa 	bl	80002c0 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4b60      	ldr	r3, [pc, #384]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	011c      	lsls	r4, r3, #4
 8004cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	61b9      	str	r1, [r7, #24]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	1851      	adds	r1, r2, r1
 8004d00:	6139      	str	r1, [r7, #16]
 8004d02:	4649      	mov	r1, r9
 8004d04:	414b      	adcs	r3, r1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d14:	4659      	mov	r1, fp
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1e:	4651      	mov	r1, sl
 8004d20:	00ca      	lsls	r2, r1, #3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	4642      	mov	r2, r8
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d30:	464b      	mov	r3, r9
 8004d32:	460a      	mov	r2, r1
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d54:	4649      	mov	r1, r9
 8004d56:	008b      	lsls	r3, r1, #2
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5e:	4641      	mov	r1, r8
 8004d60:	008a      	lsls	r2, r1, #2
 8004d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d66:	f7fb faab 	bl	80002c0 <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004d72:	fba3 2301 	umull	r2, r3, r3, r1
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2264      	movs	r2, #100	@ 0x64
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	1acb      	subs	r3, r1, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	3332      	adds	r3, #50	@ 0x32
 8004d84:	4a33      	ldr	r2, [pc, #204]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d90:	441c      	add	r4, r3
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	415b      	adcs	r3, r3
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db0:	4641      	mov	r1, r8
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	4649      	mov	r1, r9
 8004db8:	414b      	adcs	r3, r1
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dc8:	4659      	mov	r1, fp
 8004dca:	00cb      	lsls	r3, r1, #3
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	00ca      	lsls	r2, r1, #3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de2:	464b      	mov	r3, r9
 8004de4:	460a      	mov	r2, r1
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e04:	4649      	mov	r1, r9
 8004e06:	008b      	lsls	r3, r1, #2
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0e:	4641      	mov	r1, r8
 8004e10:	008a      	lsls	r2, r1, #2
 8004e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e16:	f7fb fa53 	bl	80002c0 <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	@ 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	3332      	adds	r3, #50	@ 0x32
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4422      	add	r2, r4
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <SysTick_Handler+0x1c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e60:	f000 f990 	bl	8005184 <xTaskGetSchedulerState>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e6a:	f000 f9f5 	bl	8005258 <xPortSysTickHandler>
  }
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	e000e010 	.word	0xe000e010

08004e78 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6892      	ldr	r2, [r2, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6852      	ldr	r2, [r2, #4]
 8004ee0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d103      	bne.n	8004ef4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800505c <xTaskIncrementTick+0x148>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 8090 	bne.w	8005048 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f28:	4b4d      	ldr	r3, [pc, #308]	@ (8005060 <xTaskIncrementTick+0x14c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f30:	4a4b      	ldr	r2, [pc, #300]	@ (8005060 <xTaskIncrementTick+0x14c>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d121      	bne.n	8004f80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f3c:	4b49      	ldr	r3, [pc, #292]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <xTaskIncrementTick+0x46>
 8004f5e:	4b41      	ldr	r3, [pc, #260]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <xTaskIncrementTick+0x154>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3e      	ldr	r2, [pc, #248]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005068 <xTaskIncrementTick+0x154>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b3e      	ldr	r3, [pc, #248]	@ (800506c <xTaskIncrementTick+0x158>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a3c      	ldr	r2, [pc, #240]	@ (800506c <xTaskIncrementTick+0x158>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	f000 f8e2 	bl	8005144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f80:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d349      	bcc.n	800501e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f94:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f9a:	601a      	str	r2, [r3, #0]
					break;
 8004f9c:	e03f      	b.n	800501e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d203      	bcs.n	8004fbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fbc:	e02f      	b.n	800501e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff ff7c 	bl	8004ec0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff73 	bl	8004ec0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fde:	4b25      	ldr	r3, [pc, #148]	@ (8005074 <xTaskIncrementTick+0x160>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d903      	bls.n	8004fee <xTaskIncrementTick+0xda>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	4a22      	ldr	r2, [pc, #136]	@ (8005074 <xTaskIncrementTick+0x160>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <xTaskIncrementTick+0x164>)
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7ff ff37 	bl	8004e78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <xTaskIncrementTick+0x168>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d3b8      	bcc.n	8004f8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501c:	e7b5      	b.n	8004f8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800501e:	4b17      	ldr	r3, [pc, #92]	@ (800507c <xTaskIncrementTick+0x168>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005024:	4914      	ldr	r1, [pc, #80]	@ (8005078 <xTaskIncrementTick+0x164>)
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d901      	bls.n	800503a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800503a:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <xTaskIncrementTick+0x16c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e004      	b.n	8005052 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005048:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <xTaskIncrementTick+0x170>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a0d      	ldr	r2, [pc, #52]	@ (8005084 <xTaskIncrementTick+0x170>)
 8005050:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005052:	697b      	ldr	r3, [r7, #20]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200006d0 	.word	0x200006d0
 8005060:	200006b4 	.word	0x200006b4
 8005064:	200006ac 	.word	0x200006ac
 8005068:	200006b0 	.word	0x200006b0
 800506c:	200006c8 	.word	0x200006c8
 8005070:	200006cc 	.word	0x200006cc
 8005074:	200006b8 	.word	0x200006b8
 8005078:	2000024c 	.word	0x2000024c
 800507c:	20000248 	.word	0x20000248
 8005080:	200006c4 	.word	0x200006c4
 8005084:	200006c0 	.word	0x200006c0

08005088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <vTaskSwitchContext+0xa8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005096:	4b27      	ldr	r3, [pc, #156]	@ (8005134 <vTaskSwitchContext+0xac>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800509c:	e042      	b.n	8005124 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800509e:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <vTaskSwitchContext+0xac>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <vTaskSwitchContext+0xb0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e011      	b.n	80050d0 <vTaskSwitchContext+0x48>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <vTaskSwitchContext+0x42>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <vTaskSwitchContext+0x3e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	491a      	ldr	r1, [pc, #104]	@ (800513c <vTaskSwitchContext+0xb4>)
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0e3      	beq.n	80050ac <vTaskSwitchContext+0x24>
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a13      	ldr	r2, [pc, #76]	@ (800513c <vTaskSwitchContext+0xb4>)
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3308      	adds	r3, #8
 8005106:	429a      	cmp	r2, r3
 8005108:	d104      	bne.n	8005114 <vTaskSwitchContext+0x8c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a09      	ldr	r2, [pc, #36]	@ (8005140 <vTaskSwitchContext+0xb8>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4a06      	ldr	r2, [pc, #24]	@ (8005138 <vTaskSwitchContext+0xb0>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	200006d0 	.word	0x200006d0
 8005134:	200006c4 	.word	0x200006c4
 8005138:	200006b8 	.word	0x200006b8
 800513c:	2000024c 	.word	0x2000024c
 8005140:	20000248 	.word	0x20000248

08005144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <prvResetNextTaskUnblockTime+0x38>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005154:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <prvResetNextTaskUnblockTime+0x3c>)
 8005156:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800515a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800515c:	e008      	b.n	8005170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515e:	4b07      	ldr	r3, [pc, #28]	@ (800517c <prvResetNextTaskUnblockTime+0x38>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <prvResetNextTaskUnblockTime+0x3c>)
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	200006ac 	.word	0x200006ac
 8005180:	200006cc 	.word	0x200006cc

08005184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <xTaskGetSchedulerState+0x34>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005192:	2301      	movs	r3, #1
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	e008      	b.n	80051aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005198:	4b08      	ldr	r3, [pc, #32]	@ (80051bc <xTaskGetSchedulerState+0x38>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051a0:	2302      	movs	r3, #2
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	e001      	b.n	80051aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051aa:	687b      	ldr	r3, [r7, #4]
	}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	200006bc 	.word	0x200006bc
 80051bc:	200006d0 	.word	0x200006d0

080051c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <pxCurrentTCBConst2>)
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	6808      	ldr	r0, [r1, #0]
 80051c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	f380 8809 	msr	PSP, r0
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8811 	msr	BASEPRI, r0
 80051da:	4770      	bx	lr
 80051dc:	f3af 8000 	nop.w

080051e0 <pxCurrentTCBConst2>:
 80051e0:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
	...

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b15      	ldr	r3, [pc, #84]	@ (8005250 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f01e 0f10 	tst.w	lr, #16
 8005200:	bf08      	it	eq
 8005202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005214:	f380 8811 	msr	BASEPRI, r0
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f7ff ff32 	bl	8005088 <vTaskSwitchContext>
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f380 8811 	msr	BASEPRI, r0
 800522c:	bc09      	pop	{r0, r3}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	f01e 0f10 	tst.w	lr, #16
 800523a:	bf08      	it	eq
 800523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005240:	f380 8809 	msr	PSP, r0
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst>:
 8005250:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005272:	f7ff fe4f 	bl	8004f14 <xTaskIncrementTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <xPortSysTickHandler+0x40>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800528e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <siprintf>:
 800529c:	b40e      	push	{r1, r2, r3}
 800529e:	b500      	push	{lr}
 80052a0:	b09c      	sub	sp, #112	@ 0x70
 80052a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80052a4:	9002      	str	r0, [sp, #8]
 80052a6:	9006      	str	r0, [sp, #24]
 80052a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052ac:	4809      	ldr	r0, [pc, #36]	@ (80052d4 <siprintf+0x38>)
 80052ae:	9107      	str	r1, [sp, #28]
 80052b0:	9104      	str	r1, [sp, #16]
 80052b2:	4909      	ldr	r1, [pc, #36]	@ (80052d8 <siprintf+0x3c>)
 80052b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	a902      	add	r1, sp, #8
 80052c0:	f000 f9f2 	bl	80056a8 <_svfiprintf_r>
 80052c4:	9b02      	ldr	r3, [sp, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	b01c      	add	sp, #112	@ 0x70
 80052cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d0:	b003      	add	sp, #12
 80052d2:	4770      	bx	lr
 80052d4:	20000018 	.word	0x20000018
 80052d8:	ffff0208 	.word	0xffff0208

080052dc <std>:
 80052dc:	2300      	movs	r3, #0
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	e9c0 3300 	strd	r3, r3, [r0]
 80052e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ea:	6083      	str	r3, [r0, #8]
 80052ec:	8181      	strh	r1, [r0, #12]
 80052ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f0:	81c2      	strh	r2, [r0, #14]
 80052f2:	6183      	str	r3, [r0, #24]
 80052f4:	4619      	mov	r1, r3
 80052f6:	2208      	movs	r2, #8
 80052f8:	305c      	adds	r0, #92	@ 0x5c
 80052fa:	f000 f937 	bl	800556c <memset>
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <std+0x58>)
 8005300:	6263      	str	r3, [r4, #36]	@ 0x24
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x5c>)
 8005304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x60>)
 8005308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x64>)
 800530c:	6323      	str	r3, [r4, #48]	@ 0x30
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x68>)
 8005310:	6224      	str	r4, [r4, #32]
 8005312:	429c      	cmp	r4, r3
 8005314:	d006      	beq.n	8005324 <std+0x48>
 8005316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531a:	4294      	cmp	r4, r2
 800531c:	d002      	beq.n	8005324 <std+0x48>
 800531e:	33d0      	adds	r3, #208	@ 0xd0
 8005320:	429c      	cmp	r4, r3
 8005322:	d105      	bne.n	8005330 <std+0x54>
 8005324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f000 b950 	b.w	80055d0 <__retarget_lock_init_recursive>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	080060f5 	.word	0x080060f5
 8005338:	08006117 	.word	0x08006117
 800533c:	0800614f 	.word	0x0800614f
 8005340:	08006173 	.word	0x08006173
 8005344:	200006d4 	.word	0x200006d4

08005348 <stdio_exit_handler>:
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <stdio_exit_handler+0xc>)
 800534a:	4903      	ldr	r1, [pc, #12]	@ (8005358 <stdio_exit_handler+0x10>)
 800534c:	4803      	ldr	r0, [pc, #12]	@ (800535c <stdio_exit_handler+0x14>)
 800534e:	f000 b869 	b.w	8005424 <_fwalk_sglue>
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
 8005358:	0800608d 	.word	0x0800608d
 800535c:	2000001c 	.word	0x2000001c

08005360 <cleanup_stdio>:
 8005360:	6841      	ldr	r1, [r0, #4]
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <cleanup_stdio+0x34>)
 8005364:	4299      	cmp	r1, r3
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	d001      	beq.n	8005370 <cleanup_stdio+0x10>
 800536c:	f000 fe8e 	bl	800608c <_fflush_r>
 8005370:	68a1      	ldr	r1, [r4, #8]
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <cleanup_stdio+0x38>)
 8005374:	4299      	cmp	r1, r3
 8005376:	d002      	beq.n	800537e <cleanup_stdio+0x1e>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fe87 	bl	800608c <_fflush_r>
 800537e:	68e1      	ldr	r1, [r4, #12]
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <cleanup_stdio+0x3c>)
 8005382:	4299      	cmp	r1, r3
 8005384:	d004      	beq.n	8005390 <cleanup_stdio+0x30>
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f000 be7e 	b.w	800608c <_fflush_r>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	bf00      	nop
 8005394:	200006d4 	.word	0x200006d4
 8005398:	2000073c 	.word	0x2000073c
 800539c:	200007a4 	.word	0x200007a4

080053a0 <global_stdio_init.part.0>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <global_stdio_init.part.0+0x30>)
 80053a4:	4c0b      	ldr	r4, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x34>)
 80053a6:	4a0c      	ldr	r2, [pc, #48]	@ (80053d8 <global_stdio_init.part.0+0x38>)
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	2200      	movs	r2, #0
 80053ae:	2104      	movs	r1, #4
 80053b0:	f7ff ff94 	bl	80052dc <std>
 80053b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053b8:	2201      	movs	r2, #1
 80053ba:	2109      	movs	r1, #9
 80053bc:	f7ff ff8e 	bl	80052dc <std>
 80053c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c4:	2202      	movs	r2, #2
 80053c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ca:	2112      	movs	r1, #18
 80053cc:	f7ff bf86 	b.w	80052dc <std>
 80053d0:	2000080c 	.word	0x2000080c
 80053d4:	200006d4 	.word	0x200006d4
 80053d8:	08005349 	.word	0x08005349

080053dc <__sfp_lock_acquire>:
 80053dc:	4801      	ldr	r0, [pc, #4]	@ (80053e4 <__sfp_lock_acquire+0x8>)
 80053de:	f000 b8f8 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000811 	.word	0x20000811

080053e8 <__sfp_lock_release>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__sfp_lock_release+0x8>)
 80053ea:	f000 b8f3 	b.w	80055d4 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	20000811 	.word	0x20000811

080053f4 <__sinit>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	f7ff fff0 	bl	80053dc <__sfp_lock_acquire>
 80053fc:	6a23      	ldr	r3, [r4, #32]
 80053fe:	b11b      	cbz	r3, 8005408 <__sinit+0x14>
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f7ff bff0 	b.w	80053e8 <__sfp_lock_release>
 8005408:	4b04      	ldr	r3, [pc, #16]	@ (800541c <__sinit+0x28>)
 800540a:	6223      	str	r3, [r4, #32]
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x2c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f5      	bne.n	8005400 <__sinit+0xc>
 8005414:	f7ff ffc4 	bl	80053a0 <global_stdio_init.part.0>
 8005418:	e7f2      	b.n	8005400 <__sinit+0xc>
 800541a:	bf00      	nop
 800541c:	08005361 	.word	0x08005361
 8005420:	2000080c 	.word	0x2000080c

08005424 <_fwalk_sglue>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4607      	mov	r7, r0
 800542a:	4688      	mov	r8, r1
 800542c:	4614      	mov	r4, r2
 800542e:	2600      	movs	r6, #0
 8005430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005434:	f1b9 0901 	subs.w	r9, r9, #1
 8005438:	d505      	bpl.n	8005446 <_fwalk_sglue+0x22>
 800543a:	6824      	ldr	r4, [r4, #0]
 800543c:	2c00      	cmp	r4, #0
 800543e:	d1f7      	bne.n	8005430 <_fwalk_sglue+0xc>
 8005440:	4630      	mov	r0, r6
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d907      	bls.n	800545c <_fwalk_sglue+0x38>
 800544c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005450:	3301      	adds	r3, #1
 8005452:	d003      	beq.n	800545c <_fwalk_sglue+0x38>
 8005454:	4629      	mov	r1, r5
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	4306      	orrs	r6, r0
 800545c:	3568      	adds	r5, #104	@ 0x68
 800545e:	e7e9      	b.n	8005434 <_fwalk_sglue+0x10>

08005460 <iprintf>:
 8005460:	b40f      	push	{r0, r1, r2, r3}
 8005462:	b507      	push	{r0, r1, r2, lr}
 8005464:	4906      	ldr	r1, [pc, #24]	@ (8005480 <iprintf+0x20>)
 8005466:	ab04      	add	r3, sp, #16
 8005468:	6808      	ldr	r0, [r1, #0]
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	6881      	ldr	r1, [r0, #8]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	f000 fa3f 	bl	80058f4 <_vfiprintf_r>
 8005476:	b003      	add	sp, #12
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	20000018 	.word	0x20000018

08005484 <_puts_r>:
 8005484:	6a03      	ldr	r3, [r0, #32]
 8005486:	b570      	push	{r4, r5, r6, lr}
 8005488:	6884      	ldr	r4, [r0, #8]
 800548a:	4605      	mov	r5, r0
 800548c:	460e      	mov	r6, r1
 800548e:	b90b      	cbnz	r3, 8005494 <_puts_r+0x10>
 8005490:	f7ff ffb0 	bl	80053f4 <__sinit>
 8005494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_puts_r+0x22>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0598      	lsls	r0, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_puts_r+0x22>
 80054a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a2:	f000 f896 	bl	80055d2 <__retarget_lock_acquire_recursive>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d502      	bpl.n	80054b2 <_puts_r+0x2e>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d135      	bne.n	800551e <_puts_r+0x9a>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fecd 	bl	8006254 <__swsetup_r>
 80054ba:	b380      	cbz	r0, 800551e <_puts_r+0x9a>
 80054bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07da      	lsls	r2, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x4e>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x4e>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f881 	bl	80055d4 <__retarget_lock_release_recursive>
 80054d2:	4628      	mov	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da04      	bge.n	80054e4 <_puts_r+0x60>
 80054da:	69a2      	ldr	r2, [r4, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	dc17      	bgt.n	8005510 <_puts_r+0x8c>
 80054e0:	290a      	cmp	r1, #10
 80054e2:	d015      	beq.n	8005510 <_puts_r+0x8c>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f2:	3b01      	subs	r3, #1
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d1ed      	bne.n	80054d6 <_puts_r+0x52>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da11      	bge.n	8005522 <_puts_r+0x9e>
 80054fe:	4622      	mov	r2, r4
 8005500:	210a      	movs	r1, #10
 8005502:	4628      	mov	r0, r5
 8005504:	f000 fe67 	bl	80061d6 <__swbuf_r>
 8005508:	3001      	adds	r0, #1
 800550a:	d0d7      	beq.n	80054bc <_puts_r+0x38>
 800550c:	250a      	movs	r5, #10
 800550e:	e7d7      	b.n	80054c0 <_puts_r+0x3c>
 8005510:	4622      	mov	r2, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 fe5f 	bl	80061d6 <__swbuf_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d1e7      	bne.n	80054ec <_puts_r+0x68>
 800551c:	e7ce      	b.n	80054bc <_puts_r+0x38>
 800551e:	3e01      	subs	r6, #1
 8005520:	e7e4      	b.n	80054ec <_puts_r+0x68>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	220a      	movs	r2, #10
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e7ee      	b.n	800550c <_puts_r+0x88>
	...

08005530 <puts>:
 8005530:	4b02      	ldr	r3, [pc, #8]	@ (800553c <puts+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f7ff bfa5 	b.w	8005484 <_puts_r>
 800553a:	bf00      	nop
 800553c:	20000018 	.word	0x20000018

08005540 <strstr>:
 8005540:	780a      	ldrb	r2, [r1, #0]
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	b96a      	cbnz	r2, 8005562 <strstr+0x22>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	429a      	cmp	r2, r3
 800554a:	d109      	bne.n	8005560 <strstr+0x20>
 800554c:	460c      	mov	r4, r1
 800554e:	4605      	mov	r5, r0
 8005550:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f6      	beq.n	8005546 <strstr+0x6>
 8005558:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800555c:	429e      	cmp	r6, r3
 800555e:	d0f7      	beq.n	8005550 <strstr+0x10>
 8005560:	3001      	adds	r0, #1
 8005562:	7803      	ldrb	r3, [r0, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ef      	bne.n	8005548 <strstr+0x8>
 8005568:	4618      	mov	r0, r3
 800556a:	e7ec      	b.n	8005546 <strstr+0x6>

0800556c <memset>:
 800556c:	4402      	add	r2, r0
 800556e:	4603      	mov	r3, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <__errno>:
 800557c:	4b01      	ldr	r3, [pc, #4]	@ (8005584 <__errno+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4d0d      	ldr	r5, [pc, #52]	@ (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	@ (80055c4 <__libc_init_array+0x3c>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2600      	movs	r6, #0
 8005594:	42a6      	cmp	r6, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4d0b      	ldr	r5, [pc, #44]	@ (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	@ (80055cc <__libc_init_array+0x44>)
 800559c:	f000 fff6 	bl	800658c <_init>
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2600      	movs	r6, #0
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b0:	4798      	blx	r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ba:	4798      	blx	r3
 80055bc:	3601      	adds	r6, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	080068cc 	.word	0x080068cc
 80055c4:	080068cc 	.word	0x080068cc
 80055c8:	080068cc 	.word	0x080068cc
 80055cc:	080068d0 	.word	0x080068d0

080055d0 <__retarget_lock_init_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_acquire_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <__retarget_lock_release_recursive>:
 80055d4:	4770      	bx	lr

080055d6 <memcpy>:
 80055d6:	440a      	add	r2, r1
 80055d8:	4291      	cmp	r1, r2
 80055da:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055de:	d100      	bne.n	80055e2 <memcpy+0xc>
 80055e0:	4770      	bx	lr
 80055e2:	b510      	push	{r4, lr}
 80055e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ec:	4291      	cmp	r1, r2
 80055ee:	d1f9      	bne.n	80055e4 <memcpy+0xe>
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__ssputs_r>:
 80055f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f6:	688e      	ldr	r6, [r1, #8]
 80055f8:	461f      	mov	r7, r3
 80055fa:	42be      	cmp	r6, r7
 80055fc:	680b      	ldr	r3, [r1, #0]
 80055fe:	4682      	mov	sl, r0
 8005600:	460c      	mov	r4, r1
 8005602:	4690      	mov	r8, r2
 8005604:	d82d      	bhi.n	8005662 <__ssputs_r+0x70>
 8005606:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800560a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800560e:	d026      	beq.n	800565e <__ssputs_r+0x6c>
 8005610:	6965      	ldr	r5, [r4, #20]
 8005612:	6909      	ldr	r1, [r1, #16]
 8005614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005618:	eba3 0901 	sub.w	r9, r3, r1
 800561c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005620:	1c7b      	adds	r3, r7, #1
 8005622:	444b      	add	r3, r9
 8005624:	106d      	asrs	r5, r5, #1
 8005626:	429d      	cmp	r5, r3
 8005628:	bf38      	it	cc
 800562a:	461d      	movcc	r5, r3
 800562c:	0553      	lsls	r3, r2, #21
 800562e:	d527      	bpl.n	8005680 <__ssputs_r+0x8e>
 8005630:	4629      	mov	r1, r5
 8005632:	f000 fa99 	bl	8005b68 <_malloc_r>
 8005636:	4606      	mov	r6, r0
 8005638:	b360      	cbz	r0, 8005694 <__ssputs_r+0xa2>
 800563a:	6921      	ldr	r1, [r4, #16]
 800563c:	464a      	mov	r2, r9
 800563e:	f7ff ffca 	bl	80055d6 <memcpy>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	6126      	str	r6, [r4, #16]
 8005650:	6165      	str	r5, [r4, #20]
 8005652:	444e      	add	r6, r9
 8005654:	eba5 0509 	sub.w	r5, r5, r9
 8005658:	6026      	str	r6, [r4, #0]
 800565a:	60a5      	str	r5, [r4, #8]
 800565c:	463e      	mov	r6, r7
 800565e:	42be      	cmp	r6, r7
 8005660:	d900      	bls.n	8005664 <__ssputs_r+0x72>
 8005662:	463e      	mov	r6, r7
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	4632      	mov	r2, r6
 8005668:	4641      	mov	r1, r8
 800566a:	f000 feab 	bl	80063c4 <memmove>
 800566e:	68a3      	ldr	r3, [r4, #8]
 8005670:	1b9b      	subs	r3, r3, r6
 8005672:	60a3      	str	r3, [r4, #8]
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	4433      	add	r3, r6
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	2000      	movs	r0, #0
 800567c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005680:	462a      	mov	r2, r5
 8005682:	f000 fd7a 	bl	800617a <_realloc_r>
 8005686:	4606      	mov	r6, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	d1e0      	bne.n	800564e <__ssputs_r+0x5c>
 800568c:	6921      	ldr	r1, [r4, #16]
 800568e:	4650      	mov	r0, sl
 8005690:	f000 ff2a 	bl	80064e8 <_free_r>
 8005694:	230c      	movs	r3, #12
 8005696:	f8ca 3000 	str.w	r3, [sl]
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a6:	e7e9      	b.n	800567c <__ssputs_r+0x8a>

080056a8 <_svfiprintf_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	4698      	mov	r8, r3
 80056ae:	898b      	ldrh	r3, [r1, #12]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	b09d      	sub	sp, #116	@ 0x74
 80056b4:	4607      	mov	r7, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	d510      	bpl.n	80056de <_svfiprintf_r+0x36>
 80056bc:	690b      	ldr	r3, [r1, #16]
 80056be:	b973      	cbnz	r3, 80056de <_svfiprintf_r+0x36>
 80056c0:	2140      	movs	r1, #64	@ 0x40
 80056c2:	f000 fa51 	bl	8005b68 <_malloc_r>
 80056c6:	6028      	str	r0, [r5, #0]
 80056c8:	6128      	str	r0, [r5, #16]
 80056ca:	b930      	cbnz	r0, 80056da <_svfiprintf_r+0x32>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056d4:	b01d      	add	sp, #116	@ 0x74
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	2340      	movs	r3, #64	@ 0x40
 80056dc:	616b      	str	r3, [r5, #20]
 80056de:	2300      	movs	r3, #0
 80056e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e2:	2320      	movs	r3, #32
 80056e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ec:	2330      	movs	r3, #48	@ 0x30
 80056ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800588c <_svfiprintf_r+0x1e4>
 80056f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056f6:	f04f 0901 	mov.w	r9, #1
 80056fa:	4623      	mov	r3, r4
 80056fc:	469a      	mov	sl, r3
 80056fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005702:	b10a      	cbz	r2, 8005708 <_svfiprintf_r+0x60>
 8005704:	2a25      	cmp	r2, #37	@ 0x25
 8005706:	d1f9      	bne.n	80056fc <_svfiprintf_r+0x54>
 8005708:	ebba 0b04 	subs.w	fp, sl, r4
 800570c:	d00b      	beq.n	8005726 <_svfiprintf_r+0x7e>
 800570e:	465b      	mov	r3, fp
 8005710:	4622      	mov	r2, r4
 8005712:	4629      	mov	r1, r5
 8005714:	4638      	mov	r0, r7
 8005716:	f7ff ff6c 	bl	80055f2 <__ssputs_r>
 800571a:	3001      	adds	r0, #1
 800571c:	f000 80a7 	beq.w	800586e <_svfiprintf_r+0x1c6>
 8005720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005722:	445a      	add	r2, fp
 8005724:	9209      	str	r2, [sp, #36]	@ 0x24
 8005726:	f89a 3000 	ldrb.w	r3, [sl]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 809f 	beq.w	800586e <_svfiprintf_r+0x1c6>
 8005730:	2300      	movs	r3, #0
 8005732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800573a:	f10a 0a01 	add.w	sl, sl, #1
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	9307      	str	r3, [sp, #28]
 8005742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005746:	931a      	str	r3, [sp, #104]	@ 0x68
 8005748:	4654      	mov	r4, sl
 800574a:	2205      	movs	r2, #5
 800574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005750:	484e      	ldr	r0, [pc, #312]	@ (800588c <_svfiprintf_r+0x1e4>)
 8005752:	f7fa fd65 	bl	8000220 <memchr>
 8005756:	9a04      	ldr	r2, [sp, #16]
 8005758:	b9d8      	cbnz	r0, 8005792 <_svfiprintf_r+0xea>
 800575a:	06d0      	lsls	r0, r2, #27
 800575c:	bf44      	itt	mi
 800575e:	2320      	movmi	r3, #32
 8005760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005764:	0711      	lsls	r1, r2, #28
 8005766:	bf44      	itt	mi
 8005768:	232b      	movmi	r3, #43	@ 0x2b
 800576a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800576e:	f89a 3000 	ldrb.w	r3, [sl]
 8005772:	2b2a      	cmp	r3, #42	@ 0x2a
 8005774:	d015      	beq.n	80057a2 <_svfiprintf_r+0xfa>
 8005776:	9a07      	ldr	r2, [sp, #28]
 8005778:	4654      	mov	r4, sl
 800577a:	2000      	movs	r0, #0
 800577c:	f04f 0c0a 	mov.w	ip, #10
 8005780:	4621      	mov	r1, r4
 8005782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005786:	3b30      	subs	r3, #48	@ 0x30
 8005788:	2b09      	cmp	r3, #9
 800578a:	d94b      	bls.n	8005824 <_svfiprintf_r+0x17c>
 800578c:	b1b0      	cbz	r0, 80057bc <_svfiprintf_r+0x114>
 800578e:	9207      	str	r2, [sp, #28]
 8005790:	e014      	b.n	80057bc <_svfiprintf_r+0x114>
 8005792:	eba0 0308 	sub.w	r3, r0, r8
 8005796:	fa09 f303 	lsl.w	r3, r9, r3
 800579a:	4313      	orrs	r3, r2
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	46a2      	mov	sl, r4
 80057a0:	e7d2      	b.n	8005748 <_svfiprintf_r+0xa0>
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	1d19      	adds	r1, r3, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	9103      	str	r1, [sp, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfbb      	ittet	lt
 80057ae:	425b      	neglt	r3, r3
 80057b0:	f042 0202 	orrlt.w	r2, r2, #2
 80057b4:	9307      	strge	r3, [sp, #28]
 80057b6:	9307      	strlt	r3, [sp, #28]
 80057b8:	bfb8      	it	lt
 80057ba:	9204      	strlt	r2, [sp, #16]
 80057bc:	7823      	ldrb	r3, [r4, #0]
 80057be:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c0:	d10a      	bne.n	80057d8 <_svfiprintf_r+0x130>
 80057c2:	7863      	ldrb	r3, [r4, #1]
 80057c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c6:	d132      	bne.n	800582e <_svfiprintf_r+0x186>
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	1d1a      	adds	r2, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	9203      	str	r2, [sp, #12]
 80057d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057d4:	3402      	adds	r4, #2
 80057d6:	9305      	str	r3, [sp, #20]
 80057d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800589c <_svfiprintf_r+0x1f4>
 80057dc:	7821      	ldrb	r1, [r4, #0]
 80057de:	2203      	movs	r2, #3
 80057e0:	4650      	mov	r0, sl
 80057e2:	f7fa fd1d 	bl	8000220 <memchr>
 80057e6:	b138      	cbz	r0, 80057f8 <_svfiprintf_r+0x150>
 80057e8:	9b04      	ldr	r3, [sp, #16]
 80057ea:	eba0 000a 	sub.w	r0, r0, sl
 80057ee:	2240      	movs	r2, #64	@ 0x40
 80057f0:	4082      	lsls	r2, r0
 80057f2:	4313      	orrs	r3, r2
 80057f4:	3401      	adds	r4, #1
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fc:	4824      	ldr	r0, [pc, #144]	@ (8005890 <_svfiprintf_r+0x1e8>)
 80057fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005802:	2206      	movs	r2, #6
 8005804:	f7fa fd0c 	bl	8000220 <memchr>
 8005808:	2800      	cmp	r0, #0
 800580a:	d036      	beq.n	800587a <_svfiprintf_r+0x1d2>
 800580c:	4b21      	ldr	r3, [pc, #132]	@ (8005894 <_svfiprintf_r+0x1ec>)
 800580e:	bb1b      	cbnz	r3, 8005858 <_svfiprintf_r+0x1b0>
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	3307      	adds	r3, #7
 8005814:	f023 0307 	bic.w	r3, r3, #7
 8005818:	3308      	adds	r3, #8
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581e:	4433      	add	r3, r6
 8005820:	9309      	str	r3, [sp, #36]	@ 0x24
 8005822:	e76a      	b.n	80056fa <_svfiprintf_r+0x52>
 8005824:	fb0c 3202 	mla	r2, ip, r2, r3
 8005828:	460c      	mov	r4, r1
 800582a:	2001      	movs	r0, #1
 800582c:	e7a8      	b.n	8005780 <_svfiprintf_r+0xd8>
 800582e:	2300      	movs	r3, #0
 8005830:	3401      	adds	r4, #1
 8005832:	9305      	str	r3, [sp, #20]
 8005834:	4619      	mov	r1, r3
 8005836:	f04f 0c0a 	mov.w	ip, #10
 800583a:	4620      	mov	r0, r4
 800583c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005840:	3a30      	subs	r2, #48	@ 0x30
 8005842:	2a09      	cmp	r2, #9
 8005844:	d903      	bls.n	800584e <_svfiprintf_r+0x1a6>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0c6      	beq.n	80057d8 <_svfiprintf_r+0x130>
 800584a:	9105      	str	r1, [sp, #20]
 800584c:	e7c4      	b.n	80057d8 <_svfiprintf_r+0x130>
 800584e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005852:	4604      	mov	r4, r0
 8005854:	2301      	movs	r3, #1
 8005856:	e7f0      	b.n	800583a <_svfiprintf_r+0x192>
 8005858:	ab03      	add	r3, sp, #12
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	462a      	mov	r2, r5
 800585e:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <_svfiprintf_r+0x1f0>)
 8005860:	a904      	add	r1, sp, #16
 8005862:	4638      	mov	r0, r7
 8005864:	f3af 8000 	nop.w
 8005868:	1c42      	adds	r2, r0, #1
 800586a:	4606      	mov	r6, r0
 800586c:	d1d6      	bne.n	800581c <_svfiprintf_r+0x174>
 800586e:	89ab      	ldrh	r3, [r5, #12]
 8005870:	065b      	lsls	r3, r3, #25
 8005872:	f53f af2d 	bmi.w	80056d0 <_svfiprintf_r+0x28>
 8005876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005878:	e72c      	b.n	80056d4 <_svfiprintf_r+0x2c>
 800587a:	ab03      	add	r3, sp, #12
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	462a      	mov	r2, r5
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <_svfiprintf_r+0x1f0>)
 8005882:	a904      	add	r1, sp, #16
 8005884:	4638      	mov	r0, r7
 8005886:	f000 fa5d 	bl	8005d44 <_printf_i>
 800588a:	e7ed      	b.n	8005868 <_svfiprintf_r+0x1c0>
 800588c:	08006890 	.word	0x08006890
 8005890:	0800689a 	.word	0x0800689a
 8005894:	00000000 	.word	0x00000000
 8005898:	080055f3 	.word	0x080055f3
 800589c:	08006896 	.word	0x08006896

080058a0 <__sfputc_r>:
 80058a0:	6893      	ldr	r3, [r2, #8]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	b410      	push	{r4}
 80058a8:	6093      	str	r3, [r2, #8]
 80058aa:	da08      	bge.n	80058be <__sfputc_r+0x1e>
 80058ac:	6994      	ldr	r4, [r2, #24]
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	db01      	blt.n	80058b6 <__sfputc_r+0x16>
 80058b2:	290a      	cmp	r1, #10
 80058b4:	d103      	bne.n	80058be <__sfputc_r+0x1e>
 80058b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ba:	f000 bc8c 	b.w	80061d6 <__swbuf_r>
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	1c58      	adds	r0, r3, #1
 80058c2:	6010      	str	r0, [r2, #0]
 80058c4:	7019      	strb	r1, [r3, #0]
 80058c6:	4608      	mov	r0, r1
 80058c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <__sfputs_r>:
 80058ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d0:	4606      	mov	r6, r0
 80058d2:	460f      	mov	r7, r1
 80058d4:	4614      	mov	r4, r2
 80058d6:	18d5      	adds	r5, r2, r3
 80058d8:	42ac      	cmp	r4, r5
 80058da:	d101      	bne.n	80058e0 <__sfputs_r+0x12>
 80058dc:	2000      	movs	r0, #0
 80058de:	e007      	b.n	80058f0 <__sfputs_r+0x22>
 80058e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e4:	463a      	mov	r2, r7
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff ffda 	bl	80058a0 <__sfputc_r>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d1f3      	bne.n	80058d8 <__sfputs_r+0xa>
 80058f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058f4 <_vfiprintf_r>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	460d      	mov	r5, r1
 80058fa:	b09d      	sub	sp, #116	@ 0x74
 80058fc:	4614      	mov	r4, r2
 80058fe:	4698      	mov	r8, r3
 8005900:	4606      	mov	r6, r0
 8005902:	b118      	cbz	r0, 800590c <_vfiprintf_r+0x18>
 8005904:	6a03      	ldr	r3, [r0, #32]
 8005906:	b90b      	cbnz	r3, 800590c <_vfiprintf_r+0x18>
 8005908:	f7ff fd74 	bl	80053f4 <__sinit>
 800590c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800590e:	07d9      	lsls	r1, r3, #31
 8005910:	d405      	bmi.n	800591e <_vfiprintf_r+0x2a>
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	059a      	lsls	r2, r3, #22
 8005916:	d402      	bmi.n	800591e <_vfiprintf_r+0x2a>
 8005918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800591a:	f7ff fe5a 	bl	80055d2 <__retarget_lock_acquire_recursive>
 800591e:	89ab      	ldrh	r3, [r5, #12]
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	d501      	bpl.n	8005928 <_vfiprintf_r+0x34>
 8005924:	692b      	ldr	r3, [r5, #16]
 8005926:	b99b      	cbnz	r3, 8005950 <_vfiprintf_r+0x5c>
 8005928:	4629      	mov	r1, r5
 800592a:	4630      	mov	r0, r6
 800592c:	f000 fc92 	bl	8006254 <__swsetup_r>
 8005930:	b170      	cbz	r0, 8005950 <_vfiprintf_r+0x5c>
 8005932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005934:	07dc      	lsls	r4, r3, #31
 8005936:	d504      	bpl.n	8005942 <_vfiprintf_r+0x4e>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800593c:	b01d      	add	sp, #116	@ 0x74
 800593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005942:	89ab      	ldrh	r3, [r5, #12]
 8005944:	0598      	lsls	r0, r3, #22
 8005946:	d4f7      	bmi.n	8005938 <_vfiprintf_r+0x44>
 8005948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800594a:	f7ff fe43 	bl	80055d4 <__retarget_lock_release_recursive>
 800594e:	e7f3      	b.n	8005938 <_vfiprintf_r+0x44>
 8005950:	2300      	movs	r3, #0
 8005952:	9309      	str	r3, [sp, #36]	@ 0x24
 8005954:	2320      	movs	r3, #32
 8005956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800595a:	f8cd 800c 	str.w	r8, [sp, #12]
 800595e:	2330      	movs	r3, #48	@ 0x30
 8005960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b10 <_vfiprintf_r+0x21c>
 8005964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005968:	f04f 0901 	mov.w	r9, #1
 800596c:	4623      	mov	r3, r4
 800596e:	469a      	mov	sl, r3
 8005970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005974:	b10a      	cbz	r2, 800597a <_vfiprintf_r+0x86>
 8005976:	2a25      	cmp	r2, #37	@ 0x25
 8005978:	d1f9      	bne.n	800596e <_vfiprintf_r+0x7a>
 800597a:	ebba 0b04 	subs.w	fp, sl, r4
 800597e:	d00b      	beq.n	8005998 <_vfiprintf_r+0xa4>
 8005980:	465b      	mov	r3, fp
 8005982:	4622      	mov	r2, r4
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff ffa1 	bl	80058ce <__sfputs_r>
 800598c:	3001      	adds	r0, #1
 800598e:	f000 80a7 	beq.w	8005ae0 <_vfiprintf_r+0x1ec>
 8005992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005994:	445a      	add	r2, fp
 8005996:	9209      	str	r2, [sp, #36]	@ 0x24
 8005998:	f89a 3000 	ldrb.w	r3, [sl]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 809f 	beq.w	8005ae0 <_vfiprintf_r+0x1ec>
 80059a2:	2300      	movs	r3, #0
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ac:	f10a 0a01 	add.w	sl, sl, #1
 80059b0:	9304      	str	r3, [sp, #16]
 80059b2:	9307      	str	r3, [sp, #28]
 80059b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80059ba:	4654      	mov	r4, sl
 80059bc:	2205      	movs	r2, #5
 80059be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c2:	4853      	ldr	r0, [pc, #332]	@ (8005b10 <_vfiprintf_r+0x21c>)
 80059c4:	f7fa fc2c 	bl	8000220 <memchr>
 80059c8:	9a04      	ldr	r2, [sp, #16]
 80059ca:	b9d8      	cbnz	r0, 8005a04 <_vfiprintf_r+0x110>
 80059cc:	06d1      	lsls	r1, r2, #27
 80059ce:	bf44      	itt	mi
 80059d0:	2320      	movmi	r3, #32
 80059d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059d6:	0713      	lsls	r3, r2, #28
 80059d8:	bf44      	itt	mi
 80059da:	232b      	movmi	r3, #43	@ 0x2b
 80059dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059e0:	f89a 3000 	ldrb.w	r3, [sl]
 80059e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059e6:	d015      	beq.n	8005a14 <_vfiprintf_r+0x120>
 80059e8:	9a07      	ldr	r2, [sp, #28]
 80059ea:	4654      	mov	r4, sl
 80059ec:	2000      	movs	r0, #0
 80059ee:	f04f 0c0a 	mov.w	ip, #10
 80059f2:	4621      	mov	r1, r4
 80059f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f8:	3b30      	subs	r3, #48	@ 0x30
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	d94b      	bls.n	8005a96 <_vfiprintf_r+0x1a2>
 80059fe:	b1b0      	cbz	r0, 8005a2e <_vfiprintf_r+0x13a>
 8005a00:	9207      	str	r2, [sp, #28]
 8005a02:	e014      	b.n	8005a2e <_vfiprintf_r+0x13a>
 8005a04:	eba0 0308 	sub.w	r3, r0, r8
 8005a08:	fa09 f303 	lsl.w	r3, r9, r3
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	46a2      	mov	sl, r4
 8005a12:	e7d2      	b.n	80059ba <_vfiprintf_r+0xc6>
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	1d19      	adds	r1, r3, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	9103      	str	r1, [sp, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bfbb      	ittet	lt
 8005a20:	425b      	neglt	r3, r3
 8005a22:	f042 0202 	orrlt.w	r2, r2, #2
 8005a26:	9307      	strge	r3, [sp, #28]
 8005a28:	9307      	strlt	r3, [sp, #28]
 8005a2a:	bfb8      	it	lt
 8005a2c:	9204      	strlt	r2, [sp, #16]
 8005a2e:	7823      	ldrb	r3, [r4, #0]
 8005a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a32:	d10a      	bne.n	8005a4a <_vfiprintf_r+0x156>
 8005a34:	7863      	ldrb	r3, [r4, #1]
 8005a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a38:	d132      	bne.n	8005aa0 <_vfiprintf_r+0x1ac>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	1d1a      	adds	r2, r3, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	9203      	str	r2, [sp, #12]
 8005a42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a46:	3402      	adds	r4, #2
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b20 <_vfiprintf_r+0x22c>
 8005a4e:	7821      	ldrb	r1, [r4, #0]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4650      	mov	r0, sl
 8005a54:	f7fa fbe4 	bl	8000220 <memchr>
 8005a58:	b138      	cbz	r0, 8005a6a <_vfiprintf_r+0x176>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	eba0 000a 	sub.w	r0, r0, sl
 8005a60:	2240      	movs	r2, #64	@ 0x40
 8005a62:	4082      	lsls	r2, r0
 8005a64:	4313      	orrs	r3, r2
 8005a66:	3401      	adds	r4, #1
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6e:	4829      	ldr	r0, [pc, #164]	@ (8005b14 <_vfiprintf_r+0x220>)
 8005a70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a74:	2206      	movs	r2, #6
 8005a76:	f7fa fbd3 	bl	8000220 <memchr>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d03f      	beq.n	8005afe <_vfiprintf_r+0x20a>
 8005a7e:	4b26      	ldr	r3, [pc, #152]	@ (8005b18 <_vfiprintf_r+0x224>)
 8005a80:	bb1b      	cbnz	r3, 8005aca <_vfiprintf_r+0x1d6>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a90:	443b      	add	r3, r7
 8005a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a94:	e76a      	b.n	800596c <_vfiprintf_r+0x78>
 8005a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	e7a8      	b.n	80059f2 <_vfiprintf_r+0xfe>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab2:	3a30      	subs	r2, #48	@ 0x30
 8005ab4:	2a09      	cmp	r2, #9
 8005ab6:	d903      	bls.n	8005ac0 <_vfiprintf_r+0x1cc>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0c6      	beq.n	8005a4a <_vfiprintf_r+0x156>
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	e7c4      	b.n	8005a4a <_vfiprintf_r+0x156>
 8005ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7f0      	b.n	8005aac <_vfiprintf_r+0x1b8>
 8005aca:	ab03      	add	r3, sp, #12
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <_vfiprintf_r+0x228>)
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f3af 8000 	nop.w
 8005ada:	4607      	mov	r7, r0
 8005adc:	1c78      	adds	r0, r7, #1
 8005ade:	d1d6      	bne.n	8005a8e <_vfiprintf_r+0x19a>
 8005ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ae2:	07d9      	lsls	r1, r3, #31
 8005ae4:	d405      	bmi.n	8005af2 <_vfiprintf_r+0x1fe>
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	059a      	lsls	r2, r3, #22
 8005aea:	d402      	bmi.n	8005af2 <_vfiprintf_r+0x1fe>
 8005aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005aee:	f7ff fd71 	bl	80055d4 <__retarget_lock_release_recursive>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	065b      	lsls	r3, r3, #25
 8005af6:	f53f af1f 	bmi.w	8005938 <_vfiprintf_r+0x44>
 8005afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005afc:	e71e      	b.n	800593c <_vfiprintf_r+0x48>
 8005afe:	ab03      	add	r3, sp, #12
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	462a      	mov	r2, r5
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <_vfiprintf_r+0x228>)
 8005b06:	a904      	add	r1, sp, #16
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 f91b 	bl	8005d44 <_printf_i>
 8005b0e:	e7e4      	b.n	8005ada <_vfiprintf_r+0x1e6>
 8005b10:	08006890 	.word	0x08006890
 8005b14:	0800689a 	.word	0x0800689a
 8005b18:	00000000 	.word	0x00000000
 8005b1c:	080058cf 	.word	0x080058cf
 8005b20:	08006896 	.word	0x08006896

08005b24 <sbrk_aligned>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4e0f      	ldr	r6, [pc, #60]	@ (8005b64 <sbrk_aligned+0x40>)
 8005b28:	460c      	mov	r4, r1
 8005b2a:	6831      	ldr	r1, [r6, #0]
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	b911      	cbnz	r1, 8005b36 <sbrk_aligned+0x12>
 8005b30:	f000 fcb8 	bl	80064a4 <_sbrk_r>
 8005b34:	6030      	str	r0, [r6, #0]
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 fcb3 	bl	80064a4 <_sbrk_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d103      	bne.n	8005b4a <sbrk_aligned+0x26>
 8005b42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b46:	4620      	mov	r0, r4
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
 8005b4a:	1cc4      	adds	r4, r0, #3
 8005b4c:	f024 0403 	bic.w	r4, r4, #3
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d0f8      	beq.n	8005b46 <sbrk_aligned+0x22>
 8005b54:	1a21      	subs	r1, r4, r0
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 fca4 	bl	80064a4 <_sbrk_r>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1f2      	bne.n	8005b46 <sbrk_aligned+0x22>
 8005b60:	e7ef      	b.n	8005b42 <sbrk_aligned+0x1e>
 8005b62:	bf00      	nop
 8005b64:	20000814 	.word	0x20000814

08005b68 <_malloc_r>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	1ccd      	adds	r5, r1, #3
 8005b6e:	f025 0503 	bic.w	r5, r5, #3
 8005b72:	3508      	adds	r5, #8
 8005b74:	2d0c      	cmp	r5, #12
 8005b76:	bf38      	it	cc
 8005b78:	250c      	movcc	r5, #12
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	db01      	blt.n	8005b84 <_malloc_r+0x1c>
 8005b80:	42a9      	cmp	r1, r5
 8005b82:	d904      	bls.n	8005b8e <_malloc_r+0x26>
 8005b84:	230c      	movs	r3, #12
 8005b86:	6033      	str	r3, [r6, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c64 <_malloc_r+0xfc>
 8005b92:	f000 faa3 	bl	80060dc <__malloc_lock>
 8005b96:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	bb44      	cbnz	r4, 8005bf0 <_malloc_r+0x88>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff ffbf 	bl	8005b24 <sbrk_aligned>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	4604      	mov	r4, r0
 8005baa:	d158      	bne.n	8005c5e <_malloc_r+0xf6>
 8005bac:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb0:	4627      	mov	r7, r4
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	d143      	bne.n	8005c3e <_malloc_r+0xd6>
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	d04b      	beq.n	8005c52 <_malloc_r+0xea>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	eb04 0903 	add.w	r9, r4, r3
 8005bc4:	f000 fc6e 	bl	80064a4 <_sbrk_r>
 8005bc8:	4581      	cmp	r9, r0
 8005bca:	d142      	bne.n	8005c52 <_malloc_r+0xea>
 8005bcc:	6821      	ldr	r1, [r4, #0]
 8005bce:	1a6d      	subs	r5, r5, r1
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ffa6 	bl	8005b24 <sbrk_aligned>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d03a      	beq.n	8005c52 <_malloc_r+0xea>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	442b      	add	r3, r5
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	f8d8 3000 	ldr.w	r3, [r8]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	bb62      	cbnz	r2, 8005c44 <_malloc_r+0xdc>
 8005bea:	f8c8 7000 	str.w	r7, [r8]
 8005bee:	e00f      	b.n	8005c10 <_malloc_r+0xa8>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	1b52      	subs	r2, r2, r5
 8005bf4:	d420      	bmi.n	8005c38 <_malloc_r+0xd0>
 8005bf6:	2a0b      	cmp	r2, #11
 8005bf8:	d917      	bls.n	8005c2a <_malloc_r+0xc2>
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	6025      	str	r5, [r4, #0]
 8005c00:	bf18      	it	ne
 8005c02:	6059      	strne	r1, [r3, #4]
 8005c04:	6863      	ldr	r3, [r4, #4]
 8005c06:	bf08      	it	eq
 8005c08:	f8c8 1000 	streq.w	r1, [r8]
 8005c0c:	5162      	str	r2, [r4, r5]
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 fa69 	bl	80060e8 <__malloc_unlock>
 8005c16:	f104 000b 	add.w	r0, r4, #11
 8005c1a:	1d23      	adds	r3, r4, #4
 8005c1c:	f020 0007 	bic.w	r0, r0, #7
 8005c20:	1ac2      	subs	r2, r0, r3
 8005c22:	bf1c      	itt	ne
 8005c24:	1a1b      	subne	r3, r3, r0
 8005c26:	50a3      	strne	r3, [r4, r2]
 8005c28:	e7af      	b.n	8005b8a <_malloc_r+0x22>
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	bf0c      	ite	eq
 8005c30:	f8c8 2000 	streq.w	r2, [r8]
 8005c34:	605a      	strne	r2, [r3, #4]
 8005c36:	e7eb      	b.n	8005c10 <_malloc_r+0xa8>
 8005c38:	4623      	mov	r3, r4
 8005c3a:	6864      	ldr	r4, [r4, #4]
 8005c3c:	e7ae      	b.n	8005b9c <_malloc_r+0x34>
 8005c3e:	463c      	mov	r4, r7
 8005c40:	687f      	ldr	r7, [r7, #4]
 8005c42:	e7b6      	b.n	8005bb2 <_malloc_r+0x4a>
 8005c44:	461a      	mov	r2, r3
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d1fb      	bne.n	8005c44 <_malloc_r+0xdc>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6053      	str	r3, [r2, #4]
 8005c50:	e7de      	b.n	8005c10 <_malloc_r+0xa8>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	4630      	mov	r0, r6
 8005c58:	f000 fa46 	bl	80060e8 <__malloc_unlock>
 8005c5c:	e794      	b.n	8005b88 <_malloc_r+0x20>
 8005c5e:	6005      	str	r5, [r0, #0]
 8005c60:	e7d6      	b.n	8005c10 <_malloc_r+0xa8>
 8005c62:	bf00      	nop
 8005c64:	20000818 	.word	0x20000818

08005c68 <_printf_common>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	4698      	mov	r8, r3
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bfb8      	it	lt
 8005c7c:	4613      	movlt	r3, r2
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c84:	4607      	mov	r7, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	b10a      	cbz	r2, 8005c8e <_printf_common+0x26>
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	0699      	lsls	r1, r3, #26
 8005c92:	bf42      	ittt	mi
 8005c94:	6833      	ldrmi	r3, [r6, #0]
 8005c96:	3302      	addmi	r3, #2
 8005c98:	6033      	strmi	r3, [r6, #0]
 8005c9a:	6825      	ldr	r5, [r4, #0]
 8005c9c:	f015 0506 	ands.w	r5, r5, #6
 8005ca0:	d106      	bne.n	8005cb0 <_printf_common+0x48>
 8005ca2:	f104 0a19 	add.w	sl, r4, #25
 8005ca6:	68e3      	ldr	r3, [r4, #12]
 8005ca8:	6832      	ldr	r2, [r6, #0]
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	dc26      	bgt.n	8005cfe <_printf_common+0x96>
 8005cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	3b00      	subs	r3, #0
 8005cb8:	bf18      	it	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	0692      	lsls	r2, r2, #26
 8005cbe:	d42b      	bmi.n	8005d18 <_printf_common+0xb0>
 8005cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c8      	blx	r9
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d01e      	beq.n	8005d0c <_printf_common+0xa4>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	6922      	ldr	r2, [r4, #16]
 8005cd2:	f003 0306 	and.w	r3, r3, #6
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	bf02      	ittt	eq
 8005cda:	68e5      	ldreq	r5, [r4, #12]
 8005cdc:	6833      	ldreq	r3, [r6, #0]
 8005cde:	1aed      	subeq	r5, r5, r3
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	bf0c      	ite	eq
 8005ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce8:	2500      	movne	r5, #0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bfc4      	itt	gt
 8005cee:	1a9b      	subgt	r3, r3, r2
 8005cf0:	18ed      	addgt	r5, r5, r3
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	341a      	adds	r4, #26
 8005cf6:	42b5      	cmp	r5, r6
 8005cf8:	d11a      	bne.n	8005d30 <_printf_common+0xc8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e008      	b.n	8005d10 <_printf_common+0xa8>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4641      	mov	r1, r8
 8005d04:	4638      	mov	r0, r7
 8005d06:	47c8      	blx	r9
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d103      	bne.n	8005d14 <_printf_common+0xac>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7c6      	b.n	8005ca6 <_printf_common+0x3e>
 8005d18:	18e1      	adds	r1, r4, r3
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	2030      	movs	r0, #48	@ 0x30
 8005d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d22:	4422      	add	r2, r4
 8005d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	e7c7      	b.n	8005cc0 <_printf_common+0x58>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	4641      	mov	r1, r8
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c8      	blx	r9
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0e6      	beq.n	8005d0c <_printf_common+0xa4>
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7d9      	b.n	8005cf6 <_printf_common+0x8e>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	7e0f      	ldrb	r7, [r1, #24]
 8005d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d4c:	2f78      	cmp	r7, #120	@ 0x78
 8005d4e:	4691      	mov	r9, r2
 8005d50:	4680      	mov	r8, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	469a      	mov	sl, r3
 8005d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d5a:	d807      	bhi.n	8005d6c <_printf_i+0x28>
 8005d5c:	2f62      	cmp	r7, #98	@ 0x62
 8005d5e:	d80a      	bhi.n	8005d76 <_printf_i+0x32>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	f000 80d2 	beq.w	8005f0a <_printf_i+0x1c6>
 8005d66:	2f58      	cmp	r7, #88	@ 0x58
 8005d68:	f000 80b9 	beq.w	8005ede <_printf_i+0x19a>
 8005d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d74:	e03a      	b.n	8005dec <_printf_i+0xa8>
 8005d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d7a:	2b15      	cmp	r3, #21
 8005d7c:	d8f6      	bhi.n	8005d6c <_printf_i+0x28>
 8005d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d84 <_printf_i+0x40>)
 8005d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005d6d 	.word	0x08005d6d
 8005d90:	08005d6d 	.word	0x08005d6d
 8005d94:	08005d6d 	.word	0x08005d6d
 8005d98:	08005d6d 	.word	0x08005d6d
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005d6d 	.word	0x08005d6d
 8005da4:	08005d6d 	.word	0x08005d6d
 8005da8:	08005d6d 	.word	0x08005d6d
 8005dac:	08005d6d 	.word	0x08005d6d
 8005db0:	08005ef1 	.word	0x08005ef1
 8005db4:	08005e1b 	.word	0x08005e1b
 8005db8:	08005eab 	.word	0x08005eab
 8005dbc:	08005d6d 	.word	0x08005d6d
 8005dc0:	08005d6d 	.word	0x08005d6d
 8005dc4:	08005f13 	.word	0x08005f13
 8005dc8:	08005d6d 	.word	0x08005d6d
 8005dcc:	08005e1b 	.word	0x08005e1b
 8005dd0:	08005d6d 	.word	0x08005d6d
 8005dd4:	08005d6d 	.word	0x08005d6d
 8005dd8:	08005eb3 	.word	0x08005eb3
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6032      	str	r2, [r6, #0]
 8005de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dec:	2301      	movs	r3, #1
 8005dee:	e09d      	b.n	8005f2c <_printf_i+0x1e8>
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	6031      	str	r1, [r6, #0]
 8005df8:	0606      	lsls	r6, r0, #24
 8005dfa:	d501      	bpl.n	8005e00 <_printf_i+0xbc>
 8005dfc:	681d      	ldr	r5, [r3, #0]
 8005dfe:	e003      	b.n	8005e08 <_printf_i+0xc4>
 8005e00:	0645      	lsls	r5, r0, #25
 8005e02:	d5fb      	bpl.n	8005dfc <_printf_i+0xb8>
 8005e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	da03      	bge.n	8005e14 <_printf_i+0xd0>
 8005e0c:	232d      	movs	r3, #45	@ 0x2d
 8005e0e:	426d      	negs	r5, r5
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e14:	4859      	ldr	r0, [pc, #356]	@ (8005f7c <_printf_i+0x238>)
 8005e16:	230a      	movs	r3, #10
 8005e18:	e011      	b.n	8005e3e <_printf_i+0xfa>
 8005e1a:	6821      	ldr	r1, [r4, #0]
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	0608      	lsls	r0, r1, #24
 8005e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e24:	d402      	bmi.n	8005e2c <_printf_i+0xe8>
 8005e26:	0649      	lsls	r1, r1, #25
 8005e28:	bf48      	it	mi
 8005e2a:	b2ad      	uxthmi	r5, r5
 8005e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e2e:	4853      	ldr	r0, [pc, #332]	@ (8005f7c <_printf_i+0x238>)
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	bf14      	ite	ne
 8005e34:	230a      	movne	r3, #10
 8005e36:	2308      	moveq	r3, #8
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e3e:	6866      	ldr	r6, [r4, #4]
 8005e40:	60a6      	str	r6, [r4, #8]
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	bfa2      	ittt	ge
 8005e46:	6821      	ldrge	r1, [r4, #0]
 8005e48:	f021 0104 	bicge.w	r1, r1, #4
 8005e4c:	6021      	strge	r1, [r4, #0]
 8005e4e:	b90d      	cbnz	r5, 8005e54 <_printf_i+0x110>
 8005e50:	2e00      	cmp	r6, #0
 8005e52:	d04b      	beq.n	8005eec <_printf_i+0x1a8>
 8005e54:	4616      	mov	r6, r2
 8005e56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e5e:	5dc7      	ldrb	r7, [r0, r7]
 8005e60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e64:	462f      	mov	r7, r5
 8005e66:	42bb      	cmp	r3, r7
 8005e68:	460d      	mov	r5, r1
 8005e6a:	d9f4      	bls.n	8005e56 <_printf_i+0x112>
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d10b      	bne.n	8005e88 <_printf_i+0x144>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	07df      	lsls	r7, r3, #31
 8005e74:	d508      	bpl.n	8005e88 <_printf_i+0x144>
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	6861      	ldr	r1, [r4, #4]
 8005e7a:	4299      	cmp	r1, r3
 8005e7c:	bfde      	ittt	le
 8005e7e:	2330      	movle	r3, #48	@ 0x30
 8005e80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e84:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e88:	1b92      	subs	r2, r2, r6
 8005e8a:	6122      	str	r2, [r4, #16]
 8005e8c:	f8cd a000 	str.w	sl, [sp]
 8005e90:	464b      	mov	r3, r9
 8005e92:	aa03      	add	r2, sp, #12
 8005e94:	4621      	mov	r1, r4
 8005e96:	4640      	mov	r0, r8
 8005e98:	f7ff fee6 	bl	8005c68 <_printf_common>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d14a      	bne.n	8005f36 <_printf_i+0x1f2>
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ea4:	b004      	add	sp, #16
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f043 0320 	orr.w	r3, r3, #32
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	4833      	ldr	r0, [pc, #204]	@ (8005f80 <_printf_i+0x23c>)
 8005eb4:	2778      	movs	r7, #120	@ 0x78
 8005eb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	6831      	ldr	r1, [r6, #0]
 8005ebe:	061f      	lsls	r7, r3, #24
 8005ec0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ec4:	d402      	bmi.n	8005ecc <_printf_i+0x188>
 8005ec6:	065f      	lsls	r7, r3, #25
 8005ec8:	bf48      	it	mi
 8005eca:	b2ad      	uxthmi	r5, r5
 8005ecc:	6031      	str	r1, [r6, #0]
 8005ece:	07d9      	lsls	r1, r3, #31
 8005ed0:	bf44      	itt	mi
 8005ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed6:	6023      	strmi	r3, [r4, #0]
 8005ed8:	b11d      	cbz	r5, 8005ee2 <_printf_i+0x19e>
 8005eda:	2310      	movs	r3, #16
 8005edc:	e7ac      	b.n	8005e38 <_printf_i+0xf4>
 8005ede:	4827      	ldr	r0, [pc, #156]	@ (8005f7c <_printf_i+0x238>)
 8005ee0:	e7e9      	b.n	8005eb6 <_printf_i+0x172>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	f023 0320 	bic.w	r3, r3, #32
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	e7f6      	b.n	8005eda <_printf_i+0x196>
 8005eec:	4616      	mov	r6, r2
 8005eee:	e7bd      	b.n	8005e6c <_printf_i+0x128>
 8005ef0:	6833      	ldr	r3, [r6, #0]
 8005ef2:	6825      	ldr	r5, [r4, #0]
 8005ef4:	6961      	ldr	r1, [r4, #20]
 8005ef6:	1d18      	adds	r0, r3, #4
 8005ef8:	6030      	str	r0, [r6, #0]
 8005efa:	062e      	lsls	r6, r5, #24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	d501      	bpl.n	8005f04 <_printf_i+0x1c0>
 8005f00:	6019      	str	r1, [r3, #0]
 8005f02:	e002      	b.n	8005f0a <_printf_i+0x1c6>
 8005f04:	0668      	lsls	r0, r5, #25
 8005f06:	d5fb      	bpl.n	8005f00 <_printf_i+0x1bc>
 8005f08:	8019      	strh	r1, [r3, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	4616      	mov	r6, r2
 8005f10:	e7bc      	b.n	8005e8c <_printf_i+0x148>
 8005f12:	6833      	ldr	r3, [r6, #0]
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	6032      	str	r2, [r6, #0]
 8005f18:	681e      	ldr	r6, [r3, #0]
 8005f1a:	6862      	ldr	r2, [r4, #4]
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7fa f97e 	bl	8000220 <memchr>
 8005f24:	b108      	cbz	r0, 8005f2a <_printf_i+0x1e6>
 8005f26:	1b80      	subs	r0, r0, r6
 8005f28:	6060      	str	r0, [r4, #4]
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f34:	e7aa      	b.n	8005e8c <_printf_i+0x148>
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	47d0      	blx	sl
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0ad      	beq.n	8005ea0 <_printf_i+0x15c>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	079b      	lsls	r3, r3, #30
 8005f48:	d413      	bmi.n	8005f72 <_printf_i+0x22e>
 8005f4a:	68e0      	ldr	r0, [r4, #12]
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	4298      	cmp	r0, r3
 8005f50:	bfb8      	it	lt
 8005f52:	4618      	movlt	r0, r3
 8005f54:	e7a6      	b.n	8005ea4 <_printf_i+0x160>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4632      	mov	r2, r6
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	47d0      	blx	sl
 8005f60:	3001      	adds	r0, #1
 8005f62:	d09d      	beq.n	8005ea0 <_printf_i+0x15c>
 8005f64:	3501      	adds	r5, #1
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	9903      	ldr	r1, [sp, #12]
 8005f6a:	1a5b      	subs	r3, r3, r1
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dcf2      	bgt.n	8005f56 <_printf_i+0x212>
 8005f70:	e7eb      	b.n	8005f4a <_printf_i+0x206>
 8005f72:	2500      	movs	r5, #0
 8005f74:	f104 0619 	add.w	r6, r4, #25
 8005f78:	e7f5      	b.n	8005f66 <_printf_i+0x222>
 8005f7a:	bf00      	nop
 8005f7c:	080068a1 	.word	0x080068a1
 8005f80:	080068b2 	.word	0x080068b2

08005f84 <__sflush_r>:
 8005f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8c:	0716      	lsls	r6, r2, #28
 8005f8e:	4605      	mov	r5, r0
 8005f90:	460c      	mov	r4, r1
 8005f92:	d454      	bmi.n	800603e <__sflush_r+0xba>
 8005f94:	684b      	ldr	r3, [r1, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	dc02      	bgt.n	8005fa0 <__sflush_r+0x1c>
 8005f9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dd48      	ble.n	8006032 <__sflush_r+0xae>
 8005fa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d045      	beq.n	8006032 <__sflush_r+0xae>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fac:	682f      	ldr	r7, [r5, #0]
 8005fae:	6a21      	ldr	r1, [r4, #32]
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	d030      	beq.n	8006016 <__sflush_r+0x92>
 8005fb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	0759      	lsls	r1, r3, #29
 8005fba:	d505      	bpl.n	8005fc8 <__sflush_r+0x44>
 8005fbc:	6863      	ldr	r3, [r4, #4]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fc2:	b10b      	cbz	r3, 8005fc8 <__sflush_r+0x44>
 8005fc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fcc:	6a21      	ldr	r1, [r4, #32]
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b0      	blx	r6
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	d106      	bne.n	8005fe6 <__sflush_r+0x62>
 8005fd8:	6829      	ldr	r1, [r5, #0]
 8005fda:	291d      	cmp	r1, #29
 8005fdc:	d82b      	bhi.n	8006036 <__sflush_r+0xb2>
 8005fde:	4a2a      	ldr	r2, [pc, #168]	@ (8006088 <__sflush_r+0x104>)
 8005fe0:	410a      	asrs	r2, r1
 8005fe2:	07d6      	lsls	r6, r2, #31
 8005fe4:	d427      	bmi.n	8006036 <__sflush_r+0xb2>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	6062      	str	r2, [r4, #4]
 8005fea:	04d9      	lsls	r1, r3, #19
 8005fec:	6922      	ldr	r2, [r4, #16]
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	d504      	bpl.n	8005ffc <__sflush_r+0x78>
 8005ff2:	1c42      	adds	r2, r0, #1
 8005ff4:	d101      	bne.n	8005ffa <__sflush_r+0x76>
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	b903      	cbnz	r3, 8005ffc <__sflush_r+0x78>
 8005ffa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ffe:	602f      	str	r7, [r5, #0]
 8006000:	b1b9      	cbz	r1, 8006032 <__sflush_r+0xae>
 8006002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006006:	4299      	cmp	r1, r3
 8006008:	d002      	beq.n	8006010 <__sflush_r+0x8c>
 800600a:	4628      	mov	r0, r5
 800600c:	f000 fa6c 	bl	80064e8 <_free_r>
 8006010:	2300      	movs	r3, #0
 8006012:	6363      	str	r3, [r4, #52]	@ 0x34
 8006014:	e00d      	b.n	8006032 <__sflush_r+0xae>
 8006016:	2301      	movs	r3, #1
 8006018:	4628      	mov	r0, r5
 800601a:	47b0      	blx	r6
 800601c:	4602      	mov	r2, r0
 800601e:	1c50      	adds	r0, r2, #1
 8006020:	d1c9      	bne.n	8005fb6 <__sflush_r+0x32>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0c6      	beq.n	8005fb6 <__sflush_r+0x32>
 8006028:	2b1d      	cmp	r3, #29
 800602a:	d001      	beq.n	8006030 <__sflush_r+0xac>
 800602c:	2b16      	cmp	r3, #22
 800602e:	d11e      	bne.n	800606e <__sflush_r+0xea>
 8006030:	602f      	str	r7, [r5, #0]
 8006032:	2000      	movs	r0, #0
 8006034:	e022      	b.n	800607c <__sflush_r+0xf8>
 8006036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603a:	b21b      	sxth	r3, r3
 800603c:	e01b      	b.n	8006076 <__sflush_r+0xf2>
 800603e:	690f      	ldr	r7, [r1, #16]
 8006040:	2f00      	cmp	r7, #0
 8006042:	d0f6      	beq.n	8006032 <__sflush_r+0xae>
 8006044:	0793      	lsls	r3, r2, #30
 8006046:	680e      	ldr	r6, [r1, #0]
 8006048:	bf08      	it	eq
 800604a:	694b      	ldreq	r3, [r1, #20]
 800604c:	600f      	str	r7, [r1, #0]
 800604e:	bf18      	it	ne
 8006050:	2300      	movne	r3, #0
 8006052:	eba6 0807 	sub.w	r8, r6, r7
 8006056:	608b      	str	r3, [r1, #8]
 8006058:	f1b8 0f00 	cmp.w	r8, #0
 800605c:	dde9      	ble.n	8006032 <__sflush_r+0xae>
 800605e:	6a21      	ldr	r1, [r4, #32]
 8006060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006062:	4643      	mov	r3, r8
 8006064:	463a      	mov	r2, r7
 8006066:	4628      	mov	r0, r5
 8006068:	47b0      	blx	r6
 800606a:	2800      	cmp	r0, #0
 800606c:	dc08      	bgt.n	8006080 <__sflush_r+0xfc>
 800606e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006080:	4407      	add	r7, r0
 8006082:	eba8 0800 	sub.w	r8, r8, r0
 8006086:	e7e7      	b.n	8006058 <__sflush_r+0xd4>
 8006088:	dfbffffe 	.word	0xdfbffffe

0800608c <_fflush_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	690b      	ldr	r3, [r1, #16]
 8006090:	4605      	mov	r5, r0
 8006092:	460c      	mov	r4, r1
 8006094:	b913      	cbnz	r3, 800609c <_fflush_r+0x10>
 8006096:	2500      	movs	r5, #0
 8006098:	4628      	mov	r0, r5
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	b118      	cbz	r0, 80060a6 <_fflush_r+0x1a>
 800609e:	6a03      	ldr	r3, [r0, #32]
 80060a0:	b90b      	cbnz	r3, 80060a6 <_fflush_r+0x1a>
 80060a2:	f7ff f9a7 	bl	80053f4 <__sinit>
 80060a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f3      	beq.n	8006096 <_fflush_r+0xa>
 80060ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060b0:	07d0      	lsls	r0, r2, #31
 80060b2:	d404      	bmi.n	80060be <_fflush_r+0x32>
 80060b4:	0599      	lsls	r1, r3, #22
 80060b6:	d402      	bmi.n	80060be <_fflush_r+0x32>
 80060b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ba:	f7ff fa8a 	bl	80055d2 <__retarget_lock_acquire_recursive>
 80060be:	4628      	mov	r0, r5
 80060c0:	4621      	mov	r1, r4
 80060c2:	f7ff ff5f 	bl	8005f84 <__sflush_r>
 80060c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060c8:	07da      	lsls	r2, r3, #31
 80060ca:	4605      	mov	r5, r0
 80060cc:	d4e4      	bmi.n	8006098 <_fflush_r+0xc>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	059b      	lsls	r3, r3, #22
 80060d2:	d4e1      	bmi.n	8006098 <_fflush_r+0xc>
 80060d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d6:	f7ff fa7d 	bl	80055d4 <__retarget_lock_release_recursive>
 80060da:	e7dd      	b.n	8006098 <_fflush_r+0xc>

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	@ (80060e4 <__malloc_lock+0x8>)
 80060de:	f7ff ba78 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000810 	.word	0x20000810

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	@ (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f7ff ba73 	b.w	80055d4 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000810 	.word	0x20000810

080060f4 <__sread>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	f000 f9c0 	bl	8006480 <_read_r>
 8006100:	2800      	cmp	r0, #0
 8006102:	bfab      	itete	ge
 8006104:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006106:	89a3      	ldrhlt	r3, [r4, #12]
 8006108:	181b      	addge	r3, r3, r0
 800610a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800610e:	bfac      	ite	ge
 8006110:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006112:	81a3      	strhlt	r3, [r4, #12]
 8006114:	bd10      	pop	{r4, pc}

08006116 <__swrite>:
 8006116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	898b      	ldrh	r3, [r1, #12]
 800611e:	05db      	lsls	r3, r3, #23
 8006120:	4605      	mov	r5, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4616      	mov	r6, r2
 8006126:	d505      	bpl.n	8006134 <__swrite+0x1e>
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	2302      	movs	r3, #2
 800612e:	2200      	movs	r2, #0
 8006130:	f000 f994 	bl	800645c <_lseek_r>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800613a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	4628      	mov	r0, r5
 8006146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	f000 b9bb 	b.w	80064c4 <_write_r>

0800614e <__sseek>:
 800614e:	b510      	push	{r4, lr}
 8006150:	460c      	mov	r4, r1
 8006152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006156:	f000 f981 	bl	800645c <_lseek_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	bf15      	itete	ne
 8006160:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006162:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006166:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800616a:	81a3      	strheq	r3, [r4, #12]
 800616c:	bf18      	it	ne
 800616e:	81a3      	strhne	r3, [r4, #12]
 8006170:	bd10      	pop	{r4, pc}

08006172 <__sclose>:
 8006172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006176:	f000 b93f 	b.w	80063f8 <_close_r>

0800617a <_realloc_r>:
 800617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617e:	4680      	mov	r8, r0
 8006180:	4615      	mov	r5, r2
 8006182:	460c      	mov	r4, r1
 8006184:	b921      	cbnz	r1, 8006190 <_realloc_r+0x16>
 8006186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800618a:	4611      	mov	r1, r2
 800618c:	f7ff bcec 	b.w	8005b68 <_malloc_r>
 8006190:	b92a      	cbnz	r2, 800619e <_realloc_r+0x24>
 8006192:	f000 f9a9 	bl	80064e8 <_free_r>
 8006196:	2400      	movs	r4, #0
 8006198:	4620      	mov	r0, r4
 800619a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800619e:	f000 f9ed 	bl	800657c <_malloc_usable_size_r>
 80061a2:	4285      	cmp	r5, r0
 80061a4:	4606      	mov	r6, r0
 80061a6:	d802      	bhi.n	80061ae <_realloc_r+0x34>
 80061a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061ac:	d8f4      	bhi.n	8006198 <_realloc_r+0x1e>
 80061ae:	4629      	mov	r1, r5
 80061b0:	4640      	mov	r0, r8
 80061b2:	f7ff fcd9 	bl	8005b68 <_malloc_r>
 80061b6:	4607      	mov	r7, r0
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d0ec      	beq.n	8006196 <_realloc_r+0x1c>
 80061bc:	42b5      	cmp	r5, r6
 80061be:	462a      	mov	r2, r5
 80061c0:	4621      	mov	r1, r4
 80061c2:	bf28      	it	cs
 80061c4:	4632      	movcs	r2, r6
 80061c6:	f7ff fa06 	bl	80055d6 <memcpy>
 80061ca:	4621      	mov	r1, r4
 80061cc:	4640      	mov	r0, r8
 80061ce:	f000 f98b 	bl	80064e8 <_free_r>
 80061d2:	463c      	mov	r4, r7
 80061d4:	e7e0      	b.n	8006198 <_realloc_r+0x1e>

080061d6 <__swbuf_r>:
 80061d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d8:	460e      	mov	r6, r1
 80061da:	4614      	mov	r4, r2
 80061dc:	4605      	mov	r5, r0
 80061de:	b118      	cbz	r0, 80061e8 <__swbuf_r+0x12>
 80061e0:	6a03      	ldr	r3, [r0, #32]
 80061e2:	b90b      	cbnz	r3, 80061e8 <__swbuf_r+0x12>
 80061e4:	f7ff f906 	bl	80053f4 <__sinit>
 80061e8:	69a3      	ldr	r3, [r4, #24]
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	071a      	lsls	r2, r3, #28
 80061f0:	d501      	bpl.n	80061f6 <__swbuf_r+0x20>
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	b943      	cbnz	r3, 8006208 <__swbuf_r+0x32>
 80061f6:	4621      	mov	r1, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	f000 f82b 	bl	8006254 <__swsetup_r>
 80061fe:	b118      	cbz	r0, 8006208 <__swbuf_r+0x32>
 8006200:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006204:	4638      	mov	r0, r7
 8006206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	6922      	ldr	r2, [r4, #16]
 800620c:	1a98      	subs	r0, r3, r2
 800620e:	6963      	ldr	r3, [r4, #20]
 8006210:	b2f6      	uxtb	r6, r6
 8006212:	4283      	cmp	r3, r0
 8006214:	4637      	mov	r7, r6
 8006216:	dc05      	bgt.n	8006224 <__swbuf_r+0x4e>
 8006218:	4621      	mov	r1, r4
 800621a:	4628      	mov	r0, r5
 800621c:	f7ff ff36 	bl	800608c <_fflush_r>
 8006220:	2800      	cmp	r0, #0
 8006222:	d1ed      	bne.n	8006200 <__swbuf_r+0x2a>
 8006224:	68a3      	ldr	r3, [r4, #8]
 8006226:	3b01      	subs	r3, #1
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	701e      	strb	r6, [r3, #0]
 8006232:	6962      	ldr	r2, [r4, #20]
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	429a      	cmp	r2, r3
 8006238:	d004      	beq.n	8006244 <__swbuf_r+0x6e>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	07db      	lsls	r3, r3, #31
 800623e:	d5e1      	bpl.n	8006204 <__swbuf_r+0x2e>
 8006240:	2e0a      	cmp	r6, #10
 8006242:	d1df      	bne.n	8006204 <__swbuf_r+0x2e>
 8006244:	4621      	mov	r1, r4
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff ff20 	bl	800608c <_fflush_r>
 800624c:	2800      	cmp	r0, #0
 800624e:	d0d9      	beq.n	8006204 <__swbuf_r+0x2e>
 8006250:	e7d6      	b.n	8006200 <__swbuf_r+0x2a>
	...

08006254 <__swsetup_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4b29      	ldr	r3, [pc, #164]	@ (80062fc <__swsetup_r+0xa8>)
 8006258:	4605      	mov	r5, r0
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	460c      	mov	r4, r1
 800625e:	b118      	cbz	r0, 8006268 <__swsetup_r+0x14>
 8006260:	6a03      	ldr	r3, [r0, #32]
 8006262:	b90b      	cbnz	r3, 8006268 <__swsetup_r+0x14>
 8006264:	f7ff f8c6 	bl	80053f4 <__sinit>
 8006268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626c:	0719      	lsls	r1, r3, #28
 800626e:	d422      	bmi.n	80062b6 <__swsetup_r+0x62>
 8006270:	06da      	lsls	r2, r3, #27
 8006272:	d407      	bmi.n	8006284 <__swsetup_r+0x30>
 8006274:	2209      	movs	r2, #9
 8006276:	602a      	str	r2, [r5, #0]
 8006278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006282:	e033      	b.n	80062ec <__swsetup_r+0x98>
 8006284:	0758      	lsls	r0, r3, #29
 8006286:	d512      	bpl.n	80062ae <__swsetup_r+0x5a>
 8006288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800628a:	b141      	cbz	r1, 800629e <__swsetup_r+0x4a>
 800628c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006290:	4299      	cmp	r1, r3
 8006292:	d002      	beq.n	800629a <__swsetup_r+0x46>
 8006294:	4628      	mov	r0, r5
 8006296:	f000 f927 	bl	80064e8 <_free_r>
 800629a:	2300      	movs	r3, #0
 800629c:	6363      	str	r3, [r4, #52]	@ 0x34
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	2300      	movs	r3, #0
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f043 0308 	orr.w	r3, r3, #8
 80062b4:	81a3      	strh	r3, [r4, #12]
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	b94b      	cbnz	r3, 80062ce <__swsetup_r+0x7a>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c4:	d003      	beq.n	80062ce <__swsetup_r+0x7a>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 f83f 	bl	800634c <__smakebuf_r>
 80062ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d2:	f013 0201 	ands.w	r2, r3, #1
 80062d6:	d00a      	beq.n	80062ee <__swsetup_r+0x9a>
 80062d8:	2200      	movs	r2, #0
 80062da:	60a2      	str	r2, [r4, #8]
 80062dc:	6962      	ldr	r2, [r4, #20]
 80062de:	4252      	negs	r2, r2
 80062e0:	61a2      	str	r2, [r4, #24]
 80062e2:	6922      	ldr	r2, [r4, #16]
 80062e4:	b942      	cbnz	r2, 80062f8 <__swsetup_r+0xa4>
 80062e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062ea:	d1c5      	bne.n	8006278 <__swsetup_r+0x24>
 80062ec:	bd38      	pop	{r3, r4, r5, pc}
 80062ee:	0799      	lsls	r1, r3, #30
 80062f0:	bf58      	it	pl
 80062f2:	6962      	ldrpl	r2, [r4, #20]
 80062f4:	60a2      	str	r2, [r4, #8]
 80062f6:	e7f4      	b.n	80062e2 <__swsetup_r+0x8e>
 80062f8:	2000      	movs	r0, #0
 80062fa:	e7f7      	b.n	80062ec <__swsetup_r+0x98>
 80062fc:	20000018 	.word	0x20000018

08006300 <__swhatbuf_r>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	460c      	mov	r4, r1
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	2900      	cmp	r1, #0
 800630a:	b096      	sub	sp, #88	@ 0x58
 800630c:	4615      	mov	r5, r2
 800630e:	461e      	mov	r6, r3
 8006310:	da0d      	bge.n	800632e <__swhatbuf_r+0x2e>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006318:	f04f 0100 	mov.w	r1, #0
 800631c:	bf14      	ite	ne
 800631e:	2340      	movne	r3, #64	@ 0x40
 8006320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006324:	2000      	movs	r0, #0
 8006326:	6031      	str	r1, [r6, #0]
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	b016      	add	sp, #88	@ 0x58
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	466a      	mov	r2, sp
 8006330:	f000 f872 	bl	8006418 <_fstat_r>
 8006334:	2800      	cmp	r0, #0
 8006336:	dbec      	blt.n	8006312 <__swhatbuf_r+0x12>
 8006338:	9901      	ldr	r1, [sp, #4]
 800633a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800633e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006342:	4259      	negs	r1, r3
 8006344:	4159      	adcs	r1, r3
 8006346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800634a:	e7eb      	b.n	8006324 <__swhatbuf_r+0x24>

0800634c <__smakebuf_r>:
 800634c:	898b      	ldrh	r3, [r1, #12]
 800634e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006350:	079d      	lsls	r5, r3, #30
 8006352:	4606      	mov	r6, r0
 8006354:	460c      	mov	r4, r1
 8006356:	d507      	bpl.n	8006368 <__smakebuf_r+0x1c>
 8006358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	2301      	movs	r3, #1
 8006362:	6163      	str	r3, [r4, #20]
 8006364:	b003      	add	sp, #12
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006368:	ab01      	add	r3, sp, #4
 800636a:	466a      	mov	r2, sp
 800636c:	f7ff ffc8 	bl	8006300 <__swhatbuf_r>
 8006370:	9f00      	ldr	r7, [sp, #0]
 8006372:	4605      	mov	r5, r0
 8006374:	4639      	mov	r1, r7
 8006376:	4630      	mov	r0, r6
 8006378:	f7ff fbf6 	bl	8005b68 <_malloc_r>
 800637c:	b948      	cbnz	r0, 8006392 <__smakebuf_r+0x46>
 800637e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006382:	059a      	lsls	r2, r3, #22
 8006384:	d4ee      	bmi.n	8006364 <__smakebuf_r+0x18>
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	f043 0302 	orr.w	r3, r3, #2
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	e7e2      	b.n	8006358 <__smakebuf_r+0xc>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	6020      	str	r0, [r4, #0]
 8006396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063a2:	b15b      	cbz	r3, 80063bc <__smakebuf_r+0x70>
 80063a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a8:	4630      	mov	r0, r6
 80063aa:	f000 f847 	bl	800643c <_isatty_r>
 80063ae:	b128      	cbz	r0, 80063bc <__smakebuf_r+0x70>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	431d      	orrs	r5, r3
 80063c0:	81a5      	strh	r5, [r4, #12]
 80063c2:	e7cf      	b.n	8006364 <__smakebuf_r+0x18>

080063c4 <memmove>:
 80063c4:	4288      	cmp	r0, r1
 80063c6:	b510      	push	{r4, lr}
 80063c8:	eb01 0402 	add.w	r4, r1, r2
 80063cc:	d902      	bls.n	80063d4 <memmove+0x10>
 80063ce:	4284      	cmp	r4, r0
 80063d0:	4623      	mov	r3, r4
 80063d2:	d807      	bhi.n	80063e4 <memmove+0x20>
 80063d4:	1e43      	subs	r3, r0, #1
 80063d6:	42a1      	cmp	r1, r4
 80063d8:	d008      	beq.n	80063ec <memmove+0x28>
 80063da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063e2:	e7f8      	b.n	80063d6 <memmove+0x12>
 80063e4:	4402      	add	r2, r0
 80063e6:	4601      	mov	r1, r0
 80063e8:	428a      	cmp	r2, r1
 80063ea:	d100      	bne.n	80063ee <memmove+0x2a>
 80063ec:	bd10      	pop	{r4, pc}
 80063ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063f6:	e7f7      	b.n	80063e8 <memmove+0x24>

080063f8 <_close_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d06      	ldr	r5, [pc, #24]	@ (8006414 <_close_r+0x1c>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fa fda9 	bl	8000f5a <_close>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_close_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_close_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	2000081c 	.word	0x2000081c

08006418 <_fstat_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d07      	ldr	r5, [pc, #28]	@ (8006438 <_fstat_r+0x20>)
 800641c:	2300      	movs	r3, #0
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	f7fa fda4 	bl	8000f72 <_fstat>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	d102      	bne.n	8006434 <_fstat_r+0x1c>
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	b103      	cbz	r3, 8006434 <_fstat_r+0x1c>
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	bd38      	pop	{r3, r4, r5, pc}
 8006436:	bf00      	nop
 8006438:	2000081c 	.word	0x2000081c

0800643c <_isatty_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d06      	ldr	r5, [pc, #24]	@ (8006458 <_isatty_r+0x1c>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fa fda3 	bl	8000f92 <_isatty>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_isatty_r+0x1a>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_isatty_r+0x1a>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	2000081c 	.word	0x2000081c

0800645c <_lseek_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4d07      	ldr	r5, [pc, #28]	@ (800647c <_lseek_r+0x20>)
 8006460:	4604      	mov	r4, r0
 8006462:	4608      	mov	r0, r1
 8006464:	4611      	mov	r1, r2
 8006466:	2200      	movs	r2, #0
 8006468:	602a      	str	r2, [r5, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	f7fa fd9c 	bl	8000fa8 <_lseek>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_lseek_r+0x1e>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_lseek_r+0x1e>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	2000081c 	.word	0x2000081c

08006480 <_read_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d07      	ldr	r5, [pc, #28]	@ (80064a0 <_read_r+0x20>)
 8006484:	4604      	mov	r4, r0
 8006486:	4608      	mov	r0, r1
 8006488:	4611      	mov	r1, r2
 800648a:	2200      	movs	r2, #0
 800648c:	602a      	str	r2, [r5, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f7fa fd46 	bl	8000f20 <_read>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_read_r+0x1e>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_read_r+0x1e>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	2000081c 	.word	0x2000081c

080064a4 <_sbrk_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d06      	ldr	r5, [pc, #24]	@ (80064c0 <_sbrk_r+0x1c>)
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	f7fa fd88 	bl	8000fc4 <_sbrk>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_sbrk_r+0x1a>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_sbrk_r+0x1a>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	2000081c 	.word	0x2000081c

080064c4 <_write_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4d07      	ldr	r5, [pc, #28]	@ (80064e4 <_write_r+0x20>)
 80064c8:	4604      	mov	r4, r0
 80064ca:	4608      	mov	r0, r1
 80064cc:	4611      	mov	r1, r2
 80064ce:	2200      	movs	r2, #0
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fa fc1e 	bl	8000d14 <_write>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_write_r+0x1e>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_write_r+0x1e>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	2000081c 	.word	0x2000081c

080064e8 <_free_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4605      	mov	r5, r0
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d041      	beq.n	8006574 <_free_r+0x8c>
 80064f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f4:	1f0c      	subs	r4, r1, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfb8      	it	lt
 80064fa:	18e4      	addlt	r4, r4, r3
 80064fc:	f7ff fdee 	bl	80060dc <__malloc_lock>
 8006500:	4a1d      	ldr	r2, [pc, #116]	@ (8006578 <_free_r+0x90>)
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	b933      	cbnz	r3, 8006514 <_free_r+0x2c>
 8006506:	6063      	str	r3, [r4, #4]
 8006508:	6014      	str	r4, [r2, #0]
 800650a:	4628      	mov	r0, r5
 800650c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006510:	f7ff bdea 	b.w	80060e8 <__malloc_unlock>
 8006514:	42a3      	cmp	r3, r4
 8006516:	d908      	bls.n	800652a <_free_r+0x42>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	1821      	adds	r1, r4, r0
 800651c:	428b      	cmp	r3, r1
 800651e:	bf01      	itttt	eq
 8006520:	6819      	ldreq	r1, [r3, #0]
 8006522:	685b      	ldreq	r3, [r3, #4]
 8006524:	1809      	addeq	r1, r1, r0
 8006526:	6021      	streq	r1, [r4, #0]
 8006528:	e7ed      	b.n	8006506 <_free_r+0x1e>
 800652a:	461a      	mov	r2, r3
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	b10b      	cbz	r3, 8006534 <_free_r+0x4c>
 8006530:	42a3      	cmp	r3, r4
 8006532:	d9fa      	bls.n	800652a <_free_r+0x42>
 8006534:	6811      	ldr	r1, [r2, #0]
 8006536:	1850      	adds	r0, r2, r1
 8006538:	42a0      	cmp	r0, r4
 800653a:	d10b      	bne.n	8006554 <_free_r+0x6c>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	4401      	add	r1, r0
 8006540:	1850      	adds	r0, r2, r1
 8006542:	4283      	cmp	r3, r0
 8006544:	6011      	str	r1, [r2, #0]
 8006546:	d1e0      	bne.n	800650a <_free_r+0x22>
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	6053      	str	r3, [r2, #4]
 800654e:	4408      	add	r0, r1
 8006550:	6010      	str	r0, [r2, #0]
 8006552:	e7da      	b.n	800650a <_free_r+0x22>
 8006554:	d902      	bls.n	800655c <_free_r+0x74>
 8006556:	230c      	movs	r3, #12
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	e7d6      	b.n	800650a <_free_r+0x22>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	bf04      	itt	eq
 8006564:	6819      	ldreq	r1, [r3, #0]
 8006566:	685b      	ldreq	r3, [r3, #4]
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	bf04      	itt	eq
 800656c:	1809      	addeq	r1, r1, r0
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	6054      	str	r4, [r2, #4]
 8006572:	e7ca      	b.n	800650a <_free_r+0x22>
 8006574:	bd38      	pop	{r3, r4, r5, pc}
 8006576:	bf00      	nop
 8006578:	20000818 	.word	0x20000818

0800657c <_malloc_usable_size_r>:
 800657c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006580:	1f18      	subs	r0, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfbc      	itt	lt
 8006586:	580b      	ldrlt	r3, [r1, r0]
 8006588:	18c0      	addlt	r0, r0, r3
 800658a:	4770      	bx	lr

0800658c <_init>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	bf00      	nop
 8006590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006592:	bc08      	pop	{r3}
 8006594:	469e      	mov	lr, r3
 8006596:	4770      	bx	lr

08006598 <_fini>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr
