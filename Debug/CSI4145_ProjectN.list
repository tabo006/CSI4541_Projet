
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c230  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000133c  0800c400  0800c400  0000d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d73c  0800d73c  0000f090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d73c  0800d73c  0000e73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d744  0800d744  0000f090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d744  0800d744  0000e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d748  0800d748  0000e748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800d74c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005160  20000090  0800d7dc  0000f090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051f0  0800d7dc  0000f1f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ec  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004df0  00000000  00000000  0002faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a8  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002832b  00000000  00000000  00037a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d2b  00000000  00000000  0005fd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed0af  00000000  00000000  00082a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016fb25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea0  00000000  00000000  0016fb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00177a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c3e8 	.word	0x0800c3e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800c3e8 	.word	0x0800c3e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <MX_ADC1_Init+0x9c>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <MX_ADC1_Init+0xa0>)
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dee:	f001 ffc1 	bl	8002d74 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 ffa4 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000e04:	2305      	movs	r3, #5
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000e0e:	f002 f993 	bl	8003138 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 ff94 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000ac 	.word	0x200000ac
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	0f000001 	.word	0x0f000001

08000e30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_ADC_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d127      	bne.n	8000ea2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_ADC_MspInit+0x84>)
 8000e9e:	f002 fced 	bl	800387c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012000 	.word	0x40012000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <send_AT_command+0x48>)
 8000ec8:	f00a f9f8 	bl	800b2bc <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff f99f 	bl	8000210 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <send_AT_command+0x4c>)
 8000ede:	f005 fec3 	bl	8006c68 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f000 f811 	bl	8000f0c <waitFor>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <send_AT_command+0x50>)
 8000ef4:	f00a f9e2 	bl	800b2bc <iprintf>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800c400 	.word	0x0800c400
 8000f04:	200006c0 	.word	0x200006c0
 8000f08:	0800c40c 	.word	0x0800c40c

08000f0c <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b6      	sub	sp, #216	@ 0xd8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	22c4      	movs	r2, #196	@ 0xc4
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a fa50 	bl	800b3c8 <memset>
    uint32_t startTick = HAL_GetTick();
 8000f28:	f001 fef4 	bl	8002d14 <HAL_GetTick>
 8000f2c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000f36:	e044      	b.n	8000fc2 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 8000f38:	f107 0208 	add.w	r2, r7, #8
 8000f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f40:	18d1      	adds	r1, r2, r3
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	2201      	movs	r2, #1
 8000f46:	4828      	ldr	r0, [pc, #160]	@ (8000fe8 <waitFor+0xdc>)
 8000f48:	f005 ff19 	bl	8006d7e <HAL_UART_Receive>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d137      	bne.n	8000fc2 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d007      	beq.n	8000f72 <waitFor+0x66>
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d11b      	bne.n	8000faa <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a fa08 	bl	800b39c <strstr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	@ (8000fec <waitFor+0xe0>)
 8000f9a:	f00a f98f 	bl	800b2bc <iprintf>
                    return 1;  // Found the expected response
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e01d      	b.n	8000fde <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fa8:	e00b      	b.n	8000fc2 <waitFor+0xb6>
            } else {
                index++;
 8000faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 8000fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fb8:	2bc6      	cmp	r3, #198	@ 0xc6
 8000fba:	d902      	bls.n	8000fc2 <waitFor+0xb6>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000fc2:	f001 fea7 	bl	8002d14 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8b1      	bhi.n	8000f38 <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <waitFor+0xe4>)
 8000fd8:	f00a f970 	bl	800b2bc <iprintf>
    return 0;  // Timeout reached without expected response
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	37d8      	adds	r7, #216	@ 0xd8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200006c0 	.word	0x200006c0
 8000fec:	0800c430 	.word	0x0800c430
 8000ff0:	0800c444 	.word	0x0800c444

08000ff4 <ESP_Server_Init>:
void ESP_Server_Init(const char *ssid, const char *password) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    char cmdBuffer[100];  // Buffer for AT commands

    printf("RESETTING ESP8266...\n");
 8000ffe:	4821      	ldr	r0, [pc, #132]	@ (8001084 <ESP_Server_Init+0x90>)
 8001000:	f00a f9c4 	bl	800b38c <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8001004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001008:	491f      	ldr	r1, [pc, #124]	@ (8001088 <ESP_Server_Init+0x94>)
 800100a:	4820      	ldr	r0, [pc, #128]	@ (800108c <ESP_Server_Init+0x98>)
 800100c:	f7ff ff54 	bl	8000eb8 <send_AT_command>

    printf("Testing AT Command...\n");
 8001010:	481f      	ldr	r0, [pc, #124]	@ (8001090 <ESP_Server_Init+0x9c>)
 8001012:	f00a f9bb 	bl	800b38c <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 8001016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800101a:	491b      	ldr	r1, [pc, #108]	@ (8001088 <ESP_Server_Init+0x94>)
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <ESP_Server_Init+0xa0>)
 800101e:	f7ff ff4b 	bl	8000eb8 <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8001022:	481d      	ldr	r0, [pc, #116]	@ (8001098 <ESP_Server_Init+0xa4>)
 8001024:	f00a f9b2 	bl	800b38c <puts>
    sprintf(cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001028:	f107 000c 	add.w	r0, r7, #12
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	491a      	ldr	r1, [pc, #104]	@ (800109c <ESP_Server_Init+0xa8>)
 8001032:	f00a f861 	bl	800b0f8 <siprintf>
    send_AT_command(cmdBuffer, "WIFI CONNECTED", 15000);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800103e:	4918      	ldr	r1, [pc, #96]	@ (80010a0 <ESP_Server_Init+0xac>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff39 	bl	8000eb8 <send_AT_command>

    printf("Checking assigned IP address...\n");
 8001046:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <ESP_Server_Init+0xb0>)
 8001048:	f00a f9a0 	bl	800b38c <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4915      	ldr	r1, [pc, #84]	@ (80010a8 <ESP_Server_Init+0xb4>)
 8001052:	4816      	ldr	r0, [pc, #88]	@ (80010ac <ESP_Server_Init+0xb8>)
 8001054:	f7ff ff30 	bl	8000eb8 <send_AT_command>

    printf("Enabling single connections...\n");
 8001058:	4815      	ldr	r0, [pc, #84]	@ (80010b0 <ESP_Server_Init+0xbc>)
 800105a:	f00a f997 	bl	800b38c <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 800105e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <ESP_Server_Init+0x94>)
 8001064:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <ESP_Server_Init+0xc0>)
 8001066:	f7ff ff27 	bl	8000eb8 <send_AT_command>

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <ESP_Server_Init+0xc4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <ESP_Server_Init+0xc4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	60da      	str	r2, [r3, #12]
}
 800107a:	bf00      	nop
 800107c:	3770      	adds	r7, #112	@ 0x70
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800c460 	.word	0x0800c460
 8001088:	0800c478 	.word	0x0800c478
 800108c:	0800c47c 	.word	0x0800c47c
 8001090:	0800c488 	.word	0x0800c488
 8001094:	0800c4a0 	.word	0x0800c4a0
 8001098:	0800c4a8 	.word	0x0800c4a8
 800109c:	0800c4c0 	.word	0x0800c4c0
 80010a0:	0800c4d8 	.word	0x0800c4d8
 80010a4:	0800c4e8 	.word	0x0800c4e8
 80010a8:	0800c508 	.word	0x0800c508
 80010ac:	0800c510 	.word	0x0800c510
 80010b0:	0800c51c 	.word	0x0800c51c
 80010b4:	0800c53c 	.word	0x0800c53c
 80010b8:	200006c0 	.word	0x200006c0

080010bc <sendHTMLToLocalServer>:

void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010d2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80010d6:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80010d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010e0:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	492b      	ldr	r1, [pc, #172]	@ (8001194 <sendHTMLToLocalServer+0xd8>)
 80010e8:	f00a f806 	bl	800b0f8 <siprintf>
    send_AT_command(cmdBuffer, "OK", 2000);
 80010ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4928      	ldr	r1, [pc, #160]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fede 	bl	8000eb8 <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 80010fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001100:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4601      	mov	r1, r0
 800110c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001110:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8001114:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001118:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800111c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	491c      	ldr	r1, [pc, #112]	@ (800119c <sendHTMLToLocalServer+0xe0>)
 800112a:	f009 ffe5 	bl	800b0f8 <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 800112e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f86c 	bl	8000210 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8001146:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <sendHTMLToLocalServer+0xe4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f009 ffd5 	bl	800b0f8 <siprintf>
    send_AT_command(responseBuffer, ">", 500);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001156:	4913      	ldr	r1, [pc, #76]	@ (80011a4 <sendHTMLToLocalServer+0xe8>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fead 	bl	8000eb8 <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 1000);
 800115e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001166:	4910      	ldr	r1, [pc, #64]	@ (80011a8 <sendHTMLToLocalServer+0xec>)
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fea5 	bl	8000eb8 <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 500);
 800116e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001172:	4909      	ldr	r1, [pc, #36]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <sendHTMLToLocalServer+0xf0>)
 8001176:	f7ff fe9f 	bl	8000eb8 <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 800117a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800117e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <sendHTMLToLocalServer+0xf4>)
 8001186:	f00a f899 	bl	800b2bc <iprintf>
}
 800118a:	bf00      	nop
 800118c:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800c54c 	.word	0x0800c54c
 8001198:	0800c478 	.word	0x0800c478
 800119c:	0800c56c 	.word	0x0800c56c
 80011a0:	0800c5c8 	.word	0x0800c5c8
 80011a4:	0800c5d8 	.word	0x0800c5d8
 80011a8:	0800c5dc 	.word	0x0800c5dc
 80011ac:	0800c5e4 	.word	0x0800c5e4
 80011b0:	0800c5f4 	.word	0x0800c5f4

080011b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <MX_FREERTOS_Init+0x18>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_FREERTOS_Init+0x1c>)
 80011be:	f006 fe29 	bl	8007e14 <osThreadNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <MX_FREERTOS_Init+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0800d554 	.word	0x0800d554
 80011d0:	080011d9 	.word	0x080011d9
 80011d4:	200000f4 	.word	0x200000f4

080011d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f006 fea9 	bl	8007f38 <osDelay>
 80011e6:	e7fb      	b.n	80011e0 <StartDefaultTask+0x8>

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_GPIO_Init+0x138>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <MX_GPIO_Init+0x138>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <MX_GPIO_Init+0x138>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|System_state_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2160      	movs	r1, #96	@ 0x60
 8001272:	482c      	ldr	r0, [pc, #176]	@ (8001324 <MX_GPIO_Init+0x13c>)
 8001274:	f002 fcae 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2103      	movs	r1, #3
 800127c:	482a      	ldr	r0, [pc, #168]	@ (8001328 <MX_GPIO_Init+0x140>)
 800127e:	f002 fca9 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001288:	4828      	ldr	r0, [pc, #160]	@ (800132c <MX_GPIO_Init+0x144>)
 800128a:	f002 fca3 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001294:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4821      	ldr	r0, [pc, #132]	@ (800132c <MX_GPIO_Init+0x144>)
 80012a6:	f002 fae9 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|System_state_Pin;
 80012aa:	2360      	movs	r3, #96	@ 0x60
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_GPIO_Init+0x13c>)
 80012c2:	f002 fadb 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = control_System_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(control_System_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <MX_GPIO_Init+0x144>)
 80012da:	f002 facf 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 80012de:	2303      	movs	r3, #3
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <MX_GPIO_Init+0x140>)
 80012f6:	f002 fac1 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_GPIO_Init+0x144>)
 8001314:	f002 fab2 	bl	800387c <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <MX_I2C1_Init+0x54>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_I2C1_Init+0x50>)
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <MX_I2C1_Init+0x58>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_I2C1_Init+0x50>)
 800134e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_I2C1_Init+0x50>)
 800136e:	f002 fc4b 	bl	8003c08 <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001378:	f000 fce4 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f8 	.word	0x200000f8
 8001384:	40005400 	.word	0x40005400
 8001388:	00061a80 	.word	0x00061a80

0800138c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_I2C_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	@ 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <HAL_I2C_MspInit+0x8c>)
 80013e6:	f002 fa49 	bl	800387c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <delay>:
/**
* @brief  The application entry point.
* @retval int
*/

void delay (uint16_t time){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <delay+0x30>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 800142e:	bf00      	nop
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <delay+0x30>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3f9      	bcc.n	8001430 <delay+0x14>
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000678 	.word	0x20000678

08001450 <main>:

int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8001454:	f001 fc28 	bl	8002ca8 <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 8001458:	f000 f8e8 	bl	800162c <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 800145c:	f7ff fec4 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001460:	f001 fb4a 	bl	8002af8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001464:	f7ff ff64 	bl	8001330 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001468:	f7ff fc90 	bl	8000d8c <MX_ADC1_Init>
  MX_TIM2_Init();
 800146c:	f001 f96a 	bl	8002744 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001470:	f001 fb18 	bl	8002aa4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001474:	f001 f8c4 	bl	8002600 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001478:	f001 f9da 	bl	8002830 <MX_TIM3_Init>
/* USER CODE BEGIN 2 */
SSD1306_Init(); // Initialize OLED display
 800147c:	f000 fc7e 	bl	8001d7c <SSD1306_Init>
SSD1306_Clear(); // Clear the display
 8001480:	f000 fe9f 	bl	80021c2 <SSD1306_Clear>
SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 8001484:	210a      	movs	r1, #10
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fde2 	bl	8002050 <SSD1306_GotoXY>
SSD1306_Puts("main", &Font_11x18, 1); // Display simple message
 800148c:	2201      	movs	r2, #1
 800148e:	493f      	ldr	r1, [pc, #252]	@ (800158c <main+0x13c>)
 8001490:	483f      	ldr	r0, [pc, #252]	@ (8001590 <main+0x140>)
 8001492:	f000 fe71 	bl	8002178 <SSD1306_Puts>
SSD1306_UpdateScreen(); // Update the screen
 8001496:	f000 fd35 	bl	8001f04 <SSD1306_UpdateScreen>
// test_Laser();
// test_Buzzer();
// test_LED();
// test_Servo();
// test_ESP8266();
HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800149a:	2100      	movs	r1, #0
 800149c:	483d      	ldr	r0, [pc, #244]	@ (8001594 <main+0x144>)
 800149e:	f004 f9cb 	bl	8005838 <HAL_TIM_IC_Start_IT>
ESP_Server_Init(username, pwd);
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <main+0x148>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <main+0x14c>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fda1 	bl	8000ff4 <ESP_Server_Init>

sendHTMLToLocalServer(localIP, regularHTML);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <main+0x150>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <main+0x154>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdfd 	bl	80010bc <sendHTMLToLocalServer>
systemStateMutex = osMutexNew(&systemStateMutex_attributes);
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <main+0x158>)
 80014c4:	f006 fd53 	bl	8007f6e <osMutexNew>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a38      	ldr	r2, [pc, #224]	@ (80015ac <main+0x15c>)
 80014cc:	6013      	str	r3, [r2, #0]
if (systemStateMutex == NULL) {
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <main+0x15c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <main+0x8c>
    printf("Failed to create system state mutex\n");
 80014d6:	4836      	ldr	r0, [pc, #216]	@ (80015b0 <main+0x160>)
 80014d8:	f009 ff58 	bl	800b38c <puts>
}
// test_Button();
/* USER CODE END 2 */
/* Init scheduler */
osKernelInitialize();
 80014dc:	f006 fc50 	bl	8007d80 <osKernelInitialize>
/* Call init function for freertos objects (in freertos.c) */
MX_FREERTOS_Init();
 80014e0:	f7ff fe68 	bl	80011b4 <MX_FREERTOS_Init>
TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 80014e4:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <main+0x164>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4833      	ldr	r0, [pc, #204]	@ (80015b8 <main+0x168>)
 80014ea:	f006 fc93 	bl	8007e14 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <main+0x16c>)
 80014f2:	6013      	str	r3, [r2, #0]
TaskSystemButtonHandle = osThreadNew(StartTaskSystemButton, NULL, &TaskSystemButton_attributes);
 80014f4:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <main+0x170>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4832      	ldr	r0, [pc, #200]	@ (80015c4 <main+0x174>)
 80014fa:	f006 fc8b 	bl	8007e14 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <main+0x178>)
 8001502:	6013      	str	r3, [r2, #0]
TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 8001504:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <main+0x17c>)
 8001506:	2100      	movs	r1, #0
 8001508:	4831      	ldr	r0, [pc, #196]	@ (80015d0 <main+0x180>)
 800150a:	f006 fc83 	bl	8007e14 <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <main+0x184>)
 8001512:	6013      	str	r3, [r2, #0]
//laser
TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 8001514:	4a30      	ldr	r2, [pc, #192]	@ (80015d8 <main+0x188>)
 8001516:	2100      	movs	r1, #0
 8001518:	4830      	ldr	r0, [pc, #192]	@ (80015dc <main+0x18c>)
 800151a:	f006 fc7b 	bl	8007e14 <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <main+0x190>)
 8001522:	6013      	str	r3, [r2, #0]
TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <main+0x194>)
 8001526:	2100      	movs	r1, #0
 8001528:	482f      	ldr	r0, [pc, #188]	@ (80015e8 <main+0x198>)
 800152a:	f006 fc73 	bl	8007e14 <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <main+0x19c>)
 8001532:	6013      	str	r3, [r2, #0]
TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 8001534:	4a2e      	ldr	r2, [pc, #184]	@ (80015f0 <main+0x1a0>)
 8001536:	2100      	movs	r1, #0
 8001538:	482e      	ldr	r0, [pc, #184]	@ (80015f4 <main+0x1a4>)
 800153a:	f006 fc6b 	bl	8007e14 <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a2d      	ldr	r2, [pc, #180]	@ (80015f8 <main+0x1a8>)
 8001542:	6013      	str	r3, [r2, #0]
TaskLedSystemHandle = osThreadNew(StartTaskSystemLed, NULL, &StartTaskSystemLed_attributes);
 8001544:	4a2d      	ldr	r2, [pc, #180]	@ (80015fc <main+0x1ac>)
 8001546:	2100      	movs	r1, #0
 8001548:	482d      	ldr	r0, [pc, #180]	@ (8001600 <main+0x1b0>)
 800154a:	f006 fc63 	bl	8007e14 <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <main+0x1b4>)
 8001552:	6013      	str	r3, [r2, #0]
TaskLaserHandle = osThreadNew(StartTaskLaser, NULL, &StartTaskLaser_attributes);
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <main+0x1b8>)
 8001556:	2100      	movs	r1, #0
 8001558:	482c      	ldr	r0, [pc, #176]	@ (800160c <main+0x1bc>)
 800155a:	f006 fc5b 	bl	8007e14 <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a2b      	ldr	r2, [pc, #172]	@ (8001610 <main+0x1c0>)
 8001562:	6013      	str	r3, [r2, #0]
TaskUpdateWebHandle = osThreadNew(StartTaskUpdateWeb, NULL, &StartTaskUpdateWeb_attributes);
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <main+0x1c4>)
 8001566:	2100      	movs	r1, #0
 8001568:	482b      	ldr	r0, [pc, #172]	@ (8001618 <main+0x1c8>)
 800156a:	f006 fc53 	bl	8007e14 <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a2a      	ldr	r2, [pc, #168]	@ (800161c <main+0x1cc>)
 8001572:	6013      	str	r3, [r2, #0]
TaskDistanceHandle = osThreadNew(StartTaskDistance, NULL, &StartTaskDistance_attributes);
 8001574:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <main+0x1d0>)
 8001576:	2100      	movs	r1, #0
 8001578:	482a      	ldr	r0, [pc, #168]	@ (8001624 <main+0x1d4>)
 800157a:	f006 fc4b 	bl	8007e14 <osThreadNew>
 800157e:	4603      	mov	r3, r0
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <main+0x1d8>)
 8001582:	6013      	str	r3, [r2, #0]
/* Start scheduler */
osKernelStart();
 8001584:	f006 fc20 	bl	8007dc8 <osKernelStart>
/* We should never get here as control is now taken by the scheduler */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <main+0x138>
 800158c:	20000000 	.word	0x20000000
 8001590:	0800c76c 	.word	0x0800c76c
 8001594:	20000678 	.word	0x20000678
 8001598:	20000020 	.word	0x20000020
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000010 	.word	0x20000010
 80015a8:	0800d6e0 	.word	0x0800d6e0
 80015ac:	20000190 	.word	0x20000190
 80015b0:	0800c774 	.word	0x0800c774
 80015b4:	0800d578 	.word	0x0800d578
 80015b8:	0800172d 	.word	0x0800172d
 80015bc:	20000168 	.word	0x20000168
 80015c0:	0800d59c 	.word	0x0800d59c
 80015c4:	08001931 	.word	0x08001931
 80015c8:	2000016c 	.word	0x2000016c
 80015cc:	0800d5c0 	.word	0x0800d5c0
 80015d0:	080019b1 	.word	0x080019b1
 80015d4:	20000170 	.word	0x20000170
 80015d8:	0800d5e4 	.word	0x0800d5e4
 80015dc:	08001a99 	.word	0x08001a99
 80015e0:	20000174 	.word	0x20000174
 80015e4:	0800d608 	.word	0x0800d608
 80015e8:	08001ad9 	.word	0x08001ad9
 80015ec:	20000178 	.word	0x20000178
 80015f0:	0800d62c 	.word	0x0800d62c
 80015f4:	08001b41 	.word	0x08001b41
 80015f8:	2000017c 	.word	0x2000017c
 80015fc:	0800d650 	.word	0x0800d650
 8001600:	08001b09 	.word	0x08001b09
 8001604:	20000180 	.word	0x20000180
 8001608:	0800d674 	.word	0x0800d674
 800160c:	08001a61 	.word	0x08001a61
 8001610:	20000184 	.word	0x20000184
 8001614:	0800d698 	.word	0x0800d698
 8001618:	08001829 	.word	0x08001829
 800161c:	20000188 	.word	0x20000188
 8001620:	0800d6bc 	.word	0x0800d6bc
 8001624:	08001781 	.word	0x08001781
 8001628:	2000018c 	.word	0x2000018c

0800162c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2234      	movs	r2, #52	@ 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 fec4 	bl	800b3c8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <SystemClock_Config+0xd4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <SystemClock_Config+0xd4>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <SystemClock_Config+0xd4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <SystemClock_Config+0xd8>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SystemClock_Config+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 336;
 80016a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fbec 	bl	8004e98 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x9e>
{
  Error_Handler();
 80016c6:	f000 fb3d 	bl	8001d44 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 f85a 	bl	80047a0 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xca>
{
  Error_Handler();
 80016f2:	f000 fb27 	bl	8001d44 <Error_Handler>
}
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */
/* USER CODE END Callback 0 */
if (htim->Instance == TIM6) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
  HAL_IncTick();
 800171a:	f001 fae7 	bl	8002cec <HAL_IncTick>
}
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001000 	.word	0x40001000

0800172c <StartTaskButton>:
void StartTaskButton(void *argument) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001738:	480e      	ldr	r0, [pc, #56]	@ (8001774 <StartTaskButton+0x48>)
 800173a:	f002 fa33 	bl	8003ba4 <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f7      	bne.n	8001734 <StartTaskButton+0x8>
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <StartTaskButton+0x4c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d1f3      	bne.n	8001734 <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 800174c:	2032      	movs	r0, #50	@ 0x32
 800174e:	f001 faed 	bl	8002d2c <HAL_Delay>
			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <StartTaskButton+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET);
 8001758:	bf00      	nop
 800175a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <StartTaskButton+0x48>)
 8001760:	f002 fa20 	bl	8003ba4 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f7      	beq.n	800175a <StartTaskButton+0x2e>
			HAL_Delay(50); // Prevent multiple triggers
 800176a:	2032      	movs	r0, #50	@ 0x32
 800176c:	f001 fade 	bl	8002d2c <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001770:	e7e0      	b.n	8001734 <StartTaskButton+0x8>
 8001772:	bf00      	nop
 8001774:	40020800 	.word	0x40020800
 8001778:	20000150 	.word	0x20000150
 800177c:	2000014c 	.word	0x2000014c

08001780 <StartTaskDistance>:
		}
	}
}

void StartTaskDistance(void *argument) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		 HCSR04_Read();  // Trigger distance measurement
 8001788:	f000 fabc 	bl	8001d04 <HCSR04_Read>
		 HAL_Delay(200);  // Delay to allow sensor to respond
 800178c:	20c8      	movs	r0, #200	@ 0xc8
 800178e:	f001 facd 	bl	8002d2c <HAL_Delay>

		 char buffer[10];
		 SSD1306_Clear();
 8001792:	f000 fd16 	bl	80021c2 <SSD1306_Clear>
		 SSD1306_GotoXY(0, 10);
 8001796:	210a      	movs	r1, #10
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fc59 	bl	8002050 <SSD1306_GotoXY>
		 SSD1306_Puts("Distance", &Font_11x18, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	491b      	ldr	r1, [pc, #108]	@ (8001810 <StartTaskDistance+0x90>)
 80017a2:	481c      	ldr	r0, [pc, #112]	@ (8001814 <StartTaskDistance+0x94>)
 80017a4:	f000 fce8 	bl	8002178 <SSD1306_Puts>
		 SSD1306_GotoXY(0, 30);
 80017a8:	211e      	movs	r1, #30
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fc50 	bl	8002050 <SSD1306_GotoXY>
		 sprintf(buffer, "%d cm", Distance);
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <StartTaskDistance+0x98>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4918      	ldr	r1, [pc, #96]	@ (800181c <StartTaskDistance+0x9c>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 fc9b 	bl	800b0f8 <siprintf>
		 SSD1306_Puts(buffer, &Font_11x18, 1);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2201      	movs	r2, #1
 80017c8:	4911      	ldr	r1, [pc, #68]	@ (8001810 <StartTaskDistance+0x90>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fcd4 	bl	8002178 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 80017d0:	f000 fb98 	bl	8001f04 <SSD1306_UpdateScreen>
		 printf(Distance);
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <StartTaskDistance+0x98>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f009 fd6f 	bl	800b2bc <iprintf>
		 if(system_state == SYSTEM_ON && Distance < 5){
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <StartTaskDistance+0xa0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d106      	bne.n	80017f4 <StartTaskDistance+0x74>
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <StartTaskDistance+0x98>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d802      	bhi.n	80017f4 <StartTaskDistance+0x74>
			 alarm_state = ALARM_ON;
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <StartTaskDistance+0xa4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
		 }

		 if(alarm_state == ALARM_OFF){
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <StartTaskDistance+0xa4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <StartTaskDistance+0x84>
			 osDelay(2000);
 80017fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001800:	f006 fb9a 	bl	8007f38 <osDelay>
		 }
		 osDelay(500);  // Delay to avoid excessive updates
 8001804:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001808:	f006 fb96 	bl	8007f38 <osDelay>
	{
 800180c:	e7bc      	b.n	8001788 <StartTaskDistance+0x8>
 800180e:	bf00      	nop
 8001810:	20000000 	.word	0x20000000
 8001814:	0800c798 	.word	0x0800c798
 8001818:	20000165 	.word	0x20000165
 800181c:	0800c7a4 	.word	0x0800c7a4
 8001820:	20000150 	.word	0x20000150
 8001824:	2000014c 	.word	0x2000014c

08001828 <StartTaskUpdateWeb>:
		}
	}


void StartTaskUpdateWeb(void *argument) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    int prev_alarm_state = ALARM_OFF;  // Track previous state && prev_alarm_state == ALARM_OFF
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
    int prev_system_state = SYSTEM_ON;
 8001834:	2301      	movs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]

    for (;;) {
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8001838:	4b36      	ldr	r3, [pc, #216]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4619      	mov	r1, r3
 8001840:	4835      	ldr	r0, [pc, #212]	@ (8001918 <StartTaskUpdateWeb+0xf0>)
 8001842:	f009 fd3b 	bl	800b2bc <iprintf>

        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8001846:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10b      	bne.n	8001866 <StartTaskUpdateWeb+0x3e>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d108      	bne.n	8001866 <StartTaskUpdateWeb+0x3e>
            // Alarm just turned ON
            sendHTMLToLocalServer(localIP, intrusionHTML);
 8001854:	4b31      	ldr	r3, [pc, #196]	@ (800191c <StartTaskUpdateWeb+0xf4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a31      	ldr	r2, [pc, #196]	@ (8001920 <StartTaskUpdateWeb+0xf8>)
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fc2c 	bl	80010bc <sendHTMLToLocalServer>
        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8001864:	e04a      	b.n	80018fc <StartTaskUpdateWeb+0xd4>
        }
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <StartTaskUpdateWeb+0x66>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10c      	bne.n	800188e <StartTaskUpdateWeb+0x66>
 8001874:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <StartTaskUpdateWeb+0xfc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d108      	bne.n	800188e <StartTaskUpdateWeb+0x66>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <StartTaskUpdateWeb+0xf4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a29      	ldr	r2, [pc, #164]	@ (8001928 <StartTaskUpdateWeb+0x100>)
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fc18 	bl	80010bc <sendHTMLToLocalServer>
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 800188c:	e036      	b.n	80018fc <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <StartTaskUpdateWeb+0x8e>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10c      	bne.n	80018b6 <StartTaskUpdateWeb+0x8e>
 800189c:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <StartTaskUpdateWeb+0xfc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d108      	bne.n	80018b6 <StartTaskUpdateWeb+0x8e>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <StartTaskUpdateWeb+0xf4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <StartTaskUpdateWeb+0x100>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc04 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 80018b4:	e022      	b.n	80018fc <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <StartTaskUpdateWeb+0xae>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <StartTaskUpdateWeb+0xae>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <StartTaskUpdateWeb+0xf4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <StartTaskUpdateWeb+0x104>)
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fbf4 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 80018d4:	e012      	b.n	80018fc <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state == SYSTEM_OFF && system_state== SYSTEM_ON){
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <StartTaskUpdateWeb+0xd4>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10b      	bne.n	80018fc <StartTaskUpdateWeb+0xd4>
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <StartTaskUpdateWeb+0xfc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <StartTaskUpdateWeb+0xd4>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <StartTaskUpdateWeb+0xf4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <StartTaskUpdateWeb+0x104>)
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fbe0 	bl	80010bc <sendHTMLToLocalServer>
        }

        // Update previous state
        prev_alarm_state = alarm_state;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <StartTaskUpdateWeb+0xec>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
        prev_system_state = system_state;
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <StartTaskUpdateWeb+0xfc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60bb      	str	r3, [r7, #8]

        osDelay(1000);  // Delay before checking again
 8001908:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800190c:	f006 fb14 	bl	8007f38 <osDelay>
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8001910:	e792      	b.n	8001838 <StartTaskUpdateWeb+0x10>
 8001912:	bf00      	nop
 8001914:	2000014c 	.word	0x2000014c
 8001918:	0800c7ac 	.word	0x0800c7ac
 800191c:	20000018 	.word	0x20000018
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000150 	.word	0x20000150
 8001928:	20000014 	.word	0x20000014
 800192c:	20000010 	.word	0x20000010

08001930 <StartTaskSystemButton>:
    }
}

void StartTaskSystemButton(void *argument) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
   for (;;) {
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001938:	2110      	movs	r1, #16
 800193a:	4819      	ldr	r0, [pc, #100]	@ (80019a0 <StartTaskSystemButton+0x70>)
 800193c:	f002 f932 	bl	8003ba4 <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f8      	bne.n	8001938 <StartTaskSystemButton+0x8>
           HAL_Delay(50); // Debounce delay
 8001946:	2032      	movs	r0, #50	@ 0x32
 8001948:	f001 f9f0 	bl	8002d2c <HAL_Delay>
           osMutexAcquire(systemStateMutex, osWaitForever); // Lock mutex
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <StartTaskSystemButton+0x74>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001954:	4618      	mov	r0, r3
 8001956:	f006 fb90 	bl	800807a <osMutexAcquire>
           system_state = !system_state;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <StartTaskSystemButton+0x78>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <StartTaskSystemButton+0x78>)
 800196c:	601a      	str	r2, [r3, #0]
           if (system_state == SYSTEM_OFF){
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <StartTaskSystemButton+0x78>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <StartTaskSystemButton+0x4c>
               alarm_state = ALARM_OFF;
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <StartTaskSystemButton+0x7c>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
           }
           osMutexRelease(systemStateMutex); // Release mutex
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <StartTaskSystemButton+0x74>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f006 fbc5 	bl	8008110 <osMutexRelease>
           // Wait for button release
           while (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET);
 8001986:	bf00      	nop
 8001988:	2110      	movs	r1, #16
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <StartTaskSystemButton+0x70>)
 800198c:	f002 f90a 	bl	8003ba4 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f8      	beq.n	8001988 <StartTaskSystemButton+0x58>
           HAL_Delay(50); // Prevent multiple triggers
 8001996:	2032      	movs	r0, #50	@ 0x32
 8001998:	f001 f9c8 	bl	8002d2c <HAL_Delay>
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 800199c:	e7cc      	b.n	8001938 <StartTaskSystemButton+0x8>
 800199e:	bf00      	nop
 80019a0:	40020800 	.word	0x40020800
 80019a4:	20000190 	.word	0x20000190
 80019a8:	20000150 	.word	0x20000150
 80019ac:	2000014c 	.word	0x2000014c

080019b0 <StartTaskLDR>:
       }
   }
}
void StartTaskLDR(void *argument) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
   int local_system_state = SYSTEM_OFF;  // Track the last known state
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
   for (;;) {
       // Acquire mutex before reading system_state
       osMutexAcquire(systemStateMutex, osWaitForever);
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <StartTaskLDR+0x9c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 fb58 	bl	800807a <osMutexAcquire>
       int current_system_state = system_state;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <StartTaskLDR+0xa0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
       osMutexRelease(systemStateMutex);
 80019d0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <StartTaskLDR+0x9c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f006 fb9b 	bl	8008110 <osMutexRelease>
       // Check if system just turned ON
       if (current_system_state == SYSTEM_ON && local_system_state == SYSTEM_OFF) {
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <StartTaskLDR+0x3e>
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <StartTaskLDR+0x3e>
           osDelay(2000);  // Delay before first LDR reading
 80019e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019ea:	f006 faa5 	bl	8007f38 <osDelay>
       }
       // Update local state
       local_system_state = current_system_state;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	617b      	str	r3, [r7, #20]
       if (current_system_state == SYSTEM_ON) {
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d124      	bne.n	8001a42 <StartTaskLDR+0x92>
    	   if(alarm_state == ALARM_OFF){
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <StartTaskLDR+0xa4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <StartTaskLDR+0x56>
    	  			 osDelay(200);
 8001a00:	20c8      	movs	r0, #200	@ 0xc8
 8001a02:	f006 fa99 	bl	8007f38 <osDelay>
    	  		 }
           uint32_t adcValue;
           HAL_ADC_Start(&hadc1);
 8001a06:	4814      	ldr	r0, [pc, #80]	@ (8001a58 <StartTaskLDR+0xa8>)
 8001a08:	f001 f9f8 	bl	8002dfc <HAL_ADC_Start>
           HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a10:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <StartTaskLDR+0xa8>)
 8001a12:	f001 faf8 	bl	8003006 <HAL_ADC_PollForConversion>
           adcValue = HAL_ADC_GetValue(&hadc1);
 8001a16:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <StartTaskLDR+0xa8>)
 8001a18:	f001 fb80 	bl	800311c <HAL_ADC_GetValue>
 8001a1c:	60f8      	str	r0, [r7, #12]
           HAL_ADC_Stop(&hadc1);
 8001a1e:	480e      	ldr	r0, [pc, #56]	@ (8001a58 <StartTaskLDR+0xa8>)
 8001a20:	f001 fabe 	bl	8002fa0 <HAL_ADC_Stop>
           light_value = adcValue;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <StartTaskLDR+0xac>)
 8001a28:	6013      	str	r3, [r2, #0]
           if (adcValue < 1500 && system_state == SYSTEM_ON) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d806      	bhi.n	8001a42 <StartTaskLDR+0x92>
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <StartTaskLDR+0xa0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <StartTaskLDR+0x92>
               alarm_state = ALARM_ON;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <StartTaskLDR+0xa4>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

           }
       }
       osDelay(500);  // Regular delay between reads
 8001a42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a46:	f006 fa77 	bl	8007f38 <osDelay>
   for (;;) {
 8001a4a:	e7b7      	b.n	80019bc <StartTaskLDR+0xc>
 8001a4c:	20000190 	.word	0x20000190
 8001a50:	20000150 	.word	0x20000150
 8001a54:	2000014c 	.word	0x2000014c
 8001a58:	200000ac 	.word	0x200000ac
 8001a5c:	20000008 	.word	0x20000008

08001a60 <StartTaskLaser>:
   }
}


void StartTaskLaser(void *argument) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <StartTaskLaser+0x30>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <StartTaskLaser+0x1c>
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2102      	movs	r1, #2
 8001a74:	4807      	ldr	r0, [pc, #28]	@ (8001a94 <StartTaskLaser+0x34>)
 8001a76:	f002 f8ad 	bl	8003bd4 <HAL_GPIO_WritePin>
 8001a7a:	e004      	b.n	8001a86 <StartTaskLaser+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <StartTaskLaser+0x34>)
 8001a82:	f002 f8a7 	bl	8003bd4 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001a86:	2064      	movs	r0, #100	@ 0x64
 8001a88:	f006 fa56 	bl	8007f38 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001a8c:	e7ec      	b.n	8001a68 <StartTaskLaser+0x8>
 8001a8e:	bf00      	nop
 8001a90:	20000150 	.word	0x20000150
 8001a94:	40020400 	.word	0x40020400

08001a98 <StartTaskBuzzer>:
   }
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <StartTaskBuzzer+0x38>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d1fb      	bne.n	8001aa0 <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <StartTaskBuzzer+0x3c>)
 8001aae:	f002 f891 	bl	8003bd4 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001ab2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ab6:	f001 f939 	bl	8002d2c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 8001aba:	2200      	movs	r2, #0
 8001abc:	2101      	movs	r1, #1
 8001abe:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <StartTaskBuzzer+0x3c>)
 8001ac0:	f002 f888 	bl	8003bd4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001ac4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ac8:	f001 f930 	bl	8002d2c <HAL_Delay>
		if(alarm_state == ALARM_ON){
 8001acc:	e7e8      	b.n	8001aa0 <StartTaskBuzzer+0x8>
 8001ace:	bf00      	nop
 8001ad0:	2000014c 	.word	0x2000014c
 8001ad4:	40020400 	.word	0x40020400

08001ad8 <StartTaskLed>:
		}
// Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	for(;;){
		if(alarm_state==ALARM_ON){
 8001ae0:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <StartTaskLed+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <StartTaskLed+0x1c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2120      	movs	r1, #32
 8001aec:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <StartTaskLed+0x2c>)
 8001aee:	f002 f871 	bl	8003bd4 <HAL_GPIO_WritePin>
 8001af2:	e7f5      	b.n	8001ae0 <StartTaskLed+0x8>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2120      	movs	r1, #32
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <StartTaskLed+0x2c>)
 8001afa:	f002 f86b 	bl	8003bd4 <HAL_GPIO_WritePin>
		if(alarm_state==ALARM_ON){
 8001afe:	e7ef      	b.n	8001ae0 <StartTaskLed+0x8>
 8001b00:	2000014c 	.word	0x2000014c
 8001b04:	40020000 	.word	0x40020000

08001b08 <StartTaskSystemLed>:
		}
		  // LED ON
	}
}
void StartTaskSystemLed(void *argument) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001b10:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <StartTaskSystemLed+0x30>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <StartTaskSystemLed+0x1c>
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2140      	movs	r1, #64	@ 0x40
 8001b1c:	4807      	ldr	r0, [pc, #28]	@ (8001b3c <StartTaskSystemLed+0x34>)
 8001b1e:	f002 f859 	bl	8003bd4 <HAL_GPIO_WritePin>
 8001b22:	e004      	b.n	8001b2e <StartTaskSystemLed+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2140      	movs	r1, #64	@ 0x40
 8001b28:	4804      	ldr	r0, [pc, #16]	@ (8001b3c <StartTaskSystemLed+0x34>)
 8001b2a:	f002 f853 	bl	8003bd4 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001b2e:	2064      	movs	r0, #100	@ 0x64
 8001b30:	f006 fa02 	bl	8007f38 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001b34:	e7ec      	b.n	8001b10 <StartTaskSystemLed+0x8>
 8001b36:	bf00      	nop
 8001b38:	20000150 	.word	0x20000150
 8001b3c:	40020000 	.word	0x40020000

08001b40 <StartTaskServo>:
   }
}
void StartTaskServo(void *argument) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		osDelay(1000);
 8001b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b4c:	f006 f9f4 	bl	8007f38 <osDelay>
		 if(alarm_state == ALARM_ON && door_state == DOOR_OPEN) {
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <StartTaskServo+0x98>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d11d      	bne.n	8001b94 <StartTaskServo+0x54>
 8001b58:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <StartTaskServo+0x9c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d119      	bne.n	8001b94 <StartTaskServo+0x54>
		            // Move both servos 90° to the left
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b60:	2100      	movs	r1, #0
 8001b62:	481f      	ldr	r0, [pc, #124]	@ (8001be0 <StartTaskServo+0xa0>)
 8001b64:	f003 fd50 	bl	8005608 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	481e      	ldr	r0, [pc, #120]	@ (8001be4 <StartTaskServo+0xa4>)
 8001b6c:	f003 fd4c 	bl	8005608 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);  // 90° for first servo
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <StartTaskServo+0xa0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);  // 90° for second servo (same direction)
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <StartTaskServo+0xa4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b82:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001b84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b88:	f001 f8d0 	bl	8002d2c <HAL_Delay>
		            door_state = DOOR_CLOSED;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <StartTaskServo+0x9c>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e020      	b.n	8001bd6 <StartTaskServo+0x96>
		        }
		        else if(alarm_state == ALARM_OFF && door_state == DOOR_CLOSED) {
 8001b94:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <StartTaskServo+0x98>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1d5      	bne.n	8001b48 <StartTaskServo+0x8>
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <StartTaskServo+0x9c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d1d1      	bne.n	8001b48 <StartTaskServo+0x8>
		            // Move both servos back to 0° (neutral)
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	480e      	ldr	r0, [pc, #56]	@ (8001be0 <StartTaskServo+0xa0>)
 8001ba8:	f003 fd2e 	bl	8005608 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bac:	2100      	movs	r1, #0
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <StartTaskServo+0xa4>)
 8001bb0:	f003 fd2a 	bl	8005608 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);  // Back to 0° for first servo
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <StartTaskServo+0xa0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bbc:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2500);   // Back to 0° for second servo (same direction)
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <StartTaskServo+0xa4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001bc8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bcc:	f001 f8ae 	bl	8002d2c <HAL_Delay>
		            door_state = DOOR_OPEN;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <StartTaskServo+0x9c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001bd6:	e7b7      	b.n	8001b48 <StartTaskServo+0x8>
 8001bd8:	2000014c 	.word	0x2000014c
 8001bdc:	20000154 	.word	0x20000154
 8001be0:	20000630 	.word	0x20000630
 8001be4:	200005e8 	.word	0x200005e8

08001be8 <HAL_TIM_IC_CaptureCallback>:
		        }
	}
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // If the interrupt is from channel 1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7f1b      	ldrb	r3, [r3, #28]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d170      	bne.n	8001cda <HAL_TIM_IC_CaptureCallback+0xf2>
        if (Is_First_Captured == 0) { // If it's the first edge (rising)
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11a      	bne.n	8001c36 <HAL_TIM_IC_CaptureCallback+0x4e>
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read first value
 8001c00:	2100      	movs	r1, #0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f004 fa56 	bl	80060b4 <HAL_TIM_ReadCapturedValue>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c0c:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 8001c0e:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Switch to falling edge
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 020a 	bic.w	r2, r2, #10
 8001c22:	621a      	str	r2, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0202 	orr.w	r2, r2, #2
 8001c32:	621a      	str	r2, [r3, #32]
            Distance = Difference * 0.034 / 2; // Convert to cm

            Is_First_Captured = 0; // Reset flag for next measurement
        }
    }
}
 8001c34:	e051      	b.n	8001cda <HAL_TIM_IC_CaptureCallback+0xf2>
        } else if (Is_First_Captured == 1) { // If it's the second edge (falling)
 8001c36:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d14d      	bne.n	8001cda <HAL_TIM_IC_CaptureCallback+0xf2>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read second value
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f004 fa37 	bl	80060b4 <HAL_TIM_ReadCapturedValue>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c4a:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // Reset to rising edge
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020a 	bic.w	r2, r2, #10
 8001c5a:	621a      	str	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a12      	ldr	r2, [r2, #32]
 8001c66:	621a      	str	r2, [r3, #32]
            if (IC_Val2 > IC_Val1) {
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d907      	bls.n	8001c84 <HAL_TIM_IC_CaptureCallback+0x9c>
                Difference = IC_Val2 - IC_Val1;
 8001c74:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e009      	b.n	8001c98 <HAL_TIM_IC_CaptureCallback+0xb0>
                Difference = (0xFFFF - IC_Val1) + IC_Val2;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c92:	33ff      	adds	r3, #255	@ 0xff
 8001c94:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c96:	6013      	str	r3, [r2, #0]
            Distance = Difference * 0.034 / 2; // Convert to cm
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc51 	bl	8000544 <__aeabi_ui2d>
 8001ca2:	a311      	add	r3, pc, #68	@ (adr r3, 8001ce8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fcc6 	bl	8000638 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cbc:	f7fe fde6 	bl	800088c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fec8 	bl	8000a5c <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001cd2:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // Reset flag for next measurement
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	b020c49c 	.word	0xb020c49c
 8001cec:	3fa16872 	.word	0x3fa16872
 8001cf0:	20000164 	.word	0x20000164
 8001cf4:	20000158 	.word	0x20000158
 8001cf8:	2000015c 	.word	0x2000015c
 8001cfc:	20000160 	.word	0x20000160
 8001d00:	20000165 	.word	0x20000165

08001d04 <HCSR04_Read>:


void HCSR04_Read (void) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // Set TRIG pin HIGH
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d0e:	480a      	ldr	r0, [pc, #40]	@ (8001d38 <HCSR04_Read+0x34>)
 8001d10:	f001 ff60 	bl	8003bd4 <HAL_GPIO_WritePin>
    delay(10);  // 10µs pulse
 8001d14:	200a      	movs	r0, #10
 8001d16:	f7ff fb81 	bl	800141c <delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // Set TRIG pin LOW
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HCSR04_Read+0x34>)
 8001d22:	f001 ff57 	bl	8003bd4 <HAL_GPIO_WritePin>

    // Reset first capture flag
    Is_First_Captured = 0;
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HCSR04_Read+0x38>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]

    // Start the input capture interrupt
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <HCSR04_Read+0x3c>)
 8001d30:	f003 fd82 	bl	8005838 <HAL_TIM_IC_Start_IT>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	20000164 	.word	0x20000164
 8001d40:	20000678 	.word	0x20000678

08001d44 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <Error_Handler+0x8>

08001d50 <_write>:
{
}
/* USER CODE END Error_Handler_Debug */
}
int _write(int file, char *ptr, int len) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <_write+0x28>)
 8001d68:	f004 ff7e 	bl	8006c68 <HAL_UART_Transmit>
  return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000708 	.word	0x20000708

08001d7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d82:	f000 fa27 	bl	80021d4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d86:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2178      	movs	r1, #120	@ 0x78
 8001d8e:	485b      	ldr	r0, [pc, #364]	@ (8001efc <SSD1306_Init+0x180>)
 8001d90:	f002 f97c 	bl	800408c <HAL_I2C_IsDeviceReady>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e0a9      	b.n	8001ef2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001d9e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001da2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001da4:	e002      	b.n	8001dac <SSD1306_Init+0x30>
		p--;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f9      	bne.n	8001da6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001db2:	22ae      	movs	r2, #174	@ 0xae
 8001db4:	2100      	movs	r1, #0
 8001db6:	2078      	movs	r0, #120	@ 0x78
 8001db8:	f000 fa88 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2078      	movs	r0, #120	@ 0x78
 8001dc2:	f000 fa83 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2078      	movs	r0, #120	@ 0x78
 8001dcc:	f000 fa7e 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001dd0:	22b0      	movs	r2, #176	@ 0xb0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2078      	movs	r0, #120	@ 0x78
 8001dd6:	f000 fa79 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001dda:	22c8      	movs	r2, #200	@ 0xc8
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2078      	movs	r0, #120	@ 0x78
 8001de0:	f000 fa74 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2078      	movs	r0, #120	@ 0x78
 8001dea:	f000 fa6f 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001dee:	2210      	movs	r2, #16
 8001df0:	2100      	movs	r1, #0
 8001df2:	2078      	movs	r0, #120	@ 0x78
 8001df4:	f000 fa6a 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001df8:	2240      	movs	r2, #64	@ 0x40
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2078      	movs	r0, #120	@ 0x78
 8001dfe:	f000 fa65 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e02:	2281      	movs	r2, #129	@ 0x81
 8001e04:	2100      	movs	r1, #0
 8001e06:	2078      	movs	r0, #120	@ 0x78
 8001e08:	f000 fa60 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e0c:	22ff      	movs	r2, #255	@ 0xff
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2078      	movs	r0, #120	@ 0x78
 8001e12:	f000 fa5b 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e16:	22a1      	movs	r2, #161	@ 0xa1
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2078      	movs	r0, #120	@ 0x78
 8001e1c:	f000 fa56 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e20:	22a6      	movs	r2, #166	@ 0xa6
 8001e22:	2100      	movs	r1, #0
 8001e24:	2078      	movs	r0, #120	@ 0x78
 8001e26:	f000 fa51 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e2a:	22a8      	movs	r2, #168	@ 0xa8
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2078      	movs	r0, #120	@ 0x78
 8001e30:	f000 fa4c 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e34:	223f      	movs	r2, #63	@ 0x3f
 8001e36:	2100      	movs	r1, #0
 8001e38:	2078      	movs	r0, #120	@ 0x78
 8001e3a:	f000 fa47 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e3e:	22a4      	movs	r2, #164	@ 0xa4
 8001e40:	2100      	movs	r1, #0
 8001e42:	2078      	movs	r0, #120	@ 0x78
 8001e44:	f000 fa42 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e48:	22d3      	movs	r2, #211	@ 0xd3
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2078      	movs	r0, #120	@ 0x78
 8001e4e:	f000 fa3d 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2078      	movs	r0, #120	@ 0x78
 8001e58:	f000 fa38 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e5c:	22d5      	movs	r2, #213	@ 0xd5
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2078      	movs	r0, #120	@ 0x78
 8001e62:	f000 fa33 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e66:	22f0      	movs	r2, #240	@ 0xf0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2078      	movs	r0, #120	@ 0x78
 8001e6c:	f000 fa2e 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e70:	22d9      	movs	r2, #217	@ 0xd9
 8001e72:	2100      	movs	r1, #0
 8001e74:	2078      	movs	r0, #120	@ 0x78
 8001e76:	f000 fa29 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e7a:	2222      	movs	r2, #34	@ 0x22
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2078      	movs	r0, #120	@ 0x78
 8001e80:	f000 fa24 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e84:	22da      	movs	r2, #218	@ 0xda
 8001e86:	2100      	movs	r1, #0
 8001e88:	2078      	movs	r0, #120	@ 0x78
 8001e8a:	f000 fa1f 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e8e:	2212      	movs	r2, #18
 8001e90:	2100      	movs	r1, #0
 8001e92:	2078      	movs	r0, #120	@ 0x78
 8001e94:	f000 fa1a 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e98:	22db      	movs	r2, #219	@ 0xdb
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2078      	movs	r0, #120	@ 0x78
 8001e9e:	f000 fa15 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2078      	movs	r0, #120	@ 0x78
 8001ea8:	f000 fa10 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001eac:	228d      	movs	r2, #141	@ 0x8d
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2078      	movs	r0, #120	@ 0x78
 8001eb2:	f000 fa0b 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001eb6:	2214      	movs	r2, #20
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2078      	movs	r0, #120	@ 0x78
 8001ebc:	f000 fa06 	bl	80022cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ec0:	22af      	movs	r2, #175	@ 0xaf
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2078      	movs	r0, #120	@ 0x78
 8001ec6:	f000 fa01 	bl	80022cc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001eca:	222e      	movs	r2, #46	@ 0x2e
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2078      	movs	r0, #120	@ 0x78
 8001ed0:	f000 f9fc 	bl	80022cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f843 	bl	8001f60 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001eda:	f000 f813 	bl	8001f04 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <SSD1306_Init+0x184>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <SSD1306_Init+0x184>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SSD1306_Init+0x184>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000f8 	.word	0x200000f8
 8001f00:	20000594 	.word	0x20000594

08001f04 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e01d      	b.n	8001f4c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	3b50      	subs	r3, #80	@ 0x50
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2078      	movs	r0, #120	@ 0x78
 8001f1c:	f000 f9d6 	bl	80022cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2078      	movs	r0, #120	@ 0x78
 8001f26:	f000 f9d1 	bl	80022cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2078      	movs	r0, #120	@ 0x78
 8001f30:	f000 f9cc 	bl	80022cc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	01db      	lsls	r3, r3, #7
 8001f38:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <SSD1306_UpdateScreen+0x58>)
 8001f3a:	441a      	add	r2, r3
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	2078      	movs	r0, #120	@ 0x78
 8001f42:	f000 f95d 	bl	8002200 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b07      	cmp	r3, #7
 8001f50:	d9de      	bls.n	8001f10 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000194 	.word	0x20000194

08001f60 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <SSD1306_Fill+0x14>
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <SSD1306_Fill+0x16>
 8001f74:	23ff      	movs	r3, #255	@ 0xff
 8001f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <SSD1306_Fill+0x2c>)
 8001f7e:	f009 fa23 	bl	800b3c8 <memset>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000194 	.word	0x20000194

08001f90 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	80bb      	strh	r3, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	70fb      	strb	r3, [r7, #3]
	if (
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fa6:	d848      	bhi.n	800203a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fac:	d845      	bhi.n	800203a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001fae:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <SSD1306_DrawPixel+0xb8>)
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d11a      	bne.n	8002000 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fca:	88fa      	ldrh	r2, [r7, #6]
 8001fcc:	88bb      	ldrh	r3, [r7, #4]
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	b298      	uxth	r0, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	01db      	lsls	r3, r3, #7
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <SSD1306_DrawPixel+0xbc>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	b25a      	sxtb	r2, r3
 8001fde:	88bb      	ldrh	r3, [r7, #4]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b259      	sxtb	r1, r3
 8001ff0:	88fa      	ldrh	r2, [r7, #6]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	01db      	lsls	r3, r3, #7
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2c9      	uxtb	r1, r1
 8001ffa:	4a14      	ldr	r2, [pc, #80]	@ (800204c <SSD1306_DrawPixel+0xbc>)
 8001ffc:	54d1      	strb	r1, [r2, r3]
 8001ffe:	e01d      	b.n	800203c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	88bb      	ldrh	r3, [r7, #4]
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	b298      	uxth	r0, r3
 8002008:	4603      	mov	r3, r0
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4413      	add	r3, r2
 800200e:	4a0f      	ldr	r2, [pc, #60]	@ (800204c <SSD1306_DrawPixel+0xbc>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	b25a      	sxtb	r2, r3
 8002014:	88bb      	ldrh	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	b25b      	sxtb	r3, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	b25b      	sxtb	r3, r3
 8002026:	4013      	ands	r3, r2
 8002028:	b259      	sxtb	r1, r3
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	4603      	mov	r3, r0
 800202e:	01db      	lsls	r3, r3, #7
 8002030:	4413      	add	r3, r2
 8002032:	b2c9      	uxtb	r1, r1
 8002034:	4a05      	ldr	r2, [pc, #20]	@ (800204c <SSD1306_DrawPixel+0xbc>)
 8002036:	54d1      	strb	r1, [r2, r3]
 8002038:	e000      	b.n	800203c <SSD1306_DrawPixel+0xac>
		return;
 800203a:	bf00      	nop
	}
}
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000594 	.word	0x20000594
 800204c:	20000194 	.word	0x20000194

08002050 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	460a      	mov	r2, r1
 800205a:	80fb      	strh	r3, [r7, #6]
 800205c:	4613      	mov	r3, r2
 800205e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002060:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <SSD1306_GotoXY+0x28>)
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002066:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <SSD1306_GotoXY+0x28>)
 8002068:	88bb      	ldrh	r3, [r7, #4]
 800206a:	8053      	strh	r3, [r2, #2]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000594 	.word	0x20000594

0800207c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800208c:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <SSD1306_Putc+0xf8>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
	if (
 8002098:	2b7f      	cmp	r3, #127	@ 0x7f
 800209a:	dc07      	bgt.n	80020ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800209c:	4b35      	ldr	r3, [pc, #212]	@ (8002174 <SSD1306_Putc+0xf8>)
 800209e:	885b      	ldrh	r3, [r3, #2]
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80020aa:	dd01      	ble.n	80020b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e05d      	b.n	800216c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e04b      	b.n	800214e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	3b20      	subs	r3, #32
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	7849      	ldrb	r1, [r1, #1]
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	440b      	add	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e030      	b.n	800213c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d010      	beq.n	800210c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <SSD1306_Putc+0xf8>)
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	b298      	uxth	r0, r3
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <SSD1306_Putc+0xf8>)
 80020f8:	885a      	ldrh	r2, [r3, #2]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	79ba      	ldrb	r2, [r7, #6]
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff ff43 	bl	8001f90 <SSD1306_DrawPixel>
 800210a:	e014      	b.n	8002136 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <SSD1306_Putc+0xf8>)
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b298      	uxth	r0, r3
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <SSD1306_Putc+0xf8>)
 800211a:	885a      	ldrh	r2, [r3, #2]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4413      	add	r3, r2
 8002122:	b299      	uxth	r1, r3
 8002124:	79bb      	ldrb	r3, [r7, #6]
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	f7ff ff2d 	bl	8001f90 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	3301      	adds	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4293      	cmp	r3, r2
 8002146:	d3c8      	bcc.n	80020da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	461a      	mov	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4293      	cmp	r3, r2
 8002158:	d3ad      	bcc.n	80020b6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <SSD1306_Putc+0xf8>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	4413      	add	r3, r2
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <SSD1306_Putc+0xf8>)
 8002168:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800216a:	79fb      	ldrb	r3, [r7, #7]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000594 	.word	0x20000594

08002178 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002186:	e012      	b.n	80021ae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	79fa      	ldrb	r2, [r7, #7]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff73 	bl	800207c <SSD1306_Putc>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d002      	beq.n	80021a8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	e008      	b.n	80021ba <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e8      	bne.n	8002188 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	781b      	ldrb	r3, [r3, #0]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff feca 	bl	8001f60 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021cc:	f7ff fe9a 	bl	8001f04 <SSD1306_UpdateScreen>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <ssd1306_I2C_Init+0x28>)
 80021dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021de:	e002      	b.n	80021e6 <ssd1306_I2C_Init+0x12>
		p--;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	0003d090 	.word	0x0003d090

08002200 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b0c7      	sub	sp, #284	@ 0x11c
 8002204:	af02      	add	r7, sp, #8
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800220e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002212:	600a      	str	r2, [r1, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800221a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800221e:	4622      	mov	r2, r4
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002226:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800222a:	4602      	mov	r2, r0
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002232:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002236:	460a      	mov	r2, r1
 8002238:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800223a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800223e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002242:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002246:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002254:	e015      	b.n	8002282 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002256:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800225a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800225e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	441a      	add	r2, r3
 8002266:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800226a:	3301      	adds	r3, #1
 800226c:	7811      	ldrb	r1, [r2, #0]
 800226e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002272:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002276:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002278:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800227c:	3301      	adds	r3, #1
 800227e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002282:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002286:	b29b      	uxth	r3, r3
 8002288:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800228c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d8df      	bhi.n	8002256 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800229a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b299      	uxth	r1, r3
 80022a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f107 020c 	add.w	r2, r7, #12
 80022b4:	200a      	movs	r0, #10
 80022b6:	9000      	str	r0, [sp, #0]
 80022b8:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <ssd1306_I2C_WriteMulti+0xc8>)
 80022ba:	f001 fde9 	bl	8003e90 <HAL_I2C_Master_Transmit>
}
 80022be:	bf00      	nop
 80022c0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	200000f8 	.word	0x200000f8

080022cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
 80022d6:	460b      	mov	r3, r1
 80022d8:	71bb      	strb	r3, [r7, #6]
 80022da:	4613      	mov	r3, r2
 80022dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022e2:	797b      	ldrb	r3, [r7, #5]
 80022e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	b299      	uxth	r1, r3
 80022ea:	f107 020c 	add.w	r2, r7, #12
 80022ee:	230a      	movs	r3, #10
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2302      	movs	r3, #2
 80022f4:	4803      	ldr	r0, [pc, #12]	@ (8002304 <ssd1306_I2C_Write+0x38>)
 80022f6:	f001 fdcb 	bl	8003e90 <HAL_I2C_Master_Transmit>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200000f8 	.word	0x200000f8

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_MspInit+0x54>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_MspInit+0x54>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_MspInit+0x54>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_MspInit+0x54>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <HAL_MspInit+0x54>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	@ 0x40
 800233a:	4b08      	ldr	r3, [pc, #32]	@ (800235c <HAL_MspInit+0x54>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	210f      	movs	r1, #15
 800234a:	f06f 0001 	mvn.w	r0, #1
 800234e:	f001 f9d9 	bl	8003704 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	@ 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4b33      	ldr	r3, [pc, #204]	@ (8002444 <HAL_InitTick+0xe4>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	4a32      	ldr	r2, [pc, #200]	@ (8002444 <HAL_InitTick+0xe4>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002380:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <HAL_InitTick+0xe4>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fb1c 	bl	80049d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023a6:	f002 faed 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80023aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80023ac:	e004      	b.n	80023b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023ae:	f002 fae9 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80023b2:	4603      	mov	r3, r0
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ba:	4a23      	ldr	r2, [pc, #140]	@ (8002448 <HAL_InitTick+0xe8>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	3b01      	subs	r3, #1
 80023c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_InitTick+0xec>)
 80023c8:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_InitTick+0xf0>)
 80023ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023cc:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <HAL_InitTick+0xec>)
 80023ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023d4:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <HAL_InitTick+0xec>)
 80023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023da:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <HAL_InitTick+0xec>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <HAL_InitTick+0xec>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_InitTick+0xec>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023ec:	4817      	ldr	r0, [pc, #92]	@ (800244c <HAL_InitTick+0xec>)
 80023ee:	f002 fff1 	bl	80053d4 <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11b      	bne.n	8002438 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002400:	4812      	ldr	r0, [pc, #72]	@ (800244c <HAL_InitTick+0xec>)
 8002402:	f003 f837 	bl	8005474 <HAL_TIM_Base_Start_IT>
 8002406:	4603      	mov	r3, r0
 8002408:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800240c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002410:	2b00      	cmp	r3, #0
 8002412:	d111      	bne.n	8002438 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002414:	2036      	movs	r0, #54	@ 0x36
 8002416:	f001 f991 	bl	800373c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d808      	bhi.n	8002432 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	2036      	movs	r0, #54	@ 0x36
 8002426:	f001 f96d 	bl	8003704 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <HAL_InitTick+0xf4>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e002      	b.n	8002438 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002438:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800243c:	4618      	mov	r0, r3
 800243e:	3738      	adds	r7, #56	@ 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	431bde83 	.word	0x431bde83
 800244c:	2000059c 	.word	0x2000059c
 8002450:	40001000 	.word	0x40001000
 8002454:	20000028 	.word	0x20000028

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <NMI_Handler+0x4>

08002460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <MemManage_Handler+0x4>

08002470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <UsageFault_Handler+0x4>

08002480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <TIM3_IRQHandler+0x10>)
 8002496:	f003 faf7 	bl	8005a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000678 	.word	0x20000678

080024a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <USART1_IRQHandler+0x10>)
 80024aa:	f004 fcff 	bl	8006eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200006c0 	.word	0x200006c0

080024b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM6_DAC_IRQHandler+0x10>)
 80024be:	f003 fae3 	bl	8005a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000059c 	.word	0x2000059c

080024cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e00a      	b.n	80024f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024de:	f3af 8000 	nop.w
 80024e2:	4601      	mov	r1, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf0      	blt.n	80024de <_read+0x12>
  }

  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800252e:	605a      	str	r2, [r3, #4]
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_isatty>:

int _isatty(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f008 ff1a 	bl	800b3d8 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20020000 	.word	0x20020000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	200005e4 	.word	0x200005e4
 80025d8:	200051f0 	.word	0x200051f0

080025dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <SystemInit+0x20>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <SystemInit+0x20>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b096      	sub	sp, #88	@ 0x58
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002606:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002614:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
 800262c:	611a      	str	r2, [r3, #16]
 800262e:	615a      	str	r2, [r3, #20]
 8002630:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2220      	movs	r2, #32
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f008 fec5 	bl	800b3c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800263e:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002640:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <MX_TIM1_Init+0x140>)
 8002642:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002644:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002646:	2253      	movs	r2, #83	@ 0x53
 8002648:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b3c      	ldr	r3, [pc, #240]	@ (800273c <MX_TIM1_Init+0x13c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002650:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002652:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002656:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b38      	ldr	r3, [pc, #224]	@ (800273c <MX_TIM1_Init+0x13c>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002664:	4b35      	ldr	r3, [pc, #212]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800266a:	4834      	ldr	r0, [pc, #208]	@ (800273c <MX_TIM1_Init+0x13c>)
 800266c:	f002 feb2 	bl	80053d4 <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002676:	f7ff fb65 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002680:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002684:	4619      	mov	r1, r3
 8002686:	482d      	ldr	r0, [pc, #180]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002688:	f003 fc4c 	bl	8005f24 <HAL_TIM_ConfigClockSource>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002692:	f7ff fb57 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002696:	4829      	ldr	r0, [pc, #164]	@ (800273c <MX_TIM1_Init+0x13c>)
 8002698:	f002 ff5c 	bl	8005554 <HAL_TIM_PWM_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80026a2:	f7ff fb4f 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026b2:	4619      	mov	r1, r3
 80026b4:	4821      	ldr	r0, [pc, #132]	@ (800273c <MX_TIM1_Init+0x13c>)
 80026b6:	f004 f9a5 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80026c0:	f7ff fb40 	bl	8001d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	@ 0x60
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 80026c8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026d2:	2300      	movs	r3, #0
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e6:	2200      	movs	r2, #0
 80026e8:	4619      	mov	r1, r3
 80026ea:	4814      	ldr	r0, [pc, #80]	@ (800273c <MX_TIM1_Init+0x13c>)
 80026ec:	f003 fb58 	bl	8005da0 <HAL_TIM_PWM_ConfigChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80026f6:	f7ff fb25 	bl	8001d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800270e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	4619      	mov	r1, r3
 800271c:	4807      	ldr	r0, [pc, #28]	@ (800273c <MX_TIM1_Init+0x13c>)
 800271e:	f004 f9ed 	bl	8006afc <HAL_TIMEx_ConfigBreakDeadTime>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002728:	f7ff fb0c 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800272c:	4803      	ldr	r0, [pc, #12]	@ (800273c <MX_TIM1_Init+0x13c>)
 800272e:	f000 f959 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8002732:	bf00      	nop
 8002734:	3758      	adds	r7, #88	@ 0x58
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200005e8 	.word	0x200005e8
 8002740:	40010000 	.word	0x40010000

08002744 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	@ 0x38
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	615a      	str	r2, [r3, #20]
 8002772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002774:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <MX_TIM2_Init+0xe8>)
 8002776:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800277a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <MX_TIM2_Init+0xe8>)
 800277e:	2253      	movs	r2, #83	@ 0x53
 8002780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <MX_TIM2_Init+0xe8>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <MX_TIM2_Init+0xe8>)
 800278a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800278e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <MX_TIM2_Init+0xe8>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <MX_TIM2_Init+0xe8>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800279c:	4823      	ldr	r0, [pc, #140]	@ (800282c <MX_TIM2_Init+0xe8>)
 800279e:	f002 fe19 	bl	80053d4 <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80027a8:	f7ff facc 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027b6:	4619      	mov	r1, r3
 80027b8:	481c      	ldr	r0, [pc, #112]	@ (800282c <MX_TIM2_Init+0xe8>)
 80027ba:	f003 fbb3 	bl	8005f24 <HAL_TIM_ConfigClockSource>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80027c4:	f7ff fabe 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027c8:	4818      	ldr	r0, [pc, #96]	@ (800282c <MX_TIM2_Init+0xe8>)
 80027ca:	f002 fec3 	bl	8005554 <HAL_TIM_PWM_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027d4:	f7ff fab6 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027e0:	f107 0320 	add.w	r3, r7, #32
 80027e4:	4619      	mov	r1, r3
 80027e6:	4811      	ldr	r0, [pc, #68]	@ (800282c <MX_TIM2_Init+0xe8>)
 80027e8:	f004 f90c 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027f2:	f7ff faa7 	bl	8001d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f6:	2360      	movs	r3, #96	@ 0x60
 80027f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80027fa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80027fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2200      	movs	r2, #0
 800280c:	4619      	mov	r1, r3
 800280e:	4807      	ldr	r0, [pc, #28]	@ (800282c <MX_TIM2_Init+0xe8>)
 8002810:	f003 fac6 	bl	8005da0 <HAL_TIM_PWM_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800281a:	f7ff fa93 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800281e:	4803      	ldr	r0, [pc, #12]	@ (800282c <MX_TIM2_Init+0xe8>)
 8002820:	f000 f8e0 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8002824:	bf00      	nop
 8002826:	3738      	adds	r7, #56	@ 0x38
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000630 	.word	0x20000630

08002830 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002840:	463b      	mov	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800284c:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 800284e:	4a21      	ldr	r2, [pc, #132]	@ (80028d4 <MX_TIM3_Init+0xa4>)
 8002850:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002852:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 8002854:	2247      	movs	r2, #71	@ 0x47
 8002856:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800285e:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 8002860:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002864:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002872:	4817      	ldr	r0, [pc, #92]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 8002874:	f002 ff90 	bl	8005798 <HAL_TIM_IC_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800287e:	f7ff fa61 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	4619      	mov	r1, r3
 8002890:	480f      	ldr	r0, [pc, #60]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 8002892:	f004 f8b7 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800289c:	f7ff fa52 	bl	8001d44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028a0:	2300      	movs	r3, #0
 80028a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028a4:	2301      	movs	r3, #1
 80028a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	2200      	movs	r2, #0
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	@ (80028d0 <MX_TIM3_Init+0xa0>)
 80028b8:	f003 f9d6 	bl	8005c68 <HAL_TIM_IC_ConfigChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80028c2:	f7ff fa3f 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000678 	.word	0x20000678
 80028d4:	40000400 	.word	0x40000400

080028d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a15      	ldr	r2, [pc, #84]	@ (800293c <HAL_TIM_Base_MspInit+0x64>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <HAL_TIM_Base_MspInit+0x68>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	4a13      	ldr	r2, [pc, #76]	@ (8002940 <HAL_TIM_Base_MspInit+0x68>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_TIM_Base_MspInit+0x68>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002906:	e012      	b.n	800292e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002910:	d10d      	bne.n	800292e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <HAL_TIM_Base_MspInit+0x68>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a09      	ldr	r2, [pc, #36]	@ (8002940 <HAL_TIM_Base_MspInit+0x68>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <HAL_TIM_Base_MspInit+0x68>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d133      	bne.n	80029ce <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <HAL_TIM_IC_MspInit+0x98>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <HAL_TIM_IC_MspInit+0x98>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_TIM_IC_MspInit+0x98>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_TIM_IC_MspInit+0x98>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <HAL_TIM_IC_MspInit+0x98>)
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_TIM_IC_MspInit+0x98>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299e:	2340      	movs	r3, #64	@ 0x40
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ae:	2302      	movs	r3, #2
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4809      	ldr	r0, [pc, #36]	@ (80029e0 <HAL_TIM_IC_MspInit+0x9c>)
 80029ba:	f000 ff5f 	bl	800387c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2105      	movs	r1, #5
 80029c2:	201d      	movs	r0, #29
 80029c4:	f000 fe9e 	bl	8003704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029c8:	201d      	movs	r0, #29
 80029ca:	f000 feb7 	bl	800373c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	@ 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020800 	.word	0x40020800

080029e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a25      	ldr	r2, [pc, #148]	@ (8002a98 <HAL_TIM_MspPostInit+0xb4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11f      	bne.n	8002a46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_TIM_MspPostInit+0xb8>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_TIM_MspPostInit+0xb8>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_TIM_MspPostInit+0xb8>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4818      	ldr	r0, [pc, #96]	@ (8002aa0 <HAL_TIM_MspPostInit+0xbc>)
 8002a40:	f000 ff1c 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a44:	e023      	b.n	8002a8e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d11e      	bne.n	8002a8e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <HAL_TIM_MspPostInit+0xb8>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <HAL_TIM_MspPostInit+0xb8>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_TIM_MspPostInit+0xb8>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <HAL_TIM_MspPostInit+0xbc>)
 8002a8a:	f000 fef7 	bl	800387c <HAL_GPIO_Init>
}
 8002a8e:	bf00      	nop
 8002a90:	3728      	adds	r7, #40	@ 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020000 	.word	0x40020000

08002aa4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002aaa:	4a12      	ldr	r2, [pc, #72]	@ (8002af4 <MX_USART1_UART_Init+0x50>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002aca:	220c      	movs	r2, #12
 8002acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ada:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002adc:	f004 f874 	bl	8006bc8 <HAL_UART_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ae6:	f7ff f92d 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200006c0 	.word	0x200006c0
 8002af4:	40011000 	.word	0x40011000

08002af8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <MX_USART2_UART_Init+0x50>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b30:	f004 f84a 	bl	8006bc8 <HAL_UART_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b3a:	f7ff f903 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000708 	.word	0x20000708
 8002b48:	40004400 	.word	0x40004400

08002b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	@ 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a36      	ldr	r2, [pc, #216]	@ (8002c44 <HAL_UART_MspInit+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d135      	bne.n	8002bda <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	4b35      	ldr	r3, [pc, #212]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	4a34      	ldr	r2, [pc, #208]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7e:	4b32      	ldr	r3, [pc, #200]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4a2d      	ldr	r2, [pc, #180]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ba6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bb8:	2307      	movs	r3, #7
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4822      	ldr	r0, [pc, #136]	@ (8002c4c <HAL_UART_MspInit+0x100>)
 8002bc4:	f000 fe5a 	bl	800387c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2105      	movs	r1, #5
 8002bcc:	2025      	movs	r0, #37	@ 0x25
 8002bce:	f000 fd99 	bl	8003704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd2:	2025      	movs	r0, #37	@ 0x25
 8002bd4:	f000 fdb2 	bl	800373c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bd8:	e030      	b.n	8002c3c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_UART_MspInit+0x104>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d12b      	bne.n	8002c3c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	4b17      	ldr	r3, [pc, #92]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	4a16      	ldr	r2, [pc, #88]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf4:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c10:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c1c:	230c      	movs	r3, #12
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <HAL_UART_MspInit+0x100>)
 8002c38:	f000 fe20 	bl	800387c <HAL_GPIO_Init>
}
 8002c3c:	bf00      	nop
 8002c3e:	3730      	adds	r7, #48	@ 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40011000 	.word	0x40011000
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40004400 	.word	0x40004400

08002c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c58:	f7ff fcc0 	bl	80025dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c5c:	480c      	ldr	r0, [pc, #48]	@ (8002c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c5e:	490d      	ldr	r1, [pc, #52]	@ (8002c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c60:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c64:	e002      	b.n	8002c6c <LoopCopyDataInit>

08002c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6a:	3304      	adds	r3, #4

08002c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c70:	d3f9      	bcc.n	8002c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c72:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c78:	e001      	b.n	8002c7e <LoopFillZerobss>

08002c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c7c:	3204      	adds	r2, #4

08002c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c80:	d3fb      	bcc.n	8002c7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c82:	f008 fbaf 	bl	800b3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c86:	f7fe fbe3 	bl	8001450 <main>
  bx  lr    
 8002c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c94:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c98:	0800d74c 	.word	0x0800d74c
  ldr r2, =_sbss
 8002c9c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002ca0:	200051f0 	.word	0x200051f0

08002ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <ADC_IRQHandler>
	...

08002ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <HAL_Init+0x40>)
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <HAL_Init+0x40>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <HAL_Init+0x40>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 fd0c 	bl	80036ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd6:	200f      	movs	r0, #15
 8002cd8:	f7ff fb42 	bl	8002360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cdc:	f7ff fb14 	bl	8002308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_IncTick+0x20>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_IncTick+0x24>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <HAL_IncTick+0x24>)
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000002c 	.word	0x2000002c
 8002d10:	20000750 	.word	0x20000750

08002d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return uwTick;
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <HAL_GetTick+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000750 	.word	0x20000750

08002d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff ffee 	bl	8002d14 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d44:	d005      	beq.n	8002d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_Delay+0x44>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d52:	bf00      	nop
 8002d54:	f7ff ffde 	bl	8002d14 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d8f7      	bhi.n	8002d54 <HAL_Delay+0x28>
  {
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2000002c 	.word	0x2000002c

08002d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e033      	b.n	8002df2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe f84c 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dba:	f023 0302 	bic.w	r3, r3, #2
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fae8 	bl	800339c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002de2:	e001      	b.n	8002de8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Start+0x1a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0b2      	b.n	8002f7c <HAL_ADC_Start+0x180>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d018      	beq.n	8002e5e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e3c:	4b52      	ldr	r3, [pc, #328]	@ (8002f88 <HAL_ADC_Start+0x18c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a52      	ldr	r2, [pc, #328]	@ (8002f8c <HAL_ADC_Start+0x190>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9a      	lsrs	r2, r3, #18
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f9      	bne.n	8002e52 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d17a      	bne.n	8002f62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eaa:	d106      	bne.n	8002eba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	f023 0206 	bic.w	r2, r3, #6
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec8:	4b31      	ldr	r3, [pc, #196]	@ (8002f90 <HAL_ADC_Start+0x194>)
 8002eca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d12a      	bne.n	8002f38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f94 <HAL_ADC_Start+0x198>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d015      	beq.n	8002f18 <HAL_ADC_Start+0x11c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a29      	ldr	r2, [pc, #164]	@ (8002f98 <HAL_ADC_Start+0x19c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d105      	bne.n	8002f02 <HAL_ADC_Start+0x106>
 8002ef6:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_ADC_Start+0x194>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a25      	ldr	r2, [pc, #148]	@ (8002f9c <HAL_ADC_Start+0x1a0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d136      	bne.n	8002f7a <HAL_ADC_Start+0x17e>
 8002f0c:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_ADC_Start+0x194>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d130      	bne.n	8002f7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d129      	bne.n	8002f7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	e020      	b.n	8002f7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <HAL_ADC_Start+0x198>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d11b      	bne.n	8002f7a <HAL_ADC_Start+0x17e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d114      	bne.n	8002f7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e00b      	b.n	8002f7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f043 0210 	orr.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	20000024 	.word	0x20000024
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	40012300 	.word	0x40012300
 8002f94:	40012000 	.word	0x40012000
 8002f98:	40012100 	.word	0x40012100
 8002f9c:	40012200 	.word	0x40012200

08002fa0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Stop+0x16>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e021      	b.n	8002ffa <HAL_ADC_Stop+0x5a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d113      	bne.n	800304c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800302e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003032:	d10b      	bne.n	800304c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e063      	b.n	8003114 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800304c:	f7ff fe62 	bl	8002d14 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003052:	e021      	b.n	8003098 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800305a:	d01d      	beq.n	8003098 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_ADC_PollForConversion+0x6c>
 8003062:	f7ff fe57 	bl	8002d14 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d212      	bcs.n	8003098 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d00b      	beq.n	8003098 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f043 0204 	orr.w	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03d      	b.n	8003114 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d1d6      	bne.n	8003054 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0212 	mvn.w	r2, #18
 80030ae:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d123      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11f      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d111      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e113      	b.n	800337c <HAL_ADC_ConfigChannel+0x244>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b09      	cmp	r3, #9
 8003162:	d925      	bls.n	80031b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68d9      	ldr	r1, [r3, #12]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	3b1e      	subs	r3, #30
 800317a:	2207      	movs	r2, #7
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43da      	mvns	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68d9      	ldr	r1, [r3, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	4603      	mov	r3, r0
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4403      	add	r3, r0
 80031a2:	3b1e      	subs	r3, #30
 80031a4:	409a      	lsls	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	e022      	b.n	80031f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	2207      	movs	r2, #7
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	400a      	ands	r2, r1
 80031d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6919      	ldr	r1, [r3, #16]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4403      	add	r3, r0
 80031ec:	409a      	lsls	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d824      	bhi.n	8003248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b05      	subs	r3, #5
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	400a      	ands	r2, r1
 800321e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b05      	subs	r3, #5
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34
 8003246:	e04c      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d824      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b23      	subs	r3, #35	@ 0x23
 8003262:	221f      	movs	r2, #31
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b23      	subs	r3, #35	@ 0x23
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
 8003298:	e023      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b41      	subs	r3, #65	@ 0x41
 80032ac:	221f      	movs	r2, #31
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4618      	mov	r0, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b41      	subs	r3, #65	@ 0x41
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_ADC_ConfigChannel+0x250>)
 80032e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a28      	ldr	r2, [pc, #160]	@ (800338c <HAL_ADC_ConfigChannel+0x254>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10f      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d8>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b12      	cmp	r3, #18
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_ADC_ConfigChannel+0x254>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d12b      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_ADC_ConfigChannel+0x258>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_ADC_ConfigChannel+0x1f4>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b11      	cmp	r3, #17
 800332a:	d122      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <HAL_ADC_ConfigChannel+0x258>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800334e:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <HAL_ADC_ConfigChannel+0x25c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_ADC_ConfigChannel+0x260>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	0c9a      	lsrs	r2, r3, #18
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003364:	e002      	b.n	800336c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	40012000 	.word	0x40012000
 8003390:	10000012 	.word	0x10000012
 8003394:	20000024 	.word	0x20000024
 8003398:	431bde83 	.word	0x431bde83

0800339c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a4:	4b79      	ldr	r3, [pc, #484]	@ (800358c <ADC_Init+0x1f0>)
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	4a58      	ldr	r2, [pc, #352]	@ (8003590 <ADC_Init+0x1f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e00f      	b.n	800349a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003498:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0202 	bic.w	r2, r2, #2
 80034a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e1b      	ldrb	r3, [r3, #24]
 80034b4:	005a      	lsls	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	3b01      	subs	r3, #1
 80034f4:	035a      	lsls	r2, r3, #13
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e007      	b.n	8003510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	3b01      	subs	r3, #1
 800352c:	051a      	lsls	r2, r3, #20
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003552:	025a      	lsls	r2, r3, #9
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	029a      	lsls	r2, r3, #10
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012300 	.word	0x40012300
 8003590:	0f000001 	.word	0x0f000001

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	@ (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4907      	ldr	r1, [pc, #28]	@ (8003630 <__NVIC_EnableIRQ+0x38>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	db0a      	blt.n	800365e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	490c      	ldr	r1, [pc, #48]	@ (8003680 <__NVIC_SetPriority+0x4c>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	440b      	add	r3, r1
 8003658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800365c:	e00a      	b.n	8003674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4908      	ldr	r1, [pc, #32]	@ (8003684 <__NVIC_SetPriority+0x50>)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3b04      	subs	r3, #4
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	440b      	add	r3, r1
 8003672:	761a      	strb	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000e100 	.word	0xe000e100
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	@ 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf28      	it	cs
 80036a6:	2304      	movcs	r3, #4
 80036a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d902      	bls.n	80036b8 <NVIC_EncodePriority+0x30>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3b03      	subs	r3, #3
 80036b6:	e000      	b.n	80036ba <NVIC_EncodePriority+0x32>
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	401a      	ands	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43d9      	mvns	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	4313      	orrs	r3, r2
         );
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	@ 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff4c 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003716:	f7ff ff61 	bl	80035dc <__NVIC_GetPriorityGrouping>
 800371a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6978      	ldr	r0, [r7, #20]
 8003722:	f7ff ffb1 	bl	8003688 <NVIC_EncodePriority>
 8003726:	4602      	mov	r2, r0
 8003728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff80 	bl	8003634 <__NVIC_SetPriority>
}
 8003734:	bf00      	nop
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff54 	bl	80035f8 <__NVIC_EnableIRQ>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003766:	f7ff fad5 	bl	8002d14 <HAL_GetTick>
 800376a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d008      	beq.n	800378a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2280      	movs	r2, #128	@ 0x80
 800377c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e052      	b.n	8003830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_Abort+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037da:	e013      	b.n	8003804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037dc:	f7ff fa9a 	bl	8002d14 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d90c      	bls.n	8003804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2203      	movs	r2, #3
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e015      	b.n	8003830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e4      	bne.n	80037dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	223f      	movs	r2, #63	@ 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d004      	beq.n	8003856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2280      	movs	r2, #128	@ 0x80
 8003850:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00c      	b.n	8003870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2205      	movs	r2, #5
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e165      	b.n	8003b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8154 	bne.w	8003b5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d005      	beq.n	80038ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d017      	beq.n	800396c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80ae 	beq.w	8003b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b5d      	ldr	r3, [pc, #372]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b5a      	ldr	r3, [pc, #360]	@ (8003b7c <HAL_GPIO_Init+0x300>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1e:	4a58      	ldr	r2, [pc, #352]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4f      	ldr	r2, [pc, #316]	@ (8003b84 <HAL_GPIO_Init+0x308>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d025      	beq.n	8003a96 <HAL_GPIO_Init+0x21a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b88 <HAL_GPIO_Init+0x30c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <HAL_GPIO_Init+0x216>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4d      	ldr	r2, [pc, #308]	@ (8003b8c <HAL_GPIO_Init+0x310>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d019      	beq.n	8003a8e <HAL_GPIO_Init+0x212>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b90 <HAL_GPIO_Init+0x314>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x20e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	@ (8003b94 <HAL_GPIO_Init+0x318>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x20a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b98 <HAL_GPIO_Init+0x31c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a49      	ldr	r2, [pc, #292]	@ (8003b9c <HAL_GPIO_Init+0x320>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x202>
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	e00c      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00a      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a82:	2305      	movs	r3, #5
 8003a84:	e008      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a86:	2304      	movs	r3, #4
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a96:	2300      	movs	r3, #0
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa8:	4935      	ldr	r1, [pc, #212]	@ (8003b80 <HAL_GPIO_Init+0x304>)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ada:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b04:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b0a:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b58:	4a11      	ldr	r2, [pc, #68]	@ (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	f67f ae96 	bls.w	8003898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3724      	adds	r7, #36	@ 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40020c00 	.word	0x40020c00
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40021400 	.word	0x40021400
 8003b9c:	40021800 	.word	0x40021800
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	e001      	b.n	8003bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
 8003be0:	4613      	mov	r3, r2
 8003be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be4:	787b      	ldrb	r3, [r7, #1]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf0:	e003      	b.n	8003bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	041a      	lsls	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e12b      	b.n	8003e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fbac 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	@ 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f000 fe8a 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a81      	ldr	r2, [pc, #516]	@ (8003e7c <HAL_I2C_Init+0x274>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d807      	bhi.n	8003c8c <HAL_I2C_Init+0x84>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a80      	ldr	r2, [pc, #512]	@ (8003e80 <HAL_I2C_Init+0x278>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bf94      	ite	ls
 8003c84:	2301      	movls	r3, #1
 8003c86:	2300      	movhi	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e006      	b.n	8003c9a <HAL_I2C_Init+0x92>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e84 <HAL_I2C_Init+0x27c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bf94      	ite	ls
 8003c94:	2301      	movls	r3, #1
 8003c96:	2300      	movhi	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0e7      	b.n	8003e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a78      	ldr	r2, [pc, #480]	@ (8003e88 <HAL_I2C_Init+0x280>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0c9b      	lsrs	r3, r3, #18
 8003cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e7c <HAL_I2C_Init+0x274>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d802      	bhi.n	8003cdc <HAL_I2C_Init+0xd4>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	e009      	b.n	8003cf0 <HAL_I2C_Init+0xe8>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	4a69      	ldr	r2, [pc, #420]	@ (8003e8c <HAL_I2C_Init+0x284>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	3301      	adds	r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	495c      	ldr	r1, [pc, #368]	@ (8003e7c <HAL_I2C_Init+0x274>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d819      	bhi.n	8003d44 <HAL_I2C_Init+0x13c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e59      	subs	r1, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d24:	400b      	ands	r3, r1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_I2C_Init+0x138>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e59      	subs	r1, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	e051      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e04f      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d111      	bne.n	8003d70 <HAL_I2C_Init+0x168>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e012      	b.n	8003d96 <HAL_I2C_Init+0x18e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x196>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e022      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10e      	bne.n	8003dc4 <HAL_I2C_Init+0x1bc>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1e58      	subs	r0, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	440b      	add	r3, r1
 8003db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc2:	e00f      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	0099      	lsls	r1, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6809      	ldr	r1, [r1, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6911      	ldr	r1, [r2, #16]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	000186a0 	.word	0x000186a0
 8003e80:	001e847f 	.word	0x001e847f
 8003e84:	003d08ff 	.word	0x003d08ff
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	817b      	strh	r3, [r7, #10]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7fe ff36 	bl	8002d14 <HAL_GetTick>
 8003ea8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 80e0 	bne.w	8004078 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4970      	ldr	r1, [pc, #448]	@ (8004084 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa92 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0d3      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_Master_Transmit+0x50>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0cc      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2221      	movs	r2, #33	@ 0x21
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2210      	movs	r2, #16
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	893a      	ldrh	r2, [r7, #8]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a50      	ldr	r2, [pc, #320]	@ (8004088 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f48:	8979      	ldrh	r1, [r7, #10]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f9ca 	bl	80042e8 <I2C_MasterRequestWrite>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08d      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f74:	e066      	b.n	8004044 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	6a39      	ldr	r1, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fb50 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d107      	bne.n	8003f9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06b      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d11b      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x188>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	6a39      	ldr	r1, [r7, #32]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fb47 	bl	80046b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	2b04      	cmp	r3, #4
 800402e:	d107      	bne.n	8004040 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e01a      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d194      	bne.n	8003f76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	00100002 	.word	0x00100002
 8004088:	ffff0000 	.word	0xffff0000

0800408c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	@ 0x28
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	460b      	mov	r3, r1
 800409a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800409c:	f7fe fe3a 	bl	8002d14 <HAL_GetTick>
 80040a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	f040 8111 	bne.w	80042d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2319      	movs	r3, #25
 80040ba:	2201      	movs	r2, #1
 80040bc:	4988      	ldr	r1, [pc, #544]	@ (80042e0 <HAL_I2C_IsDeviceReady+0x254>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f994 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	e104      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_I2C_IsDeviceReady+0x50>
 80040d8:	2302      	movs	r3, #2
 80040da:	e0fd      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d007      	beq.n	8004102 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004110:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2224      	movs	r2, #36	@ 0x24
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a70      	ldr	r2, [pc, #448]	@ (80042e4 <HAL_I2C_IsDeviceReady+0x258>)
 8004124:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004134:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f952 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800415c:	d103      	bne.n	8004166 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004164:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0b6      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004178:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800417a:	f7fe fdcb 	bl	8002d14 <HAL_GetTick>
 800417e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041ae:	e025      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fe fdb0 	bl	8002d14 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <HAL_I2C_IsDeviceReady+0x13a>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22a0      	movs	r2, #160	@ 0xa0
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2ba0      	cmp	r3, #160	@ 0xa0
 8004206:	d005      	beq.n	8004214 <HAL_I2C_IsDeviceReady+0x188>
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <HAL_I2C_IsDeviceReady+0x188>
 800420e:	7dbb      	ldrb	r3, [r7, #22]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0cd      	beq.n	80041b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d129      	bne.n	800427e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004238:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2319      	movs	r3, #25
 8004256:	2201      	movs	r2, #1
 8004258:	4921      	ldr	r1, [pc, #132]	@ (80042e0 <HAL_I2C_IsDeviceReady+0x254>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8c6 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e036      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e02c      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004296:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	490f      	ldr	r1, [pc, #60]	@ (80042e0 <HAL_I2C_IsDeviceReady+0x254>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f8a2 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e012      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	f4ff af32 	bcc.w	8004126 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
  }
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	460b      	mov	r3, r1
 80042f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d006      	beq.n	8004312 <I2C_MasterRequestWrite+0x2a>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d003      	beq.n	8004312 <I2C_MasterRequestWrite+0x2a>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004310:	d108      	bne.n	8004324 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e00b      	b.n	800433c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	2b12      	cmp	r3, #18
 800432a:	d107      	bne.n	800433c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800433a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f84f 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004362:	d103      	bne.n	800436c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800436a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e035      	b.n	80043dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004378:	d108      	bne.n	800438c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004388:	611a      	str	r2, [r3, #16]
 800438a:	e01b      	b.n	80043c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800438c:	897b      	ldrh	r3, [r7, #10]
 800438e:	11db      	asrs	r3, r3, #7
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0306 	and.w	r3, r3, #6
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f063 030f 	orn	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	490e      	ldr	r1, [pc, #56]	@ (80043e4 <I2C_MasterRequestWrite+0xfc>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f898 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e010      	b.n	80043dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4907      	ldr	r1, [pc, #28]	@ (80043e8 <I2C_MasterRequestWrite+0x100>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f888 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00010008 	.word	0x00010008
 80043e8:	00010002 	.word	0x00010002

080043ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	e048      	b.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004404:	d044      	beq.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fc85 	bl	8002d14 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d139      	bne.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d10d      	bne.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	43da      	mvns	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4013      	ands	r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	e00c      	b.n	800445c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	43da      	mvns	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	429a      	cmp	r2, r3
 8004460:	d116      	bne.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e023      	b.n	80044d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10d      	bne.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	43da      	mvns	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	e00c      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	43da      	mvns	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d093      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ee:	e071      	b.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d123      	bne.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e067      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800454e:	d041      	beq.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fe fbe0 	bl	8002d14 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d136      	bne.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10c      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e00b      	b.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	43da      	mvns	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e021      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10c      	bne.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e00b      	b.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	f47f af6d 	bne.w	80044f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	e034      	b.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f886 	bl	8004740 <I2C_IsAcknowledgeFailed>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e034      	b.n	80046a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004644:	d028      	beq.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe fb65 	bl	8002d14 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11d      	bne.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	d016      	beq.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e007      	b.n	80046a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d1c3      	bne.n	800462e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046bc:	e034      	b.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f83e 	bl	8004740 <I2C_IsAcknowledgeFailed>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e034      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046d4:	d028      	beq.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe fb1d 	bl	8002d14 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11d      	bne.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d016      	beq.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e007      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d1c3      	bne.n	80046be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004756:	d11b      	bne.n	8004790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	f043 0204 	orr.w	r2, r3, #4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0cc      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b68      	ldr	r3, [pc, #416]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d90c      	bls.n	80047dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b65      	ldr	r3, [pc, #404]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b63      	ldr	r3, [pc, #396]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b8      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b59      	ldr	r3, [pc, #356]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a58      	ldr	r2, [pc, #352]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800480c:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4a52      	ldr	r2, [pc, #328]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b50      	ldr	r3, [pc, #320]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	494d      	ldr	r1, [pc, #308]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d044      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d119      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d003      	beq.n	800485e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	2b03      	cmp	r3, #3
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b3f      	ldr	r3, [pc, #252]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e067      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4934      	ldr	r1, [pc, #208]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fe fa40 	bl	8002d14 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe fa3c 	bl	8002d14 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e04f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d20c      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b20      	ldr	r3, [pc, #128]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e032      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4916      	ldr	r1, [pc, #88]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490e      	ldr	r1, [pc, #56]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004926:	f000 f887 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490a      	ldr	r1, [pc, #40]	@ (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a09      	ldr	r2, [pc, #36]	@ (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd fd0a 	bl	8002360 <HAL_InitTick>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023c00 	.word	0x40023c00
 800495c:	40023800 	.word	0x40023800
 8004960:	0800d6f0 	.word	0x0800d6f0
 8004964:	20000024 	.word	0x20000024
 8004968:	20000028 	.word	0x20000028

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000024 	.word	0x20000024

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	@ (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0800d700 	.word	0x0800d700

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	@ (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800d700 	.word	0x0800d700

080049d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	220f      	movs	r2, #15
 80049e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a08:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <HAL_RCC_GetClockConfig+0x60>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40023c00 	.word	0x40023c00

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b0ae      	sub	sp, #184	@ 0xb8
 8004a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	f200 8206 	bhi.w	8004e78 <HAL_RCC_GetSysClockFreq+0x440>
 8004a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004e79 	.word	0x08004e79
 8004a7c:	08004e79 	.word	0x08004e79
 8004a80:	08004e79 	.word	0x08004e79
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	08004e79 	.word	0x08004e79
 8004a8c:	08004e79 	.word	0x08004e79
 8004a90:	08004e79 	.word	0x08004e79
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004e79 	.word	0x08004e79
 8004a9c:	08004e79 	.word	0x08004e79
 8004aa0:	08004e79 	.word	0x08004e79
 8004aa4:	08004ca9 	.word	0x08004ca9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4bb9      	ldr	r3, [pc, #740]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004aae:	e1e7      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ab0:	4bb8      	ldr	r3, [pc, #736]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ab6:	e1e3      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab8:	4bb4      	ldr	r3, [pc, #720]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ac4:	4bb1      	ldr	r3, [pc, #708]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d071      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad0:	4bae      	ldr	r3, [pc, #696]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004adc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	f04f 0000 	mov.w	r0, #0
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	0159      	lsls	r1, r3, #5
 8004b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b08:	0150      	lsls	r0, r2, #5
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4621      	mov	r1, r4
 8004b10:	1a51      	subs	r1, r2, r1
 8004b12:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b14:	4629      	mov	r1, r5
 8004b16:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b28:	4649      	mov	r1, r9
 8004b2a:	018b      	lsls	r3, r1, #6
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b32:	4641      	mov	r1, r8
 8004b34:	018a      	lsls	r2, r1, #6
 8004b36:	4641      	mov	r1, r8
 8004b38:	1a51      	subs	r1, r2, r1
 8004b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b50:	4649      	mov	r1, r9
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4622      	mov	r2, r4
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	eb42 0303 	adc.w	r3, r2, r3
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b80:	4629      	mov	r1, r5
 8004b82:	024b      	lsls	r3, r1, #9
 8004b84:	4621      	mov	r1, r4
 8004b86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	024a      	lsls	r2, r1, #9
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ba0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ba4:	f7fb ff7a 	bl	8000a9c <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bb2:	e067      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb4:	4b75      	ldr	r3, [pc, #468]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bc0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bce:	2300      	movs	r3, #0
 8004bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	0159      	lsls	r1, r3, #5
 8004be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be8:	0150      	lsls	r0, r2, #5
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4621      	mov	r1, r4
 8004bf0:	1a51      	subs	r1, r2, r1
 8004bf2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c08:	4649      	mov	r1, r9
 8004c0a:	018b      	lsls	r3, r1, #6
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c12:	4641      	mov	r1, r8
 8004c14:	018a      	lsls	r2, r1, #6
 8004c16:	4641      	mov	r1, r8
 8004c18:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c36:	4692      	mov	sl, r2
 8004c38:	469b      	mov	fp, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	eb1a 0303 	adds.w	r3, sl, r3
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	462b      	mov	r3, r5
 8004c44:	eb4b 0303 	adc.w	r3, fp, r3
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c56:	4629      	mov	r1, r5
 8004c58:	028b      	lsls	r3, r1, #10
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c60:	4621      	mov	r1, r4
 8004c62:	028a      	lsls	r2, r1, #10
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c70:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c76:	f7fb ff11 	bl	8000a9c <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4613      	mov	r3, r2
 8004c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c84:	4b41      	ldr	r3, [pc, #260]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ca6:	e0eb      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca8:	4b38      	ldr	r3, [pc, #224]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb4:	4b35      	ldr	r3, [pc, #212]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d06b      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc0:	4b32      	ldr	r3, [pc, #200]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	099b      	lsrs	r3, r3, #6
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cdc:	4622      	mov	r2, r4
 8004cde:	462b      	mov	r3, r5
 8004ce0:	f04f 0000 	mov.w	r0, #0
 8004ce4:	f04f 0100 	mov.w	r1, #0
 8004ce8:	0159      	lsls	r1, r3, #5
 8004cea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cee:	0150      	lsls	r0, r2, #5
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	1a51      	subs	r1, r2, r1
 8004cf8:	61b9      	str	r1, [r7, #24]
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	eb63 0301 	sbc.w	r3, r3, r1
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d0e:	4659      	mov	r1, fp
 8004d10:	018b      	lsls	r3, r1, #6
 8004d12:	4651      	mov	r1, sl
 8004d14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d18:	4651      	mov	r1, sl
 8004d1a:	018a      	lsls	r2, r1, #6
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ebb2 0801 	subs.w	r8, r2, r1
 8004d22:	4659      	mov	r1, fp
 8004d24:	eb63 0901 	sbc.w	r9, r3, r1
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3c:	4690      	mov	r8, r2
 8004d3e:	4699      	mov	r9, r3
 8004d40:	4623      	mov	r3, r4
 8004d42:	eb18 0303 	adds.w	r3, r8, r3
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	462b      	mov	r3, r5
 8004d4a:	eb49 0303 	adc.w	r3, r9, r3
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	024b      	lsls	r3, r1, #9
 8004d60:	4621      	mov	r1, r4
 8004d62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d66:	4621      	mov	r1, r4
 8004d68:	024a      	lsls	r2, r1, #9
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d72:	2200      	movs	r2, #0
 8004d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d7c:	f7fb fe8e 	bl	8000a9c <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d8a:	e065      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x420>
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d98:	4b3d      	ldr	r3, [pc, #244]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	4611      	mov	r1, r2
 8004da4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004daa:	2300      	movs	r3, #0
 8004dac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	f04f 0000 	mov.w	r0, #0
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	0159      	lsls	r1, r3, #5
 8004dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc4:	0150      	lsls	r0, r2, #5
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4641      	mov	r1, r8
 8004dcc:	1a51      	subs	r1, r2, r1
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004de4:	4659      	mov	r1, fp
 8004de6:	018b      	lsls	r3, r1, #6
 8004de8:	4651      	mov	r1, sl
 8004dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dee:	4651      	mov	r1, sl
 8004df0:	018a      	lsls	r2, r1, #6
 8004df2:	4651      	mov	r1, sl
 8004df4:	1a54      	subs	r4, r2, r1
 8004df6:	4659      	mov	r1, fp
 8004df8:	eb63 0501 	sbc.w	r5, r3, r1
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	00eb      	lsls	r3, r5, #3
 8004e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0a:	00e2      	lsls	r2, r4, #3
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4643      	mov	r3, r8
 8004e12:	18e3      	adds	r3, r4, r3
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	464b      	mov	r3, r9
 8004e18:	eb45 0303 	adc.w	r3, r5, r3
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	028b      	lsls	r3, r1, #10
 8004e2e:	4621      	mov	r1, r4
 8004e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e34:	4621      	mov	r1, r4
 8004e36:	028a      	lsls	r2, r1, #10
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e40:	2200      	movs	r2, #0
 8004e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e4a:	f7fb fe27 	bl	8000a9c <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4613      	mov	r3, r2
 8004e54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e58:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	0f1b      	lsrs	r3, r3, #28
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e76:	e003      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	37b8      	adds	r7, #184	@ 0xb8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	00f42400 	.word	0x00f42400

08004e98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e28d      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8083 	beq.w	8004fbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eb8:	4b94      	ldr	r3, [pc, #592]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d019      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec4:	4b91      	ldr	r3, [pc, #580]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d106      	bne.n	8004ede <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004edc:	d00c      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b8b      	ldr	r3, [pc, #556]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ee6:	2b0c      	cmp	r3, #12
 8004ee8:	d112      	bne.n	8004f10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eea:	4b88      	ldr	r3, [pc, #544]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ef6:	d10b      	bne.n	8004f10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	4b84      	ldr	r3, [pc, #528]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d05b      	beq.n	8004fbc <HAL_RCC_OscConfig+0x124>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d157      	bne.n	8004fbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e25a      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f18:	d106      	bne.n	8004f28 <HAL_RCC_OscConfig+0x90>
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a7b      	ldr	r2, [pc, #492]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e01d      	b.n	8004f64 <HAL_RCC_OscConfig+0xcc>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0xb4>
 8004f32:	4b76      	ldr	r3, [pc, #472]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a75      	ldr	r2, [pc, #468]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b73      	ldr	r3, [pc, #460]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a72      	ldr	r2, [pc, #456]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e00b      	b.n	8004f64 <HAL_RCC_OscConfig+0xcc>
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a6e      	ldr	r2, [pc, #440]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b6c      	ldr	r3, [pc, #432]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d013      	beq.n	8004f94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fed2 	bl	8002d14 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fd fece 	bl	8002d14 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	@ 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e21f      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	4b61      	ldr	r3, [pc, #388]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0xdc>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fd febe 	bl	8002d14 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd feba 	bl	8002d14 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e20b      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fae:	4b57      	ldr	r3, [pc, #348]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x104>
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d06f      	beq.n	80050aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fca:	4b50      	ldr	r3, [pc, #320]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d105      	bne.n	8004fee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fee:	4b47      	ldr	r3, [pc, #284]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d11c      	bne.n	8005034 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffa:	4b44      	ldr	r3, [pc, #272]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d116      	bne.n	8005034 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005006:	4b41      	ldr	r3, [pc, #260]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <HAL_RCC_OscConfig+0x186>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e1d3      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501e:	4b3b      	ldr	r3, [pc, #236]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4937      	ldr	r1, [pc, #220]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005032:	e03a      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800503c:	4b34      	ldr	r3, [pc, #208]	@ (8005110 <HAL_RCC_OscConfig+0x278>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fd fe67 	bl	8002d14 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504a:	f7fd fe63 	bl	8002d14 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1b4      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	4b2b      	ldr	r3, [pc, #172]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005068:	4b28      	ldr	r3, [pc, #160]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4925      	ldr	r1, [pc, #148]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]
 800507c:	e015      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_RCC_OscConfig+0x278>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fe46 	bl	8002d14 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508c:	f7fd fe42 	bl	8002d14 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e193      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050be:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <HAL_RCC_OscConfig+0x27c>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fe26 	bl	8002d14 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050cc:	f7fd fe22 	bl	8002d14 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e173      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <HAL_RCC_OscConfig+0x274>)
 80050e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x234>
 80050ea:	e01b      	b.n	8005124 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f2:	f7fd fe0f 	bl	8002d14 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f8:	e00e      	b.n	8005118 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050fa:	f7fd fe0b 	bl	8002d14 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d907      	bls.n	8005118 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e15c      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
 800510c:	40023800 	.word	0x40023800
 8005110:	42470000 	.word	0x42470000
 8005114:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005118:	4b8a      	ldr	r3, [pc, #552]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800511a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ea      	bne.n	80050fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8097 	beq.w	8005260 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005136:	4b83      	ldr	r3, [pc, #524]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10f      	bne.n	8005162 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	4b7f      	ldr	r3, [pc, #508]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	4a7e      	ldr	r2, [pc, #504]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6413      	str	r3, [r2, #64]	@ 0x40
 8005152:	4b7c      	ldr	r3, [pc, #496]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005162:	4b79      	ldr	r3, [pc, #484]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d118      	bne.n	80051a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800516e:	4b76      	ldr	r3, [pc, #472]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a75      	ldr	r2, [pc, #468]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800517a:	f7fd fdcb 	bl	8002d14 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005182:	f7fd fdc7 	bl	8002d14 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e118      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	4b6c      	ldr	r3, [pc, #432]	@ (8005348 <HAL_RCC_OscConfig+0x4b0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x31e>
 80051a8:	4b66      	ldr	r3, [pc, #408]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a65      	ldr	r2, [pc, #404]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b4:	e01c      	b.n	80051f0 <HAL_RCC_OscConfig+0x358>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x340>
 80051be:	4b61      	ldr	r3, [pc, #388]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	4a60      	ldr	r2, [pc, #384]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ca:	4b5e      	ldr	r3, [pc, #376]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d6:	e00b      	b.n	80051f0 <HAL_RCC_OscConfig+0x358>
 80051d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	4a59      	ldr	r2, [pc, #356]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e4:	4b57      	ldr	r3, [pc, #348]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e8:	4a56      	ldr	r2, [pc, #344]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	f023 0304 	bic.w	r3, r3, #4
 80051ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d015      	beq.n	8005224 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fd8c 	bl	8002d14 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	e00a      	b.n	8005216 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005200:	f7fd fd88 	bl	8002d14 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e0d7      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005216:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0ee      	beq.n	8005200 <HAL_RCC_OscConfig+0x368>
 8005222:	e014      	b.n	800524e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fd fd76 	bl	8002d14 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522c:	f7fd fd72 	bl	8002d14 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e0c1      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005242:	4b40      	ldr	r3, [pc, #256]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ee      	bne.n	800522c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005254:	4b3b      	ldr	r3, [pc, #236]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	4a3a      	ldr	r2, [pc, #232]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800525a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800525e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80ad 	beq.w	80053c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800526a:	4b36      	ldr	r3, [pc, #216]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b08      	cmp	r3, #8
 8005274:	d060      	beq.n	8005338 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d145      	bne.n	800530a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b33      	ldr	r3, [pc, #204]	@ (800534c <HAL_RCC_OscConfig+0x4b4>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fd fd46 	bl	8002d14 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fd fd42 	bl	8002d14 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e093      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	3b01      	subs	r3, #1
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	071b      	lsls	r3, r3, #28
 80052d6:	491b      	ldr	r1, [pc, #108]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052dc:	4b1b      	ldr	r3, [pc, #108]	@ (800534c <HAL_RCC_OscConfig+0x4b4>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fd fd17 	bl	8002d14 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fd fd13 	bl	8002d14 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e064      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fc:	4b11      	ldr	r3, [pc, #68]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x452>
 8005308:	e05c      	b.n	80053c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	4b10      	ldr	r3, [pc, #64]	@ (800534c <HAL_RCC_OscConfig+0x4b4>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fd fd00 	bl	8002d14 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005318:	f7fd fcfc 	bl	8002d14 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e04d      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <HAL_RCC_OscConfig+0x4ac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x480>
 8005336:	e045      	b.n	80053c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d107      	bne.n	8005350 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e040      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
 8005344:	40023800 	.word	0x40023800
 8005348:	40007000 	.word	0x40007000
 800534c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005350:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <HAL_RCC_OscConfig+0x538>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d030      	beq.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d129      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d122      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005380:	4013      	ands	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005388:	4293      	cmp	r3, r2
 800538a:	d119      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	3b01      	subs	r3, #1
 800539a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d10f      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e041      	b.n	800546a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fd fa6c 	bl	80028d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 feb0 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e04e      	b.n	800552a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a23      	ldr	r2, [pc, #140]	@ (8005538 <HAL_TIM_Base_Start_IT+0xc4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d022      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b6:	d01d      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <HAL_TIM_Base_Start_IT+0xc8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d018      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <HAL_TIM_Base_Start_IT+0xcc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005544 <HAL_TIM_Base_Start_IT+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00e      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <HAL_TIM_Base_Start_IT+0xd4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_TIM_Base_Start_IT+0xd8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_TIM_Base_Start_IT+0xdc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d111      	bne.n	8005518 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b06      	cmp	r3, #6
 8005504:	d010      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	e007      	b.n	8005528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40010400 	.word	0x40010400
 800554c:	40014000 	.word	0x40014000
 8005550:	40001800 	.word	0x40001800

08005554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e041      	b.n	80055ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f839 	bl	80055f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 fdf0 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <HAL_TIM_PWM_Start+0x24>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e022      	b.n	8005672 <HAL_TIM_PWM_Start+0x6a>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b04      	cmp	r3, #4
 8005630:	d109      	bne.n	8005646 <HAL_TIM_PWM_Start+0x3e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	e015      	b.n	8005672 <HAL_TIM_PWM_Start+0x6a>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d109      	bne.n	8005660 <HAL_TIM_PWM_Start+0x58>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e008      	b.n	8005672 <HAL_TIM_PWM_Start+0x6a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e07c      	b.n	8005774 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d104      	bne.n	800568a <HAL_TIM_PWM_Start+0x82>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005688:	e013      	b.n	80056b2 <HAL_TIM_PWM_Start+0xaa>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b04      	cmp	r3, #4
 800568e:	d104      	bne.n	800569a <HAL_TIM_PWM_Start+0x92>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005698:	e00b      	b.n	80056b2 <HAL_TIM_PWM_Start+0xaa>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b08      	cmp	r3, #8
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0xa2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a8:	e003      	b.n	80056b2 <HAL_TIM_PWM_Start+0xaa>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f97c 	bl	80069b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2d      	ldr	r2, [pc, #180]	@ (800577c <HAL_TIM_PWM_Start+0x174>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_PWM_Start+0xcc>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <HAL_TIM_PWM_Start+0x178>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_TIM_PWM_Start+0xd0>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_TIM_PWM_Start+0xd2>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a22      	ldr	r2, [pc, #136]	@ (800577c <HAL_TIM_PWM_Start+0x174>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d01d      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1f      	ldr	r2, [pc, #124]	@ (8005784 <HAL_TIM_PWM_Start+0x17c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <HAL_TIM_PWM_Start+0x180>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <HAL_TIM_PWM_Start+0x184>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a16      	ldr	r2, [pc, #88]	@ (8005780 <HAL_TIM_PWM_Start+0x178>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a18      	ldr	r2, [pc, #96]	@ (8005790 <HAL_TIM_PWM_Start+0x188>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIM_PWM_Start+0x136>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a16      	ldr	r2, [pc, #88]	@ (8005794 <HAL_TIM_PWM_Start+0x18c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d111      	bne.n	8005762 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d010      	beq.n	8005772 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005760:	e007      	b.n	8005772 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40010000 	.word	0x40010000
 8005780:	40010400 	.word	0x40010400
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40014000 	.word	0x40014000
 8005794:	40001800 	.word	0x40001800

08005798 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e041      	b.n	800582e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fd f8c0 	bl	8002944 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f000 fcce 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <HAL_TIM_IC_Start_IT+0x1e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e013      	b.n	800587e <HAL_TIM_IC_Start_IT+0x46>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b04      	cmp	r3, #4
 800585a:	d104      	bne.n	8005866 <HAL_TIM_IC_Start_IT+0x2e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005862:	b2db      	uxtb	r3, r3
 8005864:	e00b      	b.n	800587e <HAL_TIM_IC_Start_IT+0x46>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d104      	bne.n	8005876 <HAL_TIM_IC_Start_IT+0x3e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005872:	b2db      	uxtb	r3, r3
 8005874:	e003      	b.n	800587e <HAL_TIM_IC_Start_IT+0x46>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <HAL_TIM_IC_Start_IT+0x58>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e013      	b.n	80058b8 <HAL_TIM_IC_Start_IT+0x80>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d104      	bne.n	80058a0 <HAL_TIM_IC_Start_IT+0x68>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e00b      	b.n	80058b8 <HAL_TIM_IC_Start_IT+0x80>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d104      	bne.n	80058b0 <HAL_TIM_IC_Start_IT+0x78>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e003      	b.n	80058b8 <HAL_TIM_IC_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d102      	bne.n	80058c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058c0:	7b7b      	ldrb	r3, [r7, #13]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0cc      	b.n	8005a64 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_IC_Start_IT+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d8:	e013      	b.n	8005902 <HAL_TIM_IC_Start_IT+0xca>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_IC_Start_IT+0xb2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e8:	e00b      	b.n	8005902 <HAL_TIM_IC_Start_IT+0xca>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_IC_Start_IT+0xc2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f8:	e003      	b.n	8005902 <HAL_TIM_IC_Start_IT+0xca>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_TIM_IC_Start_IT+0xda>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005910:	e013      	b.n	800593a <HAL_TIM_IC_Start_IT+0x102>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d104      	bne.n	8005922 <HAL_TIM_IC_Start_IT+0xea>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005920:	e00b      	b.n	800593a <HAL_TIM_IC_Start_IT+0x102>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d104      	bne.n	8005932 <HAL_TIM_IC_Start_IT+0xfa>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005930:	e003      	b.n	800593a <HAL_TIM_IC_Start_IT+0x102>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d841      	bhi.n	80059c4 <HAL_TIM_IC_Start_IT+0x18c>
 8005940:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <HAL_TIM_IC_Start_IT+0x110>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800597d 	.word	0x0800597d
 800594c:	080059c5 	.word	0x080059c5
 8005950:	080059c5 	.word	0x080059c5
 8005954:	080059c5 	.word	0x080059c5
 8005958:	0800598f 	.word	0x0800598f
 800595c:	080059c5 	.word	0x080059c5
 8005960:	080059c5 	.word	0x080059c5
 8005964:	080059c5 	.word	0x080059c5
 8005968:	080059a1 	.word	0x080059a1
 800596c:	080059c5 	.word	0x080059c5
 8005970:	080059c5 	.word	0x080059c5
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059b3 	.word	0x080059b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0202 	orr.w	r2, r2, #2
 800598a:	60da      	str	r2, [r3, #12]
      break;
 800598c:	e01d      	b.n	80059ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0204 	orr.w	r2, r2, #4
 800599c:	60da      	str	r2, [r3, #12]
      break;
 800599e:	e014      	b.n	80059ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0208 	orr.w	r2, r2, #8
 80059ae:	60da      	str	r2, [r3, #12]
      break;
 80059b0:	e00b      	b.n	80059ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0210 	orr.w	r2, r2, #16
 80059c0:	60da      	str	r2, [r3, #12]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d148      	bne.n	8005a62 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2201      	movs	r2, #1
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 ffed 	bl	80069b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a22      	ldr	r2, [pc, #136]	@ (8005a6c <HAL_TIM_IC_Start_IT+0x234>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f0:	d01d      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a70 <HAL_TIM_IC_Start_IT+0x238>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <HAL_TIM_IC_Start_IT+0x23c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a78 <HAL_TIM_IC_Start_IT+0x240>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <HAL_TIM_IC_Start_IT+0x244>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_TIM_IC_Start_IT+0x248>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIM_IC_Start_IT+0x1f6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a16      	ldr	r2, [pc, #88]	@ (8005a84 <HAL_TIM_IC_Start_IT+0x24c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d111      	bne.n	8005a52 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d010      	beq.n	8005a62 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	e007      	b.n	8005a62 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0201 	orr.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40001800 	.word	0x40001800

08005a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d020      	beq.n	8005aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01b      	beq.n	8005aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0202 	mvn.w	r2, #2
 8005abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fc f888 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb2e 	bl	800613c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fb35 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d020      	beq.n	8005b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01b      	beq.n	8005b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0204 	mvn.w	r2, #4
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fc f862 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fb08 	bl	800613c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fb0f 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d020      	beq.n	8005b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0208 	mvn.w	r2, #8
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fc f83c 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fae2 	bl	800613c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fae9 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d020      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0210 	mvn.w	r2, #16
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc f816 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fabc 	bl	800613c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fac3 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0201 	mvn.w	r2, #1
 8005bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb fd8a 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 ffce 	bl	8006bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00c      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa94 	bl	8006164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00c      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0220 	mvn.w	r2, #32
 8005c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ffa0 	bl	8006ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e088      	b.n	8005d98 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005ca4:	f000 fcc4 	bl	8006630 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 020c 	bic.w	r2, r2, #12
 8005cb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	619a      	str	r2, [r3, #24]
 8005cca:	e060      	b.n	8005d8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d11c      	bne.n	8005d0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ce2:	f000 fd48 	bl	8006776 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cf4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6999      	ldr	r1, [r3, #24]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	619a      	str	r2, [r3, #24]
 8005d0a:	e040      	b.n	8005d8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d11b      	bne.n	8005d4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d22:	f000 fd95 	bl	8006850 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 020c 	bic.w	r2, r2, #12
 8005d34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	61da      	str	r2, [r3, #28]
 8005d48:	e021      	b.n	8005d8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d11c      	bne.n	8005d8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d60:	f000 fdb2 	bl	80068c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69da      	ldr	r2, [r3, #28]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69d9      	ldr	r1, [r3, #28]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	021a      	lsls	r2, r3, #8
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	61da      	str	r2, [r3, #28]
 8005d88:	e001      	b.n	8005d8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e0ae      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b0c      	cmp	r3, #12
 8005dca:	f200 809f 	bhi.w	8005f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005f0d 	.word	0x08005f0d
 8005ddc:	08005f0d 	.word	0x08005f0d
 8005de0:	08005f0d 	.word	0x08005f0d
 8005de4:	08005e49 	.word	0x08005e49
 8005de8:	08005f0d 	.word	0x08005f0d
 8005dec:	08005f0d 	.word	0x08005f0d
 8005df0:	08005f0d 	.word	0x08005f0d
 8005df4:	08005e8b 	.word	0x08005e8b
 8005df8:	08005f0d 	.word	0x08005f0d
 8005dfc:	08005f0d 	.word	0x08005f0d
 8005e00:	08005f0d 	.word	0x08005f0d
 8005e04:	08005ecb 	.word	0x08005ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fa5e 	bl	80062d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0208 	orr.w	r2, r2, #8
 8005e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
      break;
 8005e46:	e064      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 faae 	bl	80063b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6999      	ldr	r1, [r3, #24]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]
      break;
 8005e88:	e043      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fb03 	bl	800649c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0208 	orr.w	r2, r2, #8
 8005ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0204 	bic.w	r2, r2, #4
 8005eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69d9      	ldr	r1, [r3, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	61da      	str	r2, [r3, #28]
      break;
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fb57 	bl	8006584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	021a      	lsls	r2, r3, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	61da      	str	r2, [r3, #28]
      break;
 8005f0a:	e002      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0b4      	b.n	80060aa <HAL_TIM_ConfigClockSource+0x186>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f78:	d03e      	beq.n	8005ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7e:	f200 8087 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f86:	f000 8086 	beq.w	8006096 <HAL_TIM_ConfigClockSource+0x172>
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8e:	d87f      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b70      	cmp	r3, #112	@ 0x70
 8005f92:	d01a      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0xa6>
 8005f94:	2b70      	cmp	r3, #112	@ 0x70
 8005f96:	d87b      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b60      	cmp	r3, #96	@ 0x60
 8005f9a:	d050      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x11a>
 8005f9c:	2b60      	cmp	r3, #96	@ 0x60
 8005f9e:	d877      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b50      	cmp	r3, #80	@ 0x50
 8005fa2:	d03c      	beq.n	800601e <HAL_TIM_ConfigClockSource+0xfa>
 8005fa4:	2b50      	cmp	r3, #80	@ 0x50
 8005fa6:	d873      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d058      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x13a>
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	d86f      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d064      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d86b      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d060      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d867      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05c      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d05a      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	e062      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fda:	f000 fccd 	bl	8006978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	609a      	str	r2, [r3, #8]
      break;
 8005ff6:	e04f      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006008:	f000 fcb6 	bl	8006978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800601a:	609a      	str	r2, [r3, #8]
      break;
 800601c:	e03c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fb74 	bl	8006718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2150      	movs	r1, #80	@ 0x50
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fc83 	bl	8006942 <TIM_ITRx_SetConfig>
      break;
 800603c:	e02c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	461a      	mov	r2, r3
 800604c:	f000 fbd0 	bl	80067f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2160      	movs	r1, #96	@ 0x60
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fc73 	bl	8006942 <TIM_ITRx_SetConfig>
      break;
 800605c:	e01c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	461a      	mov	r2, r3
 800606c:	f000 fb54 	bl	8006718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2140      	movs	r1, #64	@ 0x40
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fc63 	bl	8006942 <TIM_ITRx_SetConfig>
      break;
 800607c:	e00c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f000 fc5a 	bl	8006942 <TIM_ITRx_SetConfig>
      break;
 800608e:	e003      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
      break;
 8006094:	e000      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b0c      	cmp	r3, #12
 80060c6:	d831      	bhi.n	800612c <HAL_TIM_ReadCapturedValue+0x78>
 80060c8:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006105 	.word	0x08006105
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	0800612d 	.word	0x0800612d
 80060ec:	0800612d 	.word	0x0800612d
 80060f0:	08006119 	.word	0x08006119
 80060f4:	0800612d 	.word	0x0800612d
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	0800612d 	.word	0x0800612d
 8006100:	08006123 	.word	0x08006123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800610a:	60fb      	str	r3, [r7, #12]

      break;
 800610c:	e00f      	b.n	800612e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	60fb      	str	r3, [r7, #12]

      break;
 8006116:	e00a      	b.n	800612e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611e:	60fb      	str	r3, [r7, #12]

      break;
 8006120:	e005      	b.n	800612e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	60fb      	str	r3, [r7, #12]

      break;
 800612a:	e000      	b.n	800612e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800612c:	bf00      	nop
  }

  return tmpreg;
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a46      	ldr	r2, [pc, #280]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a43      	ldr	r2, [pc, #268]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a42      	ldr	r2, [pc, #264]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a41      	ldr	r2, [pc, #260]	@ (80062b0 <TIM_Base_SetConfig+0x138>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a35      	ldr	r2, [pc, #212]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d8:	d027      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a32      	ldr	r2, [pc, #200]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d023      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a31      	ldr	r2, [pc, #196]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <TIM_Base_SetConfig+0x138>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d017      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2e      	ldr	r2, [pc, #184]	@ (80062b8 <TIM_Base_SetConfig+0x140>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2d      	ldr	r2, [pc, #180]	@ (80062bc <TIM_Base_SetConfig+0x144>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2c      	ldr	r2, [pc, #176]	@ (80062c0 <TIM_Base_SetConfig+0x148>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2b      	ldr	r2, [pc, #172]	@ (80062c4 <TIM_Base_SetConfig+0x14c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2a      	ldr	r2, [pc, #168]	@ (80062c8 <TIM_Base_SetConfig+0x150>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a29      	ldr	r2, [pc, #164]	@ (80062cc <TIM_Base_SetConfig+0x154>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a10      	ldr	r2, [pc, #64]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0xf8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a12      	ldr	r2, [pc, #72]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d103      	bne.n	8006278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]
  }
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40010400 	.word	0x40010400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800
 80062c4:	40001800 	.word	0x40001800
 80062c8:	40001c00 	.word	0x40001c00
 80062cc:	40002000 	.word	0x40002000

080062d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f023 0201 	bic.w	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 0302 	bic.w	r3, r3, #2
 8006318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a20      	ldr	r2, [pc, #128]	@ (80063a8 <TIM_OC1_SetConfig+0xd8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_OC1_SetConfig+0x64>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a1f      	ldr	r2, [pc, #124]	@ (80063ac <TIM_OC1_SetConfig+0xdc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10c      	bne.n	800634e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f023 0308 	bic.w	r3, r3, #8
 800633a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 0304 	bic.w	r3, r3, #4
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <TIM_OC1_SetConfig+0xd8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC1_SetConfig+0x8e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a14      	ldr	r2, [pc, #80]	@ (80063ac <TIM_OC1_SetConfig+0xdc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d111      	bne.n	8006382 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40010400 	.word	0x40010400

080063b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f023 0210 	bic.w	r2, r3, #16
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0320 	bic.w	r3, r3, #32
 80063fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a22      	ldr	r2, [pc, #136]	@ (8006494 <TIM_OC2_SetConfig+0xe4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC2_SetConfig+0x68>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a21      	ldr	r2, [pc, #132]	@ (8006498 <TIM_OC2_SetConfig+0xe8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10d      	bne.n	8006434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800641e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a17      	ldr	r2, [pc, #92]	@ (8006494 <TIM_OC2_SetConfig+0xe4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC2_SetConfig+0x94>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a16      	ldr	r2, [pc, #88]	@ (8006498 <TIM_OC2_SetConfig+0xe8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d113      	bne.n	800646c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800644a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a21      	ldr	r2, [pc, #132]	@ (800657c <TIM_OC3_SetConfig+0xe0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC3_SetConfig+0x66>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a20      	ldr	r2, [pc, #128]	@ (8006580 <TIM_OC3_SetConfig+0xe4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10d      	bne.n	800651e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800651c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a16      	ldr	r2, [pc, #88]	@ (800657c <TIM_OC3_SetConfig+0xe0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_OC3_SetConfig+0x92>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <TIM_OC3_SetConfig+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d113      	bne.n	8006556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40010000 	.word	0x40010000
 8006580:	40010400 	.word	0x40010400

08006584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	031b      	lsls	r3, r3, #12
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a12      	ldr	r2, [pc, #72]	@ (8006628 <TIM_OC4_SetConfig+0xa4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC4_SetConfig+0x68>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a11      	ldr	r2, [pc, #68]	@ (800662c <TIM_OC4_SetConfig+0xa8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d109      	bne.n	8006600 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	019b      	lsls	r3, r3, #6
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400

08006630 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0201 	bic.w	r2, r3, #1
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a28      	ldr	r2, [pc, #160]	@ (80066fc <TIM_TI1_SetConfig+0xcc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01b      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006664:	d017      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a25      	ldr	r2, [pc, #148]	@ (8006700 <TIM_TI1_SetConfig+0xd0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a24      	ldr	r2, [pc, #144]	@ (8006704 <TIM_TI1_SetConfig+0xd4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a23      	ldr	r2, [pc, #140]	@ (8006708 <TIM_TI1_SetConfig+0xd8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a22      	ldr	r2, [pc, #136]	@ (800670c <TIM_TI1_SetConfig+0xdc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a21      	ldr	r2, [pc, #132]	@ (8006710 <TIM_TI1_SetConfig+0xe0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_TI1_SetConfig+0x66>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a20      	ldr	r2, [pc, #128]	@ (8006714 <TIM_TI1_SetConfig+0xe4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <TIM_TI1_SetConfig+0x6a>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <TIM_TI1_SetConfig+0x6c>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e003      	b.n	80066ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f023 030a 	bic.w	r3, r3, #10
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 030a 	and.w	r3, r3, #10
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40010000 	.word	0x40010000
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40010400 	.word	0x40010400
 8006710:	40014000 	.word	0x40014000
 8006714:	40001800 	.word	0x40001800

08006718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 030a 	bic.w	r3, r3, #10
 8006754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f023 0210 	bic.w	r2, r3, #16
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	031b      	lsls	r3, r3, #12
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0210 	bic.w	r2, r3, #16
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800681a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	031b      	lsls	r3, r3, #12
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800682c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f023 0303 	bic.w	r3, r3, #3
 800687c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800688c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	b2db      	uxtb	r3, r3
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80068a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006906:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	031b      	lsls	r3, r3, #12
 800690c:	b29b      	uxth	r3, r3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800691a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	031b      	lsls	r3, r3, #12
 8006920:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	f043 0307 	orr.w	r3, r3, #7
 8006964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	609a      	str	r2, [r3, #8]
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	431a      	orrs	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4313      	orrs	r3, r2
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2201      	movs	r2, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1a      	ldr	r2, [r3, #32]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	43db      	mvns	r3, r3
 80069da:	401a      	ands	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	431a      	orrs	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e05a      	b.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d022      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a68:	d01d      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1a      	ldr	r2, [pc, #104]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a17      	ldr	r2, [pc, #92]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40001800 	.word	0x40001800

08006afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e03d      	b.n	8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e042      	b.n	8006c60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fb ffac 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2224      	movs	r2, #36	@ 0x24
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fdff 	bl	8007810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	@ 0x28
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d175      	bne.n	8006d74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_UART_Transmit+0x2c>
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e06e      	b.n	8006d76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2221      	movs	r2, #33	@ 0x21
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca6:	f7fc f835 	bl	8002d14 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc0:	d108      	bne.n	8006cd4 <HAL_UART_Transmit+0x6c>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e003      	b.n	8006cdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cdc:	e02e      	b.n	8006d3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2180      	movs	r1, #128	@ 0x80
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fb9b 	bl	8007424 <UART_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e03a      	b.n	8006d76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	3302      	adds	r3, #2
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	e007      	b.n	8006d2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1cb      	bne.n	8006cde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2140      	movs	r1, #64	@ 0x40
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fb67 	bl	8007424 <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e006      	b.n	8006d76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e000      	b.n	8006d76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d74:	2302      	movs	r3, #2
  }
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b08a      	sub	sp, #40	@ 0x28
 8006d82:	af02      	add	r7, sp, #8
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	f040 8081 	bne.w	8006ea2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_UART_Receive+0x2e>
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e079      	b.n	8006ea4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2222      	movs	r2, #34	@ 0x22
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dc4:	f7fb ffa6 	bl	8002d14 <HAL_GetTick>
 8006dc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dde:	d108      	bne.n	8006df2 <HAL_UART_Receive+0x74>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	61bb      	str	r3, [r7, #24]
 8006df0:	e003      	b.n	8006dfa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006dfa:	e047      	b.n	8006e8c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2200      	movs	r2, #0
 8006e04:	2120      	movs	r1, #32
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fb0c 	bl	8007424 <UART_WaitOnFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e042      	b.n	8006ea4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e01f      	b.n	8006e7e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e46:	d007      	beq.n	8006e58 <HAL_UART_Receive+0xda>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <HAL_UART_Receive+0xe8>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d106      	bne.n	8006e66 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e008      	b.n	8006e78 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1b2      	bne.n	8006dfc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
  }
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b0ba      	sub	sp, #232	@ 0xe8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <HAL_UART_IRQHandler+0x66>
 8006efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fbc2 	bl	8007694 <UART_Receive_IT>
      return;
 8006f10:	e25b      	b.n	80073ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80de 	beq.w	80070d8 <HAL_UART_IRQHandler+0x22c>
 8006f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80d1 	beq.w	80070d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <HAL_UART_IRQHandler+0xae>
 8006f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	f043 0201 	orr.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <HAL_UART_IRQHandler+0xd2>
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	f043 0202 	orr.w	r2, r3, #2
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00b      	beq.n	8006fa2 <HAL_UART_IRQHandler+0xf6>
 8006f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	f043 0204 	orr.w	r2, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d011      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x126>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d105      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fca:	f043 0208 	orr.w	r2, r3, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 81f2 	beq.w	80073c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_UART_IRQHandler+0x14e>
 8006fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb4d 	bl	8007694 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007004:	2b40      	cmp	r3, #64	@ 0x40
 8007006:	bf0c      	ite	eq
 8007008:	2301      	moveq	r3, #1
 800700a:	2300      	movne	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <HAL_UART_IRQHandler+0x17a>
 800701e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d04f      	beq.n	80070c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa55 	bl	80074d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007036:	2b40      	cmp	r3, #64	@ 0x40
 8007038:	d141      	bne.n	80070be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3314      	adds	r3, #20
 8007040:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007050:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3314      	adds	r3, #20
 8007062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007066:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800706a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800707e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1d9      	bne.n	800703a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d013      	beq.n	80070b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	4a7e      	ldr	r2, [pc, #504]	@ (800728c <HAL_UART_IRQHandler+0x3e0>)
 8007094:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709a:	4618      	mov	r0, r3
 800709c:	f7fc fbcc 	bl	8003838 <HAL_DMA_Abort_IT>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00e      	b.n	80070d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f99e 	bl	80073f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e00a      	b.n	80070d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f99a 	bl	80073f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	e006      	b.n	80070d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f996 	bl	80073f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070d2:	e175      	b.n	80073c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d4:	bf00      	nop
    return;
 80070d6:	e173      	b.n	80073c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	2b01      	cmp	r3, #1
 80070de:	f040 814f 	bne.w	8007380 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8148 	beq.w	8007380 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8141 	beq.w	8007380 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	f040 80b6 	bne.w	8007290 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8145 	beq.w	80073c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800713e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007142:	429a      	cmp	r2, r3
 8007144:	f080 813e 	bcs.w	80073c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800714e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715a:	f000 8088 	beq.w	800726e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007174:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800717c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800718a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800718e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007196:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1d9      	bne.n	800715e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3314      	adds	r3, #20
 80071b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3314      	adds	r3, #20
 80071ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e1      	bne.n	80071aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800720a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800720c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007210:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e3      	bne.n	80071e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800723c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800723e:	f023 0310 	bic.w	r3, r3, #16
 8007242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007250:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007252:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800725e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e3      	bne.n	800722c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007268:	4618      	mov	r0, r3
 800726a:	f7fc fa75 	bl	8003758 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2202      	movs	r2, #2
 8007272:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800727c:	b29b      	uxth	r3, r3
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	b29b      	uxth	r3, r3
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8c1 	bl	800740c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800728a:	e09b      	b.n	80073c4 <HAL_UART_IRQHandler+0x518>
 800728c:	0800759d 	.word	0x0800759d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007298:	b29b      	uxth	r3, r3
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 808e 	beq.w	80073c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8089 	beq.w	80073c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	330c      	adds	r3, #12
 80072d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072da:	647a      	str	r2, [r7, #68]	@ 0x44
 80072dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e3      	bne.n	80072b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3314      	adds	r3, #20
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	623b      	str	r3, [r7, #32]
   return(result);
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007312:	633a      	str	r2, [r7, #48]	@ 0x30
 8007314:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e3      	bne.n	80072ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60fb      	str	r3, [r7, #12]
   return(result);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0310 	bic.w	r3, r3, #16
 800734a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007358:	61fa      	str	r2, [r7, #28]
 800735a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	69b9      	ldr	r1, [r7, #24]
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	617b      	str	r3, [r7, #20]
   return(result);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e3      	bne.n	8007334 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f847 	bl	800740c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800737e:	e023      	b.n	80073c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_UART_IRQHandler+0x4f4>
 800738c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f913 	bl	80075c4 <UART_Transmit_IT>
    return;
 800739e:	e014      	b.n	80073ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <HAL_UART_IRQHandler+0x51e>
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f953 	bl	8007664 <UART_EndTransmit_IT>
    return;
 80073be:	e004      	b.n	80073ca <HAL_UART_IRQHandler+0x51e>
    return;
 80073c0:	bf00      	nop
 80073c2:	e002      	b.n	80073ca <HAL_UART_IRQHandler+0x51e>
      return;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <HAL_UART_IRQHandler+0x51e>
      return;
 80073c8:	bf00      	nop
  }
}
 80073ca:	37e8      	adds	r7, #232	@ 0xe8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007434:	e03b      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800743c:	d037      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743e:	f7fb fc69 	bl	8002d14 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	6a3a      	ldr	r2, [r7, #32]
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <UART_WaitOnFlagUntilTimeout+0x30>
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e03a      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d023      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b80      	cmp	r3, #128	@ 0x80
 800746a:	d020      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b40      	cmp	r3, #64	@ 0x40
 8007470:	d01d      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b08      	cmp	r3, #8
 800747e:	d116      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f81d 	bl	80074d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2208      	movs	r2, #8
 80074a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e00f      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d0b4      	beq.n	8007436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b095      	sub	sp, #84	@ 0x54
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	330c      	adds	r3, #12
 80074fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e5      	bne.n	80074de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3314      	adds	r3, #20
 8007518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	61fb      	str	r3, [r7, #28]
   return(result);
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754a:	2b01      	cmp	r3, #1
 800754c:	d119      	bne.n	8007582 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	60bb      	str	r3, [r7, #8]
   return(result);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f023 0310 	bic.w	r3, r3, #16
 8007564:	647b      	str	r3, [r7, #68]	@ 0x44
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800756e:	61ba      	str	r2, [r7, #24]
 8007570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6979      	ldr	r1, [r7, #20]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	613b      	str	r3, [r7, #16]
   return(result);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007590:	bf00      	nop
 8007592:	3754      	adds	r7, #84	@ 0x54
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff ff1e 	bl	80073f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b21      	cmp	r3, #33	@ 0x21
 80075d6:	d13e      	bne.n	8007656 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e0:	d114      	bne.n	800760c <UART_Transmit_IT+0x48>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d110      	bne.n	800760c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	621a      	str	r2, [r3, #32]
 800760a:	e008      	b.n	800761e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	1c59      	adds	r1, r3, #1
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6211      	str	r1, [r2, #32]
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29b      	uxth	r3, r3
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	4619      	mov	r1, r3
 800762c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10f      	bne.n	8007652 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007640:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007650:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	e000      	b.n	8007658 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007656:	2302      	movs	r3, #2
  }
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800767a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fea3 	bl	80073d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	@ 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b22      	cmp	r3, #34	@ 0x22
 80076a6:	f040 80ae 	bne.w	8007806 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b2:	d117      	bne.n	80076e4 <UART_Receive_IT+0x50>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d113      	bne.n	80076e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80076e2:	e026      	b.n	8007732 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f6:	d007      	beq.n	8007708 <UART_Receive_IT+0x74>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <UART_Receive_IT+0x82>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	b2da      	uxtb	r2, r3
 8007710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e008      	b.n	8007728 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007722:	b2da      	uxtb	r2, r3
 8007724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007726:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29b      	uxth	r3, r3
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4619      	mov	r1, r3
 8007740:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007742:	2b00      	cmp	r3, #0
 8007744:	d15d      	bne.n	8007802 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0220 	bic.w	r2, r2, #32
 8007754:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007764:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d135      	bne.n	80077f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	613b      	str	r3, [r7, #16]
   return(result);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f023 0310 	bic.w	r3, r3, #16
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b2:	623a      	str	r2, [r7, #32]
 80077b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d10a      	bne.n	80077ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff fe0b 	bl	800740c <HAL_UARTEx_RxEventCallback>
 80077f6:	e002      	b.n	80077fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff fdf3 	bl	80073e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e002      	b.n	8007808 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e000      	b.n	8007808 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3730      	adds	r7, #48	@ 0x30
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007814:	b0c0      	sub	sp, #256	@ 0x100
 8007816:	af00      	add	r7, sp, #0
 8007818:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	68d9      	ldr	r1, [r3, #12]
 800782e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	ea40 0301 	orr.w	r3, r0, r1
 8007838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800783a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	431a      	orrs	r2, r3
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	431a      	orrs	r2, r3
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007868:	f021 010c 	bic.w	r1, r1, #12
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007876:	430b      	orrs	r3, r1
 8007878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788a:	6999      	ldr	r1, [r3, #24]
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	ea40 0301 	orr.w	r3, r0, r1
 8007896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b8f      	ldr	r3, [pc, #572]	@ (8007adc <UART_SetConfig+0x2cc>)
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d005      	beq.n	80078b0 <UART_SetConfig+0xa0>
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b8d      	ldr	r3, [pc, #564]	@ (8007ae0 <UART_SetConfig+0x2d0>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d104      	bne.n	80078ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b0:	f7fd f87c 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 80078b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078b8:	e003      	b.n	80078c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ba:	f7fd f863 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80078be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078cc:	f040 810c 	bne.w	8007ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078e2:	4622      	mov	r2, r4
 80078e4:	462b      	mov	r3, r5
 80078e6:	1891      	adds	r1, r2, r2
 80078e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078ea:	415b      	adcs	r3, r3
 80078ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078f2:	4621      	mov	r1, r4
 80078f4:	eb12 0801 	adds.w	r8, r2, r1
 80078f8:	4629      	mov	r1, r5
 80078fa:	eb43 0901 	adc.w	r9, r3, r1
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	f04f 0300 	mov.w	r3, #0
 8007906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800790a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800790e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007912:	4690      	mov	r8, r2
 8007914:	4699      	mov	r9, r3
 8007916:	4623      	mov	r3, r4
 8007918:	eb18 0303 	adds.w	r3, r8, r3
 800791c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007920:	462b      	mov	r3, r5
 8007922:	eb49 0303 	adc.w	r3, r9, r3
 8007926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007936:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800793a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800793e:	460b      	mov	r3, r1
 8007940:	18db      	adds	r3, r3, r3
 8007942:	653b      	str	r3, [r7, #80]	@ 0x50
 8007944:	4613      	mov	r3, r2
 8007946:	eb42 0303 	adc.w	r3, r2, r3
 800794a:	657b      	str	r3, [r7, #84]	@ 0x54
 800794c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007954:	f7f9 f8a2 	bl	8000a9c <__aeabi_uldivmod>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4b61      	ldr	r3, [pc, #388]	@ (8007ae4 <UART_SetConfig+0x2d4>)
 800795e:	fba3 2302 	umull	r2, r3, r3, r2
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	011c      	lsls	r4, r3, #4
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800796a:	2200      	movs	r2, #0
 800796c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007970:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	1891      	adds	r1, r2, r2
 800797e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007980:	415b      	adcs	r3, r3
 8007982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007988:	4641      	mov	r1, r8
 800798a:	eb12 0a01 	adds.w	sl, r2, r1
 800798e:	4649      	mov	r1, r9
 8007990:	eb43 0b01 	adc.w	fp, r3, r1
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079a8:	4692      	mov	sl, r2
 80079aa:	469b      	mov	fp, r3
 80079ac:	4643      	mov	r3, r8
 80079ae:	eb1a 0303 	adds.w	r3, sl, r3
 80079b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079b6:	464b      	mov	r3, r9
 80079b8:	eb4b 0303 	adc.w	r3, fp, r3
 80079bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079d4:	460b      	mov	r3, r1
 80079d6:	18db      	adds	r3, r3, r3
 80079d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80079da:	4613      	mov	r3, r2
 80079dc:	eb42 0303 	adc.w	r3, r2, r3
 80079e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079ea:	f7f9 f857 	bl	8000a9c <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae4 <UART_SetConfig+0x2d4>)
 80079f6:	fba3 2301 	umull	r2, r3, r3, r1
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	2264      	movs	r2, #100	@ 0x64
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	1acb      	subs	r3, r1, r3
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ae4 <UART_SetConfig+0x2d4>)
 8007a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a10:	095b      	lsrs	r3, r3, #5
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a18:	441c      	add	r4, r3
 8007a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	1891      	adds	r1, r2, r2
 8007a32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a34:	415b      	adcs	r3, r3
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	1851      	adds	r1, r2, r1
 8007a40:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a42:	4649      	mov	r1, r9
 8007a44:	414b      	adcs	r3, r1
 8007a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a54:	4659      	mov	r1, fp
 8007a56:	00cb      	lsls	r3, r1, #3
 8007a58:	4651      	mov	r1, sl
 8007a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a5e:	4651      	mov	r1, sl
 8007a60:	00ca      	lsls	r2, r1, #3
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	4642      	mov	r2, r8
 8007a6a:	189b      	adds	r3, r3, r2
 8007a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a70:	464b      	mov	r3, r9
 8007a72:	460a      	mov	r2, r1
 8007a74:	eb42 0303 	adc.w	r3, r2, r3
 8007a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a90:	460b      	mov	r3, r1
 8007a92:	18db      	adds	r3, r3, r3
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a96:	4613      	mov	r3, r2
 8007a98:	eb42 0303 	adc.w	r3, r2, r3
 8007a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007aa6:	f7f8 fff9 	bl	8000a9c <__aeabi_uldivmod>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <UART_SetConfig+0x2d4>)
 8007ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	2164      	movs	r1, #100	@ 0x64
 8007ab8:	fb01 f303 	mul.w	r3, r1, r3
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	3332      	adds	r3, #50	@ 0x32
 8007ac2:	4a08      	ldr	r2, [pc, #32]	@ (8007ae4 <UART_SetConfig+0x2d4>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	f003 0207 	and.w	r2, r3, #7
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4422      	add	r2, r4
 8007ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ad8:	e106      	b.n	8007ce8 <UART_SetConfig+0x4d8>
 8007ada:	bf00      	nop
 8007adc:	40011000 	.word	0x40011000
 8007ae0:	40011400 	.word	0x40011400
 8007ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007af2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007afa:	4642      	mov	r2, r8
 8007afc:	464b      	mov	r3, r9
 8007afe:	1891      	adds	r1, r2, r2
 8007b00:	6239      	str	r1, [r7, #32]
 8007b02:	415b      	adcs	r3, r3
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	1854      	adds	r4, r2, r1
 8007b0e:	4649      	mov	r1, r9
 8007b10:	eb43 0501 	adc.w	r5, r3, r1
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	00eb      	lsls	r3, r5, #3
 8007b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b22:	00e2      	lsls	r2, r4, #3
 8007b24:	4614      	mov	r4, r2
 8007b26:	461d      	mov	r5, r3
 8007b28:	4643      	mov	r3, r8
 8007b2a:	18e3      	adds	r3, r4, r3
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b30:	464b      	mov	r3, r9
 8007b32:	eb45 0303 	adc.w	r3, r5, r3
 8007b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b56:	4629      	mov	r1, r5
 8007b58:	008b      	lsls	r3, r1, #2
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b60:	4621      	mov	r1, r4
 8007b62:	008a      	lsls	r2, r1, #2
 8007b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b68:	f7f8 ff98 	bl	8000a9c <__aeabi_uldivmod>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4b60      	ldr	r3, [pc, #384]	@ (8007cf4 <UART_SetConfig+0x4e4>)
 8007b72:	fba3 2302 	umull	r2, r3, r3, r2
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	011c      	lsls	r4, r3, #4
 8007b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	1891      	adds	r1, r2, r2
 8007b92:	61b9      	str	r1, [r7, #24]
 8007b94:	415b      	adcs	r3, r3
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	1851      	adds	r1, r2, r1
 8007ba0:	6139      	str	r1, [r7, #16]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	414b      	adcs	r3, r1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	00cb      	lsls	r3, r1, #3
 8007bb8:	4651      	mov	r1, sl
 8007bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	00ca      	lsls	r2, r1, #3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4642      	mov	r2, r8
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	eb42 0303 	adc.w	r3, r2, r3
 8007bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007be6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	008b      	lsls	r3, r1, #2
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfe:	4641      	mov	r1, r8
 8007c00:	008a      	lsls	r2, r1, #2
 8007c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c06:	f7f8 ff49 	bl	8000a9c <__aeabi_uldivmod>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4b38      	ldr	r3, [pc, #224]	@ (8007cf4 <UART_SetConfig+0x4e4>)
 8007c12:	fba3 2301 	umull	r2, r3, r3, r1
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	2264      	movs	r2, #100	@ 0x64
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	1acb      	subs	r3, r1, r3
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	3332      	adds	r3, #50	@ 0x32
 8007c24:	4a33      	ldr	r2, [pc, #204]	@ (8007cf4 <UART_SetConfig+0x4e4>)
 8007c26:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c30:	441c      	add	r4, r3
 8007c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c36:	2200      	movs	r2, #0
 8007c38:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	1891      	adds	r1, r2, r2
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	415b      	adcs	r3, r3
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c50:	4641      	mov	r1, r8
 8007c52:	1851      	adds	r1, r2, r1
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	4649      	mov	r1, r9
 8007c58:	414b      	adcs	r3, r1
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c68:	4659      	mov	r1, fp
 8007c6a:	00cb      	lsls	r3, r1, #3
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c72:	4651      	mov	r1, sl
 8007c74:	00ca      	lsls	r2, r1, #3
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	189b      	adds	r3, r3, r2
 8007c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c82:	464b      	mov	r3, r9
 8007c84:	460a      	mov	r2, r1
 8007c86:	eb42 0303 	adc.w	r3, r2, r3
 8007c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c96:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c98:	f04f 0200 	mov.w	r2, #0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	008b      	lsls	r3, r1, #2
 8007ca8:	4641      	mov	r1, r8
 8007caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cae:	4641      	mov	r1, r8
 8007cb0:	008a      	lsls	r2, r1, #2
 8007cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cb6:	f7f8 fef1 	bl	8000a9c <__aeabi_uldivmod>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <UART_SetConfig+0x4e4>)
 8007cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	2164      	movs	r1, #100	@ 0x64
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	3332      	adds	r3, #50	@ 0x32
 8007cd2:	4a08      	ldr	r2, [pc, #32]	@ (8007cf4 <UART_SetConfig+0x4e4>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	f003 020f 	and.w	r2, r3, #15
 8007cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4422      	add	r2, r4
 8007ce6:	609a      	str	r2, [r3, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf4:	51eb851f 	.word	0x51eb851f

08007cf8 <__NVIC_SetPriority>:
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db0a      	blt.n	8007d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	490c      	ldr	r1, [pc, #48]	@ (8007d44 <__NVIC_SetPriority+0x4c>)
 8007d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d16:	0112      	lsls	r2, r2, #4
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d20:	e00a      	b.n	8007d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	4908      	ldr	r1, [pc, #32]	@ (8007d48 <__NVIC_SetPriority+0x50>)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	0112      	lsls	r2, r2, #4
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	440b      	add	r3, r1
 8007d36:	761a      	strb	r2, [r3, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	e000e100 	.word	0xe000e100
 8007d48:	e000ed00 	.word	0xe000ed00

08007d4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d50:	4b05      	ldr	r3, [pc, #20]	@ (8007d68 <SysTick_Handler+0x1c>)
 8007d52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d54:	f002 f852 	bl	8009dfc <xTaskGetSchedulerState>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d001      	beq.n	8007d62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d5e:	f002 ff4b 	bl	800abf8 <xPortSysTickHandler>
  }
}
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	e000e010 	.word	0xe000e010

08007d6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d70:	2100      	movs	r1, #0
 8007d72:	f06f 0004 	mvn.w	r0, #4
 8007d76:	f7ff ffbf 	bl	8007cf8 <__NVIC_SetPriority>
#endif
}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d86:	f3ef 8305 	mrs	r3, IPSR
 8007d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d92:	f06f 0305 	mvn.w	r3, #5
 8007d96:	607b      	str	r3, [r7, #4]
 8007d98:	e00c      	b.n	8007db4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <osKernelInitialize+0x44>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007da2:	4b08      	ldr	r3, [pc, #32]	@ (8007dc4 <osKernelInitialize+0x44>)
 8007da4:	2201      	movs	r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	e002      	b.n	8007db4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007db2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007db4:	687b      	ldr	r3, [r7, #4]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000754 	.word	0x20000754

08007dc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dce:	f3ef 8305 	mrs	r3, IPSR
 8007dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8007dd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007dda:	f06f 0305 	mvn.w	r3, #5
 8007dde:	607b      	str	r3, [r7, #4]
 8007de0:	e010      	b.n	8007e04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007de2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <osKernelStart+0x48>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d109      	bne.n	8007dfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dea:	f7ff ffbf 	bl	8007d6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007dee:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <osKernelStart+0x48>)
 8007df0:	2202      	movs	r2, #2
 8007df2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007df4:	f001 fba4 	bl	8009540 <vTaskStartScheduler>
      stat = osOK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	e002      	b.n	8007e04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e04:	687b      	ldr	r3, [r7, #4]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000754 	.word	0x20000754

08007e14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08e      	sub	sp, #56	@ 0x38
 8007e18:	af04      	add	r7, sp, #16
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e24:	f3ef 8305 	mrs	r3, IPSR
 8007e28:	617b      	str	r3, [r7, #20]
  return(result);
 8007e2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d17e      	bne.n	8007f2e <osThreadNew+0x11a>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d07b      	beq.n	8007f2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e36:	2380      	movs	r3, #128	@ 0x80
 8007e38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e3a:	2318      	movs	r3, #24
 8007e3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d045      	beq.n	8007eda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <osThreadNew+0x48>
        name = attr->name;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d008      	beq.n	8007e82 <osThreadNew+0x6e>
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2b38      	cmp	r3, #56	@ 0x38
 8007e74:	d805      	bhi.n	8007e82 <osThreadNew+0x6e>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <osThreadNew+0x72>
        return (NULL);
 8007e82:	2300      	movs	r3, #0
 8007e84:	e054      	b.n	8007f30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	089b      	lsrs	r3, r3, #2
 8007e94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00e      	beq.n	8007ebc <osThreadNew+0xa8>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ea4:	d90a      	bls.n	8007ebc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <osThreadNew+0xa8>
        mem = 1;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e010      	b.n	8007ede <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10c      	bne.n	8007ede <osThreadNew+0xca>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d108      	bne.n	8007ede <osThreadNew+0xca>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <osThreadNew+0xca>
          mem = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	e001      	b.n	8007ede <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d110      	bne.n	8007f06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007eec:	9202      	str	r2, [sp, #8]
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 f944 	bl	8009188 <xTaskCreateStatic>
 8007f00:	4603      	mov	r3, r0
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	e013      	b.n	8007f2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d110      	bne.n	8007f2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f107 0310 	add.w	r3, r7, #16
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 f992 	bl	8009248 <xTaskCreate>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d001      	beq.n	8007f2e <osThreadNew+0x11a>
            hTask = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f2e:	693b      	ldr	r3, [r7, #16]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3728      	adds	r7, #40	@ 0x28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f40:	f3ef 8305 	mrs	r3, IPSR
 8007f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <osDelay+0x1c>
    stat = osErrorISR;
 8007f4c:	f06f 0305 	mvn.w	r3, #5
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	e007      	b.n	8007f64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fab8 	bl	80094d4 <vTaskDelay>
    }
  }

  return (stat);
 8007f64:	68fb      	ldr	r3, [r7, #12]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b088      	sub	sp, #32
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f7a:	f3ef 8305 	mrs	r3, IPSR
 8007f7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f80:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d174      	bne.n	8008070 <osMutexNew+0x102>
    if (attr != NULL) {
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	61bb      	str	r3, [r7, #24]
 8007f92:	e001      	b.n	8007f98 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <osMutexNew+0x3a>
      rmtx = 1U;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e001      	b.n	8007fac <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d15c      	bne.n	8008070 <osMutexNew+0x102>
      mem = -1;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fba:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d015      	beq.n	8007fee <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d006      	beq.n	8007fd8 <osMutexNew+0x6a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fd0:	d902      	bls.n	8007fd8 <osMutexNew+0x6a>
          mem = 1;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	e00c      	b.n	8007ff2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <osMutexNew+0x84>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <osMutexNew+0x84>
            mem = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	e001      	b.n	8007ff2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d112      	bne.n	800801e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	4619      	mov	r1, r3
 8008004:	2004      	movs	r0, #4
 8008006:	f000 fb20 	bl	800864a <xQueueCreateMutexStatic>
 800800a:	61f8      	str	r0, [r7, #28]
 800800c:	e016      	b.n	800803c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	4619      	mov	r1, r3
 8008014:	2001      	movs	r0, #1
 8008016:	f000 fb18 	bl	800864a <xQueueCreateMutexStatic>
 800801a:	61f8      	str	r0, [r7, #28]
 800801c:	e00e      	b.n	800803c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800802a:	2004      	movs	r0, #4
 800802c:	f000 faf5 	bl	800861a <xQueueCreateMutex>
 8008030:	61f8      	str	r0, [r7, #28]
 8008032:	e003      	b.n	800803c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008034:	2001      	movs	r0, #1
 8008036:	f000 faf0 	bl	800861a <xQueueCreateMutex>
 800803a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00c      	beq.n	800805c <osMutexNew+0xee>
        if (attr != NULL) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <osMutexNew+0xe2>
          name = attr->name;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e001      	b.n	8008054 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	69f8      	ldr	r0, [r7, #28]
 8008058:	f001 f838 	bl	80090cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <osMutexNew+0x102>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f043 0301 	orr.w	r3, r3, #1
 800806e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008070:	69fb      	ldr	r3, [r7, #28]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800807a:	b580      	push	{r7, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008094:	2300      	movs	r3, #0
 8008096:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008098:	f3ef 8305 	mrs	r3, IPSR
 800809c:	60bb      	str	r3, [r7, #8]
  return(result);
 800809e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <osMutexAcquire+0x32>
    stat = osErrorISR;
 80080a4:	f06f 0305 	mvn.w	r3, #5
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	e02c      	b.n	8008106 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d103      	bne.n	80080ba <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80080b2:	f06f 0303 	mvn.w	r3, #3
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e025      	b.n	8008106 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d011      	beq.n	80080e4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6938      	ldr	r0, [r7, #16]
 80080c4:	f000 fb11 	bl	80086ea <xQueueTakeMutexRecursive>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d01b      	beq.n	8008106 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80080d4:	f06f 0301 	mvn.w	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e014      	b.n	8008106 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080dc:	f06f 0302 	mvn.w	r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	e010      	b.n	8008106 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6938      	ldr	r0, [r7, #16]
 80080e8:	f000 fdb8 	bl	8008c5c <xQueueSemaphoreTake>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d009      	beq.n	8008106 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80080f8:	f06f 0301 	mvn.w	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	e002      	b.n	8008106 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008100:	f06f 0302 	mvn.w	r3, #2
 8008104:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008106:	697b      	ldr	r3, [r7, #20]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f023 0301 	bic.w	r3, r3, #1
 800811e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812c:	f3ef 8305 	mrs	r3, IPSR
 8008130:	60bb      	str	r3, [r7, #8]
  return(result);
 8008132:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008138:	f06f 0305 	mvn.w	r3, #5
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	e01f      	b.n	8008180 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d103      	bne.n	800814e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008146:	f06f 0303 	mvn.w	r3, #3
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e018      	b.n	8008180 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d009      	beq.n	8008168 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008154:	6938      	ldr	r0, [r7, #16]
 8008156:	f000 fa93 	bl	8008680 <xQueueGiveMutexRecursive>
 800815a:	4603      	mov	r3, r0
 800815c:	2b01      	cmp	r3, #1
 800815e:	d00f      	beq.n	8008180 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008160:	f06f 0302 	mvn.w	r3, #2
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e00b      	b.n	8008180 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008168:	2300      	movs	r3, #0
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	6938      	ldr	r0, [r7, #16]
 8008170:	f000 faf2 	bl	8008758 <xQueueGenericSend>
 8008174:	4603      	mov	r3, r0
 8008176:	2b01      	cmp	r3, #1
 8008178:	d002      	beq.n	8008180 <osMutexRelease+0x70>
        stat = osErrorResource;
 800817a:	f06f 0302 	mvn.w	r3, #2
 800817e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008180:	697b      	ldr	r3, [r7, #20]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a07      	ldr	r2, [pc, #28]	@ (80081b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800819c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4a06      	ldr	r2, [pc, #24]	@ (80081bc <vApplicationGetIdleTaskMemory+0x30>)
 80081a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2280      	movs	r2, #128	@ 0x80
 80081a8:	601a      	str	r2, [r3, #0]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	20000758 	.word	0x20000758
 80081bc:	200007b4 	.word	0x200007b4

080081c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4a07      	ldr	r2, [pc, #28]	@ (80081ec <vApplicationGetTimerTaskMemory+0x2c>)
 80081d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4a06      	ldr	r2, [pc, #24]	@ (80081f0 <vApplicationGetTimerTaskMemory+0x30>)
 80081d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081de:	601a      	str	r2, [r3, #0]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	200009b4 	.word	0x200009b4
 80081f0:	20000a10 	.word	0x20000a10

080081f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f103 0208 	add.w	r2, r3, #8
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800820c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f103 0208 	add.w	r2, r3, #8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f103 0208 	add.w	r2, r3, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	601a      	str	r2, [r3, #0]
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082ac:	d103      	bne.n	80082b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e00c      	b.n	80082d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3308      	adds	r3, #8
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	e002      	b.n	80082c4 <vListInsert+0x2e>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d2f6      	bcs.n	80082be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6892      	ldr	r2, [r2, #8]
 800831e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6852      	ldr	r2, [r2, #4]
 8008328:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d103      	bne.n	800833c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	1e5a      	subs	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008388:	f002 fba6 	bl	800aad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008394:	68f9      	ldr	r1, [r7, #12]
 8008396:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	441a      	add	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b8:	3b01      	subs	r3, #1
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083be:	fb01 f303 	mul.w	r3, r1, r3
 80083c2:	441a      	add	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	22ff      	movs	r2, #255	@ 0xff
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	22ff      	movs	r2, #255	@ 0xff
 80083d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d114      	bne.n	8008408 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01a      	beq.n	800841c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3310      	adds	r3, #16
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fb36 	bl	8009a5c <xTaskRemoveFromEventList>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d012      	beq.n	800841c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083f6:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <xQueueGenericReset+0xd0>)
 80083f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	e009      	b.n	800841c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3310      	adds	r3, #16
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fef1 	bl	80081f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3324      	adds	r3, #36	@ 0x24
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff feec 	bl	80081f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800841c:	f002 fb8e 	bl	800ab3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008420:	2301      	movs	r3, #1
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	@ 0x38
 8008434:	af02      	add	r7, sp, #8
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10b      	bne.n	800845c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <xQueueGenericCreateStatic+0x56>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <xQueueGenericCreateStatic+0x5a>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <xQueueGenericCreateStatic+0x5c>
 800848a:	2300      	movs	r3, #0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10b      	bne.n	80084a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	623b      	str	r3, [r7, #32]
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <xQueueGenericCreateStatic+0x84>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <xQueueGenericCreateStatic+0x88>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <xQueueGenericCreateStatic+0x8a>
 80084b8:	2300      	movs	r3, #0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	61fb      	str	r3, [r7, #28]
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084d6:	2350      	movs	r3, #80	@ 0x50
 80084d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b50      	cmp	r3, #80	@ 0x50
 80084de:	d00b      	beq.n	80084f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	61bb      	str	r3, [r7, #24]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00d      	beq.n	8008520 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800850c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4613      	mov	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f840 	bl	80085a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008522:	4618      	mov	r0, r3
 8008524:	3730      	adds	r7, #48	@ 0x30
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800852a:	b580      	push	{r7, lr}
 800852c:	b08a      	sub	sp, #40	@ 0x28
 800852e:	af02      	add	r7, sp, #8
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4613      	mov	r3, r2
 8008536:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <xQueueGenericCreate+0x2c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	613b      	str	r3, [r7, #16]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	fb02 f303 	mul.w	r3, r2, r3
 800855e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3350      	adds	r3, #80	@ 0x50
 8008564:	4618      	mov	r0, r3
 8008566:	f002 fbd9 	bl	800ad1c <pvPortMalloc>
 800856a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d011      	beq.n	8008596 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	3350      	adds	r3, #80	@ 0x50
 800857a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008584:	79fa      	ldrb	r2, [r7, #7]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f805 	bl	80085a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008596:	69bb      	ldr	r3, [r7, #24]
	}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d103      	bne.n	80085bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	e002      	b.n	80085c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085ce:	2101      	movs	r1, #1
 80085d0:	69b8      	ldr	r0, [r7, #24]
 80085d2:	f7ff fec3 	bl	800835c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00e      	beq.n	8008612 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008606:	2300      	movs	r3, #0
 8008608:	2200      	movs	r2, #0
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f8a3 	bl	8008758 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800861a:	b580      	push	{r7, lr}
 800861c:	b086      	sub	sp, #24
 800861e:	af00      	add	r7, sp, #0
 8008620:	4603      	mov	r3, r0
 8008622:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008624:	2301      	movs	r3, #1
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	2300      	movs	r3, #0
 800862a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	461a      	mov	r2, r3
 8008630:	6939      	ldr	r1, [r7, #16]
 8008632:	6978      	ldr	r0, [r7, #20]
 8008634:	f7ff ff79 	bl	800852a <xQueueGenericCreate>
 8008638:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff ffd3 	bl	80085e6 <prvInitialiseMutex>

		return xNewQueue;
 8008640:	68fb      	ldr	r3, [r7, #12]
	}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af02      	add	r7, sp, #8
 8008650:	4603      	mov	r3, r0
 8008652:	6039      	str	r1, [r7, #0]
 8008654:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008656:	2301      	movs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2200      	movs	r2, #0
 8008666:	6939      	ldr	r1, [r7, #16]
 8008668:	6978      	ldr	r0, [r7, #20]
 800866a:	f7ff fee1 	bl	8008430 <xQueueGenericCreateStatic>
 800866e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7ff ffb8 	bl	80085e6 <prvInitialiseMutex>

		return xNewQueue;
 8008676:	68fb      	ldr	r3, [r7, #12]
	}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008680:	b590      	push	{r4, r7, lr}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	689c      	ldr	r4, [r3, #8]
 80086ae:	f001 fb95 	bl	8009ddc <xTaskGetCurrentTaskHandle>
 80086b2:	4603      	mov	r3, r0
 80086b4:	429c      	cmp	r4, r3
 80086b6:	d111      	bne.n	80086dc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	1e5a      	subs	r2, r3, #1
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80086ca:	2300      	movs	r3, #0
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	6938      	ldr	r0, [r7, #16]
 80086d2:	f000 f841 	bl	8008758 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80086d6:	2301      	movs	r3, #1
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	e001      	b.n	80086e0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80086e0:	697b      	ldr	r3, [r7, #20]
	}
 80086e2:	4618      	mov	r0, r3
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd90      	pop	{r4, r7, pc}

080086ea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80086ea:	b590      	push	{r4, r7, lr}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60fb      	str	r3, [r7, #12]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	689c      	ldr	r4, [r3, #8]
 800871a:	f001 fb5f 	bl	8009ddc <xTaskGetCurrentTaskHandle>
 800871e:	4603      	mov	r3, r0
 8008720:	429c      	cmp	r4, r3
 8008722:	d107      	bne.n	8008734 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800872e:	2301      	movs	r3, #1
 8008730:	617b      	str	r3, [r7, #20]
 8008732:	e00c      	b.n	800874e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6938      	ldr	r0, [r7, #16]
 8008738:	f000 fa90 	bl	8008c5c <xQueueSemaphoreTake>
 800873c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800874e:	697b      	ldr	r3, [r7, #20]
	}
 8008750:	4618      	mov	r0, r3
 8008752:	371c      	adds	r7, #28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd90      	pop	{r4, r7, pc}

08008758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08e      	sub	sp, #56	@ 0x38
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008766:	2300      	movs	r3, #0
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xQueueGenericSend+0x34>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d103      	bne.n	800879a <xQueueGenericSend+0x42>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <xQueueGenericSend+0x46>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <xQueueGenericSend+0x48>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <xQueueGenericSend+0x64>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d103      	bne.n	80087ca <xQueueGenericSend+0x72>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <xQueueGenericSend+0x76>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <xQueueGenericSend+0x78>
 80087ce:	2300      	movs	r3, #0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <xQueueGenericSend+0x94>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	623b      	str	r3, [r7, #32]
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	e7fd      	b.n	80087e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ec:	f001 fb06 	bl	8009dfc <xTaskGetSchedulerState>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d102      	bne.n	80087fc <xQueueGenericSend+0xa4>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <xQueueGenericSend+0xa8>
 80087fc:	2301      	movs	r3, #1
 80087fe:	e000      	b.n	8008802 <xQueueGenericSend+0xaa>
 8008800:	2300      	movs	r3, #0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <xQueueGenericSend+0xc6>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	61fb      	str	r3, [r7, #28]
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	e7fd      	b.n	800881a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800881e:	f002 f95b 	bl	800aad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882a:	429a      	cmp	r2, r3
 800882c:	d302      	bcc.n	8008834 <xQueueGenericSend+0xdc>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d129      	bne.n	8008888 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800883a:	f000 fb37 	bl	8008eac <prvCopyDataToQueue>
 800883e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d010      	beq.n	800886a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	3324      	adds	r3, #36	@ 0x24
 800884c:	4618      	mov	r0, r3
 800884e:	f001 f905 	bl	8009a5c <xTaskRemoveFromEventList>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d013      	beq.n	8008880 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008858:	4b3f      	ldr	r3, [pc, #252]	@ (8008958 <xQueueGenericSend+0x200>)
 800885a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	e00a      	b.n	8008880 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800886a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d007      	beq.n	8008880 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008870:	4b39      	ldr	r3, [pc, #228]	@ (8008958 <xQueueGenericSend+0x200>)
 8008872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008880:	f002 f95c 	bl	800ab3c <vPortExitCritical>
				return pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	e063      	b.n	8008950 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800888e:	f002 f955 	bl	800ab3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008892:	2300      	movs	r3, #0
 8008894:	e05c      	b.n	8008950 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008898:	2b00      	cmp	r3, #0
 800889a:	d106      	bne.n	80088aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 f93f 	bl	8009b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a6:	2301      	movs	r3, #1
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088aa:	f002 f947 	bl	800ab3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ae:	f000 feaf 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088b2:	f002 f911 	bl	800aad8 <vPortEnterCritical>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088bc:	b25b      	sxtb	r3, r3
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c2:	d103      	bne.n	80088cc <xQueueGenericSend+0x174>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088d2:	b25b      	sxtb	r3, r3
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088d8:	d103      	bne.n	80088e2 <xQueueGenericSend+0x18a>
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088e2:	f002 f92b 	bl	800ab3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e6:	1d3a      	adds	r2, r7, #4
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 f92e 	bl	8009b50 <xTaskCheckForTimeOut>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d124      	bne.n	8008944 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088fc:	f000 fbce 	bl	800909c <prvIsQueueFull>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d018      	beq.n	8008938 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	3310      	adds	r3, #16
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 f852 	bl	80099b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008916:	f000 fb59 	bl	8008fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800891a:	f000 fe87 	bl	800962c <xTaskResumeAll>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	f47f af7c 	bne.w	800881e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008926:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <xQueueGenericSend+0x200>)
 8008928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	e772      	b.n	800881e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800893a:	f000 fb47 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800893e:	f000 fe75 	bl	800962c <xTaskResumeAll>
 8008942:	e76c      	b.n	800881e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008946:	f000 fb41 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800894a:	f000 fe6f 	bl	800962c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800894e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008950:	4618      	mov	r0, r3
 8008952:	3738      	adds	r7, #56	@ 0x38
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b090      	sub	sp, #64	@ 0x40
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <xQueueGenericSendFromISR+0x3e>
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <xQueueGenericSendFromISR+0x42>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueGenericSendFromISR+0x44>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d103      	bne.n	80089ca <xQueueGenericSendFromISR+0x6e>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d101      	bne.n	80089ce <xQueueGenericSendFromISR+0x72>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <xQueueGenericSendFromISR+0x74>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	623b      	str	r3, [r7, #32]
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089ec:	f002 f954 	bl	800ac98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089f0:	f3ef 8211 	mrs	r2, BASEPRI
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	61fa      	str	r2, [r7, #28]
 8008a06:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a08:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d302      	bcc.n	8008a1e <xQueueGenericSendFromISR+0xc2>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d12f      	bne.n	8008a7e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	68b9      	ldr	r1, [r7, #8]
 8008a32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a34:	f000 fa3a 	bl	8008eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a38:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a40:	d112      	bne.n	8008a68 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d016      	beq.n	8008a78 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	3324      	adds	r3, #36	@ 0x24
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f804 	bl	8009a5c <xTaskRemoveFromEventList>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	e007      	b.n	8008a78 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	b25a      	sxtb	r2, r3
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a7c:	e001      	b.n	8008a82 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3740      	adds	r7, #64	@ 0x40
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08c      	sub	sp, #48	@ 0x30
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <xQueueReceive+0x32>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	623b      	str	r3, [r7, #32]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <xQueueReceive+0x40>
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <xQueueReceive+0x44>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <xQueueReceive+0x46>
 8008adc:	2300      	movs	r3, #0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <xQueueReceive+0x62>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	61fb      	str	r3, [r7, #28]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008afa:	f001 f97f 	bl	8009dfc <xTaskGetSchedulerState>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <xQueueReceive+0x72>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueReceive+0x76>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueReceive+0x78>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <xQueueReceive+0x94>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	61bb      	str	r3, [r7, #24]
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b2c:	f001 ffd4 	bl	800aad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01f      	beq.n	8008b7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b40:	f000 fa1e 	bl	8008f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	1e5a      	subs	r2, r3, #1
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00f      	beq.n	8008b74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b56:	3310      	adds	r3, #16
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 ff7f 	bl	8009a5c <xTaskRemoveFromEventList>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b64:	4b3c      	ldr	r3, [pc, #240]	@ (8008c58 <xQueueReceive+0x1c0>)
 8008b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b74:	f001 ffe2 	bl	800ab3c <vPortExitCritical>
				return pdPASS;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e069      	b.n	8008c50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b82:	f001 ffdb 	bl	800ab3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e062      	b.n	8008c50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b90:	f107 0310 	add.w	r3, r7, #16
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 ffc5 	bl	8009b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b9e:	f001 ffcd 	bl	800ab3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ba2:	f000 fd35 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba6:	f001 ff97 	bl	800aad8 <vPortEnterCritical>
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bb0:	b25b      	sxtb	r3, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bb6:	d103      	bne.n	8008bc0 <xQueueReceive+0x128>
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bc6:	b25b      	sxtb	r3, r3
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bcc:	d103      	bne.n	8008bd6 <xQueueReceive+0x13e>
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bd6:	f001 ffb1 	bl	800ab3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bda:	1d3a      	adds	r2, r7, #4
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 ffb4 	bl	8009b50 <xTaskCheckForTimeOut>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d123      	bne.n	8008c36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf0:	f000 fa3e 	bl	8009070 <prvIsQueueEmpty>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d017      	beq.n	8008c2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfc:	3324      	adds	r3, #36	@ 0x24
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fed8 	bl	80099b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c0a:	f000 f9df 	bl	8008fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c0e:	f000 fd0d 	bl	800962c <xTaskResumeAll>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d189      	bne.n	8008b2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c18:	4b0f      	ldr	r3, [pc, #60]	@ (8008c58 <xQueueReceive+0x1c0>)
 8008c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	e780      	b.n	8008b2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c2c:	f000 f9ce 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c30:	f000 fcfc 	bl	800962c <xTaskResumeAll>
 8008c34:	e77a      	b.n	8008b2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c38:	f000 f9c8 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c3c:	f000 fcf6 	bl	800962c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c42:	f000 fa15 	bl	8009070 <prvIsQueueEmpty>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f43f af6f 	beq.w	8008b2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3730      	adds	r7, #48	@ 0x30
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08e      	sub	sp, #56	@ 0x38
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	623b      	str	r3, [r7, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	e7fd      	b.n	8008c8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	61fb      	str	r3, [r7, #28]
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	e7fd      	b.n	8008cac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cb0:	f001 f8a4 	bl	8009dfc <xTaskGetSchedulerState>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <xQueueSemaphoreTake+0x64>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <xQueueSemaphoreTake+0x68>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <xQueueSemaphoreTake+0x6a>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	61bb      	str	r3, [r7, #24]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ce2:	f001 fef9 	bl	800aad8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d024      	beq.n	8008d3c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf4:	1e5a      	subs	r2, r3, #1
 8008cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d104      	bne.n	8008d0c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008d02:	f001 f9f5 	bl	800a0f0 <pvTaskIncrementMutexHeldCount>
 8008d06:	4602      	mov	r2, r0
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00f      	beq.n	8008d34 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d16:	3310      	adds	r3, #16
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fe9f 	bl	8009a5c <xTaskRemoveFromEventList>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d007      	beq.n	8008d34 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d24:	4b54      	ldr	r3, [pc, #336]	@ (8008e78 <xQueueSemaphoreTake+0x21c>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d34:	f001 ff02 	bl	800ab3c <vPortExitCritical>
				return pdPASS;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e098      	b.n	8008e6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d112      	bne.n	8008d68 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	617b      	str	r3, [r7, #20]
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d60:	f001 feec 	bl	800ab3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e082      	b.n	8008e6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d6e:	f107 030c 	add.w	r3, r7, #12
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fed6 	bl	8009b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d7c:	f001 fede 	bl	800ab3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d80:	f000 fc46 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d84:	f001 fea8 	bl	800aad8 <vPortEnterCritical>
 8008d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d8e:	b25b      	sxtb	r3, r3
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d94:	d103      	bne.n	8008d9e <xQueueSemaphoreTake+0x142>
 8008d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008da4:	b25b      	sxtb	r3, r3
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008daa:	d103      	bne.n	8008db4 <xQueueSemaphoreTake+0x158>
 8008dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008db4:	f001 fec2 	bl	800ab3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008db8:	463a      	mov	r2, r7
 8008dba:	f107 030c 	add.w	r3, r7, #12
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fec5 	bl	8009b50 <xTaskCheckForTimeOut>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d132      	bne.n	8008e32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dce:	f000 f94f 	bl	8009070 <prvIsQueueEmpty>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d026      	beq.n	8008e26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d109      	bne.n	8008df4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008de0:	f001 fe7a 	bl	800aad8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f825 	bl	8009e38 <xTaskPriorityInherit>
 8008dee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008df0:	f001 fea4 	bl	800ab3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	3324      	adds	r3, #36	@ 0x24
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fddb 	bl	80099b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e04:	f000 f8e2 	bl	8008fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e08:	f000 fc10 	bl	800962c <xTaskResumeAll>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f47f af67 	bne.w	8008ce2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008e14:	4b18      	ldr	r3, [pc, #96]	@ (8008e78 <xQueueSemaphoreTake+0x21c>)
 8008e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	e75d      	b.n	8008ce2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e28:	f000 f8d0 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e2c:	f000 fbfe 	bl	800962c <xTaskResumeAll>
 8008e30:	e757      	b.n	8008ce2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e34:	f000 f8ca 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e38:	f000 fbf8 	bl	800962c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e3e:	f000 f917 	bl	8009070 <prvIsQueueEmpty>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f43f af4c 	beq.w	8008ce2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00d      	beq.n	8008e6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e50:	f001 fe42 	bl	800aad8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e56:	f000 f811 	bl	8008e7c <prvGetDisinheritPriorityAfterTimeout>
 8008e5a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 f8c0 	bl	8009fe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e68:	f001 fe68 	bl	800ab3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3738      	adds	r7, #56	@ 0x38
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d006      	beq.n	8008e9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e001      	b.n	8008e9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10d      	bne.n	8008ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d14d      	bne.n	8008f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 f816 	bl	8009f08 <xTaskPriorityDisinherit>
 8008edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	e043      	b.n	8008f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d119      	bne.n	8008f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6858      	ldr	r0, [r3, #4]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	f002 fa9b 	bl	800b432 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d32b      	bcc.n	8008f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	e026      	b.n	8008f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68d8      	ldr	r0, [r3, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	461a      	mov	r2, r3
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	f002 fa81 	bl	800b432 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	425b      	negs	r3, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d207      	bcs.n	8008f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	425b      	negs	r3, r3
 8008f56:	441a      	add	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d105      	bne.n	8008f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f76:	697b      	ldr	r3, [r7, #20]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d018      	beq.n	8008fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	441a      	add	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d303      	bcc.n	8008fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6838      	ldr	r0, [r7, #0]
 8008fc0:	f002 fa37 	bl	800b432 <memcpy>
	}
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fd4:	f001 fd80 	bl	800aad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe0:	e011      	b.n	8009006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d012      	beq.n	8009010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3324      	adds	r3, #36	@ 0x24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fd34 	bl	8009a5c <xTaskRemoveFromEventList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ffa:	f000 fe0d 	bl	8009c18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	3b01      	subs	r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900a:	2b00      	cmp	r3, #0
 800900c:	dce9      	bgt.n	8008fe2 <prvUnlockQueue+0x16>
 800900e:	e000      	b.n	8009012 <prvUnlockQueue+0x46>
					break;
 8009010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	22ff      	movs	r2, #255	@ 0xff
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800901a:	f001 fd8f 	bl	800ab3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800901e:	f001 fd5b 	bl	800aad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902a:	e011      	b.n	8009050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d012      	beq.n	800905a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3310      	adds	r3, #16
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fd0f 	bl	8009a5c <xTaskRemoveFromEventList>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009044:	f000 fde8 	bl	8009c18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	3b01      	subs	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dce9      	bgt.n	800902c <prvUnlockQueue+0x60>
 8009058:	e000      	b.n	800905c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800905a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	22ff      	movs	r2, #255	@ 0xff
 8009060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009064:	f001 fd6a 	bl	800ab3c <vPortExitCritical>
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009078:	f001 fd2e 	bl	800aad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f001 fd55 	bl	800ab3c <vPortExitCritical>

	return xReturn;
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090a4:	f001 fd18 	bl	800aad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d102      	bne.n	80090ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e001      	b.n	80090be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090be:	f001 fd3d 	bl	800ab3c <vPortExitCritical>

	return xReturn;
 80090c2:	68fb      	ldr	r3, [r7, #12]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e014      	b.n	8009106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090dc:	4a0f      	ldr	r2, [pc, #60]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10b      	bne.n	8009100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090e8:	490c      	ldr	r1, [pc, #48]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090f2:	4a0a      	ldr	r2, [pc, #40]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	4413      	add	r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090fe:	e006      	b.n	800910e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3301      	adds	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b07      	cmp	r3, #7
 800910a:	d9e7      	bls.n	80090dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	20000e10 	.word	0x20000e10

08009120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009130:	f001 fcd2 	bl	800aad8 <vPortEnterCritical>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800913a:	b25b      	sxtb	r3, r3
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009140:	d103      	bne.n	800914a <vQueueWaitForMessageRestricted+0x2a>
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009156:	d103      	bne.n	8009160 <vQueueWaitForMessageRestricted+0x40>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009160:	f001 fcec 	bl	800ab3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d106      	bne.n	800917a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3324      	adds	r3, #36	@ 0x24
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fc45 	bl	8009a04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800917a:	6978      	ldr	r0, [r7, #20]
 800917c:	f7ff ff26 	bl	8008fcc <prvUnlockQueue>
	}
 8009180:	bf00      	nop
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08e      	sub	sp, #56	@ 0x38
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	623b      	str	r3, [r7, #32]
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	61fb      	str	r3, [r7, #28]
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	e7fd      	b.n	80091ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091d2:	235c      	movs	r3, #92	@ 0x5c
 80091d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80091da:	d00b      	beq.n	80091f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	61bb      	str	r3, [r7, #24]
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <xTaskCreateStatic+0xb2>
 80091fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01b      	beq.n	800923a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800920a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	2202      	movs	r2, #2
 8009210:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f850 	bl	80092d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009234:	f000 f8de 	bl	80093f4 <prvAddNewTaskToReadyList>
 8009238:	e001      	b.n	800923e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800923e:	697b      	ldr	r3, [r7, #20]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	3728      	adds	r7, #40	@ 0x28
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08c      	sub	sp, #48	@ 0x30
 800924c:	af04      	add	r7, sp, #16
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fd5d 	bl	800ad1c <pvPortMalloc>
 8009262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00e      	beq.n	8009288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800926a:	205c      	movs	r0, #92	@ 0x5c
 800926c:	f001 fd56 	bl	800ad1c <pvPortMalloc>
 8009270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	631a      	str	r2, [r3, #48]	@ 0x30
 800927e:	e005      	b.n	800928c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009280:	6978      	ldr	r0, [r7, #20]
 8009282:	f001 fe19 	bl	800aeb8 <vPortFree>
 8009286:	e001      	b.n	800928c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	2300      	movs	r3, #0
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f80e 	bl	80092d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092b6:	69f8      	ldr	r0, [r7, #28]
 80092b8:	f000 f89c 	bl	80093f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092bc:	2301      	movs	r3, #1
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	e002      	b.n	80092c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092c8:	69bb      	ldr	r3, [r7, #24]
	}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b088      	sub	sp, #32
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
 80092de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	461a      	mov	r2, r3
 80092ea:	21a5      	movs	r1, #165	@ 0xa5
 80092ec:	f002 f86c 	bl	800b3c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092fa:	3b01      	subs	r3, #1
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f023 0307 	bic.w	r3, r3, #7
 8009308:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	617b      	str	r3, [r7, #20]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01f      	beq.n	8009372 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009332:	2300      	movs	r3, #0
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	e012      	b.n	800935e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	7819      	ldrb	r1, [r3, #0]
 8009340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	4413      	add	r3, r2
 8009346:	3334      	adds	r3, #52	@ 0x34
 8009348:	460a      	mov	r2, r1
 800934a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d006      	beq.n	8009366 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	3301      	adds	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	2b0f      	cmp	r3, #15
 8009362:	d9e9      	bls.n	8009338 <prvInitialiseNewTask+0x66>
 8009364:	e000      	b.n	8009368 <prvInitialiseNewTask+0x96>
			{
				break;
 8009366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009370:	e003      	b.n	800937a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	2b37      	cmp	r3, #55	@ 0x37
 800937e:	d901      	bls.n	8009384 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009380:	2337      	movs	r3, #55	@ 0x37
 8009382:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009388:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800938e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	2200      	movs	r2, #0
 8009394:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	3304      	adds	r3, #4
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe ff4a 	bl	8008234 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	3318      	adds	r3, #24
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fe ff45 	bl	8008234 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	2200      	movs	r2, #0
 80093c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	69b8      	ldr	r0, [r7, #24]
 80093d4:	f001 fa4e 	bl	800a874 <pxPortInitialiseStack>
 80093d8:	4602      	mov	r2, r0
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ea:	bf00      	nop
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093fc:	f001 fb6c 	bl	800aad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009400:	4b2d      	ldr	r3, [pc, #180]	@ (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a2c      	ldr	r2, [pc, #176]	@ (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 8009408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800940a:	4b2c      	ldr	r3, [pc, #176]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009412:	4a2a      	ldr	r2, [pc, #168]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009418:	4b27      	ldr	r3, [pc, #156]	@ (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d110      	bne.n	8009442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009420:	f000 fc1e 	bl	8009c60 <prvInitialiseTaskLists>
 8009424:	e00d      	b.n	8009442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009426:	4b26      	ldr	r3, [pc, #152]	@ (80094c0 <prvAddNewTaskToReadyList+0xcc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800942e:	4b23      	ldr	r3, [pc, #140]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009438:	429a      	cmp	r2, r3
 800943a:	d802      	bhi.n	8009442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800943c:	4a1f      	ldr	r2, [pc, #124]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009442:	4b20      	ldr	r3, [pc, #128]	@ (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	4a1e      	ldr	r2, [pc, #120]	@ (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 800944a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800944c:	4b1d      	ldr	r3, [pc, #116]	@ (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009458:	4b1b      	ldr	r3, [pc, #108]	@ (80094c8 <prvAddNewTaskToReadyList+0xd4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d903      	bls.n	8009468 <prvAddNewTaskToReadyList+0x74>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	4a18      	ldr	r2, [pc, #96]	@ (80094c8 <prvAddNewTaskToReadyList+0xd4>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a15      	ldr	r2, [pc, #84]	@ (80094cc <prvAddNewTaskToReadyList+0xd8>)
 8009476:	441a      	add	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe fee5 	bl	800824e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009484:	f001 fb5a 	bl	800ab3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009488:	4b0d      	ldr	r3, [pc, #52]	@ (80094c0 <prvAddNewTaskToReadyList+0xcc>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00e      	beq.n	80094ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949a:	429a      	cmp	r2, r3
 800949c:	d207      	bcs.n	80094ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800949e:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <prvAddNewTaskToReadyList+0xdc>)
 80094a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20001324 	.word	0x20001324
 80094bc:	20000e50 	.word	0x20000e50
 80094c0:	20001330 	.word	0x20001330
 80094c4:	20001340 	.word	0x20001340
 80094c8:	2000132c 	.word	0x2000132c
 80094cc:	20000e54 	.word	0x20000e54
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d018      	beq.n	8009518 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094e6:	4b14      	ldr	r3, [pc, #80]	@ (8009538 <vTaskDelay+0x64>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <vTaskDelay+0x32>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60bb      	str	r3, [r7, #8]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009506:	f000 f883 	bl	8009610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800950a:	2100      	movs	r1, #0
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fe03 	bl	800a118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009512:	f000 f88b 	bl	800962c <xTaskResumeAll>
 8009516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800951e:	4b07      	ldr	r3, [pc, #28]	@ (800953c <vTaskDelay+0x68>)
 8009520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000134c 	.word	0x2000134c
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800954e:	463a      	mov	r2, r7
 8009550:	1d39      	adds	r1, r7, #4
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fe18 	bl	800818c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2300      	movs	r3, #0
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	460a      	mov	r2, r1
 800956e:	4922      	ldr	r1, [pc, #136]	@ (80095f8 <vTaskStartScheduler+0xb8>)
 8009570:	4822      	ldr	r0, [pc, #136]	@ (80095fc <vTaskStartScheduler+0xbc>)
 8009572:	f7ff fe09 	bl	8009188 <xTaskCreateStatic>
 8009576:	4603      	mov	r3, r0
 8009578:	4a21      	ldr	r2, [pc, #132]	@ (8009600 <vTaskStartScheduler+0xc0>)
 800957a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800957c:	4b20      	ldr	r3, [pc, #128]	@ (8009600 <vTaskStartScheduler+0xc0>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e001      	b.n	800958e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d102      	bne.n	800959a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009594:	f000 fe14 	bl	800a1c0 <xTimerCreateTimerTask>
 8009598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d116      	bne.n	80095ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095b4:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <vTaskStartScheduler+0xc4>)
 80095b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095bc:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <vTaskStartScheduler+0xc8>)
 80095be:	2201      	movs	r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095c2:	4b12      	ldr	r3, [pc, #72]	@ (800960c <vTaskStartScheduler+0xcc>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095c8:	f001 f9e2 	bl	800a990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095cc:	e00f      	b.n	80095ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095d4:	d10b      	bne.n	80095ee <vTaskStartScheduler+0xae>
	__asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	60fb      	str	r3, [r7, #12]
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	e7fd      	b.n	80095ea <vTaskStartScheduler+0xaa>
}
 80095ee:	bf00      	nop
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	0800c7e0 	.word	0x0800c7e0
 80095fc:	08009c31 	.word	0x08009c31
 8009600:	20001348 	.word	0x20001348
 8009604:	20001344 	.word	0x20001344
 8009608:	20001330 	.word	0x20001330
 800960c:	20001328 	.word	0x20001328

08009610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <vTaskSuspendAll+0x18>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	4a03      	ldr	r2, [pc, #12]	@ (8009628 <vTaskSuspendAll+0x18>)
 800961c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800961e:	bf00      	nop
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	2000134c 	.word	0x2000134c

0800962c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800963a:	4b42      	ldr	r3, [pc, #264]	@ (8009744 <xTaskResumeAll+0x118>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <xTaskResumeAll+0x2e>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	603b      	str	r3, [r7, #0]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800965a:	f001 fa3d 	bl	800aad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800965e:	4b39      	ldr	r3, [pc, #228]	@ (8009744 <xTaskResumeAll+0x118>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3b01      	subs	r3, #1
 8009664:	4a37      	ldr	r2, [pc, #220]	@ (8009744 <xTaskResumeAll+0x118>)
 8009666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009668:	4b36      	ldr	r3, [pc, #216]	@ (8009744 <xTaskResumeAll+0x118>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d162      	bne.n	8009736 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009670:	4b35      	ldr	r3, [pc, #212]	@ (8009748 <xTaskResumeAll+0x11c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05e      	beq.n	8009736 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009678:	e02f      	b.n	80096da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967a:	4b34      	ldr	r3, [pc, #208]	@ (800974c <xTaskResumeAll+0x120>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3318      	adds	r3, #24
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fe3e 	bl	8008308 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fe39 	bl	8008308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800969a:	4b2d      	ldr	r3, [pc, #180]	@ (8009750 <xTaskResumeAll+0x124>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d903      	bls.n	80096aa <xTaskResumeAll+0x7e>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009750 <xTaskResumeAll+0x124>)
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4a27      	ldr	r2, [pc, #156]	@ (8009754 <xTaskResumeAll+0x128>)
 80096b8:	441a      	add	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3304      	adds	r3, #4
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7fe fdc4 	bl	800824e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ca:	4b23      	ldr	r3, [pc, #140]	@ (8009758 <xTaskResumeAll+0x12c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096d4:	4b21      	ldr	r3, [pc, #132]	@ (800975c <xTaskResumeAll+0x130>)
 80096d6:	2201      	movs	r2, #1
 80096d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096da:	4b1c      	ldr	r3, [pc, #112]	@ (800974c <xTaskResumeAll+0x120>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1cb      	bne.n	800967a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096e8:	f000 fb58 	bl	8009d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009760 <xTaskResumeAll+0x134>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d010      	beq.n	800971a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096f8:	f000 f846 	bl	8009788 <xTaskIncrementTick>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009702:	4b16      	ldr	r3, [pc, #88]	@ (800975c <xTaskResumeAll+0x130>)
 8009704:	2201      	movs	r2, #1
 8009706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3b01      	subs	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f1      	bne.n	80096f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009714:	4b12      	ldr	r3, [pc, #72]	@ (8009760 <xTaskResumeAll+0x134>)
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800971a:	4b10      	ldr	r3, [pc, #64]	@ (800975c <xTaskResumeAll+0x130>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009722:	2301      	movs	r3, #1
 8009724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009726:	4b0f      	ldr	r3, [pc, #60]	@ (8009764 <xTaskResumeAll+0x138>)
 8009728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009736:	f001 fa01 	bl	800ab3c <vPortExitCritical>

	return xAlreadyYielded;
 800973a:	68bb      	ldr	r3, [r7, #8]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	2000134c 	.word	0x2000134c
 8009748:	20001324 	.word	0x20001324
 800974c:	200012e4 	.word	0x200012e4
 8009750:	2000132c 	.word	0x2000132c
 8009754:	20000e54 	.word	0x20000e54
 8009758:	20000e50 	.word	0x20000e50
 800975c:	20001338 	.word	0x20001338
 8009760:	20001334 	.word	0x20001334
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800976e:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <xTaskGetTickCount+0x1c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009774:	687b      	ldr	r3, [r7, #4]
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20001328 	.word	0x20001328

08009788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009792:	4b4f      	ldr	r3, [pc, #316]	@ (80098d0 <xTaskIncrementTick+0x148>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 8090 	bne.w	80098bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800979c:	4b4d      	ldr	r3, [pc, #308]	@ (80098d4 <xTaskIncrementTick+0x14c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097a4:	4a4b      	ldr	r2, [pc, #300]	@ (80098d4 <xTaskIncrementTick+0x14c>)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d121      	bne.n	80097f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097b0:	4b49      	ldr	r3, [pc, #292]	@ (80098d8 <xTaskIncrementTick+0x150>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xTaskIncrementTick+0x46>
 80097d2:	4b41      	ldr	r3, [pc, #260]	@ (80098d8 <xTaskIncrementTick+0x150>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	4b40      	ldr	r3, [pc, #256]	@ (80098dc <xTaskIncrementTick+0x154>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a3e      	ldr	r2, [pc, #248]	@ (80098d8 <xTaskIncrementTick+0x150>)
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	4a3e      	ldr	r2, [pc, #248]	@ (80098dc <xTaskIncrementTick+0x154>)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	4b3e      	ldr	r3, [pc, #248]	@ (80098e0 <xTaskIncrementTick+0x158>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	4a3c      	ldr	r2, [pc, #240]	@ (80098e0 <xTaskIncrementTick+0x158>)
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	f000 fad4 	bl	8009d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097f4:	4b3b      	ldr	r3, [pc, #236]	@ (80098e4 <xTaskIncrementTick+0x15c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d349      	bcc.n	8009892 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097fe:	4b36      	ldr	r3, [pc, #216]	@ (80098d8 <xTaskIncrementTick+0x150>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009808:	4b36      	ldr	r3, [pc, #216]	@ (80098e4 <xTaskIncrementTick+0x15c>)
 800980a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800980e:	601a      	str	r2, [r3, #0]
					break;
 8009810:	e03f      	b.n	8009892 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009812:	4b31      	ldr	r3, [pc, #196]	@ (80098d8 <xTaskIncrementTick+0x150>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	d203      	bcs.n	8009832 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800982a:	4a2e      	ldr	r2, [pc, #184]	@ (80098e4 <xTaskIncrementTick+0x15c>)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009830:	e02f      	b.n	8009892 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	3304      	adds	r3, #4
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fd66 	bl	8008308 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	3318      	adds	r3, #24
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fd5d 	bl	8008308 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009852:	4b25      	ldr	r3, [pc, #148]	@ (80098e8 <xTaskIncrementTick+0x160>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d903      	bls.n	8009862 <xTaskIncrementTick+0xda>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985e:	4a22      	ldr	r2, [pc, #136]	@ (80098e8 <xTaskIncrementTick+0x160>)
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4a1f      	ldr	r2, [pc, #124]	@ (80098ec <xTaskIncrementTick+0x164>)
 8009870:	441a      	add	r2, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe fce8 	bl	800824e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009882:	4b1b      	ldr	r3, [pc, #108]	@ (80098f0 <xTaskIncrementTick+0x168>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d3b8      	bcc.n	80097fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009890:	e7b5      	b.n	80097fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009892:	4b17      	ldr	r3, [pc, #92]	@ (80098f0 <xTaskIncrementTick+0x168>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	4914      	ldr	r1, [pc, #80]	@ (80098ec <xTaskIncrementTick+0x164>)
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d901      	bls.n	80098ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098ae:	4b11      	ldr	r3, [pc, #68]	@ (80098f4 <xTaskIncrementTick+0x16c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e004      	b.n	80098c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098bc:	4b0e      	ldr	r3, [pc, #56]	@ (80098f8 <xTaskIncrementTick+0x170>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	4a0d      	ldr	r2, [pc, #52]	@ (80098f8 <xTaskIncrementTick+0x170>)
 80098c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098c6:	697b      	ldr	r3, [r7, #20]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	2000134c 	.word	0x2000134c
 80098d4:	20001328 	.word	0x20001328
 80098d8:	200012dc 	.word	0x200012dc
 80098dc:	200012e0 	.word	0x200012e0
 80098e0:	2000133c 	.word	0x2000133c
 80098e4:	20001344 	.word	0x20001344
 80098e8:	2000132c 	.word	0x2000132c
 80098ec:	20000e54 	.word	0x20000e54
 80098f0:	20000e50 	.word	0x20000e50
 80098f4:	20001338 	.word	0x20001338
 80098f8:	20001334 	.word	0x20001334

080098fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009902:	4b28      	ldr	r3, [pc, #160]	@ (80099a4 <vTaskSwitchContext+0xa8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800990a:	4b27      	ldr	r3, [pc, #156]	@ (80099a8 <vTaskSwitchContext+0xac>)
 800990c:	2201      	movs	r2, #1
 800990e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009910:	e042      	b.n	8009998 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009912:	4b25      	ldr	r3, [pc, #148]	@ (80099a8 <vTaskSwitchContext+0xac>)
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009918:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <vTaskSwitchContext+0xb0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	e011      	b.n	8009944 <vTaskSwitchContext+0x48>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10b      	bne.n	800993e <vTaskSwitchContext+0x42>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	607b      	str	r3, [r7, #4]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <vTaskSwitchContext+0x3e>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3b01      	subs	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	491a      	ldr	r1, [pc, #104]	@ (80099b0 <vTaskSwitchContext+0xb4>)
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	440b      	add	r3, r1
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0e3      	beq.n	8009920 <vTaskSwitchContext+0x24>
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a13      	ldr	r2, [pc, #76]	@ (80099b0 <vTaskSwitchContext+0xb4>)
 8009964:	4413      	add	r3, r2
 8009966:	60bb      	str	r3, [r7, #8]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	605a      	str	r2, [r3, #4]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	3308      	adds	r3, #8
 800997a:	429a      	cmp	r2, r3
 800997c:	d104      	bne.n	8009988 <vTaskSwitchContext+0x8c>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	605a      	str	r2, [r3, #4]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	4a09      	ldr	r2, [pc, #36]	@ (80099b4 <vTaskSwitchContext+0xb8>)
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	4a06      	ldr	r2, [pc, #24]	@ (80099ac <vTaskSwitchContext+0xb0>)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6013      	str	r3, [r2, #0]
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	2000134c 	.word	0x2000134c
 80099a8:	20001338 	.word	0x20001338
 80099ac:	2000132c 	.word	0x2000132c
 80099b0:	20000e54 	.word	0x20000e54
 80099b4:	20000e50 	.word	0x20000e50

080099b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10b      	bne.n	80099e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	60fb      	str	r3, [r7, #12]
}
 80099da:	bf00      	nop
 80099dc:	bf00      	nop
 80099de:	e7fd      	b.n	80099dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099e0:	4b07      	ldr	r3, [pc, #28]	@ (8009a00 <vTaskPlaceOnEventList+0x48>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3318      	adds	r3, #24
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe fc54 	bl	8008296 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ee:	2101      	movs	r1, #1
 80099f0:	6838      	ldr	r0, [r7, #0]
 80099f2:	f000 fb91 	bl	800a118 <prvAddCurrentTaskToDelayedList>
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000e50 	.word	0x20000e50

08009a04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10b      	bne.n	8009a2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	617b      	str	r3, [r7, #20]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3318      	adds	r3, #24
 8009a34:	4619      	mov	r1, r3
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f7fe fc09 	bl	800824e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	68b8      	ldr	r0, [r7, #8]
 8009a4c:	f000 fb64 	bl	800a118 <prvAddCurrentTaskToDelayedList>
	}
 8009a50:	bf00      	nop
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000e50 	.word	0x20000e50

08009a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	60fb      	str	r3, [r7, #12]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fc3a 	bl	8008308 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a94:	4b1d      	ldr	r3, [pc, #116]	@ (8009b0c <xTaskRemoveFromEventList+0xb0>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d11d      	bne.n	8009ad8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fc31 	bl	8008308 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aaa:	4b19      	ldr	r3, [pc, #100]	@ (8009b10 <xTaskRemoveFromEventList+0xb4>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d903      	bls.n	8009aba <xTaskRemoveFromEventList+0x5e>
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	4a16      	ldr	r2, [pc, #88]	@ (8009b10 <xTaskRemoveFromEventList+0xb4>)
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4a13      	ldr	r2, [pc, #76]	@ (8009b14 <xTaskRemoveFromEventList+0xb8>)
 8009ac8:	441a      	add	r2, r3
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f7fe fbbc 	bl	800824e <vListInsertEnd>
 8009ad6:	e005      	b.n	8009ae4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	3318      	adds	r3, #24
 8009adc:	4619      	mov	r1, r3
 8009ade:	480e      	ldr	r0, [pc, #56]	@ (8009b18 <xTaskRemoveFromEventList+0xbc>)
 8009ae0:	f7fe fbb5 	bl	800824e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8009b1c <xTaskRemoveFromEventList+0xc0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d905      	bls.n	8009afe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009af6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b20 <xTaskRemoveFromEventList+0xc4>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	e001      	b.n	8009b02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b02:	697b      	ldr	r3, [r7, #20]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	2000134c 	.word	0x2000134c
 8009b10:	2000132c 	.word	0x2000132c
 8009b14:	20000e54 	.word	0x20000e54
 8009b18:	200012e4 	.word	0x200012e4
 8009b1c:	20000e50 	.word	0x20000e50
 8009b20:	20001338 	.word	0x20001338

08009b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <vTaskInternalSetTimeOutState+0x24>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b34:	4b05      	ldr	r3, [pc, #20]	@ (8009b4c <vTaskInternalSetTimeOutState+0x28>)
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	605a      	str	r2, [r3, #4]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	2000133c 	.word	0x2000133c
 8009b4c:	20001328 	.word	0x20001328

08009b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10b      	bne.n	8009b78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	613b      	str	r3, [r7, #16]
}
 8009b72:	bf00      	nop
 8009b74:	bf00      	nop
 8009b76:	e7fd      	b.n	8009b74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	60fb      	str	r3, [r7, #12]
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	e7fd      	b.n	8009b92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b96:	f000 ff9f 	bl	800aad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009c10 <xTaskCheckForTimeOut+0xc0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bb2:	d102      	bne.n	8009bba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	e023      	b.n	8009c02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b15      	ldr	r3, [pc, #84]	@ (8009c14 <xTaskCheckForTimeOut+0xc4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d007      	beq.n	8009bd6 <xTaskCheckForTimeOut+0x86>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d302      	bcc.n	8009bd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	e015      	b.n	8009c02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d20b      	bcs.n	8009bf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	1ad2      	subs	r2, r2, r3
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ff99 	bl	8009b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	e004      	b.n	8009c02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c02:	f000 ff9b 	bl	800ab3c <vPortExitCritical>

	return xReturn;
 8009c06:	69fb      	ldr	r3, [r7, #28]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3720      	adds	r7, #32
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20001328 	.word	0x20001328
 8009c14:	2000133c 	.word	0x2000133c

08009c18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c1c:	4b03      	ldr	r3, [pc, #12]	@ (8009c2c <vTaskMissedYield+0x14>)
 8009c1e:	2201      	movs	r2, #1
 8009c20:	601a      	str	r2, [r3, #0]
}
 8009c22:	bf00      	nop
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20001338 	.word	0x20001338

08009c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c38:	f000 f852 	bl	8009ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c3c:	4b06      	ldr	r3, [pc, #24]	@ (8009c58 <prvIdleTask+0x28>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d9f9      	bls.n	8009c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c44:	4b05      	ldr	r3, [pc, #20]	@ (8009c5c <prvIdleTask+0x2c>)
 8009c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c54:	e7f0      	b.n	8009c38 <prvIdleTask+0x8>
 8009c56:	bf00      	nop
 8009c58:	20000e54 	.word	0x20000e54
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c66:	2300      	movs	r3, #0
 8009c68:	607b      	str	r3, [r7, #4]
 8009c6a:	e00c      	b.n	8009c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4a12      	ldr	r2, [pc, #72]	@ (8009cc0 <prvInitialiseTaskLists+0x60>)
 8009c78:	4413      	add	r3, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe faba 	bl	80081f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3301      	adds	r3, #1
 8009c84:	607b      	str	r3, [r7, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b37      	cmp	r3, #55	@ 0x37
 8009c8a:	d9ef      	bls.n	8009c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c8c:	480d      	ldr	r0, [pc, #52]	@ (8009cc4 <prvInitialiseTaskLists+0x64>)
 8009c8e:	f7fe fab1 	bl	80081f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c92:	480d      	ldr	r0, [pc, #52]	@ (8009cc8 <prvInitialiseTaskLists+0x68>)
 8009c94:	f7fe faae 	bl	80081f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c98:	480c      	ldr	r0, [pc, #48]	@ (8009ccc <prvInitialiseTaskLists+0x6c>)
 8009c9a:	f7fe faab 	bl	80081f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c9e:	480c      	ldr	r0, [pc, #48]	@ (8009cd0 <prvInitialiseTaskLists+0x70>)
 8009ca0:	f7fe faa8 	bl	80081f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ca4:	480b      	ldr	r0, [pc, #44]	@ (8009cd4 <prvInitialiseTaskLists+0x74>)
 8009ca6:	f7fe faa5 	bl	80081f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009caa:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd8 <prvInitialiseTaskLists+0x78>)
 8009cac:	4a05      	ldr	r2, [pc, #20]	@ (8009cc4 <prvInitialiseTaskLists+0x64>)
 8009cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009cdc <prvInitialiseTaskLists+0x7c>)
 8009cb2:	4a05      	ldr	r2, [pc, #20]	@ (8009cc8 <prvInitialiseTaskLists+0x68>)
 8009cb4:	601a      	str	r2, [r3, #0]
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000e54 	.word	0x20000e54
 8009cc4:	200012b4 	.word	0x200012b4
 8009cc8:	200012c8 	.word	0x200012c8
 8009ccc:	200012e4 	.word	0x200012e4
 8009cd0:	200012f8 	.word	0x200012f8
 8009cd4:	20001310 	.word	0x20001310
 8009cd8:	200012dc 	.word	0x200012dc
 8009cdc:	200012e0 	.word	0x200012e0

08009ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ce6:	e019      	b.n	8009d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ce8:	f000 fef6 	bl	800aad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cec:	4b10      	ldr	r3, [pc, #64]	@ (8009d30 <prvCheckTasksWaitingTermination+0x50>)
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fb05 	bl	8008308 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <prvCheckTasksWaitingTermination+0x54>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	4a0b      	ldr	r2, [pc, #44]	@ (8009d34 <prvCheckTasksWaitingTermination+0x54>)
 8009d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d08:	4b0b      	ldr	r3, [pc, #44]	@ (8009d38 <prvCheckTasksWaitingTermination+0x58>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8009d38 <prvCheckTasksWaitingTermination+0x58>)
 8009d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d12:	f000 ff13 	bl	800ab3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f810 	bl	8009d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d1c:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <prvCheckTasksWaitingTermination+0x58>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e1      	bne.n	8009ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200012f8 	.word	0x200012f8
 8009d34:	20001324 	.word	0x20001324
 8009d38:	2000130c 	.word	0x2000130c

08009d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d108      	bne.n	8009d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 f8b0 	bl	800aeb8 <vPortFree>
				vPortFree( pxTCB );
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 f8ad 	bl	800aeb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d5e:	e019      	b.n	8009d94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d103      	bne.n	8009d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 f8a4 	bl	800aeb8 <vPortFree>
	}
 8009d70:	e010      	b.n	8009d94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d00b      	beq.n	8009d94 <prvDeleteTCB+0x58>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	60fb      	str	r3, [r7, #12]
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	e7fd      	b.n	8009d90 <prvDeleteTCB+0x54>
	}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009da2:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd4 <prvResetNextTaskUnblockTime+0x38>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dac:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009db4:	e008      	b.n	8009dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db6:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <prvResetNextTaskUnblockTime+0x38>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4a04      	ldr	r2, [pc, #16]	@ (8009dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009dc6:	6013      	str	r3, [r2, #0]
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	200012dc 	.word	0x200012dc
 8009dd8:	20001344 	.word	0x20001344

08009ddc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009de2:	4b05      	ldr	r3, [pc, #20]	@ (8009df8 <xTaskGetCurrentTaskHandle+0x1c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009de8:	687b      	ldr	r3, [r7, #4]
	}
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20000e50 	.word	0x20000e50

08009dfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e02:	4b0b      	ldr	r3, [pc, #44]	@ (8009e30 <xTaskGetSchedulerState+0x34>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	e008      	b.n	8009e22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e10:	4b08      	ldr	r3, [pc, #32]	@ (8009e34 <xTaskGetSchedulerState+0x38>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	607b      	str	r3, [r7, #4]
 8009e1c:	e001      	b.n	8009e22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e22:	687b      	ldr	r3, [r7, #4]
	}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20001330 	.word	0x20001330
 8009e34:	2000134c 	.word	0x2000134c

08009e38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d051      	beq.n	8009ef2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e52:	4b2a      	ldr	r3, [pc, #168]	@ (8009efc <xTaskPriorityInherit+0xc4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d241      	bcs.n	8009ee0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	db06      	blt.n	8009e72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e64:	4b25      	ldr	r3, [pc, #148]	@ (8009efc <xTaskPriorityInherit+0xc4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6959      	ldr	r1, [r3, #20]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4a1f      	ldr	r2, [pc, #124]	@ (8009f00 <xTaskPriorityInherit+0xc8>)
 8009e84:	4413      	add	r3, r2
 8009e86:	4299      	cmp	r1, r3
 8009e88:	d122      	bne.n	8009ed0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fa3a 	bl	8008308 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e94:	4b19      	ldr	r3, [pc, #100]	@ (8009efc <xTaskPriorityInherit+0xc4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea2:	4b18      	ldr	r3, [pc, #96]	@ (8009f04 <xTaskPriorityInherit+0xcc>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d903      	bls.n	8009eb2 <xTaskPriorityInherit+0x7a>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eae:	4a15      	ldr	r2, [pc, #84]	@ (8009f04 <xTaskPriorityInherit+0xcc>)
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4a10      	ldr	r2, [pc, #64]	@ (8009f00 <xTaskPriorityInherit+0xc8>)
 8009ec0:	441a      	add	r2, r3
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4610      	mov	r0, r2
 8009eca:	f7fe f9c0 	bl	800824e <vListInsertEnd>
 8009ece:	e004      	b.n	8009eda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8009efc <xTaskPriorityInherit+0xc4>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009eda:	2301      	movs	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e008      	b.n	8009ef2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ee4:	4b05      	ldr	r3, [pc, #20]	@ (8009efc <xTaskPriorityInherit+0xc4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d201      	bcs.n	8009ef2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20000e50 	.word	0x20000e50
 8009f00:	20000e54 	.word	0x20000e54
 8009f04:	2000132c 	.word	0x2000132c

08009f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d058      	beq.n	8009fd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8009fdc <xTaskPriorityDisinherit+0xd4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d00b      	beq.n	8009f40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	60fb      	str	r3, [r7, #12]
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	e7fd      	b.n	8009f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	60bb      	str	r3, [r7, #8]
}
 8009f5a:	bf00      	nop
 8009f5c:	bf00      	nop
 8009f5e:	e7fd      	b.n	8009f5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f64:	1e5a      	subs	r2, r3, #1
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d02c      	beq.n	8009fd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d128      	bne.n	8009fd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe f9c0 	bl	8008308 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe0 <xTaskPriorityDisinherit+0xd8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d903      	bls.n	8009fb0 <xTaskPriorityDisinherit+0xa8>
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	4a0c      	ldr	r2, [pc, #48]	@ (8009fe0 <xTaskPriorityDisinherit+0xd8>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <xTaskPriorityDisinherit+0xdc>)
 8009fbe:	441a      	add	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fe f941 	bl	800824e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000e50 	.word	0x20000e50
 8009fe0:	2000132c 	.word	0x2000132c
 8009fe4:	20000e54 	.word	0x20000e54

08009fe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d06c      	beq.n	800a0da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10b      	bne.n	800a020 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
}
 800a01a:	bf00      	nop
 800a01c:	bf00      	nop
 800a01e:	e7fd      	b.n	800a01c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d902      	bls.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	e002      	b.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a034:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d04c      	beq.n	800a0da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	429a      	cmp	r2, r3
 800a048:	d147      	bne.n	800a0da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a04a:	4b26      	ldr	r3, [pc, #152]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	429a      	cmp	r2, r3
 800a052:	d10b      	bne.n	800a06c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60bb      	str	r3, [r7, #8]
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	e7fd      	b.n	800a068 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a070:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	db04      	blt.n	800a08a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	6959      	ldr	r1, [r3, #20]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4a13      	ldr	r2, [pc, #76]	@ (800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a09a:	4413      	add	r3, r2
 800a09c:	4299      	cmp	r1, r3
 800a09e:	d11c      	bne.n	800a0da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe f92f 	bl	8008308 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d903      	bls.n	800a0be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a0bc:	6013      	str	r3, [r2, #0]
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4a07      	ldr	r2, [pc, #28]	@ (800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0cc:	441a      	add	r2, r3
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7fe f8ba 	bl	800824e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0da:	bf00      	nop
 800a0dc:	3720      	adds	r7, #32
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000e50 	.word	0x20000e50
 800a0e8:	20000e54 	.word	0x20000e54
 800a0ec:	2000132c 	.word	0x2000132c

0800a0f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0f4:	4b07      	ldr	r3, [pc, #28]	@ (800a114 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0fc:	4b05      	ldr	r3, [pc, #20]	@ (800a114 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a102:	3201      	adds	r2, #1
 800a104:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a106:	4b03      	ldr	r3, [pc, #12]	@ (800a114 <pvTaskIncrementMutexHeldCount+0x24>)
 800a108:	681b      	ldr	r3, [r3, #0]
	}
 800a10a:	4618      	mov	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	20000e50 	.word	0x20000e50

0800a118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a122:	4b21      	ldr	r3, [pc, #132]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a128:	4b20      	ldr	r3, [pc, #128]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe f8ea 	bl	8008308 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a13a:	d10a      	bne.n	800a152 <prvAddCurrentTaskToDelayedList+0x3a>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a142:	4b1a      	ldr	r3, [pc, #104]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3304      	adds	r3, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4819      	ldr	r0, [pc, #100]	@ (800a1b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a14c:	f7fe f87f 	bl	800824e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a150:	e026      	b.n	800a1a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4413      	add	r3, r2
 800a158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a15a:	4b14      	ldr	r3, [pc, #80]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	429a      	cmp	r2, r3
 800a168:	d209      	bcs.n	800a17e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a16a:	4b12      	ldr	r3, [pc, #72]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3304      	adds	r3, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7fe f88d 	bl	8008296 <vListInsert>
}
 800a17c:	e010      	b.n	800a1a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a17e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3304      	adds	r3, #4
 800a188:	4619      	mov	r1, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f7fe f883 	bl	8008296 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a190:	4b0a      	ldr	r3, [pc, #40]	@ (800a1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	429a      	cmp	r2, r3
 800a198:	d202      	bcs.n	800a1a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a19a:	4a08      	ldr	r2, [pc, #32]	@ (800a1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6013      	str	r3, [r2, #0]
}
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20001328 	.word	0x20001328
 800a1ac:	20000e50 	.word	0x20000e50
 800a1b0:	20001310 	.word	0x20001310
 800a1b4:	200012e0 	.word	0x200012e0
 800a1b8:	200012dc 	.word	0x200012dc
 800a1bc:	20001344 	.word	0x20001344

0800a1c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08a      	sub	sp, #40	@ 0x28
 800a1c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1ca:	f000 fb13 	bl	800a7f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a244 <xTimerCreateTimerTask+0x84>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d021      	beq.n	800a21a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1de:	1d3a      	adds	r2, r7, #4
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	f107 030c 	add.w	r3, r7, #12
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fd ffe9 	bl	80081c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	9202      	str	r2, [sp, #8]
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	460a      	mov	r2, r1
 800a200:	4911      	ldr	r1, [pc, #68]	@ (800a248 <xTimerCreateTimerTask+0x88>)
 800a202:	4812      	ldr	r0, [pc, #72]	@ (800a24c <xTimerCreateTimerTask+0x8c>)
 800a204:	f7fe ffc0 	bl	8009188 <xTaskCreateStatic>
 800a208:	4603      	mov	r3, r0
 800a20a:	4a11      	ldr	r2, [pc, #68]	@ (800a250 <xTimerCreateTimerTask+0x90>)
 800a20c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a20e:	4b10      	ldr	r3, [pc, #64]	@ (800a250 <xTimerCreateTimerTask+0x90>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a216:	2301      	movs	r3, #1
 800a218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10b      	bne.n	800a238 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	613b      	str	r3, [r7, #16]
}
 800a232:	bf00      	nop
 800a234:	bf00      	nop
 800a236:	e7fd      	b.n	800a234 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a238:	697b      	ldr	r3, [r7, #20]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20001380 	.word	0x20001380
 800a248:	0800c7e8 	.word	0x0800c7e8
 800a24c:	0800a38d 	.word	0x0800a38d
 800a250:	20001384 	.word	0x20001384

0800a254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	@ 0x28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10b      	bne.n	800a284 <xTimerGenericCommand+0x30>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	623b      	str	r3, [r7, #32]
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	e7fd      	b.n	800a280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a284:	4b19      	ldr	r3, [pc, #100]	@ (800a2ec <xTimerGenericCommand+0x98>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d02a      	beq.n	800a2e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	dc18      	bgt.n	800a2d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a29e:	f7ff fdad 	bl	8009dfc <xTaskGetSchedulerState>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d109      	bne.n	800a2bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2a8:	4b10      	ldr	r3, [pc, #64]	@ (800a2ec <xTimerGenericCommand+0x98>)
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	f107 0110 	add.w	r1, r7, #16
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2b4:	f7fe fa50 	bl	8008758 <xQueueGenericSend>
 800a2b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2ba:	e012      	b.n	800a2e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ec <xTimerGenericCommand+0x98>)
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	f107 0110 	add.w	r1, r7, #16
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f7fe fa46 	bl	8008758 <xQueueGenericSend>
 800a2cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2ce:	e008      	b.n	800a2e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2d0:	4b06      	ldr	r3, [pc, #24]	@ (800a2ec <xTimerGenericCommand+0x98>)
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	f107 0110 	add.w	r1, r7, #16
 800a2d8:	2300      	movs	r3, #0
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	f7fe fb3e 	bl	800895c <xQueueGenericSendFromISR>
 800a2e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3728      	adds	r7, #40	@ 0x28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20001380 	.word	0x20001380

0800a2f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fa:	4b23      	ldr	r3, [pc, #140]	@ (800a388 <prvProcessExpiredTimer+0x98>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fd fffd 	bl	8008308 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d023      	beq.n	800a364 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	699a      	ldr	r2, [r3, #24]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	18d1      	adds	r1, r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	6978      	ldr	r0, [r7, #20]
 800a32a:	f000 f8d5 	bl	800a4d8 <prvInsertTimerInActiveList>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d020      	beq.n	800a376 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a334:	2300      	movs	r3, #0
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	2300      	movs	r3, #0
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	2100      	movs	r1, #0
 800a33e:	6978      	ldr	r0, [r7, #20]
 800a340:	f7ff ff88 	bl	800a254 <xTimerGenericCommand>
 800a344:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d114      	bne.n	800a376 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60fb      	str	r3, [r7, #12]
}
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	e7fd      	b.n	800a360 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a36a:	f023 0301 	bic.w	r3, r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	6978      	ldr	r0, [r7, #20]
 800a37c:	4798      	blx	r3
}
 800a37e:	bf00      	nop
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20001378 	.word	0x20001378

0800a38c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a394:	f107 0308 	add.w	r3, r7, #8
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 f859 	bl	800a450 <prvGetNextExpireTime>
 800a39e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f805 	bl	800a3b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3aa:	f000 f8d7 	bl	800a55c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3ae:	bf00      	nop
 800a3b0:	e7f0      	b.n	800a394 <prvTimerTask+0x8>
	...

0800a3b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3be:	f7ff f927 	bl	8009610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3c2:	f107 0308 	add.w	r3, r7, #8
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 f866 	bl	800a498 <prvSampleTimeNow>
 800a3cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d130      	bne.n	800a436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <prvProcessTimerOrBlockTask+0x3c>
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d806      	bhi.n	800a3f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3e2:	f7ff f923 	bl	800962c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3e6:	68f9      	ldr	r1, [r7, #12]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff81 	bl	800a2f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3ee:	e024      	b.n	800a43a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3f6:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <prvProcessTimerOrBlockTask+0x90>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <prvProcessTimerOrBlockTask+0x50>
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <prvProcessTimerOrBlockTask+0x52>
 800a404:	2300      	movs	r3, #0
 800a406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a408:	4b0f      	ldr	r3, [pc, #60]	@ (800a448 <prvProcessTimerOrBlockTask+0x94>)
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4619      	mov	r1, r3
 800a416:	f7fe fe83 	bl	8009120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a41a:	f7ff f907 	bl	800962c <xTaskResumeAll>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a424:	4b09      	ldr	r3, [pc, #36]	@ (800a44c <prvProcessTimerOrBlockTask+0x98>)
 800a426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	f3bf 8f6f 	isb	sy
}
 800a434:	e001      	b.n	800a43a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a436:	f7ff f8f9 	bl	800962c <xTaskResumeAll>
}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	2000137c 	.word	0x2000137c
 800a448:	20001380 	.word	0x20001380
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a458:	4b0e      	ldr	r3, [pc, #56]	@ (800a494 <prvGetNextExpireTime+0x44>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <prvGetNextExpireTime+0x16>
 800a462:	2201      	movs	r2, #1
 800a464:	e000      	b.n	800a468 <prvGetNextExpireTime+0x18>
 800a466:	2200      	movs	r2, #0
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d105      	bne.n	800a480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a474:	4b07      	ldr	r3, [pc, #28]	@ (800a494 <prvGetNextExpireTime+0x44>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e001      	b.n	800a484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a484:	68fb      	ldr	r3, [r7, #12]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20001378 	.word	0x20001378

0800a498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a4a0:	f7ff f962 	bl	8009768 <xTaskGetTickCount>
 800a4a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d4 <prvSampleTimeNow+0x3c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d205      	bcs.n	800a4bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4b0:	f000 f93a 	bl	800a728 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4c2:	4a04      	ldr	r2, [pc, #16]	@ (800a4d4 <prvSampleTimeNow+0x3c>)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20001388 	.word	0x20001388

0800a4d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d812      	bhi.n	800a524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	1ad2      	subs	r2, r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d302      	bcc.n	800a512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a50c:	2301      	movs	r3, #1
 800a50e:	617b      	str	r3, [r7, #20]
 800a510:	e01b      	b.n	800a54a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a512:	4b10      	ldr	r3, [pc, #64]	@ (800a554 <prvInsertTimerInActiveList+0x7c>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3304      	adds	r3, #4
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7fd feba 	bl	8008296 <vListInsert>
 800a522:	e012      	b.n	800a54a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d206      	bcs.n	800a53a <prvInsertTimerInActiveList+0x62>
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d302      	bcc.n	800a53a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a534:	2301      	movs	r3, #1
 800a536:	617b      	str	r3, [r7, #20]
 800a538:	e007      	b.n	800a54a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a53a:	4b07      	ldr	r3, [pc, #28]	@ (800a558 <prvInsertTimerInActiveList+0x80>)
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3304      	adds	r3, #4
 800a542:	4619      	mov	r1, r3
 800a544:	4610      	mov	r0, r2
 800a546:	f7fd fea6 	bl	8008296 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a54a:	697b      	ldr	r3, [r7, #20]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	2000137c 	.word	0x2000137c
 800a558:	20001378 	.word	0x20001378

0800a55c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08e      	sub	sp, #56	@ 0x38
 800a560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a562:	e0ce      	b.n	800a702 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	da19      	bge.n	800a59e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a56a:	1d3b      	adds	r3, r7, #4
 800a56c:	3304      	adds	r3, #4
 800a56e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10b      	bne.n	800a58e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	61fb      	str	r3, [r7, #28]
}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	e7fd      	b.n	800a58a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a594:	6850      	ldr	r0, [r2, #4]
 800a596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a598:	6892      	ldr	r2, [r2, #8]
 800a59a:	4611      	mov	r1, r2
 800a59c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f2c0 80ae 	blt.w	800a702 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d004      	beq.n	800a5bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fd fea6 	bl	8008308 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5bc:	463b      	mov	r3, r7
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff ff6a 	bl	800a498 <prvSampleTimeNow>
 800a5c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b09      	cmp	r3, #9
 800a5ca:	f200 8097 	bhi.w	800a6fc <prvProcessReceivedCommands+0x1a0>
 800a5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d4 <prvProcessReceivedCommands+0x78>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a5fd 	.word	0x0800a5fd
 800a5d8:	0800a5fd 	.word	0x0800a5fd
 800a5dc:	0800a5fd 	.word	0x0800a5fd
 800a5e0:	0800a673 	.word	0x0800a673
 800a5e4:	0800a687 	.word	0x0800a687
 800a5e8:	0800a6d3 	.word	0x0800a6d3
 800a5ec:	0800a5fd 	.word	0x0800a5fd
 800a5f0:	0800a5fd 	.word	0x0800a5fd
 800a5f4:	0800a673 	.word	0x0800a673
 800a5f8:	0800a687 	.word	0x0800a687
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a602:	f043 0301 	orr.w	r3, r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	18d1      	adds	r1, r2, r3
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a61a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a61c:	f7ff ff5c 	bl	800a4d8 <prvInsertTimerInActiveList>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d06c      	beq.n	800a700 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a62c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d061      	beq.n	800a700 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	441a      	add	r2, r3
 800a644:	2300      	movs	r3, #0
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	2300      	movs	r3, #0
 800a64a:	2100      	movs	r1, #0
 800a64c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a64e:	f7ff fe01 	bl	800a254 <xTimerGenericCommand>
 800a652:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d152      	bne.n	800a700 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	61bb      	str	r3, [r7, #24]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a678:	f023 0301 	bic.w	r3, r3, #1
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a684:	e03d      	b.n	800a702 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a68c:	f043 0301 	orr.w	r3, r3, #1
 800a690:	b2da      	uxtb	r2, r3
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10b      	bne.n	800a6be <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	617b      	str	r3, [r7, #20]
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	e7fd      	b.n	800a6ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c0:	699a      	ldr	r2, [r3, #24]
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	18d1      	adds	r1, r2, r3
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6cc:	f7ff ff04 	bl	800a4d8 <prvInsertTimerInActiveList>
					break;
 800a6d0:	e017      	b.n	800a702 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d103      	bne.n	800a6e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a6e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6e2:	f000 fbe9 	bl	800aeb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6e6:	e00c      	b.n	800a702 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6ee:	f023 0301 	bic.w	r3, r3, #1
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6fa:	e002      	b.n	800a702 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a6fc:	bf00      	nop
 800a6fe:	e000      	b.n	800a702 <prvProcessReceivedCommands+0x1a6>
					break;
 800a700:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a702:	4b08      	ldr	r3, [pc, #32]	@ (800a724 <prvProcessReceivedCommands+0x1c8>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	1d39      	adds	r1, r7, #4
 800a708:	2200      	movs	r2, #0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe f9c4 	bl	8008a98 <xQueueReceive>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	f47f af26 	bne.w	800a564 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	3730      	adds	r7, #48	@ 0x30
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20001380 	.word	0x20001380

0800a728 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a72e:	e049      	b.n	800a7c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a730:	4b2e      	ldr	r3, [pc, #184]	@ (800a7ec <prvSwitchTimerLists+0xc4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73a:	4b2c      	ldr	r3, [pc, #176]	@ (800a7ec <prvSwitchTimerLists+0xc4>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fd fddd 	bl	8008308 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b00      	cmp	r3, #0
 800a762:	d02f      	beq.n	800a7c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	4413      	add	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	429a      	cmp	r2, r3
 800a774:	d90e      	bls.n	800a794 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a782:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ec <prvSwitchTimerLists+0xc4>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3304      	adds	r3, #4
 800a78a:	4619      	mov	r1, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	f7fd fd82 	bl	8008296 <vListInsert>
 800a792:	e017      	b.n	800a7c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a794:	2300      	movs	r3, #0
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	2300      	movs	r3, #0
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7ff fd58 	bl	800a254 <xTimerGenericCommand>
 800a7a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10b      	bne.n	800a7c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	603b      	str	r3, [r7, #0]
}
 800a7be:	bf00      	nop
 800a7c0:	bf00      	nop
 800a7c2:	e7fd      	b.n	800a7c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7c4:	4b09      	ldr	r3, [pc, #36]	@ (800a7ec <prvSwitchTimerLists+0xc4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1b0      	bne.n	800a730 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7ce:	4b07      	ldr	r3, [pc, #28]	@ (800a7ec <prvSwitchTimerLists+0xc4>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7d4:	4b06      	ldr	r3, [pc, #24]	@ (800a7f0 <prvSwitchTimerLists+0xc8>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a04      	ldr	r2, [pc, #16]	@ (800a7ec <prvSwitchTimerLists+0xc4>)
 800a7da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7dc:	4a04      	ldr	r2, [pc, #16]	@ (800a7f0 <prvSwitchTimerLists+0xc8>)
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	6013      	str	r3, [r2, #0]
}
 800a7e2:	bf00      	nop
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20001378 	.word	0x20001378
 800a7f0:	2000137c 	.word	0x2000137c

0800a7f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7fa:	f000 f96d 	bl	800aad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7fe:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <prvCheckForValidListAndQueue+0x60>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d120      	bne.n	800a848 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a806:	4814      	ldr	r0, [pc, #80]	@ (800a858 <prvCheckForValidListAndQueue+0x64>)
 800a808:	f7fd fcf4 	bl	80081f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a80c:	4813      	ldr	r0, [pc, #76]	@ (800a85c <prvCheckForValidListAndQueue+0x68>)
 800a80e:	f7fd fcf1 	bl	80081f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a812:	4b13      	ldr	r3, [pc, #76]	@ (800a860 <prvCheckForValidListAndQueue+0x6c>)
 800a814:	4a10      	ldr	r2, [pc, #64]	@ (800a858 <prvCheckForValidListAndQueue+0x64>)
 800a816:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a818:	4b12      	ldr	r3, [pc, #72]	@ (800a864 <prvCheckForValidListAndQueue+0x70>)
 800a81a:	4a10      	ldr	r2, [pc, #64]	@ (800a85c <prvCheckForValidListAndQueue+0x68>)
 800a81c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a81e:	2300      	movs	r3, #0
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	4b11      	ldr	r3, [pc, #68]	@ (800a868 <prvCheckForValidListAndQueue+0x74>)
 800a824:	4a11      	ldr	r2, [pc, #68]	@ (800a86c <prvCheckForValidListAndQueue+0x78>)
 800a826:	2110      	movs	r1, #16
 800a828:	200a      	movs	r0, #10
 800a82a:	f7fd fe01 	bl	8008430 <xQueueGenericCreateStatic>
 800a82e:	4603      	mov	r3, r0
 800a830:	4a08      	ldr	r2, [pc, #32]	@ (800a854 <prvCheckForValidListAndQueue+0x60>)
 800a832:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a834:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <prvCheckForValidListAndQueue+0x60>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a83c:	4b05      	ldr	r3, [pc, #20]	@ (800a854 <prvCheckForValidListAndQueue+0x60>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	490b      	ldr	r1, [pc, #44]	@ (800a870 <prvCheckForValidListAndQueue+0x7c>)
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fc42 	bl	80090cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a848:	f000 f978 	bl	800ab3c <vPortExitCritical>
}
 800a84c:	bf00      	nop
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20001380 	.word	0x20001380
 800a858:	20001350 	.word	0x20001350
 800a85c:	20001364 	.word	0x20001364
 800a860:	20001378 	.word	0x20001378
 800a864:	2000137c 	.word	0x2000137c
 800a868:	2000142c 	.word	0x2000142c
 800a86c:	2000138c 	.word	0x2000138c
 800a870:	0800c7f0 	.word	0x0800c7f0

0800a874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3b04      	subs	r3, #4
 800a884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a88c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3b04      	subs	r3, #4
 800a892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f023 0201 	bic.w	r2, r3, #1
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3b04      	subs	r3, #4
 800a8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d8 <pxPortInitialiseStack+0x64>)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3b14      	subs	r3, #20
 800a8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3b04      	subs	r3, #4
 800a8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f06f 0202 	mvn.w	r2, #2
 800a8c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3b20      	subs	r3, #32
 800a8c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	0800a8dd 	.word	0x0800a8dd

0800a8dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8e6:	4b13      	ldr	r3, [pc, #76]	@ (800a934 <prvTaskExitError+0x58>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8ee:	d00b      	beq.n	800a908 <prvTaskExitError+0x2c>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	60fb      	str	r3, [r7, #12]
}
 800a902:	bf00      	nop
 800a904:	bf00      	nop
 800a906:	e7fd      	b.n	800a904 <prvTaskExitError+0x28>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	60bb      	str	r3, [r7, #8]
}
 800a91a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a91c:	bf00      	nop
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0fc      	beq.n	800a91e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	20000030 	.word	0x20000030
	...

0800a940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a940:	4b07      	ldr	r3, [pc, #28]	@ (800a960 <pxCurrentTCBConst2>)
 800a942:	6819      	ldr	r1, [r3, #0]
 800a944:	6808      	ldr	r0, [r1, #0]
 800a946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94a:	f380 8809 	msr	PSP, r0
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f04f 0000 	mov.w	r0, #0
 800a956:	f380 8811 	msr	BASEPRI, r0
 800a95a:	4770      	bx	lr
 800a95c:	f3af 8000 	nop.w

0800a960 <pxCurrentTCBConst2>:
 800a960:	20000e50 	.word	0x20000e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop

0800a968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a968:	4808      	ldr	r0, [pc, #32]	@ (800a98c <prvPortStartFirstTask+0x24>)
 800a96a:	6800      	ldr	r0, [r0, #0]
 800a96c:	6800      	ldr	r0, [r0, #0]
 800a96e:	f380 8808 	msr	MSP, r0
 800a972:	f04f 0000 	mov.w	r0, #0
 800a976:	f380 8814 	msr	CONTROL, r0
 800a97a:	b662      	cpsie	i
 800a97c:	b661      	cpsie	f
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	df00      	svc	0
 800a988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a98a:	bf00      	nop
 800a98c:	e000ed08 	.word	0xe000ed08

0800a990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a996:	4b47      	ldr	r3, [pc, #284]	@ (800aab4 <xPortStartScheduler+0x124>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a47      	ldr	r2, [pc, #284]	@ (800aab8 <xPortStartScheduler+0x128>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d10b      	bne.n	800a9b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9b8:	4b3e      	ldr	r3, [pc, #248]	@ (800aab4 <xPortStartScheduler+0x124>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a3f      	ldr	r2, [pc, #252]	@ (800aabc <xPortStartScheduler+0x12c>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d10b      	bne.n	800a9da <xPortStartScheduler+0x4a>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	60fb      	str	r3, [r7, #12]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9da:	4b39      	ldr	r3, [pc, #228]	@ (800aac0 <xPortStartScheduler+0x130>)
 800a9dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	22ff      	movs	r2, #255	@ 0xff
 800a9ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	4b31      	ldr	r3, [pc, #196]	@ (800aac4 <xPortStartScheduler+0x134>)
 800aa00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa02:	4b31      	ldr	r3, [pc, #196]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa04:	2207      	movs	r2, #7
 800aa06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa08:	e009      	b.n	800aa1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aa0a:	4b2f      	ldr	r3, [pc, #188]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4a2d      	ldr	r2, [pc, #180]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa14:	78fb      	ldrb	r3, [r7, #3]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa1e:	78fb      	ldrb	r3, [r7, #3]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa26:	2b80      	cmp	r3, #128	@ 0x80
 800aa28:	d0ef      	beq.n	800aa0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa2a:	4b27      	ldr	r3, [pc, #156]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f1c3 0307 	rsb	r3, r3, #7
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d00b      	beq.n	800aa4e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	60bb      	str	r3, [r7, #8]
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	4a1c      	ldr	r2, [pc, #112]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa58:	4b1b      	ldr	r3, [pc, #108]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa60:	4a19      	ldr	r2, [pc, #100]	@ (800aac8 <xPortStartScheduler+0x138>)
 800aa62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa6c:	4b17      	ldr	r3, [pc, #92]	@ (800aacc <xPortStartScheduler+0x13c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a16      	ldr	r2, [pc, #88]	@ (800aacc <xPortStartScheduler+0x13c>)
 800aa72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa78:	4b14      	ldr	r3, [pc, #80]	@ (800aacc <xPortStartScheduler+0x13c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a13      	ldr	r2, [pc, #76]	@ (800aacc <xPortStartScheduler+0x13c>)
 800aa7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa84:	f000 f8da 	bl	800ac3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa88:	4b11      	ldr	r3, [pc, #68]	@ (800aad0 <xPortStartScheduler+0x140>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa8e:	f000 f8f9 	bl	800ac84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa92:	4b10      	ldr	r3, [pc, #64]	@ (800aad4 <xPortStartScheduler+0x144>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a0f      	ldr	r2, [pc, #60]	@ (800aad4 <xPortStartScheduler+0x144>)
 800aa98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa9e:	f7ff ff63 	bl	800a968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aaa2:	f7fe ff2b 	bl	80098fc <vTaskSwitchContext>
	prvTaskExitError();
 800aaa6:	f7ff ff19 	bl	800a8dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	e000ed00 	.word	0xe000ed00
 800aab8:	410fc271 	.word	0x410fc271
 800aabc:	410fc270 	.word	0x410fc270
 800aac0:	e000e400 	.word	0xe000e400
 800aac4:	2000147c 	.word	0x2000147c
 800aac8:	20001480 	.word	0x20001480
 800aacc:	e000ed20 	.word	0xe000ed20
 800aad0:	20000030 	.word	0x20000030
 800aad4:	e000ef34 	.word	0xe000ef34

0800aad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
}
 800aaf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aaf2:	4b10      	ldr	r3, [pc, #64]	@ (800ab34 <vPortEnterCritical+0x5c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab34 <vPortEnterCritical+0x5c>)
 800aafa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aafc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab34 <vPortEnterCritical+0x5c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d110      	bne.n	800ab26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab04:	4b0c      	ldr	r3, [pc, #48]	@ (800ab38 <vPortEnterCritical+0x60>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00b      	beq.n	800ab26 <vPortEnterCritical+0x4e>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	603b      	str	r3, [r7, #0]
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	e7fd      	b.n	800ab22 <vPortEnterCritical+0x4a>
	}
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000030 	.word	0x20000030
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab42:	4b12      	ldr	r3, [pc, #72]	@ (800ab8c <vPortExitCritical+0x50>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10b      	bne.n	800ab62 <vPortExitCritical+0x26>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	607b      	str	r3, [r7, #4]
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	e7fd      	b.n	800ab5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab62:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <vPortExitCritical+0x50>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	4a08      	ldr	r2, [pc, #32]	@ (800ab8c <vPortExitCritical+0x50>)
 800ab6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab6c:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <vPortExitCritical+0x50>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d105      	bne.n	800ab80 <vPortExitCritical+0x44>
 800ab74:	2300      	movs	r3, #0
 800ab76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	f383 8811 	msr	BASEPRI, r3
}
 800ab7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	20000030 	.word	0x20000030

0800ab90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab90:	f3ef 8009 	mrs	r0, PSP
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	4b15      	ldr	r3, [pc, #84]	@ (800abf0 <pxCurrentTCBConst>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	f01e 0f10 	tst.w	lr, #16
 800aba0:	bf08      	it	eq
 800aba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abaa:	6010      	str	r0, [r2, #0]
 800abac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800abb4:	f380 8811 	msr	BASEPRI, r0
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f7fe fe9c 	bl	80098fc <vTaskSwitchContext>
 800abc4:	f04f 0000 	mov.w	r0, #0
 800abc8:	f380 8811 	msr	BASEPRI, r0
 800abcc:	bc09      	pop	{r0, r3}
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	6808      	ldr	r0, [r1, #0]
 800abd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd6:	f01e 0f10 	tst.w	lr, #16
 800abda:	bf08      	it	eq
 800abdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abe0:	f380 8809 	msr	PSP, r0
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	f3af 8000 	nop.w

0800abf0 <pxCurrentTCBConst>:
 800abf0:	20000e50 	.word	0x20000e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop

0800abf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	607b      	str	r3, [r7, #4]
}
 800ac10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac12:	f7fe fdb9 	bl	8009788 <xTaskIncrementTick>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac1c:	4b06      	ldr	r3, [pc, #24]	@ (800ac38 <xPortSysTickHandler+0x40>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	2300      	movs	r3, #0
 800ac26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	f383 8811 	msr	BASEPRI, r3
}
 800ac2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac40:	4b0b      	ldr	r3, [pc, #44]	@ (800ac70 <vPortSetupTimerInterrupt+0x34>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac46:	4b0b      	ldr	r3, [pc, #44]	@ (800ac74 <vPortSetupTimerInterrupt+0x38>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac78 <vPortSetupTimerInterrupt+0x3c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a0a      	ldr	r2, [pc, #40]	@ (800ac7c <vPortSetupTimerInterrupt+0x40>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	099b      	lsrs	r3, r3, #6
 800ac58:	4a09      	ldr	r2, [pc, #36]	@ (800ac80 <vPortSetupTimerInterrupt+0x44>)
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac5e:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <vPortSetupTimerInterrupt+0x34>)
 800ac60:	2207      	movs	r2, #7
 800ac62:	601a      	str	r2, [r3, #0]
}
 800ac64:	bf00      	nop
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	e000e010 	.word	0xe000e010
 800ac74:	e000e018 	.word	0xe000e018
 800ac78:	20000024 	.word	0x20000024
 800ac7c:	10624dd3 	.word	0x10624dd3
 800ac80:	e000e014 	.word	0xe000e014

0800ac84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac94 <vPortEnableVFP+0x10>
 800ac88:	6801      	ldr	r1, [r0, #0]
 800ac8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac8e:	6001      	str	r1, [r0, #0]
 800ac90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac92:	bf00      	nop
 800ac94:	e000ed88 	.word	0xe000ed88

0800ac98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac9e:	f3ef 8305 	mrs	r3, IPSR
 800aca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b0f      	cmp	r3, #15
 800aca8:	d915      	bls.n	800acd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800acaa:	4a18      	ldr	r2, [pc, #96]	@ (800ad0c <vPortValidateInterruptPriority+0x74>)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4413      	add	r3, r2
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800acb4:	4b16      	ldr	r3, [pc, #88]	@ (800ad10 <vPortValidateInterruptPriority+0x78>)
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	7afa      	ldrb	r2, [r7, #11]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d20b      	bcs.n	800acd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	607b      	str	r3, [r7, #4]
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	e7fd      	b.n	800acd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acd6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad14 <vPortValidateInterruptPriority+0x7c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acde:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <vPortValidateInterruptPriority+0x80>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d90b      	bls.n	800acfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	603b      	str	r3, [r7, #0]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <vPortValidateInterruptPriority+0x62>
	}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	e000e3f0 	.word	0xe000e3f0
 800ad10:	2000147c 	.word	0x2000147c
 800ad14:	e000ed0c 	.word	0xe000ed0c
 800ad18:	20001480 	.word	0x20001480

0800ad1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08a      	sub	sp, #40	@ 0x28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad28:	f7fe fc72 	bl	8009610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad2c:	4b5c      	ldr	r3, [pc, #368]	@ (800aea0 <pvPortMalloc+0x184>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad34:	f000 f924 	bl	800af80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad38:	4b5a      	ldr	r3, [pc, #360]	@ (800aea4 <pvPortMalloc+0x188>)
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4013      	ands	r3, r2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f040 8095 	bne.w	800ae70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d01e      	beq.n	800ad8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad4c:	2208      	movs	r2, #8
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4413      	add	r3, r2
 800ad52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d015      	beq.n	800ad8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f023 0307 	bic.w	r3, r3, #7
 800ad64:	3308      	adds	r3, #8
 800ad66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <pvPortMalloc+0x6e>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	617b      	str	r3, [r7, #20]
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop
 800ad88:	e7fd      	b.n	800ad86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d06f      	beq.n	800ae70 <pvPortMalloc+0x154>
 800ad90:	4b45      	ldr	r3, [pc, #276]	@ (800aea8 <pvPortMalloc+0x18c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d86a      	bhi.n	800ae70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad9a:	4b44      	ldr	r3, [pc, #272]	@ (800aeac <pvPortMalloc+0x190>)
 800ad9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad9e:	4b43      	ldr	r3, [pc, #268]	@ (800aeac <pvPortMalloc+0x190>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ada4:	e004      	b.n	800adb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d903      	bls.n	800adc2 <pvPortMalloc+0xa6>
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f1      	bne.n	800ada6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adc2:	4b37      	ldr	r3, [pc, #220]	@ (800aea0 <pvPortMalloc+0x184>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc8:	429a      	cmp	r2, r3
 800adca:	d051      	beq.n	800ae70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2208      	movs	r2, #8
 800add2:	4413      	add	r3, r2
 800add4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800add6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	1ad2      	subs	r2, r2, r3
 800ade6:	2308      	movs	r3, #8
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	429a      	cmp	r2, r3
 800adec:	d920      	bls.n	800ae30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4413      	add	r3, r2
 800adf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00b      	beq.n	800ae18 <pvPortMalloc+0xfc>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	613b      	str	r3, [r7, #16]
}
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	e7fd      	b.n	800ae14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	1ad2      	subs	r2, r2, r3
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae2a:	69b8      	ldr	r0, [r7, #24]
 800ae2c:	f000 f90a 	bl	800b044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae30:	4b1d      	ldr	r3, [pc, #116]	@ (800aea8 <pvPortMalloc+0x18c>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aea8 <pvPortMalloc+0x18c>)
 800ae3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aea8 <pvPortMalloc+0x18c>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb0 <pvPortMalloc+0x194>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d203      	bcs.n	800ae52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae4a:	4b17      	ldr	r3, [pc, #92]	@ (800aea8 <pvPortMalloc+0x18c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a18      	ldr	r2, [pc, #96]	@ (800aeb0 <pvPortMalloc+0x194>)
 800ae50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	4b13      	ldr	r3, [pc, #76]	@ (800aea4 <pvPortMalloc+0x188>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae66:	4b13      	ldr	r3, [pc, #76]	@ (800aeb4 <pvPortMalloc+0x198>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	4a11      	ldr	r2, [pc, #68]	@ (800aeb4 <pvPortMalloc+0x198>)
 800ae6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae70:	f7fe fbdc 	bl	800962c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00b      	beq.n	800ae96 <pvPortMalloc+0x17a>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	60fb      	str	r3, [r7, #12]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <pvPortMalloc+0x176>
	return pvReturn;
 800ae96:	69fb      	ldr	r3, [r7, #28]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3728      	adds	r7, #40	@ 0x28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	2000508c 	.word	0x2000508c
 800aea4:	200050a0 	.word	0x200050a0
 800aea8:	20005090 	.word	0x20005090
 800aeac:	20005084 	.word	0x20005084
 800aeb0:	20005094 	.word	0x20005094
 800aeb4:	20005098 	.word	0x20005098

0800aeb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d04f      	beq.n	800af6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeca:	2308      	movs	r3, #8
 800aecc:	425b      	negs	r3, r3
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4413      	add	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	4b25      	ldr	r3, [pc, #148]	@ (800af74 <vPortFree+0xbc>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4013      	ands	r3, r2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <vPortFree+0x46>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60fb      	str	r3, [r7, #12]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00b      	beq.n	800af1e <vPortFree+0x66>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	60bb      	str	r3, [r7, #8]
}
 800af18:	bf00      	nop
 800af1a:	bf00      	nop
 800af1c:	e7fd      	b.n	800af1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	4b14      	ldr	r3, [pc, #80]	@ (800af74 <vPortFree+0xbc>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4013      	ands	r3, r2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01e      	beq.n	800af6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d11a      	bne.n	800af6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	4b0e      	ldr	r3, [pc, #56]	@ (800af74 <vPortFree+0xbc>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	43db      	mvns	r3, r3
 800af3e:	401a      	ands	r2, r3
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af44:	f7fe fb64 	bl	8009610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	4b0a      	ldr	r3, [pc, #40]	@ (800af78 <vPortFree+0xc0>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4413      	add	r3, r2
 800af52:	4a09      	ldr	r2, [pc, #36]	@ (800af78 <vPortFree+0xc0>)
 800af54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af56:	6938      	ldr	r0, [r7, #16]
 800af58:	f000 f874 	bl	800b044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af5c:	4b07      	ldr	r3, [pc, #28]	@ (800af7c <vPortFree+0xc4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	4a06      	ldr	r2, [pc, #24]	@ (800af7c <vPortFree+0xc4>)
 800af64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af66:	f7fe fb61 	bl	800962c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af6a:	bf00      	nop
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	200050a0 	.word	0x200050a0
 800af78:	20005090 	.word	0x20005090
 800af7c:	2000509c 	.word	0x2000509c

0800af80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af8c:	4b27      	ldr	r3, [pc, #156]	@ (800b02c <prvHeapInit+0xac>)
 800af8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00c      	beq.n	800afb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3307      	adds	r3, #7
 800af9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0307 	bic.w	r3, r3, #7
 800afa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	4a1f      	ldr	r2, [pc, #124]	@ (800b02c <prvHeapInit+0xac>)
 800afb0:	4413      	add	r3, r2
 800afb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afb8:	4a1d      	ldr	r2, [pc, #116]	@ (800b030 <prvHeapInit+0xb0>)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afbe:	4b1c      	ldr	r3, [pc, #112]	@ (800b030 <prvHeapInit+0xb0>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	4413      	add	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afcc:	2208      	movs	r2, #8
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	1a9b      	subs	r3, r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f023 0307 	bic.w	r3, r3, #7
 800afda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4a15      	ldr	r2, [pc, #84]	@ (800b034 <prvHeapInit+0xb4>)
 800afe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afe2:	4b14      	ldr	r3, [pc, #80]	@ (800b034 <prvHeapInit+0xb4>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2200      	movs	r2, #0
 800afe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afea:	4b12      	ldr	r3, [pc, #72]	@ (800b034 <prvHeapInit+0xb4>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	1ad2      	subs	r2, r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b000:	4b0c      	ldr	r3, [pc, #48]	@ (800b034 <prvHeapInit+0xb4>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	4a0a      	ldr	r2, [pc, #40]	@ (800b038 <prvHeapInit+0xb8>)
 800b00e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	4a09      	ldr	r2, [pc, #36]	@ (800b03c <prvHeapInit+0xbc>)
 800b016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b018:	4b09      	ldr	r3, [pc, #36]	@ (800b040 <prvHeapInit+0xc0>)
 800b01a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b01e:	601a      	str	r2, [r3, #0]
}
 800b020:	bf00      	nop
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	20001484 	.word	0x20001484
 800b030:	20005084 	.word	0x20005084
 800b034:	2000508c 	.word	0x2000508c
 800b038:	20005094 	.word	0x20005094
 800b03c:	20005090 	.word	0x20005090
 800b040:	200050a0 	.word	0x200050a0

0800b044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b04c:	4b28      	ldr	r3, [pc, #160]	@ (800b0f0 <prvInsertBlockIntoFreeList+0xac>)
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e002      	b.n	800b058 <prvInsertBlockIntoFreeList+0x14>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d8f7      	bhi.n	800b052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	4413      	add	r3, r2
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	429a      	cmp	r2, r3
 800b072:	d108      	bne.n	800b086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	441a      	add	r2, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	441a      	add	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	429a      	cmp	r2, r3
 800b098:	d118      	bne.n	800b0cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b15      	ldr	r3, [pc, #84]	@ (800b0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d00d      	beq.n	800b0c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	441a      	add	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	e008      	b.n	800b0d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	e003      	b.n	800b0d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d002      	beq.n	800b0e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20005084 	.word	0x20005084
 800b0f4:	2000508c 	.word	0x2000508c

0800b0f8 <siprintf>:
 800b0f8:	b40e      	push	{r1, r2, r3}
 800b0fa:	b500      	push	{lr}
 800b0fc:	b09c      	sub	sp, #112	@ 0x70
 800b0fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800b100:	9002      	str	r0, [sp, #8]
 800b102:	9006      	str	r0, [sp, #24]
 800b104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b108:	4809      	ldr	r0, [pc, #36]	@ (800b130 <siprintf+0x38>)
 800b10a:	9107      	str	r1, [sp, #28]
 800b10c:	9104      	str	r1, [sp, #16]
 800b10e:	4909      	ldr	r1, [pc, #36]	@ (800b134 <siprintf+0x3c>)
 800b110:	f853 2b04 	ldr.w	r2, [r3], #4
 800b114:	9105      	str	r1, [sp, #20]
 800b116:	6800      	ldr	r0, [r0, #0]
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	a902      	add	r1, sp, #8
 800b11c:	f000 f9f2 	bl	800b504 <_svfiprintf_r>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	b01c      	add	sp, #112	@ 0x70
 800b128:	f85d eb04 	ldr.w	lr, [sp], #4
 800b12c:	b003      	add	sp, #12
 800b12e:	4770      	bx	lr
 800b130:	20000040 	.word	0x20000040
 800b134:	ffff0208 	.word	0xffff0208

0800b138 <std>:
 800b138:	2300      	movs	r3, #0
 800b13a:	b510      	push	{r4, lr}
 800b13c:	4604      	mov	r4, r0
 800b13e:	e9c0 3300 	strd	r3, r3, [r0]
 800b142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b146:	6083      	str	r3, [r0, #8]
 800b148:	8181      	strh	r1, [r0, #12]
 800b14a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b14c:	81c2      	strh	r2, [r0, #14]
 800b14e:	6183      	str	r3, [r0, #24]
 800b150:	4619      	mov	r1, r3
 800b152:	2208      	movs	r2, #8
 800b154:	305c      	adds	r0, #92	@ 0x5c
 800b156:	f000 f937 	bl	800b3c8 <memset>
 800b15a:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <std+0x58>)
 800b15c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b15e:	4b0d      	ldr	r3, [pc, #52]	@ (800b194 <std+0x5c>)
 800b160:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b162:	4b0d      	ldr	r3, [pc, #52]	@ (800b198 <std+0x60>)
 800b164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b166:	4b0d      	ldr	r3, [pc, #52]	@ (800b19c <std+0x64>)
 800b168:	6323      	str	r3, [r4, #48]	@ 0x30
 800b16a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <std+0x68>)
 800b16c:	6224      	str	r4, [r4, #32]
 800b16e:	429c      	cmp	r4, r3
 800b170:	d006      	beq.n	800b180 <std+0x48>
 800b172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b176:	4294      	cmp	r4, r2
 800b178:	d002      	beq.n	800b180 <std+0x48>
 800b17a:	33d0      	adds	r3, #208	@ 0xd0
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d105      	bne.n	800b18c <std+0x54>
 800b180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b188:	f000 b950 	b.w	800b42c <__retarget_lock_init_recursive>
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	0800bf51 	.word	0x0800bf51
 800b194:	0800bf73 	.word	0x0800bf73
 800b198:	0800bfab 	.word	0x0800bfab
 800b19c:	0800bfcf 	.word	0x0800bfcf
 800b1a0:	200050a4 	.word	0x200050a4

0800b1a4 <stdio_exit_handler>:
 800b1a4:	4a02      	ldr	r2, [pc, #8]	@ (800b1b0 <stdio_exit_handler+0xc>)
 800b1a6:	4903      	ldr	r1, [pc, #12]	@ (800b1b4 <stdio_exit_handler+0x10>)
 800b1a8:	4803      	ldr	r0, [pc, #12]	@ (800b1b8 <stdio_exit_handler+0x14>)
 800b1aa:	f000 b869 	b.w	800b280 <_fwalk_sglue>
 800b1ae:	bf00      	nop
 800b1b0:	20000034 	.word	0x20000034
 800b1b4:	0800bee9 	.word	0x0800bee9
 800b1b8:	20000044 	.word	0x20000044

0800b1bc <cleanup_stdio>:
 800b1bc:	6841      	ldr	r1, [r0, #4]
 800b1be:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f0 <cleanup_stdio+0x34>)
 800b1c0:	4299      	cmp	r1, r3
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	d001      	beq.n	800b1cc <cleanup_stdio+0x10>
 800b1c8:	f000 fe8e 	bl	800bee8 <_fflush_r>
 800b1cc:	68a1      	ldr	r1, [r4, #8]
 800b1ce:	4b09      	ldr	r3, [pc, #36]	@ (800b1f4 <cleanup_stdio+0x38>)
 800b1d0:	4299      	cmp	r1, r3
 800b1d2:	d002      	beq.n	800b1da <cleanup_stdio+0x1e>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fe87 	bl	800bee8 <_fflush_r>
 800b1da:	68e1      	ldr	r1, [r4, #12]
 800b1dc:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <cleanup_stdio+0x3c>)
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	d004      	beq.n	800b1ec <cleanup_stdio+0x30>
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e8:	f000 be7e 	b.w	800bee8 <_fflush_r>
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200050a4 	.word	0x200050a4
 800b1f4:	2000510c 	.word	0x2000510c
 800b1f8:	20005174 	.word	0x20005174

0800b1fc <global_stdio_init.part.0>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b22c <global_stdio_init.part.0+0x30>)
 800b200:	4c0b      	ldr	r4, [pc, #44]	@ (800b230 <global_stdio_init.part.0+0x34>)
 800b202:	4a0c      	ldr	r2, [pc, #48]	@ (800b234 <global_stdio_init.part.0+0x38>)
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	4620      	mov	r0, r4
 800b208:	2200      	movs	r2, #0
 800b20a:	2104      	movs	r1, #4
 800b20c:	f7ff ff94 	bl	800b138 <std>
 800b210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b214:	2201      	movs	r2, #1
 800b216:	2109      	movs	r1, #9
 800b218:	f7ff ff8e 	bl	800b138 <std>
 800b21c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b220:	2202      	movs	r2, #2
 800b222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b226:	2112      	movs	r1, #18
 800b228:	f7ff bf86 	b.w	800b138 <std>
 800b22c:	200051dc 	.word	0x200051dc
 800b230:	200050a4 	.word	0x200050a4
 800b234:	0800b1a5 	.word	0x0800b1a5

0800b238 <__sfp_lock_acquire>:
 800b238:	4801      	ldr	r0, [pc, #4]	@ (800b240 <__sfp_lock_acquire+0x8>)
 800b23a:	f000 b8f8 	b.w	800b42e <__retarget_lock_acquire_recursive>
 800b23e:	bf00      	nop
 800b240:	200051e1 	.word	0x200051e1

0800b244 <__sfp_lock_release>:
 800b244:	4801      	ldr	r0, [pc, #4]	@ (800b24c <__sfp_lock_release+0x8>)
 800b246:	f000 b8f3 	b.w	800b430 <__retarget_lock_release_recursive>
 800b24a:	bf00      	nop
 800b24c:	200051e1 	.word	0x200051e1

0800b250 <__sinit>:
 800b250:	b510      	push	{r4, lr}
 800b252:	4604      	mov	r4, r0
 800b254:	f7ff fff0 	bl	800b238 <__sfp_lock_acquire>
 800b258:	6a23      	ldr	r3, [r4, #32]
 800b25a:	b11b      	cbz	r3, 800b264 <__sinit+0x14>
 800b25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b260:	f7ff bff0 	b.w	800b244 <__sfp_lock_release>
 800b264:	4b04      	ldr	r3, [pc, #16]	@ (800b278 <__sinit+0x28>)
 800b266:	6223      	str	r3, [r4, #32]
 800b268:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <__sinit+0x2c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1f5      	bne.n	800b25c <__sinit+0xc>
 800b270:	f7ff ffc4 	bl	800b1fc <global_stdio_init.part.0>
 800b274:	e7f2      	b.n	800b25c <__sinit+0xc>
 800b276:	bf00      	nop
 800b278:	0800b1bd 	.word	0x0800b1bd
 800b27c:	200051dc 	.word	0x200051dc

0800b280 <_fwalk_sglue>:
 800b280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b284:	4607      	mov	r7, r0
 800b286:	4688      	mov	r8, r1
 800b288:	4614      	mov	r4, r2
 800b28a:	2600      	movs	r6, #0
 800b28c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b290:	f1b9 0901 	subs.w	r9, r9, #1
 800b294:	d505      	bpl.n	800b2a2 <_fwalk_sglue+0x22>
 800b296:	6824      	ldr	r4, [r4, #0]
 800b298:	2c00      	cmp	r4, #0
 800b29a:	d1f7      	bne.n	800b28c <_fwalk_sglue+0xc>
 800b29c:	4630      	mov	r0, r6
 800b29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d907      	bls.n	800b2b8 <_fwalk_sglue+0x38>
 800b2a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	d003      	beq.n	800b2b8 <_fwalk_sglue+0x38>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	47c0      	blx	r8
 800b2b6:	4306      	orrs	r6, r0
 800b2b8:	3568      	adds	r5, #104	@ 0x68
 800b2ba:	e7e9      	b.n	800b290 <_fwalk_sglue+0x10>

0800b2bc <iprintf>:
 800b2bc:	b40f      	push	{r0, r1, r2, r3}
 800b2be:	b507      	push	{r0, r1, r2, lr}
 800b2c0:	4906      	ldr	r1, [pc, #24]	@ (800b2dc <iprintf+0x20>)
 800b2c2:	ab04      	add	r3, sp, #16
 800b2c4:	6808      	ldr	r0, [r1, #0]
 800b2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ca:	6881      	ldr	r1, [r0, #8]
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	f000 fa3f 	bl	800b750 <_vfiprintf_r>
 800b2d2:	b003      	add	sp, #12
 800b2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2d8:	b004      	add	sp, #16
 800b2da:	4770      	bx	lr
 800b2dc:	20000040 	.word	0x20000040

0800b2e0 <_puts_r>:
 800b2e0:	6a03      	ldr	r3, [r0, #32]
 800b2e2:	b570      	push	{r4, r5, r6, lr}
 800b2e4:	6884      	ldr	r4, [r0, #8]
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	460e      	mov	r6, r1
 800b2ea:	b90b      	cbnz	r3, 800b2f0 <_puts_r+0x10>
 800b2ec:	f7ff ffb0 	bl	800b250 <__sinit>
 800b2f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2f2:	07db      	lsls	r3, r3, #31
 800b2f4:	d405      	bmi.n	800b302 <_puts_r+0x22>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	0598      	lsls	r0, r3, #22
 800b2fa:	d402      	bmi.n	800b302 <_puts_r+0x22>
 800b2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2fe:	f000 f896 	bl	800b42e <__retarget_lock_acquire_recursive>
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	0719      	lsls	r1, r3, #28
 800b306:	d502      	bpl.n	800b30e <_puts_r+0x2e>
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d135      	bne.n	800b37a <_puts_r+0x9a>
 800b30e:	4621      	mov	r1, r4
 800b310:	4628      	mov	r0, r5
 800b312:	f000 fecd 	bl	800c0b0 <__swsetup_r>
 800b316:	b380      	cbz	r0, 800b37a <_puts_r+0x9a>
 800b318:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b31c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b31e:	07da      	lsls	r2, r3, #31
 800b320:	d405      	bmi.n	800b32e <_puts_r+0x4e>
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	059b      	lsls	r3, r3, #22
 800b326:	d402      	bmi.n	800b32e <_puts_r+0x4e>
 800b328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32a:	f000 f881 	bl	800b430 <__retarget_lock_release_recursive>
 800b32e:	4628      	mov	r0, r5
 800b330:	bd70      	pop	{r4, r5, r6, pc}
 800b332:	2b00      	cmp	r3, #0
 800b334:	da04      	bge.n	800b340 <_puts_r+0x60>
 800b336:	69a2      	ldr	r2, [r4, #24]
 800b338:	429a      	cmp	r2, r3
 800b33a:	dc17      	bgt.n	800b36c <_puts_r+0x8c>
 800b33c:	290a      	cmp	r1, #10
 800b33e:	d015      	beq.n	800b36c <_puts_r+0x8c>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	6022      	str	r2, [r4, #0]
 800b346:	7019      	strb	r1, [r3, #0]
 800b348:	68a3      	ldr	r3, [r4, #8]
 800b34a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b34e:	3b01      	subs	r3, #1
 800b350:	60a3      	str	r3, [r4, #8]
 800b352:	2900      	cmp	r1, #0
 800b354:	d1ed      	bne.n	800b332 <_puts_r+0x52>
 800b356:	2b00      	cmp	r3, #0
 800b358:	da11      	bge.n	800b37e <_puts_r+0x9e>
 800b35a:	4622      	mov	r2, r4
 800b35c:	210a      	movs	r1, #10
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 fe67 	bl	800c032 <__swbuf_r>
 800b364:	3001      	adds	r0, #1
 800b366:	d0d7      	beq.n	800b318 <_puts_r+0x38>
 800b368:	250a      	movs	r5, #10
 800b36a:	e7d7      	b.n	800b31c <_puts_r+0x3c>
 800b36c:	4622      	mov	r2, r4
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fe5f 	bl	800c032 <__swbuf_r>
 800b374:	3001      	adds	r0, #1
 800b376:	d1e7      	bne.n	800b348 <_puts_r+0x68>
 800b378:	e7ce      	b.n	800b318 <_puts_r+0x38>
 800b37a:	3e01      	subs	r6, #1
 800b37c:	e7e4      	b.n	800b348 <_puts_r+0x68>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	6022      	str	r2, [r4, #0]
 800b384:	220a      	movs	r2, #10
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	e7ee      	b.n	800b368 <_puts_r+0x88>
	...

0800b38c <puts>:
 800b38c:	4b02      	ldr	r3, [pc, #8]	@ (800b398 <puts+0xc>)
 800b38e:	4601      	mov	r1, r0
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	f7ff bfa5 	b.w	800b2e0 <_puts_r>
 800b396:	bf00      	nop
 800b398:	20000040 	.word	0x20000040

0800b39c <strstr>:
 800b39c:	780a      	ldrb	r2, [r1, #0]
 800b39e:	b570      	push	{r4, r5, r6, lr}
 800b3a0:	b96a      	cbnz	r2, 800b3be <strstr+0x22>
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d109      	bne.n	800b3bc <strstr+0x20>
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0f6      	beq.n	800b3a2 <strstr+0x6>
 800b3b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b3b8:	429e      	cmp	r6, r3
 800b3ba:	d0f7      	beq.n	800b3ac <strstr+0x10>
 800b3bc:	3001      	adds	r0, #1
 800b3be:	7803      	ldrb	r3, [r0, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1ef      	bne.n	800b3a4 <strstr+0x8>
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	e7ec      	b.n	800b3a2 <strstr+0x6>

0800b3c8 <memset>:
 800b3c8:	4402      	add	r2, r0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d100      	bne.n	800b3d2 <memset+0xa>
 800b3d0:	4770      	bx	lr
 800b3d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d6:	e7f9      	b.n	800b3cc <memset+0x4>

0800b3d8 <__errno>:
 800b3d8:	4b01      	ldr	r3, [pc, #4]	@ (800b3e0 <__errno+0x8>)
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	20000040 	.word	0x20000040

0800b3e4 <__libc_init_array>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b41c <__libc_init_array+0x38>)
 800b3e8:	4c0d      	ldr	r4, [pc, #52]	@ (800b420 <__libc_init_array+0x3c>)
 800b3ea:	1b64      	subs	r4, r4, r5
 800b3ec:	10a4      	asrs	r4, r4, #2
 800b3ee:	2600      	movs	r6, #0
 800b3f0:	42a6      	cmp	r6, r4
 800b3f2:	d109      	bne.n	800b408 <__libc_init_array+0x24>
 800b3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b424 <__libc_init_array+0x40>)
 800b3f6:	4c0c      	ldr	r4, [pc, #48]	@ (800b428 <__libc_init_array+0x44>)
 800b3f8:	f000 fff6 	bl	800c3e8 <_init>
 800b3fc:	1b64      	subs	r4, r4, r5
 800b3fe:	10a4      	asrs	r4, r4, #2
 800b400:	2600      	movs	r6, #0
 800b402:	42a6      	cmp	r6, r4
 800b404:	d105      	bne.n	800b412 <__libc_init_array+0x2e>
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40c:	4798      	blx	r3
 800b40e:	3601      	adds	r6, #1
 800b410:	e7ee      	b.n	800b3f0 <__libc_init_array+0xc>
 800b412:	f855 3b04 	ldr.w	r3, [r5], #4
 800b416:	4798      	blx	r3
 800b418:	3601      	adds	r6, #1
 800b41a:	e7f2      	b.n	800b402 <__libc_init_array+0x1e>
 800b41c:	0800d744 	.word	0x0800d744
 800b420:	0800d744 	.word	0x0800d744
 800b424:	0800d744 	.word	0x0800d744
 800b428:	0800d748 	.word	0x0800d748

0800b42c <__retarget_lock_init_recursive>:
 800b42c:	4770      	bx	lr

0800b42e <__retarget_lock_acquire_recursive>:
 800b42e:	4770      	bx	lr

0800b430 <__retarget_lock_release_recursive>:
 800b430:	4770      	bx	lr

0800b432 <memcpy>:
 800b432:	440a      	add	r2, r1
 800b434:	4291      	cmp	r1, r2
 800b436:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b43a:	d100      	bne.n	800b43e <memcpy+0xc>
 800b43c:	4770      	bx	lr
 800b43e:	b510      	push	{r4, lr}
 800b440:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b444:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b448:	4291      	cmp	r1, r2
 800b44a:	d1f9      	bne.n	800b440 <memcpy+0xe>
 800b44c:	bd10      	pop	{r4, pc}

0800b44e <__ssputs_r>:
 800b44e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b452:	688e      	ldr	r6, [r1, #8]
 800b454:	461f      	mov	r7, r3
 800b456:	42be      	cmp	r6, r7
 800b458:	680b      	ldr	r3, [r1, #0]
 800b45a:	4682      	mov	sl, r0
 800b45c:	460c      	mov	r4, r1
 800b45e:	4690      	mov	r8, r2
 800b460:	d82d      	bhi.n	800b4be <__ssputs_r+0x70>
 800b462:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b466:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b46a:	d026      	beq.n	800b4ba <__ssputs_r+0x6c>
 800b46c:	6965      	ldr	r5, [r4, #20]
 800b46e:	6909      	ldr	r1, [r1, #16]
 800b470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b474:	eba3 0901 	sub.w	r9, r3, r1
 800b478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b47c:	1c7b      	adds	r3, r7, #1
 800b47e:	444b      	add	r3, r9
 800b480:	106d      	asrs	r5, r5, #1
 800b482:	429d      	cmp	r5, r3
 800b484:	bf38      	it	cc
 800b486:	461d      	movcc	r5, r3
 800b488:	0553      	lsls	r3, r2, #21
 800b48a:	d527      	bpl.n	800b4dc <__ssputs_r+0x8e>
 800b48c:	4629      	mov	r1, r5
 800b48e:	f000 fa99 	bl	800b9c4 <_malloc_r>
 800b492:	4606      	mov	r6, r0
 800b494:	b360      	cbz	r0, 800b4f0 <__ssputs_r+0xa2>
 800b496:	6921      	ldr	r1, [r4, #16]
 800b498:	464a      	mov	r2, r9
 800b49a:	f7ff ffca 	bl	800b432 <memcpy>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	6126      	str	r6, [r4, #16]
 800b4ac:	6165      	str	r5, [r4, #20]
 800b4ae:	444e      	add	r6, r9
 800b4b0:	eba5 0509 	sub.w	r5, r5, r9
 800b4b4:	6026      	str	r6, [r4, #0]
 800b4b6:	60a5      	str	r5, [r4, #8]
 800b4b8:	463e      	mov	r6, r7
 800b4ba:	42be      	cmp	r6, r7
 800b4bc:	d900      	bls.n	800b4c0 <__ssputs_r+0x72>
 800b4be:	463e      	mov	r6, r7
 800b4c0:	6820      	ldr	r0, [r4, #0]
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	4641      	mov	r1, r8
 800b4c6:	f000 feab 	bl	800c220 <memmove>
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	1b9b      	subs	r3, r3, r6
 800b4ce:	60a3      	str	r3, [r4, #8]
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	4433      	add	r3, r6
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4dc:	462a      	mov	r2, r5
 800b4de:	f000 fd7a 	bl	800bfd6 <_realloc_r>
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d1e0      	bne.n	800b4aa <__ssputs_r+0x5c>
 800b4e8:	6921      	ldr	r1, [r4, #16]
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f000 ff2a 	bl	800c344 <_free_r>
 800b4f0:	230c      	movs	r3, #12
 800b4f2:	f8ca 3000 	str.w	r3, [sl]
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b502:	e7e9      	b.n	800b4d8 <__ssputs_r+0x8a>

0800b504 <_svfiprintf_r>:
 800b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b508:	4698      	mov	r8, r3
 800b50a:	898b      	ldrh	r3, [r1, #12]
 800b50c:	061b      	lsls	r3, r3, #24
 800b50e:	b09d      	sub	sp, #116	@ 0x74
 800b510:	4607      	mov	r7, r0
 800b512:	460d      	mov	r5, r1
 800b514:	4614      	mov	r4, r2
 800b516:	d510      	bpl.n	800b53a <_svfiprintf_r+0x36>
 800b518:	690b      	ldr	r3, [r1, #16]
 800b51a:	b973      	cbnz	r3, 800b53a <_svfiprintf_r+0x36>
 800b51c:	2140      	movs	r1, #64	@ 0x40
 800b51e:	f000 fa51 	bl	800b9c4 <_malloc_r>
 800b522:	6028      	str	r0, [r5, #0]
 800b524:	6128      	str	r0, [r5, #16]
 800b526:	b930      	cbnz	r0, 800b536 <_svfiprintf_r+0x32>
 800b528:	230c      	movs	r3, #12
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b530:	b01d      	add	sp, #116	@ 0x74
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	2340      	movs	r3, #64	@ 0x40
 800b538:	616b      	str	r3, [r5, #20]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b53e:	2320      	movs	r3, #32
 800b540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b544:	f8cd 800c 	str.w	r8, [sp, #12]
 800b548:	2330      	movs	r3, #48	@ 0x30
 800b54a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6e8 <_svfiprintf_r+0x1e4>
 800b54e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b552:	f04f 0901 	mov.w	r9, #1
 800b556:	4623      	mov	r3, r4
 800b558:	469a      	mov	sl, r3
 800b55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b55e:	b10a      	cbz	r2, 800b564 <_svfiprintf_r+0x60>
 800b560:	2a25      	cmp	r2, #37	@ 0x25
 800b562:	d1f9      	bne.n	800b558 <_svfiprintf_r+0x54>
 800b564:	ebba 0b04 	subs.w	fp, sl, r4
 800b568:	d00b      	beq.n	800b582 <_svfiprintf_r+0x7e>
 800b56a:	465b      	mov	r3, fp
 800b56c:	4622      	mov	r2, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff ff6c 	bl	800b44e <__ssputs_r>
 800b576:	3001      	adds	r0, #1
 800b578:	f000 80a7 	beq.w	800b6ca <_svfiprintf_r+0x1c6>
 800b57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b57e:	445a      	add	r2, fp
 800b580:	9209      	str	r2, [sp, #36]	@ 0x24
 800b582:	f89a 3000 	ldrb.w	r3, [sl]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 809f 	beq.w	800b6ca <_svfiprintf_r+0x1c6>
 800b58c:	2300      	movs	r3, #0
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b596:	f10a 0a01 	add.w	sl, sl, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	9307      	str	r3, [sp, #28]
 800b59e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5a4:	4654      	mov	r4, sl
 800b5a6:	2205      	movs	r2, #5
 800b5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ac:	484e      	ldr	r0, [pc, #312]	@ (800b6e8 <_svfiprintf_r+0x1e4>)
 800b5ae:	f7f4 fe37 	bl	8000220 <memchr>
 800b5b2:	9a04      	ldr	r2, [sp, #16]
 800b5b4:	b9d8      	cbnz	r0, 800b5ee <_svfiprintf_r+0xea>
 800b5b6:	06d0      	lsls	r0, r2, #27
 800b5b8:	bf44      	itt	mi
 800b5ba:	2320      	movmi	r3, #32
 800b5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c0:	0711      	lsls	r1, r2, #28
 800b5c2:	bf44      	itt	mi
 800b5c4:	232b      	movmi	r3, #43	@ 0x2b
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5d0:	d015      	beq.n	800b5fe <_svfiprintf_r+0xfa>
 800b5d2:	9a07      	ldr	r2, [sp, #28]
 800b5d4:	4654      	mov	r4, sl
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f04f 0c0a 	mov.w	ip, #10
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e2:	3b30      	subs	r3, #48	@ 0x30
 800b5e4:	2b09      	cmp	r3, #9
 800b5e6:	d94b      	bls.n	800b680 <_svfiprintf_r+0x17c>
 800b5e8:	b1b0      	cbz	r0, 800b618 <_svfiprintf_r+0x114>
 800b5ea:	9207      	str	r2, [sp, #28]
 800b5ec:	e014      	b.n	800b618 <_svfiprintf_r+0x114>
 800b5ee:	eba0 0308 	sub.w	r3, r0, r8
 800b5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	46a2      	mov	sl, r4
 800b5fc:	e7d2      	b.n	800b5a4 <_svfiprintf_r+0xa0>
 800b5fe:	9b03      	ldr	r3, [sp, #12]
 800b600:	1d19      	adds	r1, r3, #4
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	9103      	str	r1, [sp, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfbb      	ittet	lt
 800b60a:	425b      	neglt	r3, r3
 800b60c:	f042 0202 	orrlt.w	r2, r2, #2
 800b610:	9307      	strge	r3, [sp, #28]
 800b612:	9307      	strlt	r3, [sp, #28]
 800b614:	bfb8      	it	lt
 800b616:	9204      	strlt	r2, [sp, #16]
 800b618:	7823      	ldrb	r3, [r4, #0]
 800b61a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b61c:	d10a      	bne.n	800b634 <_svfiprintf_r+0x130>
 800b61e:	7863      	ldrb	r3, [r4, #1]
 800b620:	2b2a      	cmp	r3, #42	@ 0x2a
 800b622:	d132      	bne.n	800b68a <_svfiprintf_r+0x186>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	1d1a      	adds	r2, r3, #4
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	9203      	str	r2, [sp, #12]
 800b62c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b630:	3402      	adds	r4, #2
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6f8 <_svfiprintf_r+0x1f4>
 800b638:	7821      	ldrb	r1, [r4, #0]
 800b63a:	2203      	movs	r2, #3
 800b63c:	4650      	mov	r0, sl
 800b63e:	f7f4 fdef 	bl	8000220 <memchr>
 800b642:	b138      	cbz	r0, 800b654 <_svfiprintf_r+0x150>
 800b644:	9b04      	ldr	r3, [sp, #16]
 800b646:	eba0 000a 	sub.w	r0, r0, sl
 800b64a:	2240      	movs	r2, #64	@ 0x40
 800b64c:	4082      	lsls	r2, r0
 800b64e:	4313      	orrs	r3, r2
 800b650:	3401      	adds	r4, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b658:	4824      	ldr	r0, [pc, #144]	@ (800b6ec <_svfiprintf_r+0x1e8>)
 800b65a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b65e:	2206      	movs	r2, #6
 800b660:	f7f4 fdde 	bl	8000220 <memchr>
 800b664:	2800      	cmp	r0, #0
 800b666:	d036      	beq.n	800b6d6 <_svfiprintf_r+0x1d2>
 800b668:	4b21      	ldr	r3, [pc, #132]	@ (800b6f0 <_svfiprintf_r+0x1ec>)
 800b66a:	bb1b      	cbnz	r3, 800b6b4 <_svfiprintf_r+0x1b0>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	3307      	adds	r3, #7
 800b670:	f023 0307 	bic.w	r3, r3, #7
 800b674:	3308      	adds	r3, #8
 800b676:	9303      	str	r3, [sp, #12]
 800b678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67a:	4433      	add	r3, r6
 800b67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b67e:	e76a      	b.n	800b556 <_svfiprintf_r+0x52>
 800b680:	fb0c 3202 	mla	r2, ip, r2, r3
 800b684:	460c      	mov	r4, r1
 800b686:	2001      	movs	r0, #1
 800b688:	e7a8      	b.n	800b5dc <_svfiprintf_r+0xd8>
 800b68a:	2300      	movs	r3, #0
 800b68c:	3401      	adds	r4, #1
 800b68e:	9305      	str	r3, [sp, #20]
 800b690:	4619      	mov	r1, r3
 800b692:	f04f 0c0a 	mov.w	ip, #10
 800b696:	4620      	mov	r0, r4
 800b698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b69c:	3a30      	subs	r2, #48	@ 0x30
 800b69e:	2a09      	cmp	r2, #9
 800b6a0:	d903      	bls.n	800b6aa <_svfiprintf_r+0x1a6>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0c6      	beq.n	800b634 <_svfiprintf_r+0x130>
 800b6a6:	9105      	str	r1, [sp, #20]
 800b6a8:	e7c4      	b.n	800b634 <_svfiprintf_r+0x130>
 800b6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e7f0      	b.n	800b696 <_svfiprintf_r+0x192>
 800b6b4:	ab03      	add	r3, sp, #12
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	462a      	mov	r2, r5
 800b6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b6f4 <_svfiprintf_r+0x1f0>)
 800b6bc:	a904      	add	r1, sp, #16
 800b6be:	4638      	mov	r0, r7
 800b6c0:	f3af 8000 	nop.w
 800b6c4:	1c42      	adds	r2, r0, #1
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	d1d6      	bne.n	800b678 <_svfiprintf_r+0x174>
 800b6ca:	89ab      	ldrh	r3, [r5, #12]
 800b6cc:	065b      	lsls	r3, r3, #25
 800b6ce:	f53f af2d 	bmi.w	800b52c <_svfiprintf_r+0x28>
 800b6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6d4:	e72c      	b.n	800b530 <_svfiprintf_r+0x2c>
 800b6d6:	ab03      	add	r3, sp, #12
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	4b05      	ldr	r3, [pc, #20]	@ (800b6f4 <_svfiprintf_r+0x1f0>)
 800b6de:	a904      	add	r1, sp, #16
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f000 fa5d 	bl	800bba0 <_printf_i>
 800b6e6:	e7ed      	b.n	800b6c4 <_svfiprintf_r+0x1c0>
 800b6e8:	0800d708 	.word	0x0800d708
 800b6ec:	0800d712 	.word	0x0800d712
 800b6f0:	00000000 	.word	0x00000000
 800b6f4:	0800b44f 	.word	0x0800b44f
 800b6f8:	0800d70e 	.word	0x0800d70e

0800b6fc <__sfputc_r>:
 800b6fc:	6893      	ldr	r3, [r2, #8]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	b410      	push	{r4}
 800b704:	6093      	str	r3, [r2, #8]
 800b706:	da08      	bge.n	800b71a <__sfputc_r+0x1e>
 800b708:	6994      	ldr	r4, [r2, #24]
 800b70a:	42a3      	cmp	r3, r4
 800b70c:	db01      	blt.n	800b712 <__sfputc_r+0x16>
 800b70e:	290a      	cmp	r1, #10
 800b710:	d103      	bne.n	800b71a <__sfputc_r+0x1e>
 800b712:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b716:	f000 bc8c 	b.w	800c032 <__swbuf_r>
 800b71a:	6813      	ldr	r3, [r2, #0]
 800b71c:	1c58      	adds	r0, r3, #1
 800b71e:	6010      	str	r0, [r2, #0]
 800b720:	7019      	strb	r1, [r3, #0]
 800b722:	4608      	mov	r0, r1
 800b724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <__sfputs_r>:
 800b72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72c:	4606      	mov	r6, r0
 800b72e:	460f      	mov	r7, r1
 800b730:	4614      	mov	r4, r2
 800b732:	18d5      	adds	r5, r2, r3
 800b734:	42ac      	cmp	r4, r5
 800b736:	d101      	bne.n	800b73c <__sfputs_r+0x12>
 800b738:	2000      	movs	r0, #0
 800b73a:	e007      	b.n	800b74c <__sfputs_r+0x22>
 800b73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b740:	463a      	mov	r2, r7
 800b742:	4630      	mov	r0, r6
 800b744:	f7ff ffda 	bl	800b6fc <__sfputc_r>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d1f3      	bne.n	800b734 <__sfputs_r+0xa>
 800b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b750 <_vfiprintf_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	460d      	mov	r5, r1
 800b756:	b09d      	sub	sp, #116	@ 0x74
 800b758:	4614      	mov	r4, r2
 800b75a:	4698      	mov	r8, r3
 800b75c:	4606      	mov	r6, r0
 800b75e:	b118      	cbz	r0, 800b768 <_vfiprintf_r+0x18>
 800b760:	6a03      	ldr	r3, [r0, #32]
 800b762:	b90b      	cbnz	r3, 800b768 <_vfiprintf_r+0x18>
 800b764:	f7ff fd74 	bl	800b250 <__sinit>
 800b768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b76a:	07d9      	lsls	r1, r3, #31
 800b76c:	d405      	bmi.n	800b77a <_vfiprintf_r+0x2a>
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	059a      	lsls	r2, r3, #22
 800b772:	d402      	bmi.n	800b77a <_vfiprintf_r+0x2a>
 800b774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b776:	f7ff fe5a 	bl	800b42e <__retarget_lock_acquire_recursive>
 800b77a:	89ab      	ldrh	r3, [r5, #12]
 800b77c:	071b      	lsls	r3, r3, #28
 800b77e:	d501      	bpl.n	800b784 <_vfiprintf_r+0x34>
 800b780:	692b      	ldr	r3, [r5, #16]
 800b782:	b99b      	cbnz	r3, 800b7ac <_vfiprintf_r+0x5c>
 800b784:	4629      	mov	r1, r5
 800b786:	4630      	mov	r0, r6
 800b788:	f000 fc92 	bl	800c0b0 <__swsetup_r>
 800b78c:	b170      	cbz	r0, 800b7ac <_vfiprintf_r+0x5c>
 800b78e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b790:	07dc      	lsls	r4, r3, #31
 800b792:	d504      	bpl.n	800b79e <_vfiprintf_r+0x4e>
 800b794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b798:	b01d      	add	sp, #116	@ 0x74
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79e:	89ab      	ldrh	r3, [r5, #12]
 800b7a0:	0598      	lsls	r0, r3, #22
 800b7a2:	d4f7      	bmi.n	800b794 <_vfiprintf_r+0x44>
 800b7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a6:	f7ff fe43 	bl	800b430 <__retarget_lock_release_recursive>
 800b7aa:	e7f3      	b.n	800b794 <_vfiprintf_r+0x44>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7b0:	2320      	movs	r3, #32
 800b7b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ba:	2330      	movs	r3, #48	@ 0x30
 800b7bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b96c <_vfiprintf_r+0x21c>
 800b7c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7c4:	f04f 0901 	mov.w	r9, #1
 800b7c8:	4623      	mov	r3, r4
 800b7ca:	469a      	mov	sl, r3
 800b7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7d0:	b10a      	cbz	r2, 800b7d6 <_vfiprintf_r+0x86>
 800b7d2:	2a25      	cmp	r2, #37	@ 0x25
 800b7d4:	d1f9      	bne.n	800b7ca <_vfiprintf_r+0x7a>
 800b7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7da:	d00b      	beq.n	800b7f4 <_vfiprintf_r+0xa4>
 800b7dc:	465b      	mov	r3, fp
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7ff ffa1 	bl	800b72a <__sfputs_r>
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	f000 80a7 	beq.w	800b93c <_vfiprintf_r+0x1ec>
 800b7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7f0:	445a      	add	r2, fp
 800b7f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 809f 	beq.w	800b93c <_vfiprintf_r+0x1ec>
 800b7fe:	2300      	movs	r3, #0
 800b800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b808:	f10a 0a01 	add.w	sl, sl, #1
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b814:	931a      	str	r3, [sp, #104]	@ 0x68
 800b816:	4654      	mov	r4, sl
 800b818:	2205      	movs	r2, #5
 800b81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81e:	4853      	ldr	r0, [pc, #332]	@ (800b96c <_vfiprintf_r+0x21c>)
 800b820:	f7f4 fcfe 	bl	8000220 <memchr>
 800b824:	9a04      	ldr	r2, [sp, #16]
 800b826:	b9d8      	cbnz	r0, 800b860 <_vfiprintf_r+0x110>
 800b828:	06d1      	lsls	r1, r2, #27
 800b82a:	bf44      	itt	mi
 800b82c:	2320      	movmi	r3, #32
 800b82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b832:	0713      	lsls	r3, r2, #28
 800b834:	bf44      	itt	mi
 800b836:	232b      	movmi	r3, #43	@ 0x2b
 800b838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b83c:	f89a 3000 	ldrb.w	r3, [sl]
 800b840:	2b2a      	cmp	r3, #42	@ 0x2a
 800b842:	d015      	beq.n	800b870 <_vfiprintf_r+0x120>
 800b844:	9a07      	ldr	r2, [sp, #28]
 800b846:	4654      	mov	r4, sl
 800b848:	2000      	movs	r0, #0
 800b84a:	f04f 0c0a 	mov.w	ip, #10
 800b84e:	4621      	mov	r1, r4
 800b850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b854:	3b30      	subs	r3, #48	@ 0x30
 800b856:	2b09      	cmp	r3, #9
 800b858:	d94b      	bls.n	800b8f2 <_vfiprintf_r+0x1a2>
 800b85a:	b1b0      	cbz	r0, 800b88a <_vfiprintf_r+0x13a>
 800b85c:	9207      	str	r2, [sp, #28]
 800b85e:	e014      	b.n	800b88a <_vfiprintf_r+0x13a>
 800b860:	eba0 0308 	sub.w	r3, r0, r8
 800b864:	fa09 f303 	lsl.w	r3, r9, r3
 800b868:	4313      	orrs	r3, r2
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	46a2      	mov	sl, r4
 800b86e:	e7d2      	b.n	800b816 <_vfiprintf_r+0xc6>
 800b870:	9b03      	ldr	r3, [sp, #12]
 800b872:	1d19      	adds	r1, r3, #4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	9103      	str	r1, [sp, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	bfbb      	ittet	lt
 800b87c:	425b      	neglt	r3, r3
 800b87e:	f042 0202 	orrlt.w	r2, r2, #2
 800b882:	9307      	strge	r3, [sp, #28]
 800b884:	9307      	strlt	r3, [sp, #28]
 800b886:	bfb8      	it	lt
 800b888:	9204      	strlt	r2, [sp, #16]
 800b88a:	7823      	ldrb	r3, [r4, #0]
 800b88c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b88e:	d10a      	bne.n	800b8a6 <_vfiprintf_r+0x156>
 800b890:	7863      	ldrb	r3, [r4, #1]
 800b892:	2b2a      	cmp	r3, #42	@ 0x2a
 800b894:	d132      	bne.n	800b8fc <_vfiprintf_r+0x1ac>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	1d1a      	adds	r2, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	9203      	str	r2, [sp, #12]
 800b89e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8a2:	3402      	adds	r4, #2
 800b8a4:	9305      	str	r3, [sp, #20]
 800b8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b97c <_vfiprintf_r+0x22c>
 800b8aa:	7821      	ldrb	r1, [r4, #0]
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	f7f4 fcb6 	bl	8000220 <memchr>
 800b8b4:	b138      	cbz	r0, 800b8c6 <_vfiprintf_r+0x176>
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	eba0 000a 	sub.w	r0, r0, sl
 800b8bc:	2240      	movs	r2, #64	@ 0x40
 800b8be:	4082      	lsls	r2, r0
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	3401      	adds	r4, #1
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ca:	4829      	ldr	r0, [pc, #164]	@ (800b970 <_vfiprintf_r+0x220>)
 800b8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8d0:	2206      	movs	r2, #6
 800b8d2:	f7f4 fca5 	bl	8000220 <memchr>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d03f      	beq.n	800b95a <_vfiprintf_r+0x20a>
 800b8da:	4b26      	ldr	r3, [pc, #152]	@ (800b974 <_vfiprintf_r+0x224>)
 800b8dc:	bb1b      	cbnz	r3, 800b926 <_vfiprintf_r+0x1d6>
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	3307      	adds	r3, #7
 800b8e2:	f023 0307 	bic.w	r3, r3, #7
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	9303      	str	r3, [sp, #12]
 800b8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ec:	443b      	add	r3, r7
 800b8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8f0:	e76a      	b.n	800b7c8 <_vfiprintf_r+0x78>
 800b8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	e7a8      	b.n	800b84e <_vfiprintf_r+0xfe>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	3401      	adds	r4, #1
 800b900:	9305      	str	r3, [sp, #20]
 800b902:	4619      	mov	r1, r3
 800b904:	f04f 0c0a 	mov.w	ip, #10
 800b908:	4620      	mov	r0, r4
 800b90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b90e:	3a30      	subs	r2, #48	@ 0x30
 800b910:	2a09      	cmp	r2, #9
 800b912:	d903      	bls.n	800b91c <_vfiprintf_r+0x1cc>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0c6      	beq.n	800b8a6 <_vfiprintf_r+0x156>
 800b918:	9105      	str	r1, [sp, #20]
 800b91a:	e7c4      	b.n	800b8a6 <_vfiprintf_r+0x156>
 800b91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b920:	4604      	mov	r4, r0
 800b922:	2301      	movs	r3, #1
 800b924:	e7f0      	b.n	800b908 <_vfiprintf_r+0x1b8>
 800b926:	ab03      	add	r3, sp, #12
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	462a      	mov	r2, r5
 800b92c:	4b12      	ldr	r3, [pc, #72]	@ (800b978 <_vfiprintf_r+0x228>)
 800b92e:	a904      	add	r1, sp, #16
 800b930:	4630      	mov	r0, r6
 800b932:	f3af 8000 	nop.w
 800b936:	4607      	mov	r7, r0
 800b938:	1c78      	adds	r0, r7, #1
 800b93a:	d1d6      	bne.n	800b8ea <_vfiprintf_r+0x19a>
 800b93c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b93e:	07d9      	lsls	r1, r3, #31
 800b940:	d405      	bmi.n	800b94e <_vfiprintf_r+0x1fe>
 800b942:	89ab      	ldrh	r3, [r5, #12]
 800b944:	059a      	lsls	r2, r3, #22
 800b946:	d402      	bmi.n	800b94e <_vfiprintf_r+0x1fe>
 800b948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b94a:	f7ff fd71 	bl	800b430 <__retarget_lock_release_recursive>
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	065b      	lsls	r3, r3, #25
 800b952:	f53f af1f 	bmi.w	800b794 <_vfiprintf_r+0x44>
 800b956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b958:	e71e      	b.n	800b798 <_vfiprintf_r+0x48>
 800b95a:	ab03      	add	r3, sp, #12
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	462a      	mov	r2, r5
 800b960:	4b05      	ldr	r3, [pc, #20]	@ (800b978 <_vfiprintf_r+0x228>)
 800b962:	a904      	add	r1, sp, #16
 800b964:	4630      	mov	r0, r6
 800b966:	f000 f91b 	bl	800bba0 <_printf_i>
 800b96a:	e7e4      	b.n	800b936 <_vfiprintf_r+0x1e6>
 800b96c:	0800d708 	.word	0x0800d708
 800b970:	0800d712 	.word	0x0800d712
 800b974:	00000000 	.word	0x00000000
 800b978:	0800b72b 	.word	0x0800b72b
 800b97c:	0800d70e 	.word	0x0800d70e

0800b980 <sbrk_aligned>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4e0f      	ldr	r6, [pc, #60]	@ (800b9c0 <sbrk_aligned+0x40>)
 800b984:	460c      	mov	r4, r1
 800b986:	6831      	ldr	r1, [r6, #0]
 800b988:	4605      	mov	r5, r0
 800b98a:	b911      	cbnz	r1, 800b992 <sbrk_aligned+0x12>
 800b98c:	f000 fcb8 	bl	800c300 <_sbrk_r>
 800b990:	6030      	str	r0, [r6, #0]
 800b992:	4621      	mov	r1, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f000 fcb3 	bl	800c300 <_sbrk_r>
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	d103      	bne.n	800b9a6 <sbrk_aligned+0x26>
 800b99e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	bd70      	pop	{r4, r5, r6, pc}
 800b9a6:	1cc4      	adds	r4, r0, #3
 800b9a8:	f024 0403 	bic.w	r4, r4, #3
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d0f8      	beq.n	800b9a2 <sbrk_aligned+0x22>
 800b9b0:	1a21      	subs	r1, r4, r0
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f000 fca4 	bl	800c300 <_sbrk_r>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d1f2      	bne.n	800b9a2 <sbrk_aligned+0x22>
 800b9bc:	e7ef      	b.n	800b99e <sbrk_aligned+0x1e>
 800b9be:	bf00      	nop
 800b9c0:	200051e4 	.word	0x200051e4

0800b9c4 <_malloc_r>:
 800b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	1ccd      	adds	r5, r1, #3
 800b9ca:	f025 0503 	bic.w	r5, r5, #3
 800b9ce:	3508      	adds	r5, #8
 800b9d0:	2d0c      	cmp	r5, #12
 800b9d2:	bf38      	it	cc
 800b9d4:	250c      	movcc	r5, #12
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	4606      	mov	r6, r0
 800b9da:	db01      	blt.n	800b9e0 <_malloc_r+0x1c>
 800b9dc:	42a9      	cmp	r1, r5
 800b9de:	d904      	bls.n	800b9ea <_malloc_r+0x26>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	6033      	str	r3, [r6, #0]
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bac0 <_malloc_r+0xfc>
 800b9ee:	f000 faa3 	bl	800bf38 <__malloc_lock>
 800b9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f6:	461c      	mov	r4, r3
 800b9f8:	bb44      	cbnz	r4, 800ba4c <_malloc_r+0x88>
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff ffbf 	bl	800b980 <sbrk_aligned>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	4604      	mov	r4, r0
 800ba06:	d158      	bne.n	800baba <_malloc_r+0xf6>
 800ba08:	f8d8 4000 	ldr.w	r4, [r8]
 800ba0c:	4627      	mov	r7, r4
 800ba0e:	2f00      	cmp	r7, #0
 800ba10:	d143      	bne.n	800ba9a <_malloc_r+0xd6>
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	d04b      	beq.n	800baae <_malloc_r+0xea>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	4639      	mov	r1, r7
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	eb04 0903 	add.w	r9, r4, r3
 800ba20:	f000 fc6e 	bl	800c300 <_sbrk_r>
 800ba24:	4581      	cmp	r9, r0
 800ba26:	d142      	bne.n	800baae <_malloc_r+0xea>
 800ba28:	6821      	ldr	r1, [r4, #0]
 800ba2a:	1a6d      	subs	r5, r5, r1
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ffa6 	bl	800b980 <sbrk_aligned>
 800ba34:	3001      	adds	r0, #1
 800ba36:	d03a      	beq.n	800baae <_malloc_r+0xea>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	442b      	add	r3, r5
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	bb62      	cbnz	r2, 800baa0 <_malloc_r+0xdc>
 800ba46:	f8c8 7000 	str.w	r7, [r8]
 800ba4a:	e00f      	b.n	800ba6c <_malloc_r+0xa8>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	1b52      	subs	r2, r2, r5
 800ba50:	d420      	bmi.n	800ba94 <_malloc_r+0xd0>
 800ba52:	2a0b      	cmp	r2, #11
 800ba54:	d917      	bls.n	800ba86 <_malloc_r+0xc2>
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	6025      	str	r5, [r4, #0]
 800ba5c:	bf18      	it	ne
 800ba5e:	6059      	strne	r1, [r3, #4]
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	bf08      	it	eq
 800ba64:	f8c8 1000 	streq.w	r1, [r8]
 800ba68:	5162      	str	r2, [r4, r5]
 800ba6a:	604b      	str	r3, [r1, #4]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 fa69 	bl	800bf44 <__malloc_unlock>
 800ba72:	f104 000b 	add.w	r0, r4, #11
 800ba76:	1d23      	adds	r3, r4, #4
 800ba78:	f020 0007 	bic.w	r0, r0, #7
 800ba7c:	1ac2      	subs	r2, r0, r3
 800ba7e:	bf1c      	itt	ne
 800ba80:	1a1b      	subne	r3, r3, r0
 800ba82:	50a3      	strne	r3, [r4, r2]
 800ba84:	e7af      	b.n	800b9e6 <_malloc_r+0x22>
 800ba86:	6862      	ldr	r2, [r4, #4]
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	bf0c      	ite	eq
 800ba8c:	f8c8 2000 	streq.w	r2, [r8]
 800ba90:	605a      	strne	r2, [r3, #4]
 800ba92:	e7eb      	b.n	800ba6c <_malloc_r+0xa8>
 800ba94:	4623      	mov	r3, r4
 800ba96:	6864      	ldr	r4, [r4, #4]
 800ba98:	e7ae      	b.n	800b9f8 <_malloc_r+0x34>
 800ba9a:	463c      	mov	r4, r7
 800ba9c:	687f      	ldr	r7, [r7, #4]
 800ba9e:	e7b6      	b.n	800ba0e <_malloc_r+0x4a>
 800baa0:	461a      	mov	r2, r3
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d1fb      	bne.n	800baa0 <_malloc_r+0xdc>
 800baa8:	2300      	movs	r3, #0
 800baaa:	6053      	str	r3, [r2, #4]
 800baac:	e7de      	b.n	800ba6c <_malloc_r+0xa8>
 800baae:	230c      	movs	r3, #12
 800bab0:	6033      	str	r3, [r6, #0]
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 fa46 	bl	800bf44 <__malloc_unlock>
 800bab8:	e794      	b.n	800b9e4 <_malloc_r+0x20>
 800baba:	6005      	str	r5, [r0, #0]
 800babc:	e7d6      	b.n	800ba6c <_malloc_r+0xa8>
 800babe:	bf00      	nop
 800bac0:	200051e8 	.word	0x200051e8

0800bac4 <_printf_common>:
 800bac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac8:	4616      	mov	r6, r2
 800baca:	4698      	mov	r8, r3
 800bacc:	688a      	ldr	r2, [r1, #8]
 800bace:	690b      	ldr	r3, [r1, #16]
 800bad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bad4:	4293      	cmp	r3, r2
 800bad6:	bfb8      	it	lt
 800bad8:	4613      	movlt	r3, r2
 800bada:	6033      	str	r3, [r6, #0]
 800badc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bae0:	4607      	mov	r7, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	b10a      	cbz	r2, 800baea <_printf_common+0x26>
 800bae6:	3301      	adds	r3, #1
 800bae8:	6033      	str	r3, [r6, #0]
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	0699      	lsls	r1, r3, #26
 800baee:	bf42      	ittt	mi
 800baf0:	6833      	ldrmi	r3, [r6, #0]
 800baf2:	3302      	addmi	r3, #2
 800baf4:	6033      	strmi	r3, [r6, #0]
 800baf6:	6825      	ldr	r5, [r4, #0]
 800baf8:	f015 0506 	ands.w	r5, r5, #6
 800bafc:	d106      	bne.n	800bb0c <_printf_common+0x48>
 800bafe:	f104 0a19 	add.w	sl, r4, #25
 800bb02:	68e3      	ldr	r3, [r4, #12]
 800bb04:	6832      	ldr	r2, [r6, #0]
 800bb06:	1a9b      	subs	r3, r3, r2
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	dc26      	bgt.n	800bb5a <_printf_common+0x96>
 800bb0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb10:	6822      	ldr	r2, [r4, #0]
 800bb12:	3b00      	subs	r3, #0
 800bb14:	bf18      	it	ne
 800bb16:	2301      	movne	r3, #1
 800bb18:	0692      	lsls	r2, r2, #26
 800bb1a:	d42b      	bmi.n	800bb74 <_printf_common+0xb0>
 800bb1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb20:	4641      	mov	r1, r8
 800bb22:	4638      	mov	r0, r7
 800bb24:	47c8      	blx	r9
 800bb26:	3001      	adds	r0, #1
 800bb28:	d01e      	beq.n	800bb68 <_printf_common+0xa4>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	6922      	ldr	r2, [r4, #16]
 800bb2e:	f003 0306 	and.w	r3, r3, #6
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	bf02      	ittt	eq
 800bb36:	68e5      	ldreq	r5, [r4, #12]
 800bb38:	6833      	ldreq	r3, [r6, #0]
 800bb3a:	1aed      	subeq	r5, r5, r3
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	bf0c      	ite	eq
 800bb40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb44:	2500      	movne	r5, #0
 800bb46:	4293      	cmp	r3, r2
 800bb48:	bfc4      	itt	gt
 800bb4a:	1a9b      	subgt	r3, r3, r2
 800bb4c:	18ed      	addgt	r5, r5, r3
 800bb4e:	2600      	movs	r6, #0
 800bb50:	341a      	adds	r4, #26
 800bb52:	42b5      	cmp	r5, r6
 800bb54:	d11a      	bne.n	800bb8c <_printf_common+0xc8>
 800bb56:	2000      	movs	r0, #0
 800bb58:	e008      	b.n	800bb6c <_printf_common+0xa8>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	4641      	mov	r1, r8
 800bb60:	4638      	mov	r0, r7
 800bb62:	47c8      	blx	r9
 800bb64:	3001      	adds	r0, #1
 800bb66:	d103      	bne.n	800bb70 <_printf_common+0xac>
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb70:	3501      	adds	r5, #1
 800bb72:	e7c6      	b.n	800bb02 <_printf_common+0x3e>
 800bb74:	18e1      	adds	r1, r4, r3
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	2030      	movs	r0, #48	@ 0x30
 800bb7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb7e:	4422      	add	r2, r4
 800bb80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb88:	3302      	adds	r3, #2
 800bb8a:	e7c7      	b.n	800bb1c <_printf_common+0x58>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	4622      	mov	r2, r4
 800bb90:	4641      	mov	r1, r8
 800bb92:	4638      	mov	r0, r7
 800bb94:	47c8      	blx	r9
 800bb96:	3001      	adds	r0, #1
 800bb98:	d0e6      	beq.n	800bb68 <_printf_common+0xa4>
 800bb9a:	3601      	adds	r6, #1
 800bb9c:	e7d9      	b.n	800bb52 <_printf_common+0x8e>
	...

0800bba0 <_printf_i>:
 800bba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bba4:	7e0f      	ldrb	r7, [r1, #24]
 800bba6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bba8:	2f78      	cmp	r7, #120	@ 0x78
 800bbaa:	4691      	mov	r9, r2
 800bbac:	4680      	mov	r8, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	469a      	mov	sl, r3
 800bbb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbb6:	d807      	bhi.n	800bbc8 <_printf_i+0x28>
 800bbb8:	2f62      	cmp	r7, #98	@ 0x62
 800bbba:	d80a      	bhi.n	800bbd2 <_printf_i+0x32>
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	f000 80d2 	beq.w	800bd66 <_printf_i+0x1c6>
 800bbc2:	2f58      	cmp	r7, #88	@ 0x58
 800bbc4:	f000 80b9 	beq.w	800bd3a <_printf_i+0x19a>
 800bbc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbd0:	e03a      	b.n	800bc48 <_printf_i+0xa8>
 800bbd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbd6:	2b15      	cmp	r3, #21
 800bbd8:	d8f6      	bhi.n	800bbc8 <_printf_i+0x28>
 800bbda:	a101      	add	r1, pc, #4	@ (adr r1, 800bbe0 <_printf_i+0x40>)
 800bbdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbe0:	0800bc39 	.word	0x0800bc39
 800bbe4:	0800bc4d 	.word	0x0800bc4d
 800bbe8:	0800bbc9 	.word	0x0800bbc9
 800bbec:	0800bbc9 	.word	0x0800bbc9
 800bbf0:	0800bbc9 	.word	0x0800bbc9
 800bbf4:	0800bbc9 	.word	0x0800bbc9
 800bbf8:	0800bc4d 	.word	0x0800bc4d
 800bbfc:	0800bbc9 	.word	0x0800bbc9
 800bc00:	0800bbc9 	.word	0x0800bbc9
 800bc04:	0800bbc9 	.word	0x0800bbc9
 800bc08:	0800bbc9 	.word	0x0800bbc9
 800bc0c:	0800bd4d 	.word	0x0800bd4d
 800bc10:	0800bc77 	.word	0x0800bc77
 800bc14:	0800bd07 	.word	0x0800bd07
 800bc18:	0800bbc9 	.word	0x0800bbc9
 800bc1c:	0800bbc9 	.word	0x0800bbc9
 800bc20:	0800bd6f 	.word	0x0800bd6f
 800bc24:	0800bbc9 	.word	0x0800bbc9
 800bc28:	0800bc77 	.word	0x0800bc77
 800bc2c:	0800bbc9 	.word	0x0800bbc9
 800bc30:	0800bbc9 	.word	0x0800bbc9
 800bc34:	0800bd0f 	.word	0x0800bd0f
 800bc38:	6833      	ldr	r3, [r6, #0]
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6032      	str	r2, [r6, #0]
 800bc40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e09d      	b.n	800bd88 <_printf_i+0x1e8>
 800bc4c:	6833      	ldr	r3, [r6, #0]
 800bc4e:	6820      	ldr	r0, [r4, #0]
 800bc50:	1d19      	adds	r1, r3, #4
 800bc52:	6031      	str	r1, [r6, #0]
 800bc54:	0606      	lsls	r6, r0, #24
 800bc56:	d501      	bpl.n	800bc5c <_printf_i+0xbc>
 800bc58:	681d      	ldr	r5, [r3, #0]
 800bc5a:	e003      	b.n	800bc64 <_printf_i+0xc4>
 800bc5c:	0645      	lsls	r5, r0, #25
 800bc5e:	d5fb      	bpl.n	800bc58 <_printf_i+0xb8>
 800bc60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	da03      	bge.n	800bc70 <_printf_i+0xd0>
 800bc68:	232d      	movs	r3, #45	@ 0x2d
 800bc6a:	426d      	negs	r5, r5
 800bc6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc70:	4859      	ldr	r0, [pc, #356]	@ (800bdd8 <_printf_i+0x238>)
 800bc72:	230a      	movs	r3, #10
 800bc74:	e011      	b.n	800bc9a <_printf_i+0xfa>
 800bc76:	6821      	ldr	r1, [r4, #0]
 800bc78:	6833      	ldr	r3, [r6, #0]
 800bc7a:	0608      	lsls	r0, r1, #24
 800bc7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc80:	d402      	bmi.n	800bc88 <_printf_i+0xe8>
 800bc82:	0649      	lsls	r1, r1, #25
 800bc84:	bf48      	it	mi
 800bc86:	b2ad      	uxthmi	r5, r5
 800bc88:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc8a:	4853      	ldr	r0, [pc, #332]	@ (800bdd8 <_printf_i+0x238>)
 800bc8c:	6033      	str	r3, [r6, #0]
 800bc8e:	bf14      	ite	ne
 800bc90:	230a      	movne	r3, #10
 800bc92:	2308      	moveq	r3, #8
 800bc94:	2100      	movs	r1, #0
 800bc96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc9a:	6866      	ldr	r6, [r4, #4]
 800bc9c:	60a6      	str	r6, [r4, #8]
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	bfa2      	ittt	ge
 800bca2:	6821      	ldrge	r1, [r4, #0]
 800bca4:	f021 0104 	bicge.w	r1, r1, #4
 800bca8:	6021      	strge	r1, [r4, #0]
 800bcaa:	b90d      	cbnz	r5, 800bcb0 <_printf_i+0x110>
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	d04b      	beq.n	800bd48 <_printf_i+0x1a8>
 800bcb0:	4616      	mov	r6, r2
 800bcb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcb6:	fb03 5711 	mls	r7, r3, r1, r5
 800bcba:	5dc7      	ldrb	r7, [r0, r7]
 800bcbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcc0:	462f      	mov	r7, r5
 800bcc2:	42bb      	cmp	r3, r7
 800bcc4:	460d      	mov	r5, r1
 800bcc6:	d9f4      	bls.n	800bcb2 <_printf_i+0x112>
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d10b      	bne.n	800bce4 <_printf_i+0x144>
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	07df      	lsls	r7, r3, #31
 800bcd0:	d508      	bpl.n	800bce4 <_printf_i+0x144>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	6861      	ldr	r1, [r4, #4]
 800bcd6:	4299      	cmp	r1, r3
 800bcd8:	bfde      	ittt	le
 800bcda:	2330      	movle	r3, #48	@ 0x30
 800bcdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bce0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bce4:	1b92      	subs	r2, r2, r6
 800bce6:	6122      	str	r2, [r4, #16]
 800bce8:	f8cd a000 	str.w	sl, [sp]
 800bcec:	464b      	mov	r3, r9
 800bcee:	aa03      	add	r2, sp, #12
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	f7ff fee6 	bl	800bac4 <_printf_common>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d14a      	bne.n	800bd92 <_printf_i+0x1f2>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd00:	b004      	add	sp, #16
 800bd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	f043 0320 	orr.w	r3, r3, #32
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	4833      	ldr	r0, [pc, #204]	@ (800bddc <_printf_i+0x23c>)
 800bd10:	2778      	movs	r7, #120	@ 0x78
 800bd12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	6831      	ldr	r1, [r6, #0]
 800bd1a:	061f      	lsls	r7, r3, #24
 800bd1c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd20:	d402      	bmi.n	800bd28 <_printf_i+0x188>
 800bd22:	065f      	lsls	r7, r3, #25
 800bd24:	bf48      	it	mi
 800bd26:	b2ad      	uxthmi	r5, r5
 800bd28:	6031      	str	r1, [r6, #0]
 800bd2a:	07d9      	lsls	r1, r3, #31
 800bd2c:	bf44      	itt	mi
 800bd2e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd32:	6023      	strmi	r3, [r4, #0]
 800bd34:	b11d      	cbz	r5, 800bd3e <_printf_i+0x19e>
 800bd36:	2310      	movs	r3, #16
 800bd38:	e7ac      	b.n	800bc94 <_printf_i+0xf4>
 800bd3a:	4827      	ldr	r0, [pc, #156]	@ (800bdd8 <_printf_i+0x238>)
 800bd3c:	e7e9      	b.n	800bd12 <_printf_i+0x172>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	f023 0320 	bic.w	r3, r3, #32
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	e7f6      	b.n	800bd36 <_printf_i+0x196>
 800bd48:	4616      	mov	r6, r2
 800bd4a:	e7bd      	b.n	800bcc8 <_printf_i+0x128>
 800bd4c:	6833      	ldr	r3, [r6, #0]
 800bd4e:	6825      	ldr	r5, [r4, #0]
 800bd50:	6961      	ldr	r1, [r4, #20]
 800bd52:	1d18      	adds	r0, r3, #4
 800bd54:	6030      	str	r0, [r6, #0]
 800bd56:	062e      	lsls	r6, r5, #24
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	d501      	bpl.n	800bd60 <_printf_i+0x1c0>
 800bd5c:	6019      	str	r1, [r3, #0]
 800bd5e:	e002      	b.n	800bd66 <_printf_i+0x1c6>
 800bd60:	0668      	lsls	r0, r5, #25
 800bd62:	d5fb      	bpl.n	800bd5c <_printf_i+0x1bc>
 800bd64:	8019      	strh	r1, [r3, #0]
 800bd66:	2300      	movs	r3, #0
 800bd68:	6123      	str	r3, [r4, #16]
 800bd6a:	4616      	mov	r6, r2
 800bd6c:	e7bc      	b.n	800bce8 <_printf_i+0x148>
 800bd6e:	6833      	ldr	r3, [r6, #0]
 800bd70:	1d1a      	adds	r2, r3, #4
 800bd72:	6032      	str	r2, [r6, #0]
 800bd74:	681e      	ldr	r6, [r3, #0]
 800bd76:	6862      	ldr	r2, [r4, #4]
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7f4 fa50 	bl	8000220 <memchr>
 800bd80:	b108      	cbz	r0, 800bd86 <_printf_i+0x1e6>
 800bd82:	1b80      	subs	r0, r0, r6
 800bd84:	6060      	str	r0, [r4, #4]
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd90:	e7aa      	b.n	800bce8 <_printf_i+0x148>
 800bd92:	6923      	ldr	r3, [r4, #16]
 800bd94:	4632      	mov	r2, r6
 800bd96:	4649      	mov	r1, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	47d0      	blx	sl
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d0ad      	beq.n	800bcfc <_printf_i+0x15c>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	079b      	lsls	r3, r3, #30
 800bda4:	d413      	bmi.n	800bdce <_printf_i+0x22e>
 800bda6:	68e0      	ldr	r0, [r4, #12]
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	4298      	cmp	r0, r3
 800bdac:	bfb8      	it	lt
 800bdae:	4618      	movlt	r0, r3
 800bdb0:	e7a6      	b.n	800bd00 <_printf_i+0x160>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4640      	mov	r0, r8
 800bdba:	47d0      	blx	sl
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d09d      	beq.n	800bcfc <_printf_i+0x15c>
 800bdc0:	3501      	adds	r5, #1
 800bdc2:	68e3      	ldr	r3, [r4, #12]
 800bdc4:	9903      	ldr	r1, [sp, #12]
 800bdc6:	1a5b      	subs	r3, r3, r1
 800bdc8:	42ab      	cmp	r3, r5
 800bdca:	dcf2      	bgt.n	800bdb2 <_printf_i+0x212>
 800bdcc:	e7eb      	b.n	800bda6 <_printf_i+0x206>
 800bdce:	2500      	movs	r5, #0
 800bdd0:	f104 0619 	add.w	r6, r4, #25
 800bdd4:	e7f5      	b.n	800bdc2 <_printf_i+0x222>
 800bdd6:	bf00      	nop
 800bdd8:	0800d719 	.word	0x0800d719
 800bddc:	0800d72a 	.word	0x0800d72a

0800bde0 <__sflush_r>:
 800bde0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde8:	0716      	lsls	r6, r2, #28
 800bdea:	4605      	mov	r5, r0
 800bdec:	460c      	mov	r4, r1
 800bdee:	d454      	bmi.n	800be9a <__sflush_r+0xba>
 800bdf0:	684b      	ldr	r3, [r1, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	dc02      	bgt.n	800bdfc <__sflush_r+0x1c>
 800bdf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	dd48      	ble.n	800be8e <__sflush_r+0xae>
 800bdfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdfe:	2e00      	cmp	r6, #0
 800be00:	d045      	beq.n	800be8e <__sflush_r+0xae>
 800be02:	2300      	movs	r3, #0
 800be04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be08:	682f      	ldr	r7, [r5, #0]
 800be0a:	6a21      	ldr	r1, [r4, #32]
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	d030      	beq.n	800be72 <__sflush_r+0x92>
 800be10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	0759      	lsls	r1, r3, #29
 800be16:	d505      	bpl.n	800be24 <__sflush_r+0x44>
 800be18:	6863      	ldr	r3, [r4, #4]
 800be1a:	1ad2      	subs	r2, r2, r3
 800be1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be1e:	b10b      	cbz	r3, 800be24 <__sflush_r+0x44>
 800be20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be22:	1ad2      	subs	r2, r2, r3
 800be24:	2300      	movs	r3, #0
 800be26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	4628      	mov	r0, r5
 800be2c:	47b0      	blx	r6
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	d106      	bne.n	800be42 <__sflush_r+0x62>
 800be34:	6829      	ldr	r1, [r5, #0]
 800be36:	291d      	cmp	r1, #29
 800be38:	d82b      	bhi.n	800be92 <__sflush_r+0xb2>
 800be3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bee4 <__sflush_r+0x104>)
 800be3c:	410a      	asrs	r2, r1
 800be3e:	07d6      	lsls	r6, r2, #31
 800be40:	d427      	bmi.n	800be92 <__sflush_r+0xb2>
 800be42:	2200      	movs	r2, #0
 800be44:	6062      	str	r2, [r4, #4]
 800be46:	04d9      	lsls	r1, r3, #19
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	6022      	str	r2, [r4, #0]
 800be4c:	d504      	bpl.n	800be58 <__sflush_r+0x78>
 800be4e:	1c42      	adds	r2, r0, #1
 800be50:	d101      	bne.n	800be56 <__sflush_r+0x76>
 800be52:	682b      	ldr	r3, [r5, #0]
 800be54:	b903      	cbnz	r3, 800be58 <__sflush_r+0x78>
 800be56:	6560      	str	r0, [r4, #84]	@ 0x54
 800be58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be5a:	602f      	str	r7, [r5, #0]
 800be5c:	b1b9      	cbz	r1, 800be8e <__sflush_r+0xae>
 800be5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be62:	4299      	cmp	r1, r3
 800be64:	d002      	beq.n	800be6c <__sflush_r+0x8c>
 800be66:	4628      	mov	r0, r5
 800be68:	f000 fa6c 	bl	800c344 <_free_r>
 800be6c:	2300      	movs	r3, #0
 800be6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be70:	e00d      	b.n	800be8e <__sflush_r+0xae>
 800be72:	2301      	movs	r3, #1
 800be74:	4628      	mov	r0, r5
 800be76:	47b0      	blx	r6
 800be78:	4602      	mov	r2, r0
 800be7a:	1c50      	adds	r0, r2, #1
 800be7c:	d1c9      	bne.n	800be12 <__sflush_r+0x32>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d0c6      	beq.n	800be12 <__sflush_r+0x32>
 800be84:	2b1d      	cmp	r3, #29
 800be86:	d001      	beq.n	800be8c <__sflush_r+0xac>
 800be88:	2b16      	cmp	r3, #22
 800be8a:	d11e      	bne.n	800beca <__sflush_r+0xea>
 800be8c:	602f      	str	r7, [r5, #0]
 800be8e:	2000      	movs	r0, #0
 800be90:	e022      	b.n	800bed8 <__sflush_r+0xf8>
 800be92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be96:	b21b      	sxth	r3, r3
 800be98:	e01b      	b.n	800bed2 <__sflush_r+0xf2>
 800be9a:	690f      	ldr	r7, [r1, #16]
 800be9c:	2f00      	cmp	r7, #0
 800be9e:	d0f6      	beq.n	800be8e <__sflush_r+0xae>
 800bea0:	0793      	lsls	r3, r2, #30
 800bea2:	680e      	ldr	r6, [r1, #0]
 800bea4:	bf08      	it	eq
 800bea6:	694b      	ldreq	r3, [r1, #20]
 800bea8:	600f      	str	r7, [r1, #0]
 800beaa:	bf18      	it	ne
 800beac:	2300      	movne	r3, #0
 800beae:	eba6 0807 	sub.w	r8, r6, r7
 800beb2:	608b      	str	r3, [r1, #8]
 800beb4:	f1b8 0f00 	cmp.w	r8, #0
 800beb8:	dde9      	ble.n	800be8e <__sflush_r+0xae>
 800beba:	6a21      	ldr	r1, [r4, #32]
 800bebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bebe:	4643      	mov	r3, r8
 800bec0:	463a      	mov	r2, r7
 800bec2:	4628      	mov	r0, r5
 800bec4:	47b0      	blx	r6
 800bec6:	2800      	cmp	r0, #0
 800bec8:	dc08      	bgt.n	800bedc <__sflush_r+0xfc>
 800beca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bed2:	81a3      	strh	r3, [r4, #12]
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bedc:	4407      	add	r7, r0
 800bede:	eba8 0800 	sub.w	r8, r8, r0
 800bee2:	e7e7      	b.n	800beb4 <__sflush_r+0xd4>
 800bee4:	dfbffffe 	.word	0xdfbffffe

0800bee8 <_fflush_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	690b      	ldr	r3, [r1, #16]
 800beec:	4605      	mov	r5, r0
 800beee:	460c      	mov	r4, r1
 800bef0:	b913      	cbnz	r3, 800bef8 <_fflush_r+0x10>
 800bef2:	2500      	movs	r5, #0
 800bef4:	4628      	mov	r0, r5
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	b118      	cbz	r0, 800bf02 <_fflush_r+0x1a>
 800befa:	6a03      	ldr	r3, [r0, #32]
 800befc:	b90b      	cbnz	r3, 800bf02 <_fflush_r+0x1a>
 800befe:	f7ff f9a7 	bl	800b250 <__sinit>
 800bf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0f3      	beq.n	800bef2 <_fflush_r+0xa>
 800bf0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf0c:	07d0      	lsls	r0, r2, #31
 800bf0e:	d404      	bmi.n	800bf1a <_fflush_r+0x32>
 800bf10:	0599      	lsls	r1, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_fflush_r+0x32>
 800bf14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf16:	f7ff fa8a 	bl	800b42e <__retarget_lock_acquire_recursive>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f7ff ff5f 	bl	800bde0 <__sflush_r>
 800bf22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf24:	07da      	lsls	r2, r3, #31
 800bf26:	4605      	mov	r5, r0
 800bf28:	d4e4      	bmi.n	800bef4 <_fflush_r+0xc>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	059b      	lsls	r3, r3, #22
 800bf2e:	d4e1      	bmi.n	800bef4 <_fflush_r+0xc>
 800bf30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf32:	f7ff fa7d 	bl	800b430 <__retarget_lock_release_recursive>
 800bf36:	e7dd      	b.n	800bef4 <_fflush_r+0xc>

0800bf38 <__malloc_lock>:
 800bf38:	4801      	ldr	r0, [pc, #4]	@ (800bf40 <__malloc_lock+0x8>)
 800bf3a:	f7ff ba78 	b.w	800b42e <__retarget_lock_acquire_recursive>
 800bf3e:	bf00      	nop
 800bf40:	200051e0 	.word	0x200051e0

0800bf44 <__malloc_unlock>:
 800bf44:	4801      	ldr	r0, [pc, #4]	@ (800bf4c <__malloc_unlock+0x8>)
 800bf46:	f7ff ba73 	b.w	800b430 <__retarget_lock_release_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	200051e0 	.word	0x200051e0

0800bf50 <__sread>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	460c      	mov	r4, r1
 800bf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf58:	f000 f9c0 	bl	800c2dc <_read_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	bfab      	itete	ge
 800bf60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf62:	89a3      	ldrhlt	r3, [r4, #12]
 800bf64:	181b      	addge	r3, r3, r0
 800bf66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf6a:	bfac      	ite	ge
 800bf6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf6e:	81a3      	strhlt	r3, [r4, #12]
 800bf70:	bd10      	pop	{r4, pc}

0800bf72 <__swrite>:
 800bf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	461f      	mov	r7, r3
 800bf78:	898b      	ldrh	r3, [r1, #12]
 800bf7a:	05db      	lsls	r3, r3, #23
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	460c      	mov	r4, r1
 800bf80:	4616      	mov	r6, r2
 800bf82:	d505      	bpl.n	800bf90 <__swrite+0x1e>
 800bf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf88:	2302      	movs	r3, #2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f000 f994 	bl	800c2b8 <_lseek_r>
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf9a:	81a3      	strh	r3, [r4, #12]
 800bf9c:	4632      	mov	r2, r6
 800bf9e:	463b      	mov	r3, r7
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa6:	f000 b9bb 	b.w	800c320 <_write_r>

0800bfaa <__sseek>:
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	460c      	mov	r4, r1
 800bfae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb2:	f000 f981 	bl	800c2b8 <_lseek_r>
 800bfb6:	1c43      	adds	r3, r0, #1
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	bf15      	itete	ne
 800bfbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bfbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bfc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bfc6:	81a3      	strheq	r3, [r4, #12]
 800bfc8:	bf18      	it	ne
 800bfca:	81a3      	strhne	r3, [r4, #12]
 800bfcc:	bd10      	pop	{r4, pc}

0800bfce <__sclose>:
 800bfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd2:	f000 b93f 	b.w	800c254 <_close_r>

0800bfd6 <_realloc_r>:
 800bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	4680      	mov	r8, r0
 800bfdc:	4615      	mov	r5, r2
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b921      	cbnz	r1, 800bfec <_realloc_r+0x16>
 800bfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	f7ff bcec 	b.w	800b9c4 <_malloc_r>
 800bfec:	b92a      	cbnz	r2, 800bffa <_realloc_r+0x24>
 800bfee:	f000 f9a9 	bl	800c344 <_free_r>
 800bff2:	2400      	movs	r4, #0
 800bff4:	4620      	mov	r0, r4
 800bff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffa:	f000 f9ed 	bl	800c3d8 <_malloc_usable_size_r>
 800bffe:	4285      	cmp	r5, r0
 800c000:	4606      	mov	r6, r0
 800c002:	d802      	bhi.n	800c00a <_realloc_r+0x34>
 800c004:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c008:	d8f4      	bhi.n	800bff4 <_realloc_r+0x1e>
 800c00a:	4629      	mov	r1, r5
 800c00c:	4640      	mov	r0, r8
 800c00e:	f7ff fcd9 	bl	800b9c4 <_malloc_r>
 800c012:	4607      	mov	r7, r0
 800c014:	2800      	cmp	r0, #0
 800c016:	d0ec      	beq.n	800bff2 <_realloc_r+0x1c>
 800c018:	42b5      	cmp	r5, r6
 800c01a:	462a      	mov	r2, r5
 800c01c:	4621      	mov	r1, r4
 800c01e:	bf28      	it	cs
 800c020:	4632      	movcs	r2, r6
 800c022:	f7ff fa06 	bl	800b432 <memcpy>
 800c026:	4621      	mov	r1, r4
 800c028:	4640      	mov	r0, r8
 800c02a:	f000 f98b 	bl	800c344 <_free_r>
 800c02e:	463c      	mov	r4, r7
 800c030:	e7e0      	b.n	800bff4 <_realloc_r+0x1e>

0800c032 <__swbuf_r>:
 800c032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c034:	460e      	mov	r6, r1
 800c036:	4614      	mov	r4, r2
 800c038:	4605      	mov	r5, r0
 800c03a:	b118      	cbz	r0, 800c044 <__swbuf_r+0x12>
 800c03c:	6a03      	ldr	r3, [r0, #32]
 800c03e:	b90b      	cbnz	r3, 800c044 <__swbuf_r+0x12>
 800c040:	f7ff f906 	bl	800b250 <__sinit>
 800c044:	69a3      	ldr	r3, [r4, #24]
 800c046:	60a3      	str	r3, [r4, #8]
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	071a      	lsls	r2, r3, #28
 800c04c:	d501      	bpl.n	800c052 <__swbuf_r+0x20>
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	b943      	cbnz	r3, 800c064 <__swbuf_r+0x32>
 800c052:	4621      	mov	r1, r4
 800c054:	4628      	mov	r0, r5
 800c056:	f000 f82b 	bl	800c0b0 <__swsetup_r>
 800c05a:	b118      	cbz	r0, 800c064 <__swbuf_r+0x32>
 800c05c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c060:	4638      	mov	r0, r7
 800c062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	6922      	ldr	r2, [r4, #16]
 800c068:	1a98      	subs	r0, r3, r2
 800c06a:	6963      	ldr	r3, [r4, #20]
 800c06c:	b2f6      	uxtb	r6, r6
 800c06e:	4283      	cmp	r3, r0
 800c070:	4637      	mov	r7, r6
 800c072:	dc05      	bgt.n	800c080 <__swbuf_r+0x4e>
 800c074:	4621      	mov	r1, r4
 800c076:	4628      	mov	r0, r5
 800c078:	f7ff ff36 	bl	800bee8 <_fflush_r>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d1ed      	bne.n	800c05c <__swbuf_r+0x2a>
 800c080:	68a3      	ldr	r3, [r4, #8]
 800c082:	3b01      	subs	r3, #1
 800c084:	60a3      	str	r3, [r4, #8]
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	6022      	str	r2, [r4, #0]
 800c08c:	701e      	strb	r6, [r3, #0]
 800c08e:	6962      	ldr	r2, [r4, #20]
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	429a      	cmp	r2, r3
 800c094:	d004      	beq.n	800c0a0 <__swbuf_r+0x6e>
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	07db      	lsls	r3, r3, #31
 800c09a:	d5e1      	bpl.n	800c060 <__swbuf_r+0x2e>
 800c09c:	2e0a      	cmp	r6, #10
 800c09e:	d1df      	bne.n	800c060 <__swbuf_r+0x2e>
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f7ff ff20 	bl	800bee8 <_fflush_r>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0d9      	beq.n	800c060 <__swbuf_r+0x2e>
 800c0ac:	e7d6      	b.n	800c05c <__swbuf_r+0x2a>
	...

0800c0b0 <__swsetup_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4b29      	ldr	r3, [pc, #164]	@ (800c158 <__swsetup_r+0xa8>)
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	6818      	ldr	r0, [r3, #0]
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	b118      	cbz	r0, 800c0c4 <__swsetup_r+0x14>
 800c0bc:	6a03      	ldr	r3, [r0, #32]
 800c0be:	b90b      	cbnz	r3, 800c0c4 <__swsetup_r+0x14>
 800c0c0:	f7ff f8c6 	bl	800b250 <__sinit>
 800c0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c8:	0719      	lsls	r1, r3, #28
 800c0ca:	d422      	bmi.n	800c112 <__swsetup_r+0x62>
 800c0cc:	06da      	lsls	r2, r3, #27
 800c0ce:	d407      	bmi.n	800c0e0 <__swsetup_r+0x30>
 800c0d0:	2209      	movs	r2, #9
 800c0d2:	602a      	str	r2, [r5, #0]
 800c0d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0d8:	81a3      	strh	r3, [r4, #12]
 800c0da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0de:	e033      	b.n	800c148 <__swsetup_r+0x98>
 800c0e0:	0758      	lsls	r0, r3, #29
 800c0e2:	d512      	bpl.n	800c10a <__swsetup_r+0x5a>
 800c0e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0e6:	b141      	cbz	r1, 800c0fa <__swsetup_r+0x4a>
 800c0e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0ec:	4299      	cmp	r1, r3
 800c0ee:	d002      	beq.n	800c0f6 <__swsetup_r+0x46>
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 f927 	bl	800c344 <_free_r>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	2300      	movs	r3, #0
 800c104:	6063      	str	r3, [r4, #4]
 800c106:	6923      	ldr	r3, [r4, #16]
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	f043 0308 	orr.w	r3, r3, #8
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	b94b      	cbnz	r3, 800c12a <__swsetup_r+0x7a>
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c120:	d003      	beq.n	800c12a <__swsetup_r+0x7a>
 800c122:	4621      	mov	r1, r4
 800c124:	4628      	mov	r0, r5
 800c126:	f000 f83f 	bl	800c1a8 <__smakebuf_r>
 800c12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c12e:	f013 0201 	ands.w	r2, r3, #1
 800c132:	d00a      	beq.n	800c14a <__swsetup_r+0x9a>
 800c134:	2200      	movs	r2, #0
 800c136:	60a2      	str	r2, [r4, #8]
 800c138:	6962      	ldr	r2, [r4, #20]
 800c13a:	4252      	negs	r2, r2
 800c13c:	61a2      	str	r2, [r4, #24]
 800c13e:	6922      	ldr	r2, [r4, #16]
 800c140:	b942      	cbnz	r2, 800c154 <__swsetup_r+0xa4>
 800c142:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c146:	d1c5      	bne.n	800c0d4 <__swsetup_r+0x24>
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	0799      	lsls	r1, r3, #30
 800c14c:	bf58      	it	pl
 800c14e:	6962      	ldrpl	r2, [r4, #20]
 800c150:	60a2      	str	r2, [r4, #8]
 800c152:	e7f4      	b.n	800c13e <__swsetup_r+0x8e>
 800c154:	2000      	movs	r0, #0
 800c156:	e7f7      	b.n	800c148 <__swsetup_r+0x98>
 800c158:	20000040 	.word	0x20000040

0800c15c <__swhatbuf_r>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	460c      	mov	r4, r1
 800c160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c164:	2900      	cmp	r1, #0
 800c166:	b096      	sub	sp, #88	@ 0x58
 800c168:	4615      	mov	r5, r2
 800c16a:	461e      	mov	r6, r3
 800c16c:	da0d      	bge.n	800c18a <__swhatbuf_r+0x2e>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c174:	f04f 0100 	mov.w	r1, #0
 800c178:	bf14      	ite	ne
 800c17a:	2340      	movne	r3, #64	@ 0x40
 800c17c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c180:	2000      	movs	r0, #0
 800c182:	6031      	str	r1, [r6, #0]
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	b016      	add	sp, #88	@ 0x58
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	466a      	mov	r2, sp
 800c18c:	f000 f872 	bl	800c274 <_fstat_r>
 800c190:	2800      	cmp	r0, #0
 800c192:	dbec      	blt.n	800c16e <__swhatbuf_r+0x12>
 800c194:	9901      	ldr	r1, [sp, #4]
 800c196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c19a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c19e:	4259      	negs	r1, r3
 800c1a0:	4159      	adcs	r1, r3
 800c1a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1a6:	e7eb      	b.n	800c180 <__swhatbuf_r+0x24>

0800c1a8 <__smakebuf_r>:
 800c1a8:	898b      	ldrh	r3, [r1, #12]
 800c1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1ac:	079d      	lsls	r5, r3, #30
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	d507      	bpl.n	800c1c4 <__smakebuf_r+0x1c>
 800c1b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	6163      	str	r3, [r4, #20]
 800c1c0:	b003      	add	sp, #12
 800c1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c4:	ab01      	add	r3, sp, #4
 800c1c6:	466a      	mov	r2, sp
 800c1c8:	f7ff ffc8 	bl	800c15c <__swhatbuf_r>
 800c1cc:	9f00      	ldr	r7, [sp, #0]
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff fbf6 	bl	800b9c4 <_malloc_r>
 800c1d8:	b948      	cbnz	r0, 800c1ee <__smakebuf_r+0x46>
 800c1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1de:	059a      	lsls	r2, r3, #22
 800c1e0:	d4ee      	bmi.n	800c1c0 <__smakebuf_r+0x18>
 800c1e2:	f023 0303 	bic.w	r3, r3, #3
 800c1e6:	f043 0302 	orr.w	r3, r3, #2
 800c1ea:	81a3      	strh	r3, [r4, #12]
 800c1ec:	e7e2      	b.n	800c1b4 <__smakebuf_r+0xc>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	6020      	str	r0, [r4, #0]
 800c1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	9b01      	ldr	r3, [sp, #4]
 800c1fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1fe:	b15b      	cbz	r3, 800c218 <__smakebuf_r+0x70>
 800c200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c204:	4630      	mov	r0, r6
 800c206:	f000 f847 	bl	800c298 <_isatty_r>
 800c20a:	b128      	cbz	r0, 800c218 <__smakebuf_r+0x70>
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	f023 0303 	bic.w	r3, r3, #3
 800c212:	f043 0301 	orr.w	r3, r3, #1
 800c216:	81a3      	strh	r3, [r4, #12]
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	431d      	orrs	r5, r3
 800c21c:	81a5      	strh	r5, [r4, #12]
 800c21e:	e7cf      	b.n	800c1c0 <__smakebuf_r+0x18>

0800c220 <memmove>:
 800c220:	4288      	cmp	r0, r1
 800c222:	b510      	push	{r4, lr}
 800c224:	eb01 0402 	add.w	r4, r1, r2
 800c228:	d902      	bls.n	800c230 <memmove+0x10>
 800c22a:	4284      	cmp	r4, r0
 800c22c:	4623      	mov	r3, r4
 800c22e:	d807      	bhi.n	800c240 <memmove+0x20>
 800c230:	1e43      	subs	r3, r0, #1
 800c232:	42a1      	cmp	r1, r4
 800c234:	d008      	beq.n	800c248 <memmove+0x28>
 800c236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c23e:	e7f8      	b.n	800c232 <memmove+0x12>
 800c240:	4402      	add	r2, r0
 800c242:	4601      	mov	r1, r0
 800c244:	428a      	cmp	r2, r1
 800c246:	d100      	bne.n	800c24a <memmove+0x2a>
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c252:	e7f7      	b.n	800c244 <memmove+0x24>

0800c254 <_close_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d06      	ldr	r5, [pc, #24]	@ (800c270 <_close_r+0x1c>)
 800c258:	2300      	movs	r3, #0
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	602b      	str	r3, [r5, #0]
 800c260:	f7f6 f951 	bl	8002506 <_close>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_close_r+0x1a>
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_close_r+0x1a>
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	200051ec 	.word	0x200051ec

0800c274 <_fstat_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4d07      	ldr	r5, [pc, #28]	@ (800c294 <_fstat_r+0x20>)
 800c278:	2300      	movs	r3, #0
 800c27a:	4604      	mov	r4, r0
 800c27c:	4608      	mov	r0, r1
 800c27e:	4611      	mov	r1, r2
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	f7f6 f94c 	bl	800251e <_fstat>
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	d102      	bne.n	800c290 <_fstat_r+0x1c>
 800c28a:	682b      	ldr	r3, [r5, #0]
 800c28c:	b103      	cbz	r3, 800c290 <_fstat_r+0x1c>
 800c28e:	6023      	str	r3, [r4, #0]
 800c290:	bd38      	pop	{r3, r4, r5, pc}
 800c292:	bf00      	nop
 800c294:	200051ec 	.word	0x200051ec

0800c298 <_isatty_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	@ (800c2b4 <_isatty_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f6 f94b 	bl	800253e <_isatty>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_isatty_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_isatty_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	200051ec 	.word	0x200051ec

0800c2b8 <_lseek_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d07      	ldr	r5, [pc, #28]	@ (800c2d8 <_lseek_r+0x20>)
 800c2bc:	4604      	mov	r4, r0
 800c2be:	4608      	mov	r0, r1
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	602a      	str	r2, [r5, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f7f6 f944 	bl	8002554 <_lseek>
 800c2cc:	1c43      	adds	r3, r0, #1
 800c2ce:	d102      	bne.n	800c2d6 <_lseek_r+0x1e>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	b103      	cbz	r3, 800c2d6 <_lseek_r+0x1e>
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	200051ec 	.word	0x200051ec

0800c2dc <_read_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d07      	ldr	r5, [pc, #28]	@ (800c2fc <_read_r+0x20>)
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	4608      	mov	r0, r1
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	602a      	str	r2, [r5, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f7f6 f8ee 	bl	80024cc <_read>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d102      	bne.n	800c2fa <_read_r+0x1e>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b103      	cbz	r3, 800c2fa <_read_r+0x1e>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	200051ec 	.word	0x200051ec

0800c300 <_sbrk_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d06      	ldr	r5, [pc, #24]	@ (800c31c <_sbrk_r+0x1c>)
 800c304:	2300      	movs	r3, #0
 800c306:	4604      	mov	r4, r0
 800c308:	4608      	mov	r0, r1
 800c30a:	602b      	str	r3, [r5, #0]
 800c30c:	f7f6 f930 	bl	8002570 <_sbrk>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_sbrk_r+0x1a>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_sbrk_r+0x1a>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	200051ec 	.word	0x200051ec

0800c320 <_write_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d07      	ldr	r5, [pc, #28]	@ (800c340 <_write_r+0x20>)
 800c324:	4604      	mov	r4, r0
 800c326:	4608      	mov	r0, r1
 800c328:	4611      	mov	r1, r2
 800c32a:	2200      	movs	r2, #0
 800c32c:	602a      	str	r2, [r5, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	f7f5 fd0e 	bl	8001d50 <_write>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d102      	bne.n	800c33e <_write_r+0x1e>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	b103      	cbz	r3, 800c33e <_write_r+0x1e>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	200051ec 	.word	0x200051ec

0800c344 <_free_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4605      	mov	r5, r0
 800c348:	2900      	cmp	r1, #0
 800c34a:	d041      	beq.n	800c3d0 <_free_r+0x8c>
 800c34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c350:	1f0c      	subs	r4, r1, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	bfb8      	it	lt
 800c356:	18e4      	addlt	r4, r4, r3
 800c358:	f7ff fdee 	bl	800bf38 <__malloc_lock>
 800c35c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3d4 <_free_r+0x90>)
 800c35e:	6813      	ldr	r3, [r2, #0]
 800c360:	b933      	cbnz	r3, 800c370 <_free_r+0x2c>
 800c362:	6063      	str	r3, [r4, #4]
 800c364:	6014      	str	r4, [r2, #0]
 800c366:	4628      	mov	r0, r5
 800c368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36c:	f7ff bdea 	b.w	800bf44 <__malloc_unlock>
 800c370:	42a3      	cmp	r3, r4
 800c372:	d908      	bls.n	800c386 <_free_r+0x42>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	1821      	adds	r1, r4, r0
 800c378:	428b      	cmp	r3, r1
 800c37a:	bf01      	itttt	eq
 800c37c:	6819      	ldreq	r1, [r3, #0]
 800c37e:	685b      	ldreq	r3, [r3, #4]
 800c380:	1809      	addeq	r1, r1, r0
 800c382:	6021      	streq	r1, [r4, #0]
 800c384:	e7ed      	b.n	800c362 <_free_r+0x1e>
 800c386:	461a      	mov	r2, r3
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	b10b      	cbz	r3, 800c390 <_free_r+0x4c>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d9fa      	bls.n	800c386 <_free_r+0x42>
 800c390:	6811      	ldr	r1, [r2, #0]
 800c392:	1850      	adds	r0, r2, r1
 800c394:	42a0      	cmp	r0, r4
 800c396:	d10b      	bne.n	800c3b0 <_free_r+0x6c>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	4401      	add	r1, r0
 800c39c:	1850      	adds	r0, r2, r1
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	6011      	str	r1, [r2, #0]
 800c3a2:	d1e0      	bne.n	800c366 <_free_r+0x22>
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	6053      	str	r3, [r2, #4]
 800c3aa:	4408      	add	r0, r1
 800c3ac:	6010      	str	r0, [r2, #0]
 800c3ae:	e7da      	b.n	800c366 <_free_r+0x22>
 800c3b0:	d902      	bls.n	800c3b8 <_free_r+0x74>
 800c3b2:	230c      	movs	r3, #12
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	e7d6      	b.n	800c366 <_free_r+0x22>
 800c3b8:	6820      	ldr	r0, [r4, #0]
 800c3ba:	1821      	adds	r1, r4, r0
 800c3bc:	428b      	cmp	r3, r1
 800c3be:	bf04      	itt	eq
 800c3c0:	6819      	ldreq	r1, [r3, #0]
 800c3c2:	685b      	ldreq	r3, [r3, #4]
 800c3c4:	6063      	str	r3, [r4, #4]
 800c3c6:	bf04      	itt	eq
 800c3c8:	1809      	addeq	r1, r1, r0
 800c3ca:	6021      	streq	r1, [r4, #0]
 800c3cc:	6054      	str	r4, [r2, #4]
 800c3ce:	e7ca      	b.n	800c366 <_free_r+0x22>
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	bf00      	nop
 800c3d4:	200051e8 	.word	0x200051e8

0800c3d8 <_malloc_usable_size_r>:
 800c3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3dc:	1f18      	subs	r0, r3, #4
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	bfbc      	itt	lt
 800c3e2:	580b      	ldrlt	r3, [r1, r0]
 800c3e4:	18c0      	addlt	r0, r0, r3
 800c3e6:	4770      	bx	lr

0800c3e8 <_init>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	bf00      	nop
 800c3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ee:	bc08      	pop	{r3}
 800c3f0:	469e      	mov	lr, r3
 800c3f2:	4770      	bx	lr

0800c3f4 <_fini>:
 800c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f6:	bf00      	nop
 800c3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3fa:	bc08      	pop	{r3}
 800c3fc:	469e      	mov	lr, r3
 800c3fe:	4770      	bx	lr
