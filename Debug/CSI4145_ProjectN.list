
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069fc  080069fc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080069fc  080069fc  000079fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a04  08006a04  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a04  08006a04  00007a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a08  08006a08  00007a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006a0c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000068  08006a74  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  08006a74  00008820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad21  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1e  00000000  00000000  00022db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00026bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001261  00000000  00000000  00028368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005099  00000000  00000000  000295c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d86b  00000000  00000000  0002e662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb789  00000000  00000000  0004becd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c28  00000000  00000000  0013769c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800655c 	.word	0x0800655c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800655c 	.word	0x0800655c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0xa0>)
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000612:	f000 ff3d 	bl	8001490 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 fb8a 	bl	8000d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000628:	2305      	movs	r3, #5
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000632:	f000 ff71 	bl	8001518 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 fb7a 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000084 	.word	0x20000084
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_ADC_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d127      	bne.n	80006c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <HAL_ADC_MspInit+0x84>)
 80006c2:	f001 facb 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000

080006dc <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <send_AT_command+0x48>)
 80006ec:	f004 fea0 	bl	8005430 <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <send_AT_command+0x4c>)
 8000702:	f003 fb49 	bl	8003d98 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f000 f811 	bl	8000730 <waitFor>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <send_AT_command+0x50>)
 8000718:	f004 fe8a 	bl	8005430 <iprintf>
    }
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08006574 	.word	0x08006574
 8000728:	200001b4 	.word	0x200001b4
 800072c:	08006580 	.word	0x08006580

08000730 <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b6      	sub	sp, #216	@ 0xd8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	22c4      	movs	r2, #196	@ 0xc4
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fef8 	bl	800553c <memset>
    uint32_t startTick = HAL_GetTick();
 800074c:	f000 fe70 	bl	8001430 <HAL_GetTick>
 8000750:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 800075a:	e044      	b.n	80007e6 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 800075c:	f107 0208 	add.w	r2, r7, #8
 8000760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000764:	18d1      	adds	r1, r2, r3
 8000766:	2364      	movs	r3, #100	@ 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	4828      	ldr	r0, [pc, #160]	@ (800080c <waitFor+0xdc>)
 800076c:	f003 fb9f 	bl	8003eae <HAL_UART_Receive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d137      	bne.n	80007e6 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d007      	beq.n	8000796 <waitFor+0x66>
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0d      	cmp	r3, #13
 8000794:	d11b      	bne.n	80007ce <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800079e:	4413      	add	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 feb0 	bl	8005510 <strstr>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4814      	ldr	r0, [pc, #80]	@ (8000810 <waitFor+0xe0>)
 80007be:	f004 fe37 	bl	8005430 <iprintf>
                    return 1;  // Found the expected response
 80007c2:	2301      	movs	r3, #1
 80007c4:	e01d      	b.n	8000802 <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80007cc:	e00b      	b.n	80007e6 <waitFor+0xb6>
            } else {
                index++;
 80007ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 80007d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007dc:	2bc6      	cmp	r3, #198	@ 0xc6
 80007de:	d902      	bls.n	80007e6 <waitFor+0xb6>
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 80007e6:	f000 fe23 	bl	8001430 <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8b1      	bhi.n	800075c <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <waitFor+0xe4>)
 80007fc:	f004 fe18 	bl	8005430 <iprintf>
    return 0;  // Timeout reached without expected response
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	37d8      	adds	r7, #216	@ 0xd8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001b4 	.word	0x200001b4
 8000810:	080065a4 	.word	0x080065a4
 8000814:	080065b8 	.word	0x080065b8

08000818 <ESP_Server_Init>:
void ESP_Server_Init() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    printf("RESETTING ESP8266...\n");
 800081c:	481b      	ldr	r0, [pc, #108]	@ (800088c <ESP_Server_Init+0x74>)
 800081e:	f004 fe6f 	bl	8005500 <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8000822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000826:	491a      	ldr	r1, [pc, #104]	@ (8000890 <ESP_Server_Init+0x78>)
 8000828:	481a      	ldr	r0, [pc, #104]	@ (8000894 <ESP_Server_Init+0x7c>)
 800082a:	f7ff ff57 	bl	80006dc <send_AT_command>

    printf("Testing AT Command...\n");
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <ESP_Server_Init+0x80>)
 8000830:	f004 fe66 	bl	8005500 <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 8000834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000838:	4915      	ldr	r1, [pc, #84]	@ (8000890 <ESP_Server_Init+0x78>)
 800083a:	4818      	ldr	r0, [pc, #96]	@ (800089c <ESP_Server_Init+0x84>)
 800083c:	f7ff ff4e 	bl	80006dc <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8000840:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <ESP_Server_Init+0x88>)
 8000842:	f004 fe5d 	bl	8005500 <puts>
    send_AT_command("AT+CWJAP=\"Abraham_Nguero\",\"@Ramadjita1\"\r\n", "WIFI CONNECTED", 15000);
 8000846:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800084a:	4916      	ldr	r1, [pc, #88]	@ (80008a4 <ESP_Server_Init+0x8c>)
 800084c:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <ESP_Server_Init+0x90>)
 800084e:	f7ff ff45 	bl	80006dc <send_AT_command>

    printf("Checking assigned IP address...\n");
 8000852:	4816      	ldr	r0, [pc, #88]	@ (80008ac <ESP_Server_Init+0x94>)
 8000854:	f004 fe54 	bl	8005500 <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 8000858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800085c:	4914      	ldr	r1, [pc, #80]	@ (80008b0 <ESP_Server_Init+0x98>)
 800085e:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <ESP_Server_Init+0x9c>)
 8000860:	f7ff ff3c 	bl	80006dc <send_AT_command>

    printf("Enabling multiple connections...\n");
 8000864:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <ESP_Server_Init+0xa0>)
 8000866:	f004 fe4b 	bl	8005500 <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 800086a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800086e:	4908      	ldr	r1, [pc, #32]	@ (8000890 <ESP_Server_Init+0x78>)
 8000870:	4812      	ldr	r0, [pc, #72]	@ (80008bc <ESP_Server_Init+0xa4>)
 8000872:	f7ff ff33 	bl	80006dc <send_AT_command>

    //printf("Starting TCP Server...\n");
    //send_AT_command("AT+CIPSERVER=1,80\r\n", "OK", 3000);

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <ESP_Server_Init+0xa8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <ESP_Server_Init+0xa8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 0220 	orr.w	r2, r2, #32
 8000884:	60da      	str	r2, [r3, #12]
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	080065d4 	.word	0x080065d4
 8000890:	080065ec 	.word	0x080065ec
 8000894:	080065f0 	.word	0x080065f0
 8000898:	080065fc 	.word	0x080065fc
 800089c:	08006614 	.word	0x08006614
 80008a0:	0800661c 	.word	0x0800661c
 80008a4:	08006634 	.word	0x08006634
 80008a8:	08006644 	.word	0x08006644
 80008ac:	08006670 	.word	0x08006670
 80008b0:	08006690 	.word	0x08006690
 80008b4:	08006698 	.word	0x08006698
 80008b8:	080066a4 	.word	0x080066a4
 80008bc:	080066c8 	.word	0x080066c8
 80008c0:	200001b4 	.word	0x200001b4

080008c4 <sendHTMLToLocalServer>:
    }

    ESP_Clear_Buffer();
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // Re-enable interrupt
}
void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008d0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80008d4:	6018      	str	r0, [r3, #0]
 80008d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008da:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80008de:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80008e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80008e8:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	492b      	ldr	r1, [pc, #172]	@ (800099c <sendHTMLToLocalServer+0xd8>)
 80008f0:	f004 fcbc 	bl	800526c <siprintf>
    send_AT_command(cmdBuffer, "OK", 5000);
 80008f4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008fc:	4928      	ldr	r1, [pc, #160]	@ (80009a0 <sendHTMLToLocalServer+0xdc>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff feec 	bl	80006dc <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 8000904:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000908:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	f7ff fc7f 	bl	8000210 <strlen>
 8000912:	4601      	mov	r1, r0
 8000914:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000918:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 800091c:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000920:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000924:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	460b      	mov	r3, r1
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	491c      	ldr	r1, [pc, #112]	@ (80009a4 <sendHTMLToLocalServer+0xe0>)
 8000932:	f004 fc9b 	bl	800526c <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 8000936:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc68 	bl	8000210 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 800094e:	4916      	ldr	r1, [pc, #88]	@ (80009a8 <sendHTMLToLocalServer+0xe4>)
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fc8b 	bl	800526c <siprintf>
    send_AT_command(responseBuffer, ">", 5000);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800095e:	4913      	ldr	r1, [pc, #76]	@ (80009ac <sendHTMLToLocalServer+0xe8>)
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff febb 	bl	80006dc <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 5000);
 8000966:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800096a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800096e:	4910      	ldr	r1, [pc, #64]	@ (80009b0 <sendHTMLToLocalServer+0xec>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff feb3 	bl	80006dc <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 5000);
 8000976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800097a:	4909      	ldr	r1, [pc, #36]	@ (80009a0 <sendHTMLToLocalServer+0xdc>)
 800097c:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <sendHTMLToLocalServer+0xf0>)
 800097e:	f7ff fead 	bl	80006dc <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 8000982:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000986:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	480a      	ldr	r0, [pc, #40]	@ (80009b8 <sendHTMLToLocalServer+0xf4>)
 800098e:	f004 fd4f 	bl	8005430 <iprintf>
}
 8000992:	bf00      	nop
 8000994:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800672c 	.word	0x0800672c
 80009a0:	080065ec 	.word	0x080065ec
 80009a4:	0800674c 	.word	0x0800674c
 80009a8:	080067a8 	.word	0x080067a8
 80009ac:	080067b8 	.word	0x080067b8
 80009b0:	080067bc 	.word	0x080067bc
 80009b4:	080067c4 	.word	0x080067c4
 80009b8:	080067d4 	.word	0x080067d4

080009bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b37      	ldr	r3, [pc, #220]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a36      	ldr	r2, [pc, #216]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a28      	ldr	r2, [pc, #160]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <MX_GPIO_Init+0xfc>)
 8000a48:	f001 fa9c 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2103      	movs	r1, #3
 8000a50:	481a      	ldr	r0, [pc, #104]	@ (8000abc <MX_GPIO_Init+0x100>)
 8000a52:	f001 fa97 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x104>)
 8000a6e:	f001 f8f5 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a72:	2320      	movs	r3, #32
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <MX_GPIO_Init+0xfc>)
 8000a8a:	f001 f8e7 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_GPIO_Init+0x100>)
 8000aa6:	f001 f8d9 	bl	8001c5c <HAL_GPIO_Init>

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000aca:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <MX_I2C1_Init+0x54>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000ad0:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <MX_I2C1_Init+0x58>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000b02:	f001 fa59 	bl	8001fb8 <HAL_I2C_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b0c:	f000 f912 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200000cc 	.word	0x200000cc
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	00061a80 	.word	0x00061a80

08000b20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12b      	bne.n	8000b9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5e:	23c0      	movs	r3, #192	@ 0xc0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <HAL_I2C_MspInit+0x8c>)
 8000b7a:	f001 f86f 	bl	8001c5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fc05 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f825 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f7ff fefd 	bl	80009bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 fb27 	bl	8001214 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bc6:	f7ff ff7d 	bl	8000ac4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000bca:	f7ff fcf1 	bl	80005b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bce:	f000 fa29 	bl	8001024 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000bd2:	f000 faf5 	bl	80011c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Server_Init();
 8000bd6:	f7ff fe1f 	bl	8000818 <ESP_Server_Init>
  int sensorValue = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  // test_ESP8266();
  // test_Button();

  /* USER CODE END 2 */

  const char *apiKey = "0J00SUVFH8BB3OGK";
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <main+0x4c>)
 8000be0:	60bb      	str	r3, [r7, #8]
  const char *intrusionHTML = "<h2 style='color:red;'>I am Your Father toooooooooo!</h2>";
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <main+0x50>)
 8000be4:	607b      	str	r3, [r7, #4]
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sendHTMLToLocalServer("10.0.0.86", intrusionHTML);
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <main+0x54>)
 8000bea:	f7ff fe6b 	bl	80008c4 <sendHTMLToLocalServer>
	  HAL_Delay(10000);
 8000bee:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000bf2:	f000 fc29 	bl	8001448 <HAL_Delay>
  {
 8000bf6:	bf00      	nop
 8000bf8:	e7f5      	b.n	8000be6 <main+0x36>
 8000bfa:	bf00      	nop
 8000bfc:	08006954 	.word	0x08006954
 8000c00:	08006968 	.word	0x08006968
 8000c04:	080069a4 	.word	0x080069a4

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	@ 0x50
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2234      	movs	r2, #52	@ 0x34
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fc90 	bl	800553c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b2a      	ldr	r3, [pc, #168]	@ (8000cdc <SystemClock_Config+0xd4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a29      	ldr	r2, [pc, #164]	@ (8000cdc <SystemClock_Config+0xd4>)
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <SystemClock_Config+0xd4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <SystemClock_Config+0xd8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c54:	4a22      	ldr	r2, [pc, #136]	@ (8000ce0 <SystemClock_Config+0xd8>)
 8000c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <SystemClock_Config+0xd8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c70:	2310      	movs	r3, #16
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c74:	2302      	movs	r3, #2
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c86:	2304      	movs	r3, #4
 8000c88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fe4e 	bl	8002938 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ca2:	f000 f847 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2302      	movs	r3, #2
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fabc 	bl	8002240 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cce:	f000 f831 	bl	8000d34 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	@ 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <_write>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
int _write(int file, char *ptr, int len) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <_write+0x28>)
 8000cfc:	f003 f84c 	bl	8003d98 <HAL_UART_Transmit>
    return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001fc 	.word	0x200001fc

08000d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d22:	f000 fb71 	bl	8001408 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40001000 	.word	0x40001000

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210f      	movs	r1, #15
 8000d82:	f06f 0001 	mvn.w	r0, #1
 8000d86:	f000 fead 	bl	8001ae4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	@ 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <HAL_InitTick+0xe4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a32      	ldr	r2, [pc, #200]	@ (8000e7c <HAL_InitTick+0xe4>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <HAL_InitTick+0xe4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc4:	f107 0210 	add.w	r2, r7, #16
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fb50 	bl	8002474 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dde:	f001 fb21 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8000de2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000de4:	e004      	b.n	8000df0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de6:	f001 fb1d 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df2:	4a23      	ldr	r2, [pc, #140]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <HAL_InitTick+0xf0>)
 8000e02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e24:	4817      	ldr	r0, [pc, #92]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e26:	f002 f825 	bl	8002e74 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d11b      	bne.n	8000e70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e38:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <HAL_InitTick+0xec>)
 8000e3a:	f002 f86b 	bl	8002f14 <HAL_TIM_Base_Start_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d111      	bne.n	8000e70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e4c:	2036      	movs	r0, #54	@ 0x36
 8000e4e:	f000 fe65 	bl	8001b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d808      	bhi.n	8000e6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2036      	movs	r0, #54	@ 0x36
 8000e5e:	f000 fe41 	bl	8001ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <HAL_InitTick+0xf4>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e002      	b.n	8000e70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3738      	adds	r7, #56	@ 0x38
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	20000120 	.word	0x20000120
 8000e88:	40001000 	.word	0x40001000
 8000e8c:	20000004 	.word	0x20000004

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <USART1_IRQHandler+0x10>)
 8000ece:	f003 f885 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200001b4 	.word	0x200001b4

08000edc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <TIM6_DAC_IRQHandler+0x10>)
 8000ee2:	f002 f8e0 	bl	80030a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000120 	.word	0x20000120

08000ef0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
  }

  return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f52:	605a      	str	r2, [r3, #4]
  return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f004 fac2 	bl	800554c <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20020000 	.word	0x20020000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000168 	.word	0x20000168
 8000ffc:	20000820 	.word	0x20000820

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	@ 0x38
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001054:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <MX_TIM2_Init+0xe8>)
 8001056:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <MX_TIM2_Init+0xe8>)
 800105e:	2253      	movs	r2, #83	@ 0x53
 8001060:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <MX_TIM2_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001068:	4b28      	ldr	r3, [pc, #160]	@ (800110c <MX_TIM2_Init+0xe8>)
 800106a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800106e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <MX_TIM2_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <MX_TIM2_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800107c:	4823      	ldr	r0, [pc, #140]	@ (800110c <MX_TIM2_Init+0xe8>)
 800107e:	f001 fef9 	bl	8002e74 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001088:	f7ff fe54 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001096:	4619      	mov	r1, r3
 8001098:	481c      	ldr	r0, [pc, #112]	@ (800110c <MX_TIM2_Init+0xe8>)
 800109a:	f002 f9b7 	bl	800340c <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010a4:	f7ff fe46 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a8:	4818      	ldr	r0, [pc, #96]	@ (800110c <MX_TIM2_Init+0xe8>)
 80010aa:	f001 ffa3 	bl	8002ff4 <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010b4:	f7ff fe3e 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	@ (800110c <MX_TIM2_Init+0xe8>)
 80010c8:	f002 fd86 	bl	8003bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010d2:	f7ff fe2f 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	@ 0x60
 80010d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80010da:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80010de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <MX_TIM2_Init+0xe8>)
 80010f0:	f002 f8ca 	bl	8003288 <HAL_TIM_PWM_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010fa:	f7ff fe1b 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010fe:	4803      	ldr	r0, [pc, #12]	@ (800110c <MX_TIM2_Init+0xe8>)
 8001100:	f000 f826 	bl	8001150 <HAL_TIM_MspPostInit>

}
 8001104:	bf00      	nop
 8001106:	3738      	adds	r7, #56	@ 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000016c 	.word	0x2000016c

08001110 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001120:	d10d      	bne.n	800113e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_TIM_Base_MspInit+0x3c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_TIM_Base_MspInit+0x3c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001170:	d11e      	bne.n	80011b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_TIM_MspPostInit+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <HAL_TIM_MspPostInit+0x68>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_TIM_MspPostInit+0x68>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001192:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <HAL_TIM_MspPostInit+0x6c>)
 80011ac:	f000 fd56 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000

080011c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_USART1_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011f8:	f002 fd7e 	bl	8003cf8 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f7ff fd97 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001b4 	.word	0x200001b4
 8001210:	40011000 	.word	0x40011000

08001214 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_USART2_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800124c:	f002 fd54 	bl	8003cf8 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f7ff fd6d 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200001fc 	.word	0x200001fc
 8001264:	40004400 	.word	0x40004400

08001268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <HAL_UART_MspInit+0xf8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d135      	bne.n	80012f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	4a34      	ldr	r2, [pc, #208]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6453      	str	r3, [r2, #68]	@ 0x44
 800129a:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d4:	2307      	movs	r3, #7
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4822      	ldr	r0, [pc, #136]	@ (8001368 <HAL_UART_MspInit+0x100>)
 80012e0:	f000 fcbc 	bl	8001c5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2105      	movs	r1, #5
 80012e8:	2025      	movs	r0, #37	@ 0x25
 80012ea:	f000 fbfb 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012ee:	2025      	movs	r0, #37	@ 0x25
 80012f0:	f000 fc14 	bl	8001b1c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012f4:	e030      	b.n	8001358 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <HAL_UART_MspInit+0x104>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d12b      	bne.n	8001358 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	4a16      	ldr	r2, [pc, #88]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 800130a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6313      	str	r3, [r2, #48]	@ 0x30
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_UART_MspInit+0xfc>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001338:	230c      	movs	r3, #12
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001348:	2307      	movs	r3, #7
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <HAL_UART_MspInit+0x100>)
 8001354:	f000 fc82 	bl	8001c5c <HAL_GPIO_Init>
}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	@ 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40011000 	.word	0x40011000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40004400 	.word	0x40004400

08001370 <Reset_Handler>:
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a8 <LoopFillZerobss+0xe>
 8001374:	f7ff fe44 	bl	8001000 <SystemInit>
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopFillZerobss+0x12>)
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopFillZerobss+0x16>)
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopFillZerobss+0x1a>)
 800137e:	2300      	movs	r3, #0
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:
 8001382:	58d4      	ldr	r4, [r2, r3]
 8001384:	50c4      	str	r4, [r0, r3]
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:
 8001388:	18c4      	adds	r4, r0, r3
 800138a:	428c      	cmp	r4, r1
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopFillZerobss+0x1e>)
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopFillZerobss+0x22>)
 8001392:	2300      	movs	r3, #0
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:
 800139a:	42a2      	cmp	r2, r4
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>
 800139e:	f004 f8db 	bl	8005558 <__libc_init_array>
 80013a2:	f7ff fc05 	bl	8000bb0 <main>
 80013a6:	4770      	bx	lr
 80013a8:	20020000 	.word	0x20020000
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000068 	.word	0x20000068
 80013b4:	08006a0c 	.word	0x08006a0c
 80013b8:	20000068 	.word	0x20000068
 80013bc:	20000820 	.word	0x20000820

080013c0 <ADC_IRQHandler>:
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 fb6e 	bl	8001ace <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f7ff fcd0 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fca2 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	@ (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	20000244 	.word	0x20000244

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000244 	.word	0x20000244

08001448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff ffee 	bl	8001430 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001460:	d005      	beq.n	800146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_Delay+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146e:	bf00      	nop
 8001470:	f7ff ffde 	bl	8001430 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8f7      	bhi.n	8001470 <HAL_Delay+0x28>
  {
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e033      	b.n	800150e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff f8d0 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014d6:	f023 0302 	bic.w	r3, r3, #2
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f94a 	bl	800177c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014fe:	e001      	b.n	8001504 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c>
 8001530:	2302      	movs	r3, #2
 8001532:	e113      	b.n	800175c <HAL_ADC_ConfigChannel+0x244>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d925      	bls.n	8001590 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	3b1e      	subs	r3, #30
 800155a:	2207      	movs	r2, #7
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43da      	mvns	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	400a      	ands	r2, r1
 8001568:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	4603      	mov	r3, r0
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4403      	add	r3, r0
 8001582:	3b1e      	subs	r3, #30
 8001584:	409a      	lsls	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e022      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6919      	ldr	r1, [r3, #16]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	2207      	movs	r2, #7
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	400a      	ands	r2, r1
 80015b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4403      	add	r3, r0
 80015cc:	409a      	lsls	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d824      	bhi.n	8001628 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b05      	subs	r3, #5
 80015f0:	221f      	movs	r2, #31
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3b05      	subs	r3, #5
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	@ 0x34
 8001626:	e04c      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d824      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b23      	subs	r3, #35	@ 0x23
 8001642:	221f      	movs	r2, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43da      	mvns	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	400a      	ands	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b23      	subs	r3, #35	@ 0x23
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
 8001678:	e023      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b41      	subs	r3, #65	@ 0x41
 800168c:	221f      	movs	r2, #31
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	400a      	ands	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b41      	subs	r3, #65	@ 0x41
 80016b6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c2:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <HAL_ADC_ConfigChannel+0x250>)
 80016c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a28      	ldr	r2, [pc, #160]	@ (800176c <HAL_ADC_ConfigChannel+0x254>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d10f      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d8>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d10b      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_ADC_ConfigChannel+0x254>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x23a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <HAL_ADC_ConfigChannel+0x258>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d003      	beq.n	800170c <HAL_ADC_ConfigChannel+0x1f4>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b11      	cmp	r3, #17
 800170a:	d122      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <HAL_ADC_ConfigChannel+0x258>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d111      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_ADC_ConfigChannel+0x25c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_ADC_ConfigChannel+0x260>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9a      	lsrs	r2, r3, #18
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40012300 	.word	0x40012300
 800176c:	40012000 	.word	0x40012000
 8001770:	10000012 	.word	0x10000012
 8001774:	20000000 	.word	0x20000000
 8001778:	431bde83 	.word	0x431bde83

0800177c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001784:	4b79      	ldr	r3, [pc, #484]	@ (800196c <ADC_Init+0x1f0>)
 8001786:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	431a      	orrs	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	021a      	lsls	r2, r3, #8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	4a58      	ldr	r2, [pc, #352]	@ (8001970 <ADC_Init+0x1f4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d022      	beq.n	800185a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e00f      	b.n	800187a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001878:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0202 	bic.w	r2, r2, #2
 8001888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6899      	ldr	r1, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	005a      	lsls	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6859      	ldr	r1, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d2:	3b01      	subs	r3, #1
 80018d4:	035a      	lsls	r2, r3, #13
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	e007      	b.n	80018f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	3b01      	subs	r3, #1
 800190c:	051a      	lsls	r2, r3, #20
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001932:	025a      	lsls	r2, r3, #9
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800194a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	029a      	lsls	r2, r3, #10
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	609a      	str	r2, [r3, #8]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40012300 	.word	0x40012300
 8001970:	0f000001 	.word	0x0f000001

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	@ (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	@ 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff4c 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af6:	f7ff ff61 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	6978      	ldr	r0, [r7, #20]
 8001b02:	f7ff ffb1 	bl	8001a68 <NVIC_EncodePriority>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff80 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff54 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b46:	f7ff fc73 	bl	8001430 <HAL_GetTick>
 8001b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d008      	beq.n	8001b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e052      	b.n	8001c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0216 	bic.w	r2, r2, #22
 8001b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_DMA_Abort+0x62>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0208 	bic.w	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bba:	e013      	b.n	8001be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bbc:	f7ff fc38 	bl	8001430 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d90c      	bls.n	8001be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e015      	b.n	8001c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1e4      	bne.n	8001bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	223f      	movs	r2, #63	@ 0x3f
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2280      	movs	r2, #128	@ 0x80
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00c      	b.n	8001c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2205      	movs	r2, #5
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e165      	b.n	8001f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8154 	bne.w	8001f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d005      	beq.n	8001cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d017      	beq.n	8001d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80ae 	beq.w	8001f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a5c      	ldr	r2, [pc, #368]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a58      	ldr	r2, [pc, #352]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	@ (8001f64 <HAL_GPIO_Init+0x308>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f68 <HAL_GPIO_Init+0x30c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4d      	ldr	r2, [pc, #308]	@ (8001f6c <HAL_GPIO_Init+0x310>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <HAL_GPIO_Init+0x314>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <HAL_GPIO_Init+0x318>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x20a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_GPIO_Init+0x31c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x206>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a49      	ldr	r2, [pc, #292]	@ (8001f7c <HAL_GPIO_Init+0x320>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x202>
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e00c      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e00a      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e008      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e66:	2304      	movs	r3, #4
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e004      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x21c>
 8001e76:	2300      	movs	r3, #0
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	f002 0203 	and.w	r2, r2, #3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4093      	lsls	r3, r2
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e88:	4935      	ldr	r1, [pc, #212]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e96:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eba:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee4:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eea:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_GPIO_Init+0x324>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	f67f ae96 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3724      	adds	r7, #36	@ 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40021800 	.word	0x40021800
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e12b      	b.n	8002222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fd9e 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	@ 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800200a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800201a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800201c:	f000 fa02 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a81      	ldr	r2, [pc, #516]	@ (800222c <HAL_I2C_Init+0x274>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d807      	bhi.n	800203c <HAL_I2C_Init+0x84>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a80      	ldr	r2, [pc, #512]	@ (8002230 <HAL_I2C_Init+0x278>)
 8002030:	4293      	cmp	r3, r2
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e006      	b.n	800204a <HAL_I2C_Init+0x92>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a7d      	ldr	r2, [pc, #500]	@ (8002234 <HAL_I2C_Init+0x27c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	bf94      	ite	ls
 8002044:	2301      	movls	r3, #1
 8002046:	2300      	movhi	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e7      	b.n	8002222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a78      	ldr	r2, [pc, #480]	@ (8002238 <HAL_I2C_Init+0x280>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a6a      	ldr	r2, [pc, #424]	@ (800222c <HAL_I2C_Init+0x274>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d802      	bhi.n	800208c <HAL_I2C_Init+0xd4>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	e009      	b.n	80020a0 <HAL_I2C_Init+0xe8>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a69      	ldr	r2, [pc, #420]	@ (800223c <HAL_I2C_Init+0x284>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	495c      	ldr	r1, [pc, #368]	@ (800222c <HAL_I2C_Init+0x274>)
 80020bc:	428b      	cmp	r3, r1
 80020be:	d819      	bhi.n	80020f4 <HAL_I2C_Init+0x13c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e59      	subs	r1, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020d4:	400b      	ands	r3, r1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_I2C_Init+0x138>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e59      	subs	r1, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	e051      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e04f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d111      	bne.n	8002120 <HAL_I2C_Init+0x168>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e012      	b.n	8002146 <HAL_I2C_Init+0x18e>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x196>
 800214a:	2301      	movs	r3, #1
 800214c:	e022      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <HAL_I2C_Init+0x1bc>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1e58      	subs	r0, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	fbb0 f3f3 	udiv	r3, r0, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002172:	e00f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	0099      	lsls	r1, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	6809      	ldr	r1, [r1, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6911      	ldr	r1, [r2, #16]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68d2      	ldr	r2, [r2, #12]
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	000186a0 	.word	0x000186a0
 8002230:	001e847f 	.word	0x001e847f
 8002234:	003d08ff 	.word	0x003d08ff
 8002238:	431bde83 	.word	0x431bde83
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0cc      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d90c      	bls.n	800227c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b65      	ldr	r3, [pc, #404]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b8      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a58      	ldr	r2, [pc, #352]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800229e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ac:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a52      	ldr	r2, [pc, #328]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b50      	ldr	r3, [pc, #320]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	494d      	ldr	r1, [pc, #308]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d044      	beq.n	8002360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d119      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e07f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b3f      	ldr	r3, [pc, #252]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e067      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4934      	ldr	r1, [pc, #208]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002330:	f7ff f87e 	bl	8001430 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7ff f87a 	bl	8001430 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e04f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b2b      	ldr	r3, [pc, #172]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b25      	ldr	r3, [pc, #148]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d20c      	bcs.n	8002388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e032      	b.n	80023ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4916      	ldr	r1, [pc, #88]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	490e      	ldr	r1, [pc, #56]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c6:	f000 f887 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	490a      	ldr	r1, [pc, #40]	@ (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x1c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fcd6 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00
 80023fc:	40023800 	.word	0x40023800
 8002400:	080069b0 	.word	0x080069b0
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_RCC_GetHCLKFreq+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000000 	.word	0x20000000

08002424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002428:	f7ff fff0 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0a9b      	lsrs	r3, r3, #10
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	@ (8002448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	080069c0 	.word	0x080069c0

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002450:	f7ff ffdc 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0b5b      	lsrs	r3, r3, #13
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	@ (8002470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	080069c0 	.word	0x080069c0

08002474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	220f      	movs	r2, #15
 8002482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0203 	and.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024a8:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024b6:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <HAL_RCC_GetClockConfig+0x60>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40023c00 	.word	0x40023c00

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024dc:	b0ae      	sub	sp, #184	@ 0xb8
 80024de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fe:	4bcb      	ldr	r3, [pc, #812]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b0c      	cmp	r3, #12
 8002508:	f200 8206 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x440>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <HAL_RCC_GetSysClockFreq+0x3c>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002549 	.word	0x08002549
 8002518:	08002919 	.word	0x08002919
 800251c:	08002919 	.word	0x08002919
 8002520:	08002919 	.word	0x08002919
 8002524:	08002551 	.word	0x08002551
 8002528:	08002919 	.word	0x08002919
 800252c:	08002919 	.word	0x08002919
 8002530:	08002919 	.word	0x08002919
 8002534:	08002559 	.word	0x08002559
 8002538:	08002919 	.word	0x08002919
 800253c:	08002919 	.word	0x08002919
 8002540:	08002919 	.word	0x08002919
 8002544:	08002749 	.word	0x08002749
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4bb9      	ldr	r3, [pc, #740]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x358>)
 800254a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800254e:	e1e7      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002550:	4bb8      	ldr	r3, [pc, #736]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002556:	e1e3      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002558:	4bb4      	ldr	r3, [pc, #720]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002564:	4bb1      	ldr	r3, [pc, #708]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d071      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002570:	4bae      	ldr	r3, [pc, #696]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	2200      	movs	r2, #0
 8002578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800257c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002596:	4622      	mov	r2, r4
 8002598:	462b      	mov	r3, r5
 800259a:	f04f 0000 	mov.w	r0, #0
 800259e:	f04f 0100 	mov.w	r1, #0
 80025a2:	0159      	lsls	r1, r3, #5
 80025a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a8:	0150      	lsls	r0, r2, #5
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4621      	mov	r1, r4
 80025b0:	1a51      	subs	r1, r2, r1
 80025b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80025b4:	4629      	mov	r1, r5
 80025b6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025c8:	4649      	mov	r1, r9
 80025ca:	018b      	lsls	r3, r1, #6
 80025cc:	4641      	mov	r1, r8
 80025ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025d2:	4641      	mov	r1, r8
 80025d4:	018a      	lsls	r2, r1, #6
 80025d6:	4641      	mov	r1, r8
 80025d8:	1a51      	subs	r1, r2, r1
 80025da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025dc:	4649      	mov	r1, r9
 80025de:	eb63 0301 	sbc.w	r3, r3, r1
 80025e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025f0:	4649      	mov	r1, r9
 80025f2:	00cb      	lsls	r3, r1, #3
 80025f4:	4641      	mov	r1, r8
 80025f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025fa:	4641      	mov	r1, r8
 80025fc:	00ca      	lsls	r2, r1, #3
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	4603      	mov	r3, r0
 8002604:	4622      	mov	r2, r4
 8002606:	189b      	adds	r3, r3, r2
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
 800260a:	462b      	mov	r3, r5
 800260c:	460a      	mov	r2, r1
 800260e:	eb42 0303 	adc.w	r3, r2, r3
 8002612:	637b      	str	r3, [r7, #52]	@ 0x34
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002620:	4629      	mov	r1, r5
 8002622:	024b      	lsls	r3, r1, #9
 8002624:	4621      	mov	r1, r4
 8002626:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800262a:	4621      	mov	r1, r4
 800262c:	024a      	lsls	r2, r1, #9
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800263c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002640:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002644:	f7fd fe3c 	bl	80002c0 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4613      	mov	r3, r2
 800264e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002652:	e067      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4b75      	ldr	r3, [pc, #468]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002660:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002664:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800266e:	2300      	movs	r3, #0
 8002670:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002672:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002676:	4622      	mov	r2, r4
 8002678:	462b      	mov	r3, r5
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002688:	0150      	lsls	r0, r2, #5
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4621      	mov	r1, r4
 8002690:	1a51      	subs	r1, r2, r1
 8002692:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002694:	4629      	mov	r1, r5
 8002696:	eb63 0301 	sbc.w	r3, r3, r1
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026a8:	4649      	mov	r1, r9
 80026aa:	018b      	lsls	r3, r1, #6
 80026ac:	4641      	mov	r1, r8
 80026ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b2:	4641      	mov	r1, r8
 80026b4:	018a      	lsls	r2, r1, #6
 80026b6:	4641      	mov	r1, r8
 80026b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80026bc:	4649      	mov	r1, r9
 80026be:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d6:	4692      	mov	sl, r2
 80026d8:	469b      	mov	fp, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	eb1a 0303 	adds.w	r3, sl, r3
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	462b      	mov	r3, r5
 80026e4:	eb4b 0303 	adc.w	r3, fp, r3
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026f6:	4629      	mov	r1, r5
 80026f8:	028b      	lsls	r3, r1, #10
 80026fa:	4621      	mov	r1, r4
 80026fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002700:	4621      	mov	r1, r4
 8002702:	028a      	lsls	r2, r1, #10
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800270c:	2200      	movs	r2, #0
 800270e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002710:	677a      	str	r2, [r7, #116]	@ 0x74
 8002712:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002716:	f7fd fdd3 	bl	80002c0 <__aeabi_uldivmod>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4613      	mov	r3, r2
 8002720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002724:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800273a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002746:	e0eb      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002748:	4b38      	ldr	r3, [pc, #224]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002754:	4b35      	ldr	r3, [pc, #212]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d06b      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002760:	4b32      	ldr	r3, [pc, #200]	@ (800282c <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	2200      	movs	r2, #0
 8002768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800276a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800276c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800276e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002772:	663b      	str	r3, [r7, #96]	@ 0x60
 8002774:	2300      	movs	r3, #0
 8002776:	667b      	str	r3, [r7, #100]	@ 0x64
 8002778:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800277c:	4622      	mov	r2, r4
 800277e:	462b      	mov	r3, r5
 8002780:	f04f 0000 	mov.w	r0, #0
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	0159      	lsls	r1, r3, #5
 800278a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278e:	0150      	lsls	r0, r2, #5
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4621      	mov	r1, r4
 8002796:	1a51      	subs	r1, r2, r1
 8002798:	61b9      	str	r1, [r7, #24]
 800279a:	4629      	mov	r1, r5
 800279c:	eb63 0301 	sbc.w	r3, r3, r1
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ae:	4659      	mov	r1, fp
 80027b0:	018b      	lsls	r3, r1, #6
 80027b2:	4651      	mov	r1, sl
 80027b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027b8:	4651      	mov	r1, sl
 80027ba:	018a      	lsls	r2, r1, #6
 80027bc:	4651      	mov	r1, sl
 80027be:	ebb2 0801 	subs.w	r8, r2, r1
 80027c2:	4659      	mov	r1, fp
 80027c4:	eb63 0901 	sbc.w	r9, r3, r1
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027dc:	4690      	mov	r8, r2
 80027de:	4699      	mov	r9, r3
 80027e0:	4623      	mov	r3, r4
 80027e2:	eb18 0303 	adds.w	r3, r8, r3
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	462b      	mov	r3, r5
 80027ea:	eb49 0303 	adc.w	r3, r9, r3
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027fc:	4629      	mov	r1, r5
 80027fe:	024b      	lsls	r3, r1, #9
 8002800:	4621      	mov	r1, r4
 8002802:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002806:	4621      	mov	r1, r4
 8002808:	024a      	lsls	r2, r1, #9
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002812:	2200      	movs	r2, #0
 8002814:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002816:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002818:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800281c:	f7fd fd50 	bl	80002c0 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800282a:	e065      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x420>
 800282c:	40023800 	.word	0x40023800
 8002830:	00f42400 	.word	0x00f42400
 8002834:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002838:	4b3d      	ldr	r3, [pc, #244]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x458>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	2200      	movs	r2, #0
 8002840:	4618      	mov	r0, r3
 8002842:	4611      	mov	r1, r2
 8002844:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002848:	653b      	str	r3, [r7, #80]	@ 0x50
 800284a:	2300      	movs	r3, #0
 800284c:	657b      	str	r3, [r7, #84]	@ 0x54
 800284e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002852:	4642      	mov	r2, r8
 8002854:	464b      	mov	r3, r9
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4641      	mov	r1, r8
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	4649      	mov	r1, r9
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002884:	4659      	mov	r1, fp
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4651      	mov	r1, sl
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4651      	mov	r1, sl
 8002894:	1a54      	subs	r4, r2, r1
 8002896:	4659      	mov	r1, fp
 8002898:	eb63 0501 	sbc.w	r5, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	00eb      	lsls	r3, r5, #3
 80028a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028aa:	00e2      	lsls	r2, r4, #3
 80028ac:	4614      	mov	r4, r2
 80028ae:	461d      	mov	r5, r3
 80028b0:	4643      	mov	r3, r8
 80028b2:	18e3      	adds	r3, r4, r3
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	464b      	mov	r3, r9
 80028b8:	eb45 0303 	adc.w	r3, r5, r3
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ca:	4629      	mov	r1, r5
 80028cc:	028b      	lsls	r3, r1, #10
 80028ce:	4621      	mov	r1, r4
 80028d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d4:	4621      	mov	r1, r4
 80028d6:	028a      	lsls	r2, r1, #10
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028e0:	2200      	movs	r2, #0
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028ea:	f7fd fce9 	bl	80002c0 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4613      	mov	r3, r2
 80028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x458>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0f1b      	lsrs	r3, r3, #28
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800290a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002916:	e003      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x45c>)
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800291e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002924:	4618      	mov	r0, r3
 8002926:	37b8      	adds	r7, #184	@ 0xb8
 8002928:	46bd      	mov	sp, r7
 800292a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	00f42400 	.word	0x00f42400

08002938 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e28d      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8083 	beq.w	8002a5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002958:	4b94      	ldr	r3, [pc, #592]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d019      	beq.n	8002998 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002964:	4b91      	ldr	r3, [pc, #580]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800296c:	2b08      	cmp	r3, #8
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002970:	4b8e      	ldr	r3, [pc, #568]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800297c:	d00c      	beq.n	8002998 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d112      	bne.n	80029b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002996:	d10b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	4b84      	ldr	r3, [pc, #528]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_RCC_OscConfig+0x124>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d157      	bne.n	8002a5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e25a      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x90>
 80029ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7b      	ldr	r2, [pc, #492]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xcc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xb4>
 80029d2:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a72      	ldr	r2, [pc, #456]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xcc>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fd10 	bl	8001430 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fd0c 	bl	8001430 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e21f      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xdc>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fcfc 	bl	8001430 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fcf8 	bl	8001430 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e20b      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b57      	ldr	r3, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x104>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06f      	beq.n	8002b4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a6a:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a76:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b44      	ldr	r3, [pc, #272]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x186>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1d3      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4937      	ldr	r1, [pc, #220]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_OscConfig+0x278>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fca5 	bl	8001430 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aea:	f7fe fca1 	bl	8001430 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1b4      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4925      	ldr	r1, [pc, #148]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCC_OscConfig+0x278>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fc84 	bl	8001430 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fc80 	bl	8001430 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e193      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d036      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fc64 	bl	8001430 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fc60 	bl	8001430 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e173      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x234>
 8002b8a:	e01b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fc4d 	bl	8001430 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e00e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fc49 	bl	8001430 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d907      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e15c      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470000 	.word	0x42470000
 8002bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ea      	bne.n	8002b9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8097 	beq.w	8002d00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b83      	ldr	r3, [pc, #524]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	4b7f      	ldr	r3, [pc, #508]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a7e      	ldr	r2, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fc09 	bl	8001430 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe fc05 	bl	8001430 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e118      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b6c      	ldr	r3, [pc, #432]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x31e>
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x340>
 8002c5e:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a60      	ldr	r2, [pc, #384]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c78:	4b5a      	ldr	r3, [pc, #360]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a59      	ldr	r2, [pc, #356]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	4b57      	ldr	r3, [pc, #348]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a56      	ldr	r2, [pc, #344]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe fbca 	bl	8001430 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fbc6 	bl	8001430 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0d7      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ee      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x368>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fbb4 	bl	8001430 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fbb0 	bl	8001430 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0c1      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce2:	4b40      	ldr	r3, [pc, #256]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ee      	bne.n	8002ccc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80ad 	beq.w	8002e64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d060      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d145      	bne.n	8002daa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fb84 	bl	8001430 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fb80 	bl	8001430 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e093      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	071b      	lsls	r3, r3, #28
 8002d76:	491b      	ldr	r1, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fb55 	bl	8001430 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fb51 	bl	8001430 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e064      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x452>
 8002da8:	e05c      	b.n	8002e64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fb3e 	bl	8001430 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fb3a 	bl	8001430 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e04d      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x480>
 8002dd6:	e045      	b.n	8002e64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e040      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <HAL_RCC_OscConfig+0x538>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d129      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d122      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d119      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f938 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fb9a 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e04e      	b.n	8002fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a23      	ldr	r2, [pc, #140]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f56:	d01d      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <HAL_TIM_Base_Start_IT+0xd8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d010      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	e007      	b.n	8002fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40010400 	.word	0x40010400
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40001800 	.word	0x40001800

08002ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e041      	b.n	800308a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f839 	bl	8003092 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fada 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01b      	beq.n	800310a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0202 	mvn.w	r2, #2
 80030da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa5c 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80030f6:	e005      	b.n	8003104 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fa4e 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa5f 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01b      	beq.n	8003156 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f06f 0204 	mvn.w	r2, #4
 8003126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fa36 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 8003142:	e005      	b.n	8003150 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fa28 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa39 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01b      	beq.n	80031a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0208 	mvn.w	r2, #8
 8003172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2204      	movs	r2, #4
 8003178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa10 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 800318e:	e005      	b.n	800319c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fa02 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa13 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01b      	beq.n	80031ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0210 	mvn.w	r2, #16
 80031be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2208      	movs	r2, #8
 80031c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9ea 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80031da:	e005      	b.n	80031e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f9dc 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9ed 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0201 	mvn.w	r2, #1
 800320a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd fd7f 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00c      	beq.n	8003236 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fd57 	bl	8003ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f9be 	bl	80035d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0220 	mvn.w	r2, #32
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fd29 	bl	8003cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0ae      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f200 809f 	bhi.w	80033f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032b6:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080033f5 	.word	0x080033f5
 80032c4:	080033f5 	.word	0x080033f5
 80032c8:	080033f5 	.word	0x080033f5
 80032cc:	08003331 	.word	0x08003331
 80032d0:	080033f5 	.word	0x080033f5
 80032d4:	080033f5 	.word	0x080033f5
 80032d8:	080033f5 	.word	0x080033f5
 80032dc:	08003373 	.word	0x08003373
 80032e0:	080033f5 	.word	0x080033f5
 80032e4:	080033f5 	.word	0x080033f5
 80032e8:	080033f5 	.word	0x080033f5
 80032ec:	080033b3 	.word	0x080033b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fa24 	bl	8003744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
      break;
 800332e:	e064      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa74 	bl	8003824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	021a      	lsls	r2, r3, #8
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	619a      	str	r2, [r3, #24]
      break;
 8003370:	e043      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fac9 	bl	8003910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      break;
 80033b0:	e023      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fb1d 	bl	80039f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	61da      	str	r2, [r3, #28]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
      break;
 80033f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIM_ConfigClockSource+0x1c>
 8003424:	2302      	movs	r3, #2
 8003426:	e0b4      	b.n	8003592 <HAL_TIM_ConfigClockSource+0x186>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800344e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003460:	d03e      	beq.n	80034e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003466:	f200 8087 	bhi.w	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800346e:	f000 8086 	beq.w	800357e <HAL_TIM_ConfigClockSource+0x172>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003476:	d87f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b70      	cmp	r3, #112	@ 0x70
 800347a:	d01a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xa6>
 800347c:	2b70      	cmp	r3, #112	@ 0x70
 800347e:	d87b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b60      	cmp	r3, #96	@ 0x60
 8003482:	d050      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x11a>
 8003484:	2b60      	cmp	r3, #96	@ 0x60
 8003486:	d877      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b50      	cmp	r3, #80	@ 0x50
 800348a:	d03c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xfa>
 800348c:	2b50      	cmp	r3, #80	@ 0x50
 800348e:	d873      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b40      	cmp	r3, #64	@ 0x40
 8003492:	d058      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x13a>
 8003494:	2b40      	cmp	r3, #64	@ 0x40
 8003496:	d86f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b30      	cmp	r3, #48	@ 0x30
 800349a:	d064      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 800349c:	2b30      	cmp	r3, #48	@ 0x30
 800349e:	d86b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d060      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d867      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d05a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	e062      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034c2:	f000 fb69 	bl	8003b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	609a      	str	r2, [r3, #8]
      break;
 80034de:	e04f      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f0:	f000 fb52 	bl	8003b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003502:	609a      	str	r2, [r3, #8]
      break;
 8003504:	e03c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fac6 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2150      	movs	r1, #80	@ 0x50
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fb1f 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 8003524:	e02c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fae5 	bl	8003b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2160      	movs	r1, #96	@ 0x60
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fb0f 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 8003544:	e01c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	461a      	mov	r2, r3
 8003554:	f000 faa6 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2140      	movs	r1, #64	@ 0x40
 800355e:	4618      	mov	r0, r3
 8003560:	f000 faff 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 8003564:	e00c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 faf6 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 8003576:	e003      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e000      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800357e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a46      	ldr	r2, [pc, #280]	@ (8003718 <TIM_Base_SetConfig+0x12c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360a:	d00f      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a43      	ldr	r2, [pc, #268]	@ (800371c <TIM_Base_SetConfig+0x130>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a42      	ldr	r2, [pc, #264]	@ (8003720 <TIM_Base_SetConfig+0x134>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a41      	ldr	r2, [pc, #260]	@ (8003724 <TIM_Base_SetConfig+0x138>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a40      	ldr	r2, [pc, #256]	@ (8003728 <TIM_Base_SetConfig+0x13c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a35      	ldr	r2, [pc, #212]	@ (8003718 <TIM_Base_SetConfig+0x12c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800364c:	d027      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a32      	ldr	r2, [pc, #200]	@ (800371c <TIM_Base_SetConfig+0x130>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d023      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a31      	ldr	r2, [pc, #196]	@ (8003720 <TIM_Base_SetConfig+0x134>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a30      	ldr	r2, [pc, #192]	@ (8003724 <TIM_Base_SetConfig+0x138>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2f      	ldr	r2, [pc, #188]	@ (8003728 <TIM_Base_SetConfig+0x13c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d017      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <TIM_Base_SetConfig+0x140>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <TIM_Base_SetConfig+0x144>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2c      	ldr	r2, [pc, #176]	@ (8003734 <TIM_Base_SetConfig+0x148>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a2b      	ldr	r2, [pc, #172]	@ (8003738 <TIM_Base_SetConfig+0x14c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2a      	ldr	r2, [pc, #168]	@ (800373c <TIM_Base_SetConfig+0x150>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a29      	ldr	r2, [pc, #164]	@ (8003740 <TIM_Base_SetConfig+0x154>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a10      	ldr	r2, [pc, #64]	@ (8003718 <TIM_Base_SetConfig+0x12c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <TIM_Base_SetConfig+0x13c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	611a      	str	r2, [r3, #16]
  }
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40010000 	.word	0x40010000
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40010400 	.word	0x40010400
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800
 8003738:	40001800 	.word	0x40001800
 800373c:	40001c00 	.word	0x40001c00
 8003740:	40002000 	.word	0x40002000

08003744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0201 	bic.w	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0302 	bic.w	r3, r3, #2
 800378c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a20      	ldr	r2, [pc, #128]	@ (800381c <TIM_OC1_SetConfig+0xd8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <TIM_OC1_SetConfig+0x64>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003820 <TIM_OC1_SetConfig+0xdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d10c      	bne.n	80037c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0308 	bic.w	r3, r3, #8
 80037ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a15      	ldr	r2, [pc, #84]	@ (800381c <TIM_OC1_SetConfig+0xd8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_OC1_SetConfig+0x8e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a14      	ldr	r2, [pc, #80]	@ (8003820 <TIM_OC1_SetConfig+0xdc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d111      	bne.n	80037f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	621a      	str	r2, [r3, #32]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40010000 	.word	0x40010000
 8003820:	40010400 	.word	0x40010400

08003824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 0210 	bic.w	r2, r3, #16
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0320 	bic.w	r3, r3, #32
 800386e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a22      	ldr	r2, [pc, #136]	@ (8003908 <TIM_OC2_SetConfig+0xe4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_OC2_SetConfig+0x68>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a21      	ldr	r2, [pc, #132]	@ (800390c <TIM_OC2_SetConfig+0xe8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10d      	bne.n	80038a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a17      	ldr	r2, [pc, #92]	@ (8003908 <TIM_OC2_SetConfig+0xe4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC2_SetConfig+0x94>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a16      	ldr	r2, [pc, #88]	@ (800390c <TIM_OC2_SetConfig+0xe8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d113      	bne.n	80038e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40010400 	.word	0x40010400

08003910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a21      	ldr	r2, [pc, #132]	@ (80039f0 <TIM_OC3_SetConfig+0xe0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <TIM_OC3_SetConfig+0x66>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a20      	ldr	r2, [pc, #128]	@ (80039f4 <TIM_OC3_SetConfig+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <TIM_OC3_SetConfig+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_OC3_SetConfig+0x92>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <TIM_OC3_SetConfig+0xe4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	621a      	str	r2, [r3, #32]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40010400 	.word	0x40010400

080039f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	031b      	lsls	r3, r3, #12
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a12      	ldr	r2, [pc, #72]	@ (8003a9c <TIM_OC4_SetConfig+0xa4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC4_SetConfig+0x68>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <TIM_OC4_SetConfig+0xa8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d109      	bne.n	8003a74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0201 	bic.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 030a 	bic.w	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 0210 	bic.w	r2, r3, #16
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	031b      	lsls	r3, r3, #12
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f043 0307 	orr.w	r3, r3, #7
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e05a      	b.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	@ (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d01d      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a15      	ldr	r2, [pc, #84]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10c      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40001800 	.word	0x40001800

08003cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e042      	b.n	8003d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd faa2 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	@ 0x24
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fdff 	bl	8004940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	@ 0x28
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d175      	bne.n	8003ea4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_UART_Transmit+0x2c>
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e06e      	b.n	8003ea6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	@ 0x21
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fb2b 	bl	8001430 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x6c>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e0c:	e02e      	b.n	8003e6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2180      	movs	r1, #128	@ 0x80
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fb9b 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e03a      	b.n	8003ea6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1cb      	bne.n	8003e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	@ 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb67 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08a      	sub	sp, #40	@ 0x28
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	f040 8081 	bne.w	8003fd2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Receive+0x2e>
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e079      	b.n	8003fd4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2222      	movs	r2, #34	@ 0x22
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fa9c 	bl	8001430 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0e:	d108      	bne.n	8003f22 <HAL_UART_Receive+0x74>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e003      	b.n	8003f2a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f2a:	e047      	b.n	8003fbc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2120      	movs	r1, #32
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fb0c 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e042      	b.n	8003fd4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10c      	bne.n	8003f6e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3302      	adds	r3, #2
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	e01f      	b.n	8003fae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f76:	d007      	beq.n	8003f88 <HAL_UART_Receive+0xda>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <HAL_UART_Receive+0xe8>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e008      	b.n	8003fa8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1b2      	bne.n	8003f2c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800401a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fbc2 	bl	80047c4 <UART_Receive_IT>
      return;
 8004040:	e25b      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80de 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
 800404c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80d1 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
 8004096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
 80040ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d011      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 81f2 	beq.w	80044f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fb4d 	bl	80047c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_UART_IRQHandler+0x17a>
 800414e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04f      	beq.n	80041f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa55 	bl	8004606 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d141      	bne.n	80041ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004196:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800419a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d9      	bne.n	800416a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d013      	beq.n	80041e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4a7e      	ldr	r2, [pc, #504]	@ (80043bc <HAL_UART_IRQHandler+0x3e0>)
 80041c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd fd24 	bl	8001c18 <HAL_DMA_Abort_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e0:	4610      	mov	r0, r2
 80041e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00e      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f99e 	bl	8004528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e00a      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f99a 	bl	8004528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e006      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f996 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004202:	e175      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	bf00      	nop
    return;
 8004206:	e173      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	f040 814f 	bne.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8148 	beq.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8141 	beq.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	f040 80b6 	bne.w	80043c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8145 	beq.w	80044f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004272:	429a      	cmp	r2, r3
 8004274:	f080 813e 	bcs.w	80044f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800427e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	f000 8088 	beq.w	800439e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1d9      	bne.n	800428e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e1      	bne.n	80042da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800433c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800436c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004380:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004382:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fbcd 	bl	8001b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8c1 	bl	800453c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ba:	e09b      	b.n	80044f4 <HAL_UART_IRQHandler+0x518>
 80043bc:	080046cd 	.word	0x080046cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 808e 	beq.w	80044f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8089 	beq.w	80044f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800440a:	647a      	str	r2, [r7, #68]	@ 0x44
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	623b      	str	r3, [r7, #32]
   return(result);
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004442:	633a      	str	r2, [r7, #48]	@ 0x30
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e3      	bne.n	800441e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	60fb      	str	r3, [r7, #12]
   return(result);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0310 	bic.w	r3, r3, #16
 800447a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004488:	61fa      	str	r2, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	617b      	str	r3, [r7, #20]
   return(result);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e3      	bne.n	8004464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f847 	bl	800453c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ae:	e023      	b.n	80044f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_UART_IRQHandler+0x4f4>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f913 	bl	80046f4 <UART_Transmit_IT>
    return;
 80044ce:	e014      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <HAL_UART_IRQHandler+0x51e>
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f953 	bl	8004794 <UART_EndTransmit_IT>
    return;
 80044ee:	e004      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
    return;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
      return;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
      return;
 80044f8:	bf00      	nop
  }
}
 80044fa:	37e8      	adds	r7, #232	@ 0xe8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004564:	e03b      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800456c:	d037      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fc ff5f 	bl	8001430 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <UART_WaitOnFlagUntilTimeout+0x30>
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e03a      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d023      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	d020      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d01d      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d116      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f81d 	bl	8004606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2208      	movs	r2, #8
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e00f      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d0b4      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004606:	b480      	push	{r7}
 8004608:	b095      	sub	sp, #84	@ 0x54
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800462e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	61fb      	str	r3, [r7, #28]
   return(result);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3314      	adds	r3, #20
 8004660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	2b01      	cmp	r3, #1
 800467c:	d119      	bne.n	80046b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60bb      	str	r3, [r7, #8]
   return(result);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	647b      	str	r3, [r7, #68]	@ 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800469e:	61ba      	str	r2, [r7, #24]
 80046a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e5      	bne.n	800467e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046c0:	bf00      	nop
 80046c2:	3754      	adds	r7, #84	@ 0x54
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff1e 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b21      	cmp	r3, #33	@ 0x21
 8004706:	d13e      	bne.n	8004786 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004710:	d114      	bne.n	800473c <UART_Transmit_IT+0x48>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d110      	bne.n	800473c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	621a      	str	r2, [r3, #32]
 800473a:	e008      	b.n	800474e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	1c59      	adds	r1, r3, #1
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6211      	str	r1, [r2, #32]
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29b      	uxth	r3, r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4619      	mov	r1, r3
 800475c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004770:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004780:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fea3 	bl	8004500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	@ 0x30
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b22      	cmp	r3, #34	@ 0x22
 80047d6:	f040 80ae 	bne.w	8004936 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e2:	d117      	bne.n	8004814 <UART_Receive_IT+0x50>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d113      	bne.n	8004814 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	b29a      	uxth	r2, r3
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	629a      	str	r2, [r3, #40]	@ 0x28
 8004812:	e026      	b.n	8004862 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004826:	d007      	beq.n	8004838 <UART_Receive_IT+0x74>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <UART_Receive_IT+0x82>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e008      	b.n	8004858 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004852:	b2da      	uxtb	r2, r3
 8004854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004856:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29b      	uxth	r3, r3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4619      	mov	r1, r3
 8004870:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004872:	2b00      	cmp	r3, #0
 8004874:	d15d      	bne.n	8004932 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0220 	bic.w	r2, r2, #32
 8004884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004894:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d135      	bne.n	8004928 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	613b      	str	r3, [r7, #16]
   return(result);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f023 0310 	bic.w	r3, r3, #16
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e2:	623a      	str	r2, [r7, #32]
 80048e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	69f9      	ldr	r1, [r7, #28]
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b10      	cmp	r3, #16
 8004902:	d10a      	bne.n	800491a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fe0b 	bl	800453c <HAL_UARTEx_RxEventCallback>
 8004926:	e002      	b.n	800492e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fdf3 	bl	8004514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e002      	b.n	8004938 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e000      	b.n	8004938 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004936:	2302      	movs	r3, #2
  }
}
 8004938:	4618      	mov	r0, r3
 800493a:	3730      	adds	r7, #48	@ 0x30
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004944:	b0c0      	sub	sp, #256	@ 0x100
 8004946:	af00      	add	r7, sp, #0
 8004948:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	68d9      	ldr	r1, [r3, #12]
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	ea40 0301 	orr.w	r3, r0, r1
 8004968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	431a      	orrs	r2, r3
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	431a      	orrs	r2, r3
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004998:	f021 010c 	bic.w	r1, r1, #12
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049a6:	430b      	orrs	r3, r1
 80049a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	6999      	ldr	r1, [r3, #24]
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	ea40 0301 	orr.w	r3, r0, r1
 80049c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b8f      	ldr	r3, [pc, #572]	@ (8004c0c <UART_SetConfig+0x2cc>)
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d005      	beq.n	80049e0 <UART_SetConfig+0xa0>
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b8d      	ldr	r3, [pc, #564]	@ (8004c10 <UART_SetConfig+0x2d0>)
 80049dc:	429a      	cmp	r2, r3
 80049de:	d104      	bne.n	80049ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7fd fd34 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 80049e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049e8:	e003      	b.n	80049f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ea:	f7fd fd1b 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 80049ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fc:	f040 810c 	bne.w	8004c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	1891      	adds	r1, r2, r2
 8004a18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a22:	4621      	mov	r1, r4
 8004a24:	eb12 0801 	adds.w	r8, r2, r1
 8004a28:	4629      	mov	r1, r5
 8004a2a:	eb43 0901 	adc.w	r9, r3, r1
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a42:	4690      	mov	r8, r2
 8004a44:	4699      	mov	r9, r3
 8004a46:	4623      	mov	r3, r4
 8004a48:	eb18 0303 	adds.w	r3, r8, r3
 8004a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a50:	462b      	mov	r3, r5
 8004a52:	eb49 0303 	adc.w	r3, r9, r3
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a6e:	460b      	mov	r3, r1
 8004a70:	18db      	adds	r3, r3, r3
 8004a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a74:	4613      	mov	r3, r2
 8004a76:	eb42 0303 	adc.w	r3, r2, r3
 8004a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a84:	f7fb fc1c 	bl	80002c0 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4b61      	ldr	r3, [pc, #388]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	011c      	lsls	r4, r3, #4
 8004a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	1891      	adds	r1, r2, r2
 8004aae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ab0:	415b      	adcs	r3, r3
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ab8:	4641      	mov	r1, r8
 8004aba:	eb12 0a01 	adds.w	sl, r2, r1
 8004abe:	4649      	mov	r1, r9
 8004ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad8:	4692      	mov	sl, r2
 8004ada:	469b      	mov	fp, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	eb1a 0303 	adds.w	r3, sl, r3
 8004ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8004aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004afc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b04:	460b      	mov	r3, r1
 8004b06:	18db      	adds	r3, r3, r3
 8004b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b1a:	f7fb fbd1 	bl	80002c0 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004b26:	fba3 2301 	umull	r2, r3, r3, r1
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2264      	movs	r2, #100	@ 0x64
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	1acb      	subs	r3, r1, r3
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b3a:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b48:	441c      	add	r4, r3
 8004b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	1891      	adds	r1, r2, r2
 8004b62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b64:	415b      	adcs	r3, r3
 8004b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	1851      	adds	r1, r2, r1
 8004b70:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b72:	4649      	mov	r1, r9
 8004b74:	414b      	adcs	r3, r1
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b84:	4659      	mov	r1, fp
 8004b86:	00cb      	lsls	r3, r1, #3
 8004b88:	4651      	mov	r1, sl
 8004b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8e:	4651      	mov	r1, sl
 8004b90:	00ca      	lsls	r2, r1, #3
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	4642      	mov	r2, r8
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	18db      	adds	r3, r3, r3
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bd6:	f7fb fb73 	bl	80002c0 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	@ 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3332      	adds	r3, #50	@ 0x32
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <UART_SetConfig+0x2d4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 0207 	and.w	r2, r3, #7
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4422      	add	r2, r4
 8004c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c08:	e106      	b.n	8004e18 <UART_SetConfig+0x4d8>
 8004c0a:	bf00      	nop
 8004c0c:	40011000 	.word	0x40011000
 8004c10:	40011400 	.word	0x40011400
 8004c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	6239      	str	r1, [r7, #32]
 8004c32:	415b      	adcs	r3, r3
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	1854      	adds	r4, r2, r1
 8004c3e:	4649      	mov	r1, r9
 8004c40:	eb43 0501 	adc.w	r5, r3, r1
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	00eb      	lsls	r3, r5, #3
 8004c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c52:	00e2      	lsls	r2, r4, #3
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	4643      	mov	r3, r8
 8004c5a:	18e3      	adds	r3, r4, r3
 8004c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c60:	464b      	mov	r3, r9
 8004c62:	eb45 0303 	adc.w	r3, r5, r3
 8004c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c86:	4629      	mov	r1, r5
 8004c88:	008b      	lsls	r3, r1, #2
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c90:	4621      	mov	r1, r4
 8004c92:	008a      	lsls	r2, r1, #2
 8004c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c98:	f7fb fb12 	bl	80002c0 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4b60      	ldr	r3, [pc, #384]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	011c      	lsls	r4, r3, #4
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	61b9      	str	r1, [r7, #24]
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6139      	str	r1, [r7, #16]
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d24:	4649      	mov	r1, r9
 8004d26:	008b      	lsls	r3, r1, #2
 8004d28:	4641      	mov	r1, r8
 8004d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2e:	4641      	mov	r1, r8
 8004d30:	008a      	lsls	r2, r1, #2
 8004d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d36:	f7fb fac3 	bl	80002c0 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4b38      	ldr	r3, [pc, #224]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004d42:	fba3 2301 	umull	r2, r3, r3, r1
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2264      	movs	r2, #100	@ 0x64
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	1acb      	subs	r3, r1, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	@ 0x32
 8004d54:	4a33      	ldr	r2, [pc, #204]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d60:	441c      	add	r4, r3
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d70:	4642      	mov	r2, r8
 8004d72:	464b      	mov	r3, r9
 8004d74:	1891      	adds	r1, r2, r2
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d80:	4641      	mov	r1, r8
 8004d82:	1851      	adds	r1, r2, r1
 8004d84:	6039      	str	r1, [r7, #0]
 8004d86:	4649      	mov	r1, r9
 8004d88:	414b      	adcs	r3, r1
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d98:	4659      	mov	r1, fp
 8004d9a:	00cb      	lsls	r3, r1, #3
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da2:	4651      	mov	r1, sl
 8004da4:	00ca      	lsls	r2, r1, #3
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	4642      	mov	r2, r8
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db2:	464b      	mov	r3, r9
 8004db4:	460a      	mov	r2, r1
 8004db6:	eb42 0303 	adc.w	r3, r2, r3
 8004dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	4641      	mov	r1, r8
 8004dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dde:	4641      	mov	r1, r8
 8004de0:	008a      	lsls	r2, r1, #2
 8004de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004de6:	f7fb fa6b 	bl	80002c0 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	@ 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	3332      	adds	r3, #50	@ 0x32
 8004e02:	4a08      	ldr	r2, [pc, #32]	@ (8004e24 <UART_SetConfig+0x4e4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 020f 	and.w	r2, r3, #15
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4422      	add	r2, r4
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e24:	51eb851f 	.word	0x51eb851f

08004e28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <SysTick_Handler+0x1c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e30:	f000 f990 	bl	8005154 <xTaskGetSchedulerState>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d001      	beq.n	8004e3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e3a:	f000 f9f5 	bl	8005228 <xPortSysTickHandler>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	e000e010 	.word	0xe000e010

08004e48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6892      	ldr	r2, [r2, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6852      	ldr	r2, [r2, #4]
 8004eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d103      	bne.n	8004ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1e5a      	subs	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eee:	4b4f      	ldr	r3, [pc, #316]	@ (800502c <xTaskIncrementTick+0x148>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 8090 	bne.w	8005018 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8005030 <xTaskIncrementTick+0x14c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f00:	4a4b      	ldr	r2, [pc, #300]	@ (8005030 <xTaskIncrementTick+0x14c>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d121      	bne.n	8004f50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f0c:	4b49      	ldr	r3, [pc, #292]	@ (8005034 <xTaskIncrementTick+0x150>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <xTaskIncrementTick+0x46>
 8004f2e:	4b41      	ldr	r3, [pc, #260]	@ (8005034 <xTaskIncrementTick+0x150>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	4b40      	ldr	r3, [pc, #256]	@ (8005038 <xTaskIncrementTick+0x154>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3e      	ldr	r2, [pc, #248]	@ (8005034 <xTaskIncrementTick+0x150>)
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005038 <xTaskIncrementTick+0x154>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b3e      	ldr	r3, [pc, #248]	@ (800503c <xTaskIncrementTick+0x158>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3301      	adds	r3, #1
 8004f48:	4a3c      	ldr	r2, [pc, #240]	@ (800503c <xTaskIncrementTick+0x158>)
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	f000 f8e2 	bl	8005114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f50:	4b3b      	ldr	r3, [pc, #236]	@ (8005040 <xTaskIncrementTick+0x15c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d349      	bcc.n	8004fee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5a:	4b36      	ldr	r3, [pc, #216]	@ (8005034 <xTaskIncrementTick+0x150>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f64:	4b36      	ldr	r3, [pc, #216]	@ (8005040 <xTaskIncrementTick+0x15c>)
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f6a:	601a      	str	r2, [r3, #0]
					break;
 8004f6c:	e03f      	b.n	8004fee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6e:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <xTaskIncrementTick+0x150>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d203      	bcs.n	8004f8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f86:	4a2e      	ldr	r2, [pc, #184]	@ (8005040 <xTaskIncrementTick+0x15c>)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f8c:	e02f      	b.n	8004fee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ff7c 	bl	8004e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff73 	bl	8004e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fae:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <xTaskIncrementTick+0x160>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <xTaskIncrementTick+0xda>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	4a22      	ldr	r2, [pc, #136]	@ (8005044 <xTaskIncrementTick+0x160>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <xTaskIncrementTick+0x164>)
 8004fcc:	441a      	add	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff ff37 	bl	8004e48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fde:	4b1b      	ldr	r3, [pc, #108]	@ (800504c <xTaskIncrementTick+0x168>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d3b8      	bcc.n	8004f5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fec:	e7b5      	b.n	8004f5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fee:	4b17      	ldr	r3, [pc, #92]	@ (800504c <xTaskIncrementTick+0x168>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff4:	4914      	ldr	r1, [pc, #80]	@ (8005048 <xTaskIncrementTick+0x164>)
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d901      	bls.n	800500a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005006:	2301      	movs	r3, #1
 8005008:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800500a:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <xTaskIncrementTick+0x16c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e004      	b.n	8005022 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005018:	4b0e      	ldr	r3, [pc, #56]	@ (8005054 <xTaskIncrementTick+0x170>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	4a0d      	ldr	r2, [pc, #52]	@ (8005054 <xTaskIncrementTick+0x170>)
 8005020:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005022:	697b      	ldr	r3, [r7, #20]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	200006d0 	.word	0x200006d0
 8005030:	200006b4 	.word	0x200006b4
 8005034:	200006ac 	.word	0x200006ac
 8005038:	200006b0 	.word	0x200006b0
 800503c:	200006c8 	.word	0x200006c8
 8005040:	200006cc 	.word	0x200006cc
 8005044:	200006b8 	.word	0x200006b8
 8005048:	2000024c 	.word	0x2000024c
 800504c:	20000248 	.word	0x20000248
 8005050:	200006c4 	.word	0x200006c4
 8005054:	200006c0 	.word	0x200006c0

08005058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800505e:	4b28      	ldr	r3, [pc, #160]	@ (8005100 <vTaskSwitchContext+0xa8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005066:	4b27      	ldr	r3, [pc, #156]	@ (8005104 <vTaskSwitchContext+0xac>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800506c:	e042      	b.n	80050f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800506e:	4b25      	ldr	r3, [pc, #148]	@ (8005104 <vTaskSwitchContext+0xac>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005074:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <vTaskSwitchContext+0xb0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e011      	b.n	80050a0 <vTaskSwitchContext+0x48>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <vTaskSwitchContext+0x42>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <vTaskSwitchContext+0x3e>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b01      	subs	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	491a      	ldr	r1, [pc, #104]	@ (800510c <vTaskSwitchContext+0xb4>)
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0e3      	beq.n	800507c <vTaskSwitchContext+0x24>
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4a13      	ldr	r2, [pc, #76]	@ (800510c <vTaskSwitchContext+0xb4>)
 80050c0:	4413      	add	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	3308      	adds	r3, #8
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d104      	bne.n	80050e4 <vTaskSwitchContext+0x8c>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	605a      	str	r2, [r3, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4a09      	ldr	r2, [pc, #36]	@ (8005110 <vTaskSwitchContext+0xb8>)
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4a06      	ldr	r2, [pc, #24]	@ (8005108 <vTaskSwitchContext+0xb0>)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6013      	str	r3, [r2, #0]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	200006d0 	.word	0x200006d0
 8005104:	200006c4 	.word	0x200006c4
 8005108:	200006b8 	.word	0x200006b8
 800510c:	2000024c 	.word	0x2000024c
 8005110:	20000248 	.word	0x20000248

08005114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <prvResetNextTaskUnblockTime+0x38>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <prvResetNextTaskUnblockTime+0x3c>)
 8005126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800512a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800512c:	e008      	b.n	8005140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <prvResetNextTaskUnblockTime+0x38>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a04      	ldr	r2, [pc, #16]	@ (8005150 <prvResetNextTaskUnblockTime+0x3c>)
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	200006ac 	.word	0x200006ac
 8005150:	200006cc 	.word	0x200006cc

08005154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800515a:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <xTaskGetSchedulerState+0x34>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005162:	2301      	movs	r3, #1
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	e008      	b.n	800517a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005168:	4b08      	ldr	r3, [pc, #32]	@ (800518c <xTaskGetSchedulerState+0x38>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005170:	2302      	movs	r3, #2
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	e001      	b.n	800517a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800517a:	687b      	ldr	r3, [r7, #4]
	}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	200006bc 	.word	0x200006bc
 800518c:	200006d0 	.word	0x200006d0

08005190 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005190:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <pxCurrentTCBConst2>)
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	6808      	ldr	r0, [r1, #0]
 8005196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519a:	f380 8809 	msr	PSP, r0
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f04f 0000 	mov.w	r0, #0
 80051a6:	f380 8811 	msr	BASEPRI, r0
 80051aa:	4770      	bx	lr
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst2>:
 80051b0:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
	...

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f01e 0f10 	tst.w	lr, #16
 80051d0:	bf08      	it	eq
 80051d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051e4:	f380 8811 	msr	BASEPRI, r0
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f7ff ff32 	bl	8005058 <vTaskSwitchContext>
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f380 8811 	msr	BASEPRI, r0
 80051fc:	bc09      	pop	{r0, r3}
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005206:	f01e 0f10 	tst.w	lr, #16
 800520a:	bf08      	it	eq
 800520c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005210:	f380 8809 	msr	PSP, r0
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst>:
 8005220:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005242:	f7ff fe4f 	bl	8004ee4 <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <xPortSysTickHandler+0x40>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800525e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <siprintf>:
 800526c:	b40e      	push	{r1, r2, r3}
 800526e:	b500      	push	{lr}
 8005270:	b09c      	sub	sp, #112	@ 0x70
 8005272:	ab1d      	add	r3, sp, #116	@ 0x74
 8005274:	9002      	str	r0, [sp, #8]
 8005276:	9006      	str	r0, [sp, #24]
 8005278:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800527c:	4809      	ldr	r0, [pc, #36]	@ (80052a4 <siprintf+0x38>)
 800527e:	9107      	str	r1, [sp, #28]
 8005280:	9104      	str	r1, [sp, #16]
 8005282:	4909      	ldr	r1, [pc, #36]	@ (80052a8 <siprintf+0x3c>)
 8005284:	f853 2b04 	ldr.w	r2, [r3], #4
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	a902      	add	r1, sp, #8
 8005290:	f000 f9f2 	bl	8005678 <_svfiprintf_r>
 8005294:	9b02      	ldr	r3, [sp, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	b01c      	add	sp, #112	@ 0x70
 800529c:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a0:	b003      	add	sp, #12
 80052a2:	4770      	bx	lr
 80052a4:	20000018 	.word	0x20000018
 80052a8:	ffff0208 	.word	0xffff0208

080052ac <std>:
 80052ac:	2300      	movs	r3, #0
 80052ae:	b510      	push	{r4, lr}
 80052b0:	4604      	mov	r4, r0
 80052b2:	e9c0 3300 	strd	r3, r3, [r0]
 80052b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ba:	6083      	str	r3, [r0, #8]
 80052bc:	8181      	strh	r1, [r0, #12]
 80052be:	6643      	str	r3, [r0, #100]	@ 0x64
 80052c0:	81c2      	strh	r2, [r0, #14]
 80052c2:	6183      	str	r3, [r0, #24]
 80052c4:	4619      	mov	r1, r3
 80052c6:	2208      	movs	r2, #8
 80052c8:	305c      	adds	r0, #92	@ 0x5c
 80052ca:	f000 f937 	bl	800553c <memset>
 80052ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <std+0x58>)
 80052d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <std+0x5c>)
 80052d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <std+0x60>)
 80052d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <std+0x64>)
 80052dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80052de:	4b0d      	ldr	r3, [pc, #52]	@ (8005314 <std+0x68>)
 80052e0:	6224      	str	r4, [r4, #32]
 80052e2:	429c      	cmp	r4, r3
 80052e4:	d006      	beq.n	80052f4 <std+0x48>
 80052e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052ea:	4294      	cmp	r4, r2
 80052ec:	d002      	beq.n	80052f4 <std+0x48>
 80052ee:	33d0      	adds	r3, #208	@ 0xd0
 80052f0:	429c      	cmp	r4, r3
 80052f2:	d105      	bne.n	8005300 <std+0x54>
 80052f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fc:	f000 b950 	b.w	80055a0 <__retarget_lock_init_recursive>
 8005300:	bd10      	pop	{r4, pc}
 8005302:	bf00      	nop
 8005304:	080060c5 	.word	0x080060c5
 8005308:	080060e7 	.word	0x080060e7
 800530c:	0800611f 	.word	0x0800611f
 8005310:	08006143 	.word	0x08006143
 8005314:	200006d4 	.word	0x200006d4

08005318 <stdio_exit_handler>:
 8005318:	4a02      	ldr	r2, [pc, #8]	@ (8005324 <stdio_exit_handler+0xc>)
 800531a:	4903      	ldr	r1, [pc, #12]	@ (8005328 <stdio_exit_handler+0x10>)
 800531c:	4803      	ldr	r0, [pc, #12]	@ (800532c <stdio_exit_handler+0x14>)
 800531e:	f000 b869 	b.w	80053f4 <_fwalk_sglue>
 8005322:	bf00      	nop
 8005324:	2000000c 	.word	0x2000000c
 8005328:	0800605d 	.word	0x0800605d
 800532c:	2000001c 	.word	0x2000001c

08005330 <cleanup_stdio>:
 8005330:	6841      	ldr	r1, [r0, #4]
 8005332:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <cleanup_stdio+0x34>)
 8005334:	4299      	cmp	r1, r3
 8005336:	b510      	push	{r4, lr}
 8005338:	4604      	mov	r4, r0
 800533a:	d001      	beq.n	8005340 <cleanup_stdio+0x10>
 800533c:	f000 fe8e 	bl	800605c <_fflush_r>
 8005340:	68a1      	ldr	r1, [r4, #8]
 8005342:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <cleanup_stdio+0x38>)
 8005344:	4299      	cmp	r1, r3
 8005346:	d002      	beq.n	800534e <cleanup_stdio+0x1e>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fe87 	bl	800605c <_fflush_r>
 800534e:	68e1      	ldr	r1, [r4, #12]
 8005350:	4b06      	ldr	r3, [pc, #24]	@ (800536c <cleanup_stdio+0x3c>)
 8005352:	4299      	cmp	r1, r3
 8005354:	d004      	beq.n	8005360 <cleanup_stdio+0x30>
 8005356:	4620      	mov	r0, r4
 8005358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535c:	f000 be7e 	b.w	800605c <_fflush_r>
 8005360:	bd10      	pop	{r4, pc}
 8005362:	bf00      	nop
 8005364:	200006d4 	.word	0x200006d4
 8005368:	2000073c 	.word	0x2000073c
 800536c:	200007a4 	.word	0x200007a4

08005370 <global_stdio_init.part.0>:
 8005370:	b510      	push	{r4, lr}
 8005372:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <global_stdio_init.part.0+0x30>)
 8005374:	4c0b      	ldr	r4, [pc, #44]	@ (80053a4 <global_stdio_init.part.0+0x34>)
 8005376:	4a0c      	ldr	r2, [pc, #48]	@ (80053a8 <global_stdio_init.part.0+0x38>)
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	4620      	mov	r0, r4
 800537c:	2200      	movs	r2, #0
 800537e:	2104      	movs	r1, #4
 8005380:	f7ff ff94 	bl	80052ac <std>
 8005384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005388:	2201      	movs	r2, #1
 800538a:	2109      	movs	r1, #9
 800538c:	f7ff ff8e 	bl	80052ac <std>
 8005390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005394:	2202      	movs	r2, #2
 8005396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800539a:	2112      	movs	r1, #18
 800539c:	f7ff bf86 	b.w	80052ac <std>
 80053a0:	2000080c 	.word	0x2000080c
 80053a4:	200006d4 	.word	0x200006d4
 80053a8:	08005319 	.word	0x08005319

080053ac <__sfp_lock_acquire>:
 80053ac:	4801      	ldr	r0, [pc, #4]	@ (80053b4 <__sfp_lock_acquire+0x8>)
 80053ae:	f000 b8f8 	b.w	80055a2 <__retarget_lock_acquire_recursive>
 80053b2:	bf00      	nop
 80053b4:	20000811 	.word	0x20000811

080053b8 <__sfp_lock_release>:
 80053b8:	4801      	ldr	r0, [pc, #4]	@ (80053c0 <__sfp_lock_release+0x8>)
 80053ba:	f000 b8f3 	b.w	80055a4 <__retarget_lock_release_recursive>
 80053be:	bf00      	nop
 80053c0:	20000811 	.word	0x20000811

080053c4 <__sinit>:
 80053c4:	b510      	push	{r4, lr}
 80053c6:	4604      	mov	r4, r0
 80053c8:	f7ff fff0 	bl	80053ac <__sfp_lock_acquire>
 80053cc:	6a23      	ldr	r3, [r4, #32]
 80053ce:	b11b      	cbz	r3, 80053d8 <__sinit+0x14>
 80053d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d4:	f7ff bff0 	b.w	80053b8 <__sfp_lock_release>
 80053d8:	4b04      	ldr	r3, [pc, #16]	@ (80053ec <__sinit+0x28>)
 80053da:	6223      	str	r3, [r4, #32]
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <__sinit+0x2c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f5      	bne.n	80053d0 <__sinit+0xc>
 80053e4:	f7ff ffc4 	bl	8005370 <global_stdio_init.part.0>
 80053e8:	e7f2      	b.n	80053d0 <__sinit+0xc>
 80053ea:	bf00      	nop
 80053ec:	08005331 	.word	0x08005331
 80053f0:	2000080c 	.word	0x2000080c

080053f4 <_fwalk_sglue>:
 80053f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f8:	4607      	mov	r7, r0
 80053fa:	4688      	mov	r8, r1
 80053fc:	4614      	mov	r4, r2
 80053fe:	2600      	movs	r6, #0
 8005400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005404:	f1b9 0901 	subs.w	r9, r9, #1
 8005408:	d505      	bpl.n	8005416 <_fwalk_sglue+0x22>
 800540a:	6824      	ldr	r4, [r4, #0]
 800540c:	2c00      	cmp	r4, #0
 800540e:	d1f7      	bne.n	8005400 <_fwalk_sglue+0xc>
 8005410:	4630      	mov	r0, r6
 8005412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d907      	bls.n	800542c <_fwalk_sglue+0x38>
 800541c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005420:	3301      	adds	r3, #1
 8005422:	d003      	beq.n	800542c <_fwalk_sglue+0x38>
 8005424:	4629      	mov	r1, r5
 8005426:	4638      	mov	r0, r7
 8005428:	47c0      	blx	r8
 800542a:	4306      	orrs	r6, r0
 800542c:	3568      	adds	r5, #104	@ 0x68
 800542e:	e7e9      	b.n	8005404 <_fwalk_sglue+0x10>

08005430 <iprintf>:
 8005430:	b40f      	push	{r0, r1, r2, r3}
 8005432:	b507      	push	{r0, r1, r2, lr}
 8005434:	4906      	ldr	r1, [pc, #24]	@ (8005450 <iprintf+0x20>)
 8005436:	ab04      	add	r3, sp, #16
 8005438:	6808      	ldr	r0, [r1, #0]
 800543a:	f853 2b04 	ldr.w	r2, [r3], #4
 800543e:	6881      	ldr	r1, [r0, #8]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	f000 fa3f 	bl	80058c4 <_vfiprintf_r>
 8005446:	b003      	add	sp, #12
 8005448:	f85d eb04 	ldr.w	lr, [sp], #4
 800544c:	b004      	add	sp, #16
 800544e:	4770      	bx	lr
 8005450:	20000018 	.word	0x20000018

08005454 <_puts_r>:
 8005454:	6a03      	ldr	r3, [r0, #32]
 8005456:	b570      	push	{r4, r5, r6, lr}
 8005458:	6884      	ldr	r4, [r0, #8]
 800545a:	4605      	mov	r5, r0
 800545c:	460e      	mov	r6, r1
 800545e:	b90b      	cbnz	r3, 8005464 <_puts_r+0x10>
 8005460:	f7ff ffb0 	bl	80053c4 <__sinit>
 8005464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005466:	07db      	lsls	r3, r3, #31
 8005468:	d405      	bmi.n	8005476 <_puts_r+0x22>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	0598      	lsls	r0, r3, #22
 800546e:	d402      	bmi.n	8005476 <_puts_r+0x22>
 8005470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005472:	f000 f896 	bl	80055a2 <__retarget_lock_acquire_recursive>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	0719      	lsls	r1, r3, #28
 800547a:	d502      	bpl.n	8005482 <_puts_r+0x2e>
 800547c:	6923      	ldr	r3, [r4, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d135      	bne.n	80054ee <_puts_r+0x9a>
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	f000 fecd 	bl	8006224 <__swsetup_r>
 800548a:	b380      	cbz	r0, 80054ee <_puts_r+0x9a>
 800548c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005492:	07da      	lsls	r2, r3, #31
 8005494:	d405      	bmi.n	80054a2 <_puts_r+0x4e>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	059b      	lsls	r3, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_puts_r+0x4e>
 800549c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800549e:	f000 f881 	bl	80055a4 <__retarget_lock_release_recursive>
 80054a2:	4628      	mov	r0, r5
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da04      	bge.n	80054b4 <_puts_r+0x60>
 80054aa:	69a2      	ldr	r2, [r4, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	dc17      	bgt.n	80054e0 <_puts_r+0x8c>
 80054b0:	290a      	cmp	r1, #10
 80054b2:	d015      	beq.n	80054e0 <_puts_r+0x8c>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	7019      	strb	r1, [r3, #0]
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054c2:	3b01      	subs	r3, #1
 80054c4:	60a3      	str	r3, [r4, #8]
 80054c6:	2900      	cmp	r1, #0
 80054c8:	d1ed      	bne.n	80054a6 <_puts_r+0x52>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da11      	bge.n	80054f2 <_puts_r+0x9e>
 80054ce:	4622      	mov	r2, r4
 80054d0:	210a      	movs	r1, #10
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fe67 	bl	80061a6 <__swbuf_r>
 80054d8:	3001      	adds	r0, #1
 80054da:	d0d7      	beq.n	800548c <_puts_r+0x38>
 80054dc:	250a      	movs	r5, #10
 80054de:	e7d7      	b.n	8005490 <_puts_r+0x3c>
 80054e0:	4622      	mov	r2, r4
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fe5f 	bl	80061a6 <__swbuf_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d1e7      	bne.n	80054bc <_puts_r+0x68>
 80054ec:	e7ce      	b.n	800548c <_puts_r+0x38>
 80054ee:	3e01      	subs	r6, #1
 80054f0:	e7e4      	b.n	80054bc <_puts_r+0x68>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	220a      	movs	r2, #10
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e7ee      	b.n	80054dc <_puts_r+0x88>
	...

08005500 <puts>:
 8005500:	4b02      	ldr	r3, [pc, #8]	@ (800550c <puts+0xc>)
 8005502:	4601      	mov	r1, r0
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f7ff bfa5 	b.w	8005454 <_puts_r>
 800550a:	bf00      	nop
 800550c:	20000018 	.word	0x20000018

08005510 <strstr>:
 8005510:	780a      	ldrb	r2, [r1, #0]
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	b96a      	cbnz	r2, 8005532 <strstr+0x22>
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	429a      	cmp	r2, r3
 800551a:	d109      	bne.n	8005530 <strstr+0x20>
 800551c:	460c      	mov	r4, r1
 800551e:	4605      	mov	r5, r0
 8005520:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f6      	beq.n	8005516 <strstr+0x6>
 8005528:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800552c:	429e      	cmp	r6, r3
 800552e:	d0f7      	beq.n	8005520 <strstr+0x10>
 8005530:	3001      	adds	r0, #1
 8005532:	7803      	ldrb	r3, [r0, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ef      	bne.n	8005518 <strstr+0x8>
 8005538:	4618      	mov	r0, r3
 800553a:	e7ec      	b.n	8005516 <strstr+0x6>

0800553c <memset>:
 800553c:	4402      	add	r2, r0
 800553e:	4603      	mov	r3, r0
 8005540:	4293      	cmp	r3, r2
 8005542:	d100      	bne.n	8005546 <memset+0xa>
 8005544:	4770      	bx	lr
 8005546:	f803 1b01 	strb.w	r1, [r3], #1
 800554a:	e7f9      	b.n	8005540 <memset+0x4>

0800554c <__errno>:
 800554c:	4b01      	ldr	r3, [pc, #4]	@ (8005554 <__errno+0x8>)
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000018 	.word	0x20000018

08005558 <__libc_init_array>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4d0d      	ldr	r5, [pc, #52]	@ (8005590 <__libc_init_array+0x38>)
 800555c:	4c0d      	ldr	r4, [pc, #52]	@ (8005594 <__libc_init_array+0x3c>)
 800555e:	1b64      	subs	r4, r4, r5
 8005560:	10a4      	asrs	r4, r4, #2
 8005562:	2600      	movs	r6, #0
 8005564:	42a6      	cmp	r6, r4
 8005566:	d109      	bne.n	800557c <__libc_init_array+0x24>
 8005568:	4d0b      	ldr	r5, [pc, #44]	@ (8005598 <__libc_init_array+0x40>)
 800556a:	4c0c      	ldr	r4, [pc, #48]	@ (800559c <__libc_init_array+0x44>)
 800556c:	f000 fff6 	bl	800655c <_init>
 8005570:	1b64      	subs	r4, r4, r5
 8005572:	10a4      	asrs	r4, r4, #2
 8005574:	2600      	movs	r6, #0
 8005576:	42a6      	cmp	r6, r4
 8005578:	d105      	bne.n	8005586 <__libc_init_array+0x2e>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005580:	4798      	blx	r3
 8005582:	3601      	adds	r6, #1
 8005584:	e7ee      	b.n	8005564 <__libc_init_array+0xc>
 8005586:	f855 3b04 	ldr.w	r3, [r5], #4
 800558a:	4798      	blx	r3
 800558c:	3601      	adds	r6, #1
 800558e:	e7f2      	b.n	8005576 <__libc_init_array+0x1e>
 8005590:	08006a04 	.word	0x08006a04
 8005594:	08006a04 	.word	0x08006a04
 8005598:	08006a04 	.word	0x08006a04
 800559c:	08006a08 	.word	0x08006a08

080055a0 <__retarget_lock_init_recursive>:
 80055a0:	4770      	bx	lr

080055a2 <__retarget_lock_acquire_recursive>:
 80055a2:	4770      	bx	lr

080055a4 <__retarget_lock_release_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <memcpy>:
 80055a6:	440a      	add	r2, r1
 80055a8:	4291      	cmp	r1, r2
 80055aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055ae:	d100      	bne.n	80055b2 <memcpy+0xc>
 80055b0:	4770      	bx	lr
 80055b2:	b510      	push	{r4, lr}
 80055b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055bc:	4291      	cmp	r1, r2
 80055be:	d1f9      	bne.n	80055b4 <memcpy+0xe>
 80055c0:	bd10      	pop	{r4, pc}

080055c2 <__ssputs_r>:
 80055c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c6:	688e      	ldr	r6, [r1, #8]
 80055c8:	461f      	mov	r7, r3
 80055ca:	42be      	cmp	r6, r7
 80055cc:	680b      	ldr	r3, [r1, #0]
 80055ce:	4682      	mov	sl, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	4690      	mov	r8, r2
 80055d4:	d82d      	bhi.n	8005632 <__ssputs_r+0x70>
 80055d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055de:	d026      	beq.n	800562e <__ssputs_r+0x6c>
 80055e0:	6965      	ldr	r5, [r4, #20]
 80055e2:	6909      	ldr	r1, [r1, #16]
 80055e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e8:	eba3 0901 	sub.w	r9, r3, r1
 80055ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055f0:	1c7b      	adds	r3, r7, #1
 80055f2:	444b      	add	r3, r9
 80055f4:	106d      	asrs	r5, r5, #1
 80055f6:	429d      	cmp	r5, r3
 80055f8:	bf38      	it	cc
 80055fa:	461d      	movcc	r5, r3
 80055fc:	0553      	lsls	r3, r2, #21
 80055fe:	d527      	bpl.n	8005650 <__ssputs_r+0x8e>
 8005600:	4629      	mov	r1, r5
 8005602:	f000 fa99 	bl	8005b38 <_malloc_r>
 8005606:	4606      	mov	r6, r0
 8005608:	b360      	cbz	r0, 8005664 <__ssputs_r+0xa2>
 800560a:	6921      	ldr	r1, [r4, #16]
 800560c:	464a      	mov	r2, r9
 800560e:	f7ff ffca 	bl	80055a6 <memcpy>
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	6126      	str	r6, [r4, #16]
 8005620:	6165      	str	r5, [r4, #20]
 8005622:	444e      	add	r6, r9
 8005624:	eba5 0509 	sub.w	r5, r5, r9
 8005628:	6026      	str	r6, [r4, #0]
 800562a:	60a5      	str	r5, [r4, #8]
 800562c:	463e      	mov	r6, r7
 800562e:	42be      	cmp	r6, r7
 8005630:	d900      	bls.n	8005634 <__ssputs_r+0x72>
 8005632:	463e      	mov	r6, r7
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	4632      	mov	r2, r6
 8005638:	4641      	mov	r1, r8
 800563a:	f000 feab 	bl	8006394 <memmove>
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	1b9b      	subs	r3, r3, r6
 8005642:	60a3      	str	r3, [r4, #8]
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	4433      	add	r3, r6
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	2000      	movs	r0, #0
 800564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005650:	462a      	mov	r2, r5
 8005652:	f000 fd7a 	bl	800614a <_realloc_r>
 8005656:	4606      	mov	r6, r0
 8005658:	2800      	cmp	r0, #0
 800565a:	d1e0      	bne.n	800561e <__ssputs_r+0x5c>
 800565c:	6921      	ldr	r1, [r4, #16]
 800565e:	4650      	mov	r0, sl
 8005660:	f000 ff2a 	bl	80064b8 <_free_r>
 8005664:	230c      	movs	r3, #12
 8005666:	f8ca 3000 	str.w	r3, [sl]
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005676:	e7e9      	b.n	800564c <__ssputs_r+0x8a>

08005678 <_svfiprintf_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	4698      	mov	r8, r3
 800567e:	898b      	ldrh	r3, [r1, #12]
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	b09d      	sub	sp, #116	@ 0x74
 8005684:	4607      	mov	r7, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4614      	mov	r4, r2
 800568a:	d510      	bpl.n	80056ae <_svfiprintf_r+0x36>
 800568c:	690b      	ldr	r3, [r1, #16]
 800568e:	b973      	cbnz	r3, 80056ae <_svfiprintf_r+0x36>
 8005690:	2140      	movs	r1, #64	@ 0x40
 8005692:	f000 fa51 	bl	8005b38 <_malloc_r>
 8005696:	6028      	str	r0, [r5, #0]
 8005698:	6128      	str	r0, [r5, #16]
 800569a:	b930      	cbnz	r0, 80056aa <_svfiprintf_r+0x32>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a4:	b01d      	add	sp, #116	@ 0x74
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	2340      	movs	r3, #64	@ 0x40
 80056ac:	616b      	str	r3, [r5, #20]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b2:	2320      	movs	r3, #32
 80056b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80056bc:	2330      	movs	r3, #48	@ 0x30
 80056be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800585c <_svfiprintf_r+0x1e4>
 80056c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056c6:	f04f 0901 	mov.w	r9, #1
 80056ca:	4623      	mov	r3, r4
 80056cc:	469a      	mov	sl, r3
 80056ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d2:	b10a      	cbz	r2, 80056d8 <_svfiprintf_r+0x60>
 80056d4:	2a25      	cmp	r2, #37	@ 0x25
 80056d6:	d1f9      	bne.n	80056cc <_svfiprintf_r+0x54>
 80056d8:	ebba 0b04 	subs.w	fp, sl, r4
 80056dc:	d00b      	beq.n	80056f6 <_svfiprintf_r+0x7e>
 80056de:	465b      	mov	r3, fp
 80056e0:	4622      	mov	r2, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	4638      	mov	r0, r7
 80056e6:	f7ff ff6c 	bl	80055c2 <__ssputs_r>
 80056ea:	3001      	adds	r0, #1
 80056ec:	f000 80a7 	beq.w	800583e <_svfiprintf_r+0x1c6>
 80056f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056f2:	445a      	add	r2, fp
 80056f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80056f6:	f89a 3000 	ldrb.w	r3, [sl]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 809f 	beq.w	800583e <_svfiprintf_r+0x1c6>
 8005700:	2300      	movs	r3, #0
 8005702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800570a:	f10a 0a01 	add.w	sl, sl, #1
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	9307      	str	r3, [sp, #28]
 8005712:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005716:	931a      	str	r3, [sp, #104]	@ 0x68
 8005718:	4654      	mov	r4, sl
 800571a:	2205      	movs	r2, #5
 800571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005720:	484e      	ldr	r0, [pc, #312]	@ (800585c <_svfiprintf_r+0x1e4>)
 8005722:	f7fa fd7d 	bl	8000220 <memchr>
 8005726:	9a04      	ldr	r2, [sp, #16]
 8005728:	b9d8      	cbnz	r0, 8005762 <_svfiprintf_r+0xea>
 800572a:	06d0      	lsls	r0, r2, #27
 800572c:	bf44      	itt	mi
 800572e:	2320      	movmi	r3, #32
 8005730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005734:	0711      	lsls	r1, r2, #28
 8005736:	bf44      	itt	mi
 8005738:	232b      	movmi	r3, #43	@ 0x2b
 800573a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800573e:	f89a 3000 	ldrb.w	r3, [sl]
 8005742:	2b2a      	cmp	r3, #42	@ 0x2a
 8005744:	d015      	beq.n	8005772 <_svfiprintf_r+0xfa>
 8005746:	9a07      	ldr	r2, [sp, #28]
 8005748:	4654      	mov	r4, sl
 800574a:	2000      	movs	r0, #0
 800574c:	f04f 0c0a 	mov.w	ip, #10
 8005750:	4621      	mov	r1, r4
 8005752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005756:	3b30      	subs	r3, #48	@ 0x30
 8005758:	2b09      	cmp	r3, #9
 800575a:	d94b      	bls.n	80057f4 <_svfiprintf_r+0x17c>
 800575c:	b1b0      	cbz	r0, 800578c <_svfiprintf_r+0x114>
 800575e:	9207      	str	r2, [sp, #28]
 8005760:	e014      	b.n	800578c <_svfiprintf_r+0x114>
 8005762:	eba0 0308 	sub.w	r3, r0, r8
 8005766:	fa09 f303 	lsl.w	r3, r9, r3
 800576a:	4313      	orrs	r3, r2
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	46a2      	mov	sl, r4
 8005770:	e7d2      	b.n	8005718 <_svfiprintf_r+0xa0>
 8005772:	9b03      	ldr	r3, [sp, #12]
 8005774:	1d19      	adds	r1, r3, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	9103      	str	r1, [sp, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfbb      	ittet	lt
 800577e:	425b      	neglt	r3, r3
 8005780:	f042 0202 	orrlt.w	r2, r2, #2
 8005784:	9307      	strge	r3, [sp, #28]
 8005786:	9307      	strlt	r3, [sp, #28]
 8005788:	bfb8      	it	lt
 800578a:	9204      	strlt	r2, [sp, #16]
 800578c:	7823      	ldrb	r3, [r4, #0]
 800578e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005790:	d10a      	bne.n	80057a8 <_svfiprintf_r+0x130>
 8005792:	7863      	ldrb	r3, [r4, #1]
 8005794:	2b2a      	cmp	r3, #42	@ 0x2a
 8005796:	d132      	bne.n	80057fe <_svfiprintf_r+0x186>
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	9203      	str	r2, [sp, #12]
 80057a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057a4:	3402      	adds	r4, #2
 80057a6:	9305      	str	r3, [sp, #20]
 80057a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800586c <_svfiprintf_r+0x1f4>
 80057ac:	7821      	ldrb	r1, [r4, #0]
 80057ae:	2203      	movs	r2, #3
 80057b0:	4650      	mov	r0, sl
 80057b2:	f7fa fd35 	bl	8000220 <memchr>
 80057b6:	b138      	cbz	r0, 80057c8 <_svfiprintf_r+0x150>
 80057b8:	9b04      	ldr	r3, [sp, #16]
 80057ba:	eba0 000a 	sub.w	r0, r0, sl
 80057be:	2240      	movs	r2, #64	@ 0x40
 80057c0:	4082      	lsls	r2, r0
 80057c2:	4313      	orrs	r3, r2
 80057c4:	3401      	adds	r4, #1
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057cc:	4824      	ldr	r0, [pc, #144]	@ (8005860 <_svfiprintf_r+0x1e8>)
 80057ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057d2:	2206      	movs	r2, #6
 80057d4:	f7fa fd24 	bl	8000220 <memchr>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d036      	beq.n	800584a <_svfiprintf_r+0x1d2>
 80057dc:	4b21      	ldr	r3, [pc, #132]	@ (8005864 <_svfiprintf_r+0x1ec>)
 80057de:	bb1b      	cbnz	r3, 8005828 <_svfiprintf_r+0x1b0>
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	3307      	adds	r3, #7
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	3308      	adds	r3, #8
 80057ea:	9303      	str	r3, [sp, #12]
 80057ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ee:	4433      	add	r3, r6
 80057f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f2:	e76a      	b.n	80056ca <_svfiprintf_r+0x52>
 80057f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f8:	460c      	mov	r4, r1
 80057fa:	2001      	movs	r0, #1
 80057fc:	e7a8      	b.n	8005750 <_svfiprintf_r+0xd8>
 80057fe:	2300      	movs	r3, #0
 8005800:	3401      	adds	r4, #1
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	4619      	mov	r1, r3
 8005806:	f04f 0c0a 	mov.w	ip, #10
 800580a:	4620      	mov	r0, r4
 800580c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005810:	3a30      	subs	r2, #48	@ 0x30
 8005812:	2a09      	cmp	r2, #9
 8005814:	d903      	bls.n	800581e <_svfiprintf_r+0x1a6>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0c6      	beq.n	80057a8 <_svfiprintf_r+0x130>
 800581a:	9105      	str	r1, [sp, #20]
 800581c:	e7c4      	b.n	80057a8 <_svfiprintf_r+0x130>
 800581e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005822:	4604      	mov	r4, r0
 8005824:	2301      	movs	r3, #1
 8005826:	e7f0      	b.n	800580a <_svfiprintf_r+0x192>
 8005828:	ab03      	add	r3, sp, #12
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	462a      	mov	r2, r5
 800582e:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <_svfiprintf_r+0x1f0>)
 8005830:	a904      	add	r1, sp, #16
 8005832:	4638      	mov	r0, r7
 8005834:	f3af 8000 	nop.w
 8005838:	1c42      	adds	r2, r0, #1
 800583a:	4606      	mov	r6, r0
 800583c:	d1d6      	bne.n	80057ec <_svfiprintf_r+0x174>
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	065b      	lsls	r3, r3, #25
 8005842:	f53f af2d 	bmi.w	80056a0 <_svfiprintf_r+0x28>
 8005846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005848:	e72c      	b.n	80056a4 <_svfiprintf_r+0x2c>
 800584a:	ab03      	add	r3, sp, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	462a      	mov	r2, r5
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <_svfiprintf_r+0x1f0>)
 8005852:	a904      	add	r1, sp, #16
 8005854:	4638      	mov	r0, r7
 8005856:	f000 fa5d 	bl	8005d14 <_printf_i>
 800585a:	e7ed      	b.n	8005838 <_svfiprintf_r+0x1c0>
 800585c:	080069c8 	.word	0x080069c8
 8005860:	080069d2 	.word	0x080069d2
 8005864:	00000000 	.word	0x00000000
 8005868:	080055c3 	.word	0x080055c3
 800586c:	080069ce 	.word	0x080069ce

08005870 <__sfputc_r>:
 8005870:	6893      	ldr	r3, [r2, #8]
 8005872:	3b01      	subs	r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	b410      	push	{r4}
 8005878:	6093      	str	r3, [r2, #8]
 800587a:	da08      	bge.n	800588e <__sfputc_r+0x1e>
 800587c:	6994      	ldr	r4, [r2, #24]
 800587e:	42a3      	cmp	r3, r4
 8005880:	db01      	blt.n	8005886 <__sfputc_r+0x16>
 8005882:	290a      	cmp	r1, #10
 8005884:	d103      	bne.n	800588e <__sfputc_r+0x1e>
 8005886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588a:	f000 bc8c 	b.w	80061a6 <__swbuf_r>
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	1c58      	adds	r0, r3, #1
 8005892:	6010      	str	r0, [r2, #0]
 8005894:	7019      	strb	r1, [r3, #0]
 8005896:	4608      	mov	r0, r1
 8005898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800589c:	4770      	bx	lr

0800589e <__sfputs_r>:
 800589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a0:	4606      	mov	r6, r0
 80058a2:	460f      	mov	r7, r1
 80058a4:	4614      	mov	r4, r2
 80058a6:	18d5      	adds	r5, r2, r3
 80058a8:	42ac      	cmp	r4, r5
 80058aa:	d101      	bne.n	80058b0 <__sfputs_r+0x12>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e007      	b.n	80058c0 <__sfputs_r+0x22>
 80058b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b4:	463a      	mov	r2, r7
 80058b6:	4630      	mov	r0, r6
 80058b8:	f7ff ffda 	bl	8005870 <__sfputc_r>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d1f3      	bne.n	80058a8 <__sfputs_r+0xa>
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c4 <_vfiprintf_r>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	460d      	mov	r5, r1
 80058ca:	b09d      	sub	sp, #116	@ 0x74
 80058cc:	4614      	mov	r4, r2
 80058ce:	4698      	mov	r8, r3
 80058d0:	4606      	mov	r6, r0
 80058d2:	b118      	cbz	r0, 80058dc <_vfiprintf_r+0x18>
 80058d4:	6a03      	ldr	r3, [r0, #32]
 80058d6:	b90b      	cbnz	r3, 80058dc <_vfiprintf_r+0x18>
 80058d8:	f7ff fd74 	bl	80053c4 <__sinit>
 80058dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d405      	bmi.n	80058ee <_vfiprintf_r+0x2a>
 80058e2:	89ab      	ldrh	r3, [r5, #12]
 80058e4:	059a      	lsls	r2, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_vfiprintf_r+0x2a>
 80058e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058ea:	f7ff fe5a 	bl	80055a2 <__retarget_lock_acquire_recursive>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	071b      	lsls	r3, r3, #28
 80058f2:	d501      	bpl.n	80058f8 <_vfiprintf_r+0x34>
 80058f4:	692b      	ldr	r3, [r5, #16]
 80058f6:	b99b      	cbnz	r3, 8005920 <_vfiprintf_r+0x5c>
 80058f8:	4629      	mov	r1, r5
 80058fa:	4630      	mov	r0, r6
 80058fc:	f000 fc92 	bl	8006224 <__swsetup_r>
 8005900:	b170      	cbz	r0, 8005920 <_vfiprintf_r+0x5c>
 8005902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005904:	07dc      	lsls	r4, r3, #31
 8005906:	d504      	bpl.n	8005912 <_vfiprintf_r+0x4e>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800590c:	b01d      	add	sp, #116	@ 0x74
 800590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	0598      	lsls	r0, r3, #22
 8005916:	d4f7      	bmi.n	8005908 <_vfiprintf_r+0x44>
 8005918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800591a:	f7ff fe43 	bl	80055a4 <__retarget_lock_release_recursive>
 800591e:	e7f3      	b.n	8005908 <_vfiprintf_r+0x44>
 8005920:	2300      	movs	r3, #0
 8005922:	9309      	str	r3, [sp, #36]	@ 0x24
 8005924:	2320      	movs	r3, #32
 8005926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800592a:	f8cd 800c 	str.w	r8, [sp, #12]
 800592e:	2330      	movs	r3, #48	@ 0x30
 8005930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ae0 <_vfiprintf_r+0x21c>
 8005934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005938:	f04f 0901 	mov.w	r9, #1
 800593c:	4623      	mov	r3, r4
 800593e:	469a      	mov	sl, r3
 8005940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005944:	b10a      	cbz	r2, 800594a <_vfiprintf_r+0x86>
 8005946:	2a25      	cmp	r2, #37	@ 0x25
 8005948:	d1f9      	bne.n	800593e <_vfiprintf_r+0x7a>
 800594a:	ebba 0b04 	subs.w	fp, sl, r4
 800594e:	d00b      	beq.n	8005968 <_vfiprintf_r+0xa4>
 8005950:	465b      	mov	r3, fp
 8005952:	4622      	mov	r2, r4
 8005954:	4629      	mov	r1, r5
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ffa1 	bl	800589e <__sfputs_r>
 800595c:	3001      	adds	r0, #1
 800595e:	f000 80a7 	beq.w	8005ab0 <_vfiprintf_r+0x1ec>
 8005962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005964:	445a      	add	r2, fp
 8005966:	9209      	str	r2, [sp, #36]	@ 0x24
 8005968:	f89a 3000 	ldrb.w	r3, [sl]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 809f 	beq.w	8005ab0 <_vfiprintf_r+0x1ec>
 8005972:	2300      	movs	r3, #0
 8005974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800597c:	f10a 0a01 	add.w	sl, sl, #1
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005988:	931a      	str	r3, [sp, #104]	@ 0x68
 800598a:	4654      	mov	r4, sl
 800598c:	2205      	movs	r2, #5
 800598e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005992:	4853      	ldr	r0, [pc, #332]	@ (8005ae0 <_vfiprintf_r+0x21c>)
 8005994:	f7fa fc44 	bl	8000220 <memchr>
 8005998:	9a04      	ldr	r2, [sp, #16]
 800599a:	b9d8      	cbnz	r0, 80059d4 <_vfiprintf_r+0x110>
 800599c:	06d1      	lsls	r1, r2, #27
 800599e:	bf44      	itt	mi
 80059a0:	2320      	movmi	r3, #32
 80059a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a6:	0713      	lsls	r3, r2, #28
 80059a8:	bf44      	itt	mi
 80059aa:	232b      	movmi	r3, #43	@ 0x2b
 80059ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b0:	f89a 3000 	ldrb.w	r3, [sl]
 80059b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b6:	d015      	beq.n	80059e4 <_vfiprintf_r+0x120>
 80059b8:	9a07      	ldr	r2, [sp, #28]
 80059ba:	4654      	mov	r4, sl
 80059bc:	2000      	movs	r0, #0
 80059be:	f04f 0c0a 	mov.w	ip, #10
 80059c2:	4621      	mov	r1, r4
 80059c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c8:	3b30      	subs	r3, #48	@ 0x30
 80059ca:	2b09      	cmp	r3, #9
 80059cc:	d94b      	bls.n	8005a66 <_vfiprintf_r+0x1a2>
 80059ce:	b1b0      	cbz	r0, 80059fe <_vfiprintf_r+0x13a>
 80059d0:	9207      	str	r2, [sp, #28]
 80059d2:	e014      	b.n	80059fe <_vfiprintf_r+0x13a>
 80059d4:	eba0 0308 	sub.w	r3, r0, r8
 80059d8:	fa09 f303 	lsl.w	r3, r9, r3
 80059dc:	4313      	orrs	r3, r2
 80059de:	9304      	str	r3, [sp, #16]
 80059e0:	46a2      	mov	sl, r4
 80059e2:	e7d2      	b.n	800598a <_vfiprintf_r+0xc6>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	1d19      	adds	r1, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	9103      	str	r1, [sp, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfbb      	ittet	lt
 80059f0:	425b      	neglt	r3, r3
 80059f2:	f042 0202 	orrlt.w	r2, r2, #2
 80059f6:	9307      	strge	r3, [sp, #28]
 80059f8:	9307      	strlt	r3, [sp, #28]
 80059fa:	bfb8      	it	lt
 80059fc:	9204      	strlt	r2, [sp, #16]
 80059fe:	7823      	ldrb	r3, [r4, #0]
 8005a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a02:	d10a      	bne.n	8005a1a <_vfiprintf_r+0x156>
 8005a04:	7863      	ldrb	r3, [r4, #1]
 8005a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a08:	d132      	bne.n	8005a70 <_vfiprintf_r+0x1ac>
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	9203      	str	r2, [sp, #12]
 8005a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a16:	3402      	adds	r4, #2
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005af0 <_vfiprintf_r+0x22c>
 8005a1e:	7821      	ldrb	r1, [r4, #0]
 8005a20:	2203      	movs	r2, #3
 8005a22:	4650      	mov	r0, sl
 8005a24:	f7fa fbfc 	bl	8000220 <memchr>
 8005a28:	b138      	cbz	r0, 8005a3a <_vfiprintf_r+0x176>
 8005a2a:	9b04      	ldr	r3, [sp, #16]
 8005a2c:	eba0 000a 	sub.w	r0, r0, sl
 8005a30:	2240      	movs	r2, #64	@ 0x40
 8005a32:	4082      	lsls	r2, r0
 8005a34:	4313      	orrs	r3, r2
 8005a36:	3401      	adds	r4, #1
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3e:	4829      	ldr	r0, [pc, #164]	@ (8005ae4 <_vfiprintf_r+0x220>)
 8005a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a44:	2206      	movs	r2, #6
 8005a46:	f7fa fbeb 	bl	8000220 <memchr>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d03f      	beq.n	8005ace <_vfiprintf_r+0x20a>
 8005a4e:	4b26      	ldr	r3, [pc, #152]	@ (8005ae8 <_vfiprintf_r+0x224>)
 8005a50:	bb1b      	cbnz	r3, 8005a9a <_vfiprintf_r+0x1d6>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	3307      	adds	r3, #7
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	9303      	str	r3, [sp, #12]
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	443b      	add	r3, r7
 8005a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a64:	e76a      	b.n	800593c <_vfiprintf_r+0x78>
 8005a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	e7a8      	b.n	80059c2 <_vfiprintf_r+0xfe>
 8005a70:	2300      	movs	r3, #0
 8005a72:	3401      	adds	r4, #1
 8005a74:	9305      	str	r3, [sp, #20]
 8005a76:	4619      	mov	r1, r3
 8005a78:	f04f 0c0a 	mov.w	ip, #10
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a82:	3a30      	subs	r2, #48	@ 0x30
 8005a84:	2a09      	cmp	r2, #9
 8005a86:	d903      	bls.n	8005a90 <_vfiprintf_r+0x1cc>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0c6      	beq.n	8005a1a <_vfiprintf_r+0x156>
 8005a8c:	9105      	str	r1, [sp, #20]
 8005a8e:	e7c4      	b.n	8005a1a <_vfiprintf_r+0x156>
 8005a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a94:	4604      	mov	r4, r0
 8005a96:	2301      	movs	r3, #1
 8005a98:	e7f0      	b.n	8005a7c <_vfiprintf_r+0x1b8>
 8005a9a:	ab03      	add	r3, sp, #12
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <_vfiprintf_r+0x228>)
 8005aa2:	a904      	add	r1, sp, #16
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f3af 8000 	nop.w
 8005aaa:	4607      	mov	r7, r0
 8005aac:	1c78      	adds	r0, r7, #1
 8005aae:	d1d6      	bne.n	8005a5e <_vfiprintf_r+0x19a>
 8005ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d405      	bmi.n	8005ac2 <_vfiprintf_r+0x1fe>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_vfiprintf_r+0x1fe>
 8005abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005abe:	f7ff fd71 	bl	80055a4 <__retarget_lock_release_recursive>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	065b      	lsls	r3, r3, #25
 8005ac6:	f53f af1f 	bmi.w	8005908 <_vfiprintf_r+0x44>
 8005aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005acc:	e71e      	b.n	800590c <_vfiprintf_r+0x48>
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <_vfiprintf_r+0x228>)
 8005ad6:	a904      	add	r1, sp, #16
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f000 f91b 	bl	8005d14 <_printf_i>
 8005ade:	e7e4      	b.n	8005aaa <_vfiprintf_r+0x1e6>
 8005ae0:	080069c8 	.word	0x080069c8
 8005ae4:	080069d2 	.word	0x080069d2
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	0800589f 	.word	0x0800589f
 8005af0:	080069ce 	.word	0x080069ce

08005af4 <sbrk_aligned>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4e0f      	ldr	r6, [pc, #60]	@ (8005b34 <sbrk_aligned+0x40>)
 8005af8:	460c      	mov	r4, r1
 8005afa:	6831      	ldr	r1, [r6, #0]
 8005afc:	4605      	mov	r5, r0
 8005afe:	b911      	cbnz	r1, 8005b06 <sbrk_aligned+0x12>
 8005b00:	f000 fcb8 	bl	8006474 <_sbrk_r>
 8005b04:	6030      	str	r0, [r6, #0]
 8005b06:	4621      	mov	r1, r4
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f000 fcb3 	bl	8006474 <_sbrk_r>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	d103      	bne.n	8005b1a <sbrk_aligned+0x26>
 8005b12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b16:	4620      	mov	r0, r4
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
 8005b1a:	1cc4      	adds	r4, r0, #3
 8005b1c:	f024 0403 	bic.w	r4, r4, #3
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d0f8      	beq.n	8005b16 <sbrk_aligned+0x22>
 8005b24:	1a21      	subs	r1, r4, r0
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fca4 	bl	8006474 <_sbrk_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d1f2      	bne.n	8005b16 <sbrk_aligned+0x22>
 8005b30:	e7ef      	b.n	8005b12 <sbrk_aligned+0x1e>
 8005b32:	bf00      	nop
 8005b34:	20000814 	.word	0x20000814

08005b38 <_malloc_r>:
 8005b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b3c:	1ccd      	adds	r5, r1, #3
 8005b3e:	f025 0503 	bic.w	r5, r5, #3
 8005b42:	3508      	adds	r5, #8
 8005b44:	2d0c      	cmp	r5, #12
 8005b46:	bf38      	it	cc
 8005b48:	250c      	movcc	r5, #12
 8005b4a:	2d00      	cmp	r5, #0
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	db01      	blt.n	8005b54 <_malloc_r+0x1c>
 8005b50:	42a9      	cmp	r1, r5
 8005b52:	d904      	bls.n	8005b5e <_malloc_r+0x26>
 8005b54:	230c      	movs	r3, #12
 8005b56:	6033      	str	r3, [r6, #0]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c34 <_malloc_r+0xfc>
 8005b62:	f000 faa3 	bl	80060ac <__malloc_lock>
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	461c      	mov	r4, r3
 8005b6c:	bb44      	cbnz	r4, 8005bc0 <_malloc_r+0x88>
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4630      	mov	r0, r6
 8005b72:	f7ff ffbf 	bl	8005af4 <sbrk_aligned>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	4604      	mov	r4, r0
 8005b7a:	d158      	bne.n	8005c2e <_malloc_r+0xf6>
 8005b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b80:	4627      	mov	r7, r4
 8005b82:	2f00      	cmp	r7, #0
 8005b84:	d143      	bne.n	8005c0e <_malloc_r+0xd6>
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	d04b      	beq.n	8005c22 <_malloc_r+0xea>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4630      	mov	r0, r6
 8005b90:	eb04 0903 	add.w	r9, r4, r3
 8005b94:	f000 fc6e 	bl	8006474 <_sbrk_r>
 8005b98:	4581      	cmp	r9, r0
 8005b9a:	d142      	bne.n	8005c22 <_malloc_r+0xea>
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	1a6d      	subs	r5, r5, r1
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7ff ffa6 	bl	8005af4 <sbrk_aligned>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d03a      	beq.n	8005c22 <_malloc_r+0xea>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	442b      	add	r3, r5
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	bb62      	cbnz	r2, 8005c14 <_malloc_r+0xdc>
 8005bba:	f8c8 7000 	str.w	r7, [r8]
 8005bbe:	e00f      	b.n	8005be0 <_malloc_r+0xa8>
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	1b52      	subs	r2, r2, r5
 8005bc4:	d420      	bmi.n	8005c08 <_malloc_r+0xd0>
 8005bc6:	2a0b      	cmp	r2, #11
 8005bc8:	d917      	bls.n	8005bfa <_malloc_r+0xc2>
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	6025      	str	r5, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	6059      	strne	r1, [r3, #4]
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	bf08      	it	eq
 8005bd8:	f8c8 1000 	streq.w	r1, [r8]
 8005bdc:	5162      	str	r2, [r4, r5]
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	4630      	mov	r0, r6
 8005be2:	f000 fa69 	bl	80060b8 <__malloc_unlock>
 8005be6:	f104 000b 	add.w	r0, r4, #11
 8005bea:	1d23      	adds	r3, r4, #4
 8005bec:	f020 0007 	bic.w	r0, r0, #7
 8005bf0:	1ac2      	subs	r2, r0, r3
 8005bf2:	bf1c      	itt	ne
 8005bf4:	1a1b      	subne	r3, r3, r0
 8005bf6:	50a3      	strne	r3, [r4, r2]
 8005bf8:	e7af      	b.n	8005b5a <_malloc_r+0x22>
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	bf0c      	ite	eq
 8005c00:	f8c8 2000 	streq.w	r2, [r8]
 8005c04:	605a      	strne	r2, [r3, #4]
 8005c06:	e7eb      	b.n	8005be0 <_malloc_r+0xa8>
 8005c08:	4623      	mov	r3, r4
 8005c0a:	6864      	ldr	r4, [r4, #4]
 8005c0c:	e7ae      	b.n	8005b6c <_malloc_r+0x34>
 8005c0e:	463c      	mov	r4, r7
 8005c10:	687f      	ldr	r7, [r7, #4]
 8005c12:	e7b6      	b.n	8005b82 <_malloc_r+0x4a>
 8005c14:	461a      	mov	r2, r3
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d1fb      	bne.n	8005c14 <_malloc_r+0xdc>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6053      	str	r3, [r2, #4]
 8005c20:	e7de      	b.n	8005be0 <_malloc_r+0xa8>
 8005c22:	230c      	movs	r3, #12
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 fa46 	bl	80060b8 <__malloc_unlock>
 8005c2c:	e794      	b.n	8005b58 <_malloc_r+0x20>
 8005c2e:	6005      	str	r5, [r0, #0]
 8005c30:	e7d6      	b.n	8005be0 <_malloc_r+0xa8>
 8005c32:	bf00      	nop
 8005c34:	20000818 	.word	0x20000818

08005c38 <_printf_common>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	4698      	mov	r8, r3
 8005c40:	688a      	ldr	r2, [r1, #8]
 8005c42:	690b      	ldr	r3, [r1, #16]
 8005c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	bfb8      	it	lt
 8005c4c:	4613      	movlt	r3, r2
 8005c4e:	6033      	str	r3, [r6, #0]
 8005c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c54:	4607      	mov	r7, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	b10a      	cbz	r2, 8005c5e <_printf_common+0x26>
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	0699      	lsls	r1, r3, #26
 8005c62:	bf42      	ittt	mi
 8005c64:	6833      	ldrmi	r3, [r6, #0]
 8005c66:	3302      	addmi	r3, #2
 8005c68:	6033      	strmi	r3, [r6, #0]
 8005c6a:	6825      	ldr	r5, [r4, #0]
 8005c6c:	f015 0506 	ands.w	r5, r5, #6
 8005c70:	d106      	bne.n	8005c80 <_printf_common+0x48>
 8005c72:	f104 0a19 	add.w	sl, r4, #25
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	6832      	ldr	r2, [r6, #0]
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	dc26      	bgt.n	8005cce <_printf_common+0x96>
 8005c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	3b00      	subs	r3, #0
 8005c88:	bf18      	it	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	0692      	lsls	r2, r2, #26
 8005c8e:	d42b      	bmi.n	8005ce8 <_printf_common+0xb0>
 8005c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c94:	4641      	mov	r1, r8
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c8      	blx	r9
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d01e      	beq.n	8005cdc <_printf_common+0xa4>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	6922      	ldr	r2, [r4, #16]
 8005ca2:	f003 0306 	and.w	r3, r3, #6
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	bf02      	ittt	eq
 8005caa:	68e5      	ldreq	r5, [r4, #12]
 8005cac:	6833      	ldreq	r3, [r6, #0]
 8005cae:	1aed      	subeq	r5, r5, r3
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	bf0c      	ite	eq
 8005cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb8:	2500      	movne	r5, #0
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	bfc4      	itt	gt
 8005cbe:	1a9b      	subgt	r3, r3, r2
 8005cc0:	18ed      	addgt	r5, r5, r3
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	341a      	adds	r4, #26
 8005cc6:	42b5      	cmp	r5, r6
 8005cc8:	d11a      	bne.n	8005d00 <_printf_common+0xc8>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e008      	b.n	8005ce0 <_printf_common+0xa8>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	4641      	mov	r1, r8
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	47c8      	blx	r9
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d103      	bne.n	8005ce4 <_printf_common+0xac>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	e7c6      	b.n	8005c76 <_printf_common+0x3e>
 8005ce8:	18e1      	adds	r1, r4, r3
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	2030      	movs	r0, #48	@ 0x30
 8005cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cf2:	4422      	add	r2, r4
 8005cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	e7c7      	b.n	8005c90 <_printf_common+0x58>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4622      	mov	r2, r4
 8005d04:	4641      	mov	r1, r8
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c8      	blx	r9
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d0e6      	beq.n	8005cdc <_printf_common+0xa4>
 8005d0e:	3601      	adds	r6, #1
 8005d10:	e7d9      	b.n	8005cc6 <_printf_common+0x8e>
	...

08005d14 <_printf_i>:
 8005d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	7e0f      	ldrb	r7, [r1, #24]
 8005d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d1c:	2f78      	cmp	r7, #120	@ 0x78
 8005d1e:	4691      	mov	r9, r2
 8005d20:	4680      	mov	r8, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	469a      	mov	sl, r3
 8005d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d2a:	d807      	bhi.n	8005d3c <_printf_i+0x28>
 8005d2c:	2f62      	cmp	r7, #98	@ 0x62
 8005d2e:	d80a      	bhi.n	8005d46 <_printf_i+0x32>
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	f000 80d2 	beq.w	8005eda <_printf_i+0x1c6>
 8005d36:	2f58      	cmp	r7, #88	@ 0x58
 8005d38:	f000 80b9 	beq.w	8005eae <_printf_i+0x19a>
 8005d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d44:	e03a      	b.n	8005dbc <_printf_i+0xa8>
 8005d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d4a:	2b15      	cmp	r3, #21
 8005d4c:	d8f6      	bhi.n	8005d3c <_printf_i+0x28>
 8005d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d54 <_printf_i+0x40>)
 8005d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005dc1 	.word	0x08005dc1
 8005d5c:	08005d3d 	.word	0x08005d3d
 8005d60:	08005d3d 	.word	0x08005d3d
 8005d64:	08005d3d 	.word	0x08005d3d
 8005d68:	08005d3d 	.word	0x08005d3d
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005d3d 	.word	0x08005d3d
 8005d74:	08005d3d 	.word	0x08005d3d
 8005d78:	08005d3d 	.word	0x08005d3d
 8005d7c:	08005d3d 	.word	0x08005d3d
 8005d80:	08005ec1 	.word	0x08005ec1
 8005d84:	08005deb 	.word	0x08005deb
 8005d88:	08005e7b 	.word	0x08005e7b
 8005d8c:	08005d3d 	.word	0x08005d3d
 8005d90:	08005d3d 	.word	0x08005d3d
 8005d94:	08005ee3 	.word	0x08005ee3
 8005d98:	08005d3d 	.word	0x08005d3d
 8005d9c:	08005deb 	.word	0x08005deb
 8005da0:	08005d3d 	.word	0x08005d3d
 8005da4:	08005d3d 	.word	0x08005d3d
 8005da8:	08005e83 	.word	0x08005e83
 8005dac:	6833      	ldr	r3, [r6, #0]
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6032      	str	r2, [r6, #0]
 8005db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e09d      	b.n	8005efc <_printf_i+0x1e8>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	6820      	ldr	r0, [r4, #0]
 8005dc4:	1d19      	adds	r1, r3, #4
 8005dc6:	6031      	str	r1, [r6, #0]
 8005dc8:	0606      	lsls	r6, r0, #24
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0xbc>
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <_printf_i+0xc4>
 8005dd0:	0645      	lsls	r5, r0, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0xb8>
 8005dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	da03      	bge.n	8005de4 <_printf_i+0xd0>
 8005ddc:	232d      	movs	r3, #45	@ 0x2d
 8005dde:	426d      	negs	r5, r5
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005de4:	4859      	ldr	r0, [pc, #356]	@ (8005f4c <_printf_i+0x238>)
 8005de6:	230a      	movs	r3, #10
 8005de8:	e011      	b.n	8005e0e <_printf_i+0xfa>
 8005dea:	6821      	ldr	r1, [r4, #0]
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	0608      	lsls	r0, r1, #24
 8005df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005df4:	d402      	bmi.n	8005dfc <_printf_i+0xe8>
 8005df6:	0649      	lsls	r1, r1, #25
 8005df8:	bf48      	it	mi
 8005dfa:	b2ad      	uxthmi	r5, r5
 8005dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dfe:	4853      	ldr	r0, [pc, #332]	@ (8005f4c <_printf_i+0x238>)
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	bf14      	ite	ne
 8005e04:	230a      	movne	r3, #10
 8005e06:	2308      	moveq	r3, #8
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e0e:	6866      	ldr	r6, [r4, #4]
 8005e10:	60a6      	str	r6, [r4, #8]
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	bfa2      	ittt	ge
 8005e16:	6821      	ldrge	r1, [r4, #0]
 8005e18:	f021 0104 	bicge.w	r1, r1, #4
 8005e1c:	6021      	strge	r1, [r4, #0]
 8005e1e:	b90d      	cbnz	r5, 8005e24 <_printf_i+0x110>
 8005e20:	2e00      	cmp	r6, #0
 8005e22:	d04b      	beq.n	8005ebc <_printf_i+0x1a8>
 8005e24:	4616      	mov	r6, r2
 8005e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e2e:	5dc7      	ldrb	r7, [r0, r7]
 8005e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e34:	462f      	mov	r7, r5
 8005e36:	42bb      	cmp	r3, r7
 8005e38:	460d      	mov	r5, r1
 8005e3a:	d9f4      	bls.n	8005e26 <_printf_i+0x112>
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10b      	bne.n	8005e58 <_printf_i+0x144>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07df      	lsls	r7, r3, #31
 8005e44:	d508      	bpl.n	8005e58 <_printf_i+0x144>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	6861      	ldr	r1, [r4, #4]
 8005e4a:	4299      	cmp	r1, r3
 8005e4c:	bfde      	ittt	le
 8005e4e:	2330      	movle	r3, #48	@ 0x30
 8005e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e58:	1b92      	subs	r2, r2, r6
 8005e5a:	6122      	str	r2, [r4, #16]
 8005e5c:	f8cd a000 	str.w	sl, [sp]
 8005e60:	464b      	mov	r3, r9
 8005e62:	aa03      	add	r2, sp, #12
 8005e64:	4621      	mov	r1, r4
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7ff fee6 	bl	8005c38 <_printf_common>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d14a      	bne.n	8005f06 <_printf_i+0x1f2>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e74:	b004      	add	sp, #16
 8005e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	4833      	ldr	r0, [pc, #204]	@ (8005f50 <_printf_i+0x23c>)
 8005e84:	2778      	movs	r7, #120	@ 0x78
 8005e86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	6831      	ldr	r1, [r6, #0]
 8005e8e:	061f      	lsls	r7, r3, #24
 8005e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e94:	d402      	bmi.n	8005e9c <_printf_i+0x188>
 8005e96:	065f      	lsls	r7, r3, #25
 8005e98:	bf48      	it	mi
 8005e9a:	b2ad      	uxthmi	r5, r5
 8005e9c:	6031      	str	r1, [r6, #0]
 8005e9e:	07d9      	lsls	r1, r3, #31
 8005ea0:	bf44      	itt	mi
 8005ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea6:	6023      	strmi	r3, [r4, #0]
 8005ea8:	b11d      	cbz	r5, 8005eb2 <_printf_i+0x19e>
 8005eaa:	2310      	movs	r3, #16
 8005eac:	e7ac      	b.n	8005e08 <_printf_i+0xf4>
 8005eae:	4827      	ldr	r0, [pc, #156]	@ (8005f4c <_printf_i+0x238>)
 8005eb0:	e7e9      	b.n	8005e86 <_printf_i+0x172>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f023 0320 	bic.w	r3, r3, #32
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	e7f6      	b.n	8005eaa <_printf_i+0x196>
 8005ebc:	4616      	mov	r6, r2
 8005ebe:	e7bd      	b.n	8005e3c <_printf_i+0x128>
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	6961      	ldr	r1, [r4, #20]
 8005ec6:	1d18      	adds	r0, r3, #4
 8005ec8:	6030      	str	r0, [r6, #0]
 8005eca:	062e      	lsls	r6, r5, #24
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	d501      	bpl.n	8005ed4 <_printf_i+0x1c0>
 8005ed0:	6019      	str	r1, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <_printf_i+0x1c6>
 8005ed4:	0668      	lsls	r0, r5, #25
 8005ed6:	d5fb      	bpl.n	8005ed0 <_printf_i+0x1bc>
 8005ed8:	8019      	strh	r1, [r3, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	6123      	str	r3, [r4, #16]
 8005ede:	4616      	mov	r6, r2
 8005ee0:	e7bc      	b.n	8005e5c <_printf_i+0x148>
 8005ee2:	6833      	ldr	r3, [r6, #0]
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	6032      	str	r2, [r6, #0]
 8005ee8:	681e      	ldr	r6, [r3, #0]
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	2100      	movs	r1, #0
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7fa f996 	bl	8000220 <memchr>
 8005ef4:	b108      	cbz	r0, 8005efa <_printf_i+0x1e6>
 8005ef6:	1b80      	subs	r0, r0, r6
 8005ef8:	6060      	str	r0, [r4, #4]
 8005efa:	6863      	ldr	r3, [r4, #4]
 8005efc:	6123      	str	r3, [r4, #16]
 8005efe:	2300      	movs	r3, #0
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f04:	e7aa      	b.n	8005e5c <_printf_i+0x148>
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	4632      	mov	r2, r6
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	47d0      	blx	sl
 8005f10:	3001      	adds	r0, #1
 8005f12:	d0ad      	beq.n	8005e70 <_printf_i+0x15c>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	079b      	lsls	r3, r3, #30
 8005f18:	d413      	bmi.n	8005f42 <_printf_i+0x22e>
 8005f1a:	68e0      	ldr	r0, [r4, #12]
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	bfb8      	it	lt
 8005f22:	4618      	movlt	r0, r3
 8005f24:	e7a6      	b.n	8005e74 <_printf_i+0x160>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4632      	mov	r2, r6
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	47d0      	blx	sl
 8005f30:	3001      	adds	r0, #1
 8005f32:	d09d      	beq.n	8005e70 <_printf_i+0x15c>
 8005f34:	3501      	adds	r5, #1
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	9903      	ldr	r1, [sp, #12]
 8005f3a:	1a5b      	subs	r3, r3, r1
 8005f3c:	42ab      	cmp	r3, r5
 8005f3e:	dcf2      	bgt.n	8005f26 <_printf_i+0x212>
 8005f40:	e7eb      	b.n	8005f1a <_printf_i+0x206>
 8005f42:	2500      	movs	r5, #0
 8005f44:	f104 0619 	add.w	r6, r4, #25
 8005f48:	e7f5      	b.n	8005f36 <_printf_i+0x222>
 8005f4a:	bf00      	nop
 8005f4c:	080069d9 	.word	0x080069d9
 8005f50:	080069ea 	.word	0x080069ea

08005f54 <__sflush_r>:
 8005f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	0716      	lsls	r6, r2, #28
 8005f5e:	4605      	mov	r5, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	d454      	bmi.n	800600e <__sflush_r+0xba>
 8005f64:	684b      	ldr	r3, [r1, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dc02      	bgt.n	8005f70 <__sflush_r+0x1c>
 8005f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dd48      	ble.n	8006002 <__sflush_r+0xae>
 8005f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f72:	2e00      	cmp	r6, #0
 8005f74:	d045      	beq.n	8006002 <__sflush_r+0xae>
 8005f76:	2300      	movs	r3, #0
 8005f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f7c:	682f      	ldr	r7, [r5, #0]
 8005f7e:	6a21      	ldr	r1, [r4, #32]
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	d030      	beq.n	8005fe6 <__sflush_r+0x92>
 8005f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	0759      	lsls	r1, r3, #29
 8005f8a:	d505      	bpl.n	8005f98 <__sflush_r+0x44>
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f92:	b10b      	cbz	r3, 8005f98 <__sflush_r+0x44>
 8005f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f9c:	6a21      	ldr	r1, [r4, #32]
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b0      	blx	r6
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	d106      	bne.n	8005fb6 <__sflush_r+0x62>
 8005fa8:	6829      	ldr	r1, [r5, #0]
 8005faa:	291d      	cmp	r1, #29
 8005fac:	d82b      	bhi.n	8006006 <__sflush_r+0xb2>
 8005fae:	4a2a      	ldr	r2, [pc, #168]	@ (8006058 <__sflush_r+0x104>)
 8005fb0:	410a      	asrs	r2, r1
 8005fb2:	07d6      	lsls	r6, r2, #31
 8005fb4:	d427      	bmi.n	8006006 <__sflush_r+0xb2>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	6062      	str	r2, [r4, #4]
 8005fba:	04d9      	lsls	r1, r3, #19
 8005fbc:	6922      	ldr	r2, [r4, #16]
 8005fbe:	6022      	str	r2, [r4, #0]
 8005fc0:	d504      	bpl.n	8005fcc <__sflush_r+0x78>
 8005fc2:	1c42      	adds	r2, r0, #1
 8005fc4:	d101      	bne.n	8005fca <__sflush_r+0x76>
 8005fc6:	682b      	ldr	r3, [r5, #0]
 8005fc8:	b903      	cbnz	r3, 8005fcc <__sflush_r+0x78>
 8005fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fce:	602f      	str	r7, [r5, #0]
 8005fd0:	b1b9      	cbz	r1, 8006002 <__sflush_r+0xae>
 8005fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fd6:	4299      	cmp	r1, r3
 8005fd8:	d002      	beq.n	8005fe0 <__sflush_r+0x8c>
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fa6c 	bl	80064b8 <_free_r>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fe4:	e00d      	b.n	8006002 <__sflush_r+0xae>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b0      	blx	r6
 8005fec:	4602      	mov	r2, r0
 8005fee:	1c50      	adds	r0, r2, #1
 8005ff0:	d1c9      	bne.n	8005f86 <__sflush_r+0x32>
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0c6      	beq.n	8005f86 <__sflush_r+0x32>
 8005ff8:	2b1d      	cmp	r3, #29
 8005ffa:	d001      	beq.n	8006000 <__sflush_r+0xac>
 8005ffc:	2b16      	cmp	r3, #22
 8005ffe:	d11e      	bne.n	800603e <__sflush_r+0xea>
 8006000:	602f      	str	r7, [r5, #0]
 8006002:	2000      	movs	r0, #0
 8006004:	e022      	b.n	800604c <__sflush_r+0xf8>
 8006006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800600a:	b21b      	sxth	r3, r3
 800600c:	e01b      	b.n	8006046 <__sflush_r+0xf2>
 800600e:	690f      	ldr	r7, [r1, #16]
 8006010:	2f00      	cmp	r7, #0
 8006012:	d0f6      	beq.n	8006002 <__sflush_r+0xae>
 8006014:	0793      	lsls	r3, r2, #30
 8006016:	680e      	ldr	r6, [r1, #0]
 8006018:	bf08      	it	eq
 800601a:	694b      	ldreq	r3, [r1, #20]
 800601c:	600f      	str	r7, [r1, #0]
 800601e:	bf18      	it	ne
 8006020:	2300      	movne	r3, #0
 8006022:	eba6 0807 	sub.w	r8, r6, r7
 8006026:	608b      	str	r3, [r1, #8]
 8006028:	f1b8 0f00 	cmp.w	r8, #0
 800602c:	dde9      	ble.n	8006002 <__sflush_r+0xae>
 800602e:	6a21      	ldr	r1, [r4, #32]
 8006030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006032:	4643      	mov	r3, r8
 8006034:	463a      	mov	r2, r7
 8006036:	4628      	mov	r0, r5
 8006038:	47b0      	blx	r6
 800603a:	2800      	cmp	r0, #0
 800603c:	dc08      	bgt.n	8006050 <__sflush_r+0xfc>
 800603e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	4407      	add	r7, r0
 8006052:	eba8 0800 	sub.w	r8, r8, r0
 8006056:	e7e7      	b.n	8006028 <__sflush_r+0xd4>
 8006058:	dfbffffe 	.word	0xdfbffffe

0800605c <_fflush_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	690b      	ldr	r3, [r1, #16]
 8006060:	4605      	mov	r5, r0
 8006062:	460c      	mov	r4, r1
 8006064:	b913      	cbnz	r3, 800606c <_fflush_r+0x10>
 8006066:	2500      	movs	r5, #0
 8006068:	4628      	mov	r0, r5
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	b118      	cbz	r0, 8006076 <_fflush_r+0x1a>
 800606e:	6a03      	ldr	r3, [r0, #32]
 8006070:	b90b      	cbnz	r3, 8006076 <_fflush_r+0x1a>
 8006072:	f7ff f9a7 	bl	80053c4 <__sinit>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f3      	beq.n	8006066 <_fflush_r+0xa>
 800607e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006080:	07d0      	lsls	r0, r2, #31
 8006082:	d404      	bmi.n	800608e <_fflush_r+0x32>
 8006084:	0599      	lsls	r1, r3, #22
 8006086:	d402      	bmi.n	800608e <_fflush_r+0x32>
 8006088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800608a:	f7ff fa8a 	bl	80055a2 <__retarget_lock_acquire_recursive>
 800608e:	4628      	mov	r0, r5
 8006090:	4621      	mov	r1, r4
 8006092:	f7ff ff5f 	bl	8005f54 <__sflush_r>
 8006096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006098:	07da      	lsls	r2, r3, #31
 800609a:	4605      	mov	r5, r0
 800609c:	d4e4      	bmi.n	8006068 <_fflush_r+0xc>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	059b      	lsls	r3, r3, #22
 80060a2:	d4e1      	bmi.n	8006068 <_fflush_r+0xc>
 80060a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060a6:	f7ff fa7d 	bl	80055a4 <__retarget_lock_release_recursive>
 80060aa:	e7dd      	b.n	8006068 <_fflush_r+0xc>

080060ac <__malloc_lock>:
 80060ac:	4801      	ldr	r0, [pc, #4]	@ (80060b4 <__malloc_lock+0x8>)
 80060ae:	f7ff ba78 	b.w	80055a2 <__retarget_lock_acquire_recursive>
 80060b2:	bf00      	nop
 80060b4:	20000810 	.word	0x20000810

080060b8 <__malloc_unlock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	@ (80060c0 <__malloc_unlock+0x8>)
 80060ba:	f7ff ba73 	b.w	80055a4 <__retarget_lock_release_recursive>
 80060be:	bf00      	nop
 80060c0:	20000810 	.word	0x20000810

080060c4 <__sread>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	460c      	mov	r4, r1
 80060c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060cc:	f000 f9c0 	bl	8006450 <_read_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	bfab      	itete	ge
 80060d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060d6:	89a3      	ldrhlt	r3, [r4, #12]
 80060d8:	181b      	addge	r3, r3, r0
 80060da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060de:	bfac      	ite	ge
 80060e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060e2:	81a3      	strhlt	r3, [r4, #12]
 80060e4:	bd10      	pop	{r4, pc}

080060e6 <__swrite>:
 80060e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	461f      	mov	r7, r3
 80060ec:	898b      	ldrh	r3, [r1, #12]
 80060ee:	05db      	lsls	r3, r3, #23
 80060f0:	4605      	mov	r5, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	4616      	mov	r6, r2
 80060f6:	d505      	bpl.n	8006104 <__swrite+0x1e>
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	2302      	movs	r3, #2
 80060fe:	2200      	movs	r2, #0
 8006100:	f000 f994 	bl	800642c <_lseek_r>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800610a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	4632      	mov	r2, r6
 8006112:	463b      	mov	r3, r7
 8006114:	4628      	mov	r0, r5
 8006116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	f000 b9bb 	b.w	8006494 <_write_r>

0800611e <__sseek>:
 800611e:	b510      	push	{r4, lr}
 8006120:	460c      	mov	r4, r1
 8006122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006126:	f000 f981 	bl	800642c <_lseek_r>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	bf15      	itete	ne
 8006130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800613a:	81a3      	strheq	r3, [r4, #12]
 800613c:	bf18      	it	ne
 800613e:	81a3      	strhne	r3, [r4, #12]
 8006140:	bd10      	pop	{r4, pc}

08006142 <__sclose>:
 8006142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006146:	f000 b93f 	b.w	80063c8 <_close_r>

0800614a <_realloc_r>:
 800614a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614e:	4680      	mov	r8, r0
 8006150:	4615      	mov	r5, r2
 8006152:	460c      	mov	r4, r1
 8006154:	b921      	cbnz	r1, 8006160 <_realloc_r+0x16>
 8006156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800615a:	4611      	mov	r1, r2
 800615c:	f7ff bcec 	b.w	8005b38 <_malloc_r>
 8006160:	b92a      	cbnz	r2, 800616e <_realloc_r+0x24>
 8006162:	f000 f9a9 	bl	80064b8 <_free_r>
 8006166:	2400      	movs	r4, #0
 8006168:	4620      	mov	r0, r4
 800616a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616e:	f000 f9ed 	bl	800654c <_malloc_usable_size_r>
 8006172:	4285      	cmp	r5, r0
 8006174:	4606      	mov	r6, r0
 8006176:	d802      	bhi.n	800617e <_realloc_r+0x34>
 8006178:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800617c:	d8f4      	bhi.n	8006168 <_realloc_r+0x1e>
 800617e:	4629      	mov	r1, r5
 8006180:	4640      	mov	r0, r8
 8006182:	f7ff fcd9 	bl	8005b38 <_malloc_r>
 8006186:	4607      	mov	r7, r0
 8006188:	2800      	cmp	r0, #0
 800618a:	d0ec      	beq.n	8006166 <_realloc_r+0x1c>
 800618c:	42b5      	cmp	r5, r6
 800618e:	462a      	mov	r2, r5
 8006190:	4621      	mov	r1, r4
 8006192:	bf28      	it	cs
 8006194:	4632      	movcs	r2, r6
 8006196:	f7ff fa06 	bl	80055a6 <memcpy>
 800619a:	4621      	mov	r1, r4
 800619c:	4640      	mov	r0, r8
 800619e:	f000 f98b 	bl	80064b8 <_free_r>
 80061a2:	463c      	mov	r4, r7
 80061a4:	e7e0      	b.n	8006168 <_realloc_r+0x1e>

080061a6 <__swbuf_r>:
 80061a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a8:	460e      	mov	r6, r1
 80061aa:	4614      	mov	r4, r2
 80061ac:	4605      	mov	r5, r0
 80061ae:	b118      	cbz	r0, 80061b8 <__swbuf_r+0x12>
 80061b0:	6a03      	ldr	r3, [r0, #32]
 80061b2:	b90b      	cbnz	r3, 80061b8 <__swbuf_r+0x12>
 80061b4:	f7ff f906 	bl	80053c4 <__sinit>
 80061b8:	69a3      	ldr	r3, [r4, #24]
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	071a      	lsls	r2, r3, #28
 80061c0:	d501      	bpl.n	80061c6 <__swbuf_r+0x20>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	b943      	cbnz	r3, 80061d8 <__swbuf_r+0x32>
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 f82b 	bl	8006224 <__swsetup_r>
 80061ce:	b118      	cbz	r0, 80061d8 <__swbuf_r+0x32>
 80061d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80061d4:	4638      	mov	r0, r7
 80061d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	6922      	ldr	r2, [r4, #16]
 80061dc:	1a98      	subs	r0, r3, r2
 80061de:	6963      	ldr	r3, [r4, #20]
 80061e0:	b2f6      	uxtb	r6, r6
 80061e2:	4283      	cmp	r3, r0
 80061e4:	4637      	mov	r7, r6
 80061e6:	dc05      	bgt.n	80061f4 <__swbuf_r+0x4e>
 80061e8:	4621      	mov	r1, r4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7ff ff36 	bl	800605c <_fflush_r>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d1ed      	bne.n	80061d0 <__swbuf_r+0x2a>
 80061f4:	68a3      	ldr	r3, [r4, #8]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	6022      	str	r2, [r4, #0]
 8006200:	701e      	strb	r6, [r3, #0]
 8006202:	6962      	ldr	r2, [r4, #20]
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	429a      	cmp	r2, r3
 8006208:	d004      	beq.n	8006214 <__swbuf_r+0x6e>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	07db      	lsls	r3, r3, #31
 800620e:	d5e1      	bpl.n	80061d4 <__swbuf_r+0x2e>
 8006210:	2e0a      	cmp	r6, #10
 8006212:	d1df      	bne.n	80061d4 <__swbuf_r+0x2e>
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f7ff ff20 	bl	800605c <_fflush_r>
 800621c:	2800      	cmp	r0, #0
 800621e:	d0d9      	beq.n	80061d4 <__swbuf_r+0x2e>
 8006220:	e7d6      	b.n	80061d0 <__swbuf_r+0x2a>
	...

08006224 <__swsetup_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4b29      	ldr	r3, [pc, #164]	@ (80062cc <__swsetup_r+0xa8>)
 8006228:	4605      	mov	r5, r0
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	460c      	mov	r4, r1
 800622e:	b118      	cbz	r0, 8006238 <__swsetup_r+0x14>
 8006230:	6a03      	ldr	r3, [r0, #32]
 8006232:	b90b      	cbnz	r3, 8006238 <__swsetup_r+0x14>
 8006234:	f7ff f8c6 	bl	80053c4 <__sinit>
 8006238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623c:	0719      	lsls	r1, r3, #28
 800623e:	d422      	bmi.n	8006286 <__swsetup_r+0x62>
 8006240:	06da      	lsls	r2, r3, #27
 8006242:	d407      	bmi.n	8006254 <__swsetup_r+0x30>
 8006244:	2209      	movs	r2, #9
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006252:	e033      	b.n	80062bc <__swsetup_r+0x98>
 8006254:	0758      	lsls	r0, r3, #29
 8006256:	d512      	bpl.n	800627e <__swsetup_r+0x5a>
 8006258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800625a:	b141      	cbz	r1, 800626e <__swsetup_r+0x4a>
 800625c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006260:	4299      	cmp	r1, r3
 8006262:	d002      	beq.n	800626a <__swsetup_r+0x46>
 8006264:	4628      	mov	r0, r5
 8006266:	f000 f927 	bl	80064b8 <_free_r>
 800626a:	2300      	movs	r3, #0
 800626c:	6363      	str	r3, [r4, #52]	@ 0x34
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	2300      	movs	r3, #0
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f043 0308 	orr.w	r3, r3, #8
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	b94b      	cbnz	r3, 800629e <__swsetup_r+0x7a>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006294:	d003      	beq.n	800629e <__swsetup_r+0x7a>
 8006296:	4621      	mov	r1, r4
 8006298:	4628      	mov	r0, r5
 800629a:	f000 f83f 	bl	800631c <__smakebuf_r>
 800629e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a2:	f013 0201 	ands.w	r2, r3, #1
 80062a6:	d00a      	beq.n	80062be <__swsetup_r+0x9a>
 80062a8:	2200      	movs	r2, #0
 80062aa:	60a2      	str	r2, [r4, #8]
 80062ac:	6962      	ldr	r2, [r4, #20]
 80062ae:	4252      	negs	r2, r2
 80062b0:	61a2      	str	r2, [r4, #24]
 80062b2:	6922      	ldr	r2, [r4, #16]
 80062b4:	b942      	cbnz	r2, 80062c8 <__swsetup_r+0xa4>
 80062b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062ba:	d1c5      	bne.n	8006248 <__swsetup_r+0x24>
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
 80062be:	0799      	lsls	r1, r3, #30
 80062c0:	bf58      	it	pl
 80062c2:	6962      	ldrpl	r2, [r4, #20]
 80062c4:	60a2      	str	r2, [r4, #8]
 80062c6:	e7f4      	b.n	80062b2 <__swsetup_r+0x8e>
 80062c8:	2000      	movs	r0, #0
 80062ca:	e7f7      	b.n	80062bc <__swsetup_r+0x98>
 80062cc:	20000018 	.word	0x20000018

080062d0 <__swhatbuf_r>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	460c      	mov	r4, r1
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2900      	cmp	r1, #0
 80062da:	b096      	sub	sp, #88	@ 0x58
 80062dc:	4615      	mov	r5, r2
 80062de:	461e      	mov	r6, r3
 80062e0:	da0d      	bge.n	80062fe <__swhatbuf_r+0x2e>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062e8:	f04f 0100 	mov.w	r1, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2340      	movne	r3, #64	@ 0x40
 80062f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062f4:	2000      	movs	r0, #0
 80062f6:	6031      	str	r1, [r6, #0]
 80062f8:	602b      	str	r3, [r5, #0]
 80062fa:	b016      	add	sp, #88	@ 0x58
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	466a      	mov	r2, sp
 8006300:	f000 f872 	bl	80063e8 <_fstat_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	dbec      	blt.n	80062e2 <__swhatbuf_r+0x12>
 8006308:	9901      	ldr	r1, [sp, #4]
 800630a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800630e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006312:	4259      	negs	r1, r3
 8006314:	4159      	adcs	r1, r3
 8006316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800631a:	e7eb      	b.n	80062f4 <__swhatbuf_r+0x24>

0800631c <__smakebuf_r>:
 800631c:	898b      	ldrh	r3, [r1, #12]
 800631e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006320:	079d      	lsls	r5, r3, #30
 8006322:	4606      	mov	r6, r0
 8006324:	460c      	mov	r4, r1
 8006326:	d507      	bpl.n	8006338 <__smakebuf_r+0x1c>
 8006328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	2301      	movs	r3, #1
 8006332:	6163      	str	r3, [r4, #20]
 8006334:	b003      	add	sp, #12
 8006336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006338:	ab01      	add	r3, sp, #4
 800633a:	466a      	mov	r2, sp
 800633c:	f7ff ffc8 	bl	80062d0 <__swhatbuf_r>
 8006340:	9f00      	ldr	r7, [sp, #0]
 8006342:	4605      	mov	r5, r0
 8006344:	4639      	mov	r1, r7
 8006346:	4630      	mov	r0, r6
 8006348:	f7ff fbf6 	bl	8005b38 <_malloc_r>
 800634c:	b948      	cbnz	r0, 8006362 <__smakebuf_r+0x46>
 800634e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006352:	059a      	lsls	r2, r3, #22
 8006354:	d4ee      	bmi.n	8006334 <__smakebuf_r+0x18>
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	e7e2      	b.n	8006328 <__smakebuf_r+0xc>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	6020      	str	r0, [r4, #0]
 8006366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	9b01      	ldr	r3, [sp, #4]
 800636e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006372:	b15b      	cbz	r3, 800638c <__smakebuf_r+0x70>
 8006374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006378:	4630      	mov	r0, r6
 800637a:	f000 f847 	bl	800640c <_isatty_r>
 800637e:	b128      	cbz	r0, 800638c <__smakebuf_r+0x70>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	81a3      	strh	r3, [r4, #12]
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	431d      	orrs	r5, r3
 8006390:	81a5      	strh	r5, [r4, #12]
 8006392:	e7cf      	b.n	8006334 <__smakebuf_r+0x18>

08006394 <memmove>:
 8006394:	4288      	cmp	r0, r1
 8006396:	b510      	push	{r4, lr}
 8006398:	eb01 0402 	add.w	r4, r1, r2
 800639c:	d902      	bls.n	80063a4 <memmove+0x10>
 800639e:	4284      	cmp	r4, r0
 80063a0:	4623      	mov	r3, r4
 80063a2:	d807      	bhi.n	80063b4 <memmove+0x20>
 80063a4:	1e43      	subs	r3, r0, #1
 80063a6:	42a1      	cmp	r1, r4
 80063a8:	d008      	beq.n	80063bc <memmove+0x28>
 80063aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063b2:	e7f8      	b.n	80063a6 <memmove+0x12>
 80063b4:	4402      	add	r2, r0
 80063b6:	4601      	mov	r1, r0
 80063b8:	428a      	cmp	r2, r1
 80063ba:	d100      	bne.n	80063be <memmove+0x2a>
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063c6:	e7f7      	b.n	80063b8 <memmove+0x24>

080063c8 <_close_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4d06      	ldr	r5, [pc, #24]	@ (80063e4 <_close_r+0x1c>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4604      	mov	r4, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	602b      	str	r3, [r5, #0]
 80063d4:	f7fa fda9 	bl	8000f2a <_close>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_close_r+0x1a>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_close_r+0x1a>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	2000081c 	.word	0x2000081c

080063e8 <_fstat_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	@ (8006408 <_fstat_r+0x20>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fa fda4 	bl	8000f42 <_fstat>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_fstat_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_fstat_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	2000081c 	.word	0x2000081c

0800640c <_isatty_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	@ (8006428 <_isatty_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fda3 	bl	8000f62 <_isatty>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_isatty_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_isatty_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	2000081c 	.word	0x2000081c

0800642c <_lseek_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	@ (800644c <_lseek_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7fa fd9c 	bl	8000f78 <_lseek>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_lseek_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_lseek_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	2000081c 	.word	0x2000081c

08006450 <_read_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	@ (8006470 <_read_r+0x20>)
 8006454:	4604      	mov	r4, r0
 8006456:	4608      	mov	r0, r1
 8006458:	4611      	mov	r1, r2
 800645a:	2200      	movs	r2, #0
 800645c:	602a      	str	r2, [r5, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f7fa fd46 	bl	8000ef0 <_read>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_read_r+0x1e>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_read_r+0x1e>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	2000081c 	.word	0x2000081c

08006474 <_sbrk_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d06      	ldr	r5, [pc, #24]	@ (8006490 <_sbrk_r+0x1c>)
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	f7fa fd88 	bl	8000f94 <_sbrk>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_sbrk_r+0x1a>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_sbrk_r+0x1a>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	2000081c 	.word	0x2000081c

08006494 <_write_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	@ (80064b4 <_write_r+0x20>)
 8006498:	4604      	mov	r4, r0
 800649a:	4608      	mov	r0, r1
 800649c:	4611      	mov	r1, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fa fc1e 	bl	8000ce4 <_write>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_write_r+0x1e>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_write_r+0x1e>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	2000081c 	.word	0x2000081c

080064b8 <_free_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	2900      	cmp	r1, #0
 80064be:	d041      	beq.n	8006544 <_free_r+0x8c>
 80064c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c4:	1f0c      	subs	r4, r1, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	18e4      	addlt	r4, r4, r3
 80064cc:	f7ff fdee 	bl	80060ac <__malloc_lock>
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <_free_r+0x90>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	b933      	cbnz	r3, 80064e4 <_free_r+0x2c>
 80064d6:	6063      	str	r3, [r4, #4]
 80064d8:	6014      	str	r4, [r2, #0]
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e0:	f7ff bdea 	b.w	80060b8 <__malloc_unlock>
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d908      	bls.n	80064fa <_free_r+0x42>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	1821      	adds	r1, r4, r0
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf01      	itttt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	e7ed      	b.n	80064d6 <_free_r+0x1e>
 80064fa:	461a      	mov	r2, r3
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b10b      	cbz	r3, 8006504 <_free_r+0x4c>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d9fa      	bls.n	80064fa <_free_r+0x42>
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	1850      	adds	r0, r2, r1
 8006508:	42a0      	cmp	r0, r4
 800650a:	d10b      	bne.n	8006524 <_free_r+0x6c>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	4401      	add	r1, r0
 8006510:	1850      	adds	r0, r2, r1
 8006512:	4283      	cmp	r3, r0
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	d1e0      	bne.n	80064da <_free_r+0x22>
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	6053      	str	r3, [r2, #4]
 800651e:	4408      	add	r0, r1
 8006520:	6010      	str	r0, [r2, #0]
 8006522:	e7da      	b.n	80064da <_free_r+0x22>
 8006524:	d902      	bls.n	800652c <_free_r+0x74>
 8006526:	230c      	movs	r3, #12
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	e7d6      	b.n	80064da <_free_r+0x22>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	bf04      	itt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	6063      	str	r3, [r4, #4]
 800653a:	bf04      	itt	eq
 800653c:	1809      	addeq	r1, r1, r0
 800653e:	6021      	streq	r1, [r4, #0]
 8006540:	6054      	str	r4, [r2, #4]
 8006542:	e7ca      	b.n	80064da <_free_r+0x22>
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	bf00      	nop
 8006548:	20000818 	.word	0x20000818

0800654c <_malloc_usable_size_r>:
 800654c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006550:	1f18      	subs	r0, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbc      	itt	lt
 8006556:	580b      	ldrlt	r3, [r1, r0]
 8006558:	18c0      	addlt	r0, r0, r3
 800655a:	4770      	bx	lr

0800655c <_init>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr

08006568 <_fini>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr
