
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  0800aea0  0800aea0  0000bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b8  0800c1b8  0000e090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1b8  0800c1b8  0000d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1c0  0800c1c0  0000e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1c0  0800c1c0  0000d1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1c4  0800c1c4  0000d1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800c1c8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050bc  20000090  0800c258  0000e090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000514c  0800c258  0000e14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020366  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1e  00000000  00000000  0002e426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  00033148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001572  00000000  00000000  00034ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002831f  00000000  00000000  00036252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022aaf  00000000  00000000  0005e571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed048  00000000  00000000  00081020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c6c  00000000  00000000  0016e0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00175d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ae88 	.word	0x0800ae88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800ae88 	.word	0x0800ae88

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_ADC1_Init+0x9c>)
 80005c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0xa0>)
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000612:	f001 fccd 	bl	8001fb0 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 fe3e 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000628:	2305      	movs	r3, #5
 800062a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_ADC1_Init+0x98>)
 8000632:	f001 fe9f 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 fe2e 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000ac 	.word	0x200000ac
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_ADC_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d127      	bne.n	80006c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a15      	ldr	r2, [pc, #84]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_ADC_MspInit+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <HAL_ADC_MspInit+0x84>)
 80006c2:	f002 f9f9 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000

080006dc <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <send_AT_command+0x48>)
 80006ec:	f009 fb36 	bl	8009d5c <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <send_AT_command+0x4c>)
 8000702:	f005 f805 	bl	8005710 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f000 f811 	bl	8000730 <waitFor>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <send_AT_command+0x50>)
 8000718:	f009 fb20 	bl	8009d5c <iprintf>
    }
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	0800aea0 	.word	0x0800aea0
 8000728:	2000061c 	.word	0x2000061c
 800072c:	0800aeac 	.word	0x0800aeac

08000730 <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b6      	sub	sp, #216	@ 0xd8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	22c4      	movs	r2, #196	@ 0xc4
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f009 fb8e 	bl	8009e68 <memset>
    uint32_t startTick = HAL_GetTick();
 800074c:	f001 fc00 	bl	8001f50 <HAL_GetTick>
 8000750:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 800075a:	e044      	b.n	80007e6 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 800075c:	f107 0208 	add.w	r2, r7, #8
 8000760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000764:	18d1      	adds	r1, r2, r3
 8000766:	2364      	movs	r3, #100	@ 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	4828      	ldr	r0, [pc, #160]	@ (800080c <waitFor+0xdc>)
 800076c:	f005 f85b 	bl	8005826 <HAL_UART_Receive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d137      	bne.n	80007e6 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d007      	beq.n	8000796 <waitFor+0x66>
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0d      	cmp	r3, #13
 8000794:	d11b      	bne.n	80007ce <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800079e:	4413      	add	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 fb46 	bl	8009e3c <strstr>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4814      	ldr	r0, [pc, #80]	@ (8000810 <waitFor+0xe0>)
 80007be:	f009 facd 	bl	8009d5c <iprintf>
                    return 1;  // Found the expected response
 80007c2:	2301      	movs	r3, #1
 80007c4:	e01d      	b.n	8000802 <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80007cc:	e00b      	b.n	80007e6 <waitFor+0xb6>
            } else {
                index++;
 80007ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 80007d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007dc:	2bc6      	cmp	r3, #198	@ 0xc6
 80007de:	d902      	bls.n	80007e6 <waitFor+0xb6>
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 80007e6:	f001 fbb3 	bl	8001f50 <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8b1      	bhi.n	800075c <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <waitFor+0xe4>)
 80007fc:	f009 faae 	bl	8009d5c <iprintf>
    return 0;  // Timeout reached without expected response
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	37d8      	adds	r7, #216	@ 0xd8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000061c 	.word	0x2000061c
 8000810:	0800aed0 	.word	0x0800aed0
 8000814:	0800aee4 	.word	0x0800aee4

08000818 <ESP_Server_Init>:
void ESP_Server_Init(const char *ssid, const char *password) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	@ 0x70
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
    char cmdBuffer[100];  // Buffer for AT commands

    printf("RESETTING ESP8266...\n");
 8000822:	4821      	ldr	r0, [pc, #132]	@ (80008a8 <ESP_Server_Init+0x90>)
 8000824:	f009 fb02 	bl	8009e2c <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8000828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800082c:	491f      	ldr	r1, [pc, #124]	@ (80008ac <ESP_Server_Init+0x94>)
 800082e:	4820      	ldr	r0, [pc, #128]	@ (80008b0 <ESP_Server_Init+0x98>)
 8000830:	f7ff ff54 	bl	80006dc <send_AT_command>

    printf("Testing AT Command...\n");
 8000834:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <ESP_Server_Init+0x9c>)
 8000836:	f009 faf9 	bl	8009e2c <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 800083a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800083e:	491b      	ldr	r1, [pc, #108]	@ (80008ac <ESP_Server_Init+0x94>)
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <ESP_Server_Init+0xa0>)
 8000842:	f7ff ff4b 	bl	80006dc <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8000846:	481d      	ldr	r0, [pc, #116]	@ (80008bc <ESP_Server_Init+0xa4>)
 8000848:	f009 faf0 	bl	8009e2c <puts>
    sprintf(cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 800084c:	f107 000c 	add.w	r0, r7, #12
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	491a      	ldr	r1, [pc, #104]	@ (80008c0 <ESP_Server_Init+0xa8>)
 8000856:	f009 f99f 	bl	8009b98 <siprintf>
    send_AT_command(cmdBuffer, "WIFI CONNECTED", 15000);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000862:	4918      	ldr	r1, [pc, #96]	@ (80008c4 <ESP_Server_Init+0xac>)
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff39 	bl	80006dc <send_AT_command>

    printf("Checking assigned IP address...\n");
 800086a:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <ESP_Server_Init+0xb0>)
 800086c:	f009 fade 	bl	8009e2c <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 8000870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000874:	4915      	ldr	r1, [pc, #84]	@ (80008cc <ESP_Server_Init+0xb4>)
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <ESP_Server_Init+0xb8>)
 8000878:	f7ff ff30 	bl	80006dc <send_AT_command>

    printf("Enabling single connections...\n");
 800087c:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <ESP_Server_Init+0xbc>)
 800087e:	f009 fad5 	bl	8009e2c <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 8000882:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000886:	4909      	ldr	r1, [pc, #36]	@ (80008ac <ESP_Server_Init+0x94>)
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <ESP_Server_Init+0xc0>)
 800088a:	f7ff ff27 	bl	80006dc <send_AT_command>

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <ESP_Server_Init+0xc4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <ESP_Server_Init+0xc4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f042 0220 	orr.w	r2, r2, #32
 800089c:	60da      	str	r2, [r3, #12]
}
 800089e:	bf00      	nop
 80008a0:	3770      	adds	r7, #112	@ 0x70
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	0800af00 	.word	0x0800af00
 80008ac:	0800af18 	.word	0x0800af18
 80008b0:	0800af1c 	.word	0x0800af1c
 80008b4:	0800af28 	.word	0x0800af28
 80008b8:	0800af40 	.word	0x0800af40
 80008bc:	0800af48 	.word	0x0800af48
 80008c0:	0800af60 	.word	0x0800af60
 80008c4:	0800af78 	.word	0x0800af78
 80008c8:	0800af88 	.word	0x0800af88
 80008cc:	0800afa8 	.word	0x0800afa8
 80008d0:	0800afb0 	.word	0x0800afb0
 80008d4:	0800afbc 	.word	0x0800afbc
 80008d8:	0800afdc 	.word	0x0800afdc
 80008dc:	2000061c 	.word	0x2000061c

080008e0 <sendHTMLToLocalServer>:

void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80008e6:	af02      	add	r7, sp, #8
 80008e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80008f0:	6018      	str	r0, [r3, #0]
 80008f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80008f6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80008fa:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80008fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000900:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8000904:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	492b      	ldr	r1, [pc, #172]	@ (80009b8 <sendHTMLToLocalServer+0xd8>)
 800090c:	f009 f944 	bl	8009b98 <siprintf>
    send_AT_command(cmdBuffer, "OK", 2000);
 8000910:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000914:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000918:	4928      	ldr	r1, [pc, #160]	@ (80009bc <sendHTMLToLocalServer+0xdc>)
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fede 	bl	80006dc <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 8000920:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000924:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	f7ff fc71 	bl	8000210 <strlen>
 800092e:	4601      	mov	r1, r0
 8000930:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000934:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8000938:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800093c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8000940:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	460b      	mov	r3, r1
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	491c      	ldr	r1, [pc, #112]	@ (80009c0 <sendHTMLToLocalServer+0xe0>)
 800094e:	f009 f923 	bl	8009b98 <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 8000952:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc5a 	bl	8000210 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 800096a:	4916      	ldr	r1, [pc, #88]	@ (80009c4 <sendHTMLToLocalServer+0xe4>)
 800096c:	4618      	mov	r0, r3
 800096e:	f009 f913 	bl	8009b98 <siprintf>
    send_AT_command(responseBuffer, ">", 500);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800097a:	4913      	ldr	r1, [pc, #76]	@ (80009c8 <sendHTMLToLocalServer+0xe8>)
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fead 	bl	80006dc <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 1000);
 8000982:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800098a:	4910      	ldr	r1, [pc, #64]	@ (80009cc <sendHTMLToLocalServer+0xec>)
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fea5 	bl	80006dc <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 500);
 8000992:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000996:	4909      	ldr	r1, [pc, #36]	@ (80009bc <sendHTMLToLocalServer+0xdc>)
 8000998:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <sendHTMLToLocalServer+0xf0>)
 800099a:	f7ff fe9f 	bl	80006dc <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 800099e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80009a2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <sendHTMLToLocalServer+0xf4>)
 80009aa:	f009 f9d7 	bl	8009d5c <iprintf>
}
 80009ae:	bf00      	nop
 80009b0:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	0800afec 	.word	0x0800afec
 80009bc:	0800af18 	.word	0x0800af18
 80009c0:	0800b00c 	.word	0x0800b00c
 80009c4:	0800b068 	.word	0x0800b068
 80009c8:	0800b078 	.word	0x0800b078
 80009cc:	0800b07c 	.word	0x0800b07c
 80009d0:	0800b084 	.word	0x0800b084
 80009d4:	0800b094 	.word	0x0800b094

080009d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <MX_FREERTOS_Init+0x18>)
 80009de:	2100      	movs	r1, #0
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_FREERTOS_Init+0x1c>)
 80009e2:	f005 ff6b 	bl	80068bc <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a03      	ldr	r2, [pc, #12]	@ (80009f8 <MX_FREERTOS_Init+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	0800bff4 	.word	0x0800bff4
 80009f4:	080009fd 	.word	0x080009fd
 80009f8:	200000f4 	.word	0x200000f4

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f005 ffeb 	bl	80069e0 <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <StartDefaultTask+0x8>

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b3d      	ldr	r3, [pc, #244]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b3a      	ldr	r3, [pc, #232]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a35      	ldr	r2, [pc, #212]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b33      	ldr	r3, [pc, #204]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a2e      	ldr	r2, [pc, #184]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0x110>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|System_state_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2160      	movs	r1, #96	@ 0x60
 8000a96:	4822      	ldr	r0, [pc, #136]	@ (8000b20 <MX_GPIO_Init+0x114>)
 8000a98:	f002 f9ba 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	4820      	ldr	r0, [pc, #128]	@ (8000b24 <MX_GPIO_Init+0x118>)
 8000aa2:	f002 f9b5 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	481a      	ldr	r0, [pc, #104]	@ (8000b28 <MX_GPIO_Init+0x11c>)
 8000abe:	f001 fffb 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|System_state_Pin;
 8000ac2:	2360      	movs	r3, #96	@ 0x60
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <MX_GPIO_Init+0x114>)
 8000ada:	f001 ffed 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = control_System_Pin;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(control_System_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0x11c>)
 8000af2:	f001 ffe1 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 8000af6:	2303      	movs	r3, #3
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_GPIO_Init+0x118>)
 8000b0e:	f001 ffd3 	bl	8002ab8 <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800

08000b2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f002 f96b 	bl	8002e44 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fb92 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000f8 	.word	0x200000f8
 8000b80:	40005400 	.word	0x40005400
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_I2C_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc6:	23c0      	movs	r3, #192	@ 0xc0
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <HAL_I2C_MspInit+0x8c>)
 8000be2:	f001 ff69 	bl	8002ab8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000c1c:	f001 f962 	bl	8001ee4 <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 8000c20:	f000 f8d0 	bl	8000dc4 <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 8000c24:	f7ff fef2 	bl	8000a0c <MX_GPIO_Init>
MX_USART2_UART_Init();
 8000c28:	f001 f884 	bl	8001d34 <MX_USART2_UART_Init>
MX_USART1_UART_Init();
 8000c2c:	f001 f858 	bl	8001ce0 <MX_USART1_UART_Init>
MX_I2C1_Init();
 8000c30:	f7ff ff7c 	bl	8000b2c <MX_I2C1_Init>
MX_ADC1_Init();
 8000c34:	f7ff fcbc 	bl	80005b0 <MX_ADC1_Init>
MX_TIM2_Init();
 8000c38:	f000 ff84 	bl	8001b44 <MX_TIM2_Init>
/* USER CODE BEGIN 2 */
SSD1306_Init(); // Initialize OLED display
 8000c3c:	f000 fb4a 	bl	80012d4 <SSD1306_Init>
SSD1306_Clear(); // Clear the display
 8000c40:	f000 fd6b 	bl	800171a <SSD1306_Clear>
SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 8000c44:	210a      	movs	r1, #10
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fcae 	bl	80015a8 <SSD1306_GotoXY>
SSD1306_Puts("Nope", &Font_11x18, 1); // Display simple message
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4939      	ldr	r1, [pc, #228]	@ (8000d34 <main+0x11c>)
 8000c50:	4839      	ldr	r0, [pc, #228]	@ (8000d38 <main+0x120>)
 8000c52:	f000 fd3d 	bl	80016d0 <SSD1306_Puts>
SSD1306_UpdateScreen(); // Update the screen
 8000c56:	f000 fc01 	bl	800145c <SSD1306_UpdateScreen>
// test_Laser();
// test_Buzzer();
// test_LED();
// test_Servo();
// test_ESP8266();
ESP_Server_Init(username, pwd);
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <main+0x124>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a38      	ldr	r2, [pc, #224]	@ (8000d40 <main+0x128>)
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fdd7 	bl	8000818 <ESP_Server_Init>

sendHTMLToLocalServer(localIP, regularHTML);
 8000c6a:	4b36      	ldr	r3, [pc, #216]	@ (8000d44 <main+0x12c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a36      	ldr	r2, [pc, #216]	@ (8000d48 <main+0x130>)
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe33 	bl	80008e0 <sendHTMLToLocalServer>
systemStateMutex = osMutexNew(&systemStateMutex_attributes);
 8000c7a:	4834      	ldr	r0, [pc, #208]	@ (8000d4c <main+0x134>)
 8000c7c:	f005 fecb 	bl	8006a16 <osMutexNew>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a33      	ldr	r2, [pc, #204]	@ (8000d50 <main+0x138>)
 8000c84:	6013      	str	r3, [r2, #0]
if (systemStateMutex == NULL) {
 8000c86:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <main+0x138>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <main+0x7c>
    printf("Failed to create system state mutex\n");
 8000c8e:	4831      	ldr	r0, [pc, #196]	@ (8000d54 <main+0x13c>)
 8000c90:	f009 f8cc 	bl	8009e2c <puts>
}
// test_Button();
/* USER CODE END 2 */
/* Init scheduler */
osKernelInitialize();
 8000c94:	f005 fdc8 	bl	8006828 <osKernelInitialize>
/* Call init function for freertos objects (in freertos.c) */
MX_FREERTOS_Init();
 8000c98:	f7ff fe9e 	bl	80009d8 <MX_FREERTOS_Init>
TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d58 <main+0x140>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	482e      	ldr	r0, [pc, #184]	@ (8000d5c <main+0x144>)
 8000ca2:	f005 fe0b 	bl	80068bc <osThreadNew>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8000d60 <main+0x148>)
 8000caa:	6013      	str	r3, [r2, #0]
TaskSystemButtonHandle = osThreadNew(StartTaskSystemButton, NULL, &TaskSystemButton_attributes);
 8000cac:	4a2d      	ldr	r2, [pc, #180]	@ (8000d64 <main+0x14c>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	482d      	ldr	r0, [pc, #180]	@ (8000d68 <main+0x150>)
 8000cb2:	f005 fe03 	bl	80068bc <osThreadNew>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8000d6c <main+0x154>)
 8000cba:	6013      	str	r3, [r2, #0]
TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 8000cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8000d70 <main+0x158>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	482c      	ldr	r0, [pc, #176]	@ (8000d74 <main+0x15c>)
 8000cc2:	f005 fdfb 	bl	80068bc <osThreadNew>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000d78 <main+0x160>)
 8000cca:	6013      	str	r3, [r2, #0]
//laser
TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <main+0x164>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	482b      	ldr	r0, [pc, #172]	@ (8000d80 <main+0x168>)
 8000cd2:	f005 fdf3 	bl	80068bc <osThreadNew>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d84 <main+0x16c>)
 8000cda:	6013      	str	r3, [r2, #0]
TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 8000cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8000d88 <main+0x170>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	482a      	ldr	r0, [pc, #168]	@ (8000d8c <main+0x174>)
 8000ce2:	f005 fdeb 	bl	80068bc <osThreadNew>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <main+0x178>)
 8000cea:	6013      	str	r3, [r2, #0]
TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 8000cec:	4a29      	ldr	r2, [pc, #164]	@ (8000d94 <main+0x17c>)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4829      	ldr	r0, [pc, #164]	@ (8000d98 <main+0x180>)
 8000cf2:	f005 fde3 	bl	80068bc <osThreadNew>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <main+0x184>)
 8000cfa:	6013      	str	r3, [r2, #0]
TaskLedSystemHandle = osThreadNew(StartTaskSystemLed, NULL, &StartTaskSystemLed_attributes);
 8000cfc:	4a28      	ldr	r2, [pc, #160]	@ (8000da0 <main+0x188>)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4828      	ldr	r0, [pc, #160]	@ (8000da4 <main+0x18c>)
 8000d02:	f005 fddb 	bl	80068bc <osThreadNew>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <main+0x190>)
 8000d0a:	6013      	str	r3, [r2, #0]
TaskLaserHandle = osThreadNew(StartTaskLaser, NULL, &StartTaskLaser_attributes);
 8000d0c:	4a27      	ldr	r2, [pc, #156]	@ (8000dac <main+0x194>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4827      	ldr	r0, [pc, #156]	@ (8000db0 <main+0x198>)
 8000d12:	f005 fdd3 	bl	80068bc <osThreadNew>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a26      	ldr	r2, [pc, #152]	@ (8000db4 <main+0x19c>)
 8000d1a:	6013      	str	r3, [r2, #0]
TaskUpdateWebHandle = osThreadNew(StartTaskUpdateWeb, NULL, &StartTaskUpdateWeb_attributes);
 8000d1c:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <main+0x1a0>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4826      	ldr	r0, [pc, #152]	@ (8000dbc <main+0x1a4>)
 8000d22:	f005 fdcb 	bl	80068bc <osThreadNew>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a25      	ldr	r2, [pc, #148]	@ (8000dc0 <main+0x1a8>)
 8000d2a:	6013      	str	r3, [r2, #0]
/* Start scheduler */
osKernelStart();
 8000d2c:	f005 fda0 	bl	8006870 <osKernelStart>
/* We should never get here as control is now taken by the scheduler */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <main+0x118>
 8000d34:	20000000 	.word	0x20000000
 8000d38:	0800b210 	.word	0x0800b210
 8000d3c:	20000020 	.word	0x20000020
 8000d40:	2000001c 	.word	0x2000001c
 8000d44:	20000018 	.word	0x20000018
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	0800c15c 	.word	0x0800c15c
 8000d50:	2000017c 	.word	0x2000017c
 8000d54:	0800b218 	.word	0x0800b218
 8000d58:	0800c018 	.word	0x0800c018
 8000d5c:	08000ec5 	.word	0x08000ec5
 8000d60:	20000158 	.word	0x20000158
 8000d64:	0800c03c 	.word	0x0800c03c
 8000d68:	08001021 	.word	0x08001021
 8000d6c:	2000015c 	.word	0x2000015c
 8000d70:	0800c060 	.word	0x0800c060
 8000d74:	080010a1 	.word	0x080010a1
 8000d78:	20000160 	.word	0x20000160
 8000d7c:	0800c084 	.word	0x0800c084
 8000d80:	08001175 	.word	0x08001175
 8000d84:	20000164 	.word	0x20000164
 8000d88:	0800c0a8 	.word	0x0800c0a8
 8000d8c:	080011b5 	.word	0x080011b5
 8000d90:	20000168 	.word	0x20000168
 8000d94:	0800c0cc 	.word	0x0800c0cc
 8000d98:	0800121d 	.word	0x0800121d
 8000d9c:	2000016c 	.word	0x2000016c
 8000da0:	0800c0f0 	.word	0x0800c0f0
 8000da4:	080011e5 	.word	0x080011e5
 8000da8:	20000170 	.word	0x20000170
 8000dac:	0800c114 	.word	0x0800c114
 8000db0:	0800113d 	.word	0x0800113d
 8000db4:	20000174 	.word	0x20000174
 8000db8:	0800c138 	.word	0x0800c138
 8000dbc:	08000f19 	.word	0x08000f19
 8000dc0:	20000178 	.word	0x20000178

08000dc4 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	@ 0x50
 8000dc8:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2234      	movs	r2, #52	@ 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f009 f848 	bl	8009e68 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <SystemClock_Config+0xd4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	4a29      	ldr	r2, [pc, #164]	@ (8000e98 <SystemClock_Config+0xd4>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <SystemClock_Config+0xd4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <SystemClock_Config+0xd8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e10:	4a22      	ldr	r2, [pc, #136]	@ (8000e9c <SystemClock_Config+0xd8>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <SystemClock_Config+0xd8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2302      	movs	r3, #2
 8000e32:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 16;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 336;
 8000e3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e40:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f93e 	bl	80040d4 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x9e>
{
  Error_Handler();
 8000e5e:	f000 fa1d 	bl	800129c <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	60bb      	str	r3, [r7, #8]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e72:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fdac 	bl	80039dc <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xca>
{
  Error_Handler();
 8000e8a:	f000 fa07 	bl	800129c <Error_Handler>
}
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	@ 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */
/* USER CODE END Callback 0 */
if (htim->Instance == TIM6) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
  HAL_IncTick();
 8000eb2:	f001 f839 	bl	8001f28 <HAL_IncTick>
}
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <StartTaskButton>:
void StartTaskButton(void *argument) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8000ecc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed0:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <StartTaskButton+0x48>)
 8000ed2:	f001 ff85 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f7      	bne.n	8000ecc <StartTaskButton+0x8>
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <StartTaskButton+0x4c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1f3      	bne.n	8000ecc <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 8000ee4:	2032      	movs	r0, #50	@ 0x32
 8000ee6:	f001 f83f 	bl	8001f68 <HAL_Delay>
			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <StartTaskButton+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET);
 8000ef0:	bf00      	nop
 8000ef2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <StartTaskButton+0x48>)
 8000ef8:	f001 ff72 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f7      	beq.n	8000ef2 <StartTaskButton+0x2e>
			HAL_Delay(50); // Prevent multiple triggers
 8000f02:	2032      	movs	r0, #50	@ 0x32
 8000f04:	f001 f830 	bl	8001f68 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8000f08:	e7e0      	b.n	8000ecc <StartTaskButton+0x8>
 8000f0a:	bf00      	nop
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	20000150 	.word	0x20000150
 8000f14:	2000014c 	.word	0x2000014c

08000f18 <StartTaskUpdateWeb>:
		}
	}
}

void StartTaskUpdateWeb(void *argument) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    int prev_alarm_state = ALARM_OFF;  // Track previous state && prev_alarm_state == ALARM_OFF
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
    int prev_system_state = SYSTEM_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]

    for (;;) {
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8000f28:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4835      	ldr	r0, [pc, #212]	@ (8001008 <StartTaskUpdateWeb+0xf0>)
 8000f32:	f008 ff13 	bl	8009d5c <iprintf>

        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8000f36:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10b      	bne.n	8000f56 <StartTaskUpdateWeb+0x3e>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d108      	bne.n	8000f56 <StartTaskUpdateWeb+0x3e>
            // Alarm just turned ON
            sendHTMLToLocalServer(localIP, intrusionHTML);
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <StartTaskUpdateWeb+0xf4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a31      	ldr	r2, [pc, #196]	@ (8001010 <StartTaskUpdateWeb+0xf8>)
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fcc6 	bl	80008e0 <sendHTMLToLocalServer>
        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 8000f54:	e04a      	b.n	8000fec <StartTaskUpdateWeb+0xd4>
        }
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10f      	bne.n	8000f7e <StartTaskUpdateWeb+0x66>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10c      	bne.n	8000f7e <StartTaskUpdateWeb+0x66>
 8000f64:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <StartTaskUpdateWeb+0xfc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d108      	bne.n	8000f7e <StartTaskUpdateWeb+0x66>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <StartTaskUpdateWeb+0xf4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a29      	ldr	r2, [pc, #164]	@ (8001018 <StartTaskUpdateWeb+0x100>)
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fcb2 	bl	80008e0 <sendHTMLToLocalServer>
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8000f7c:	e036      	b.n	8000fec <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <StartTaskUpdateWeb+0x8e>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10c      	bne.n	8000fa6 <StartTaskUpdateWeb+0x8e>
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <StartTaskUpdateWeb+0xfc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <StartTaskUpdateWeb+0x8e>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <StartTaskUpdateWeb+0xf4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <StartTaskUpdateWeb+0x100>)
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fc9e 	bl	80008e0 <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8000fa4:	e022      	b.n	8000fec <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10b      	bne.n	8000fc6 <StartTaskUpdateWeb+0xae>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <StartTaskUpdateWeb+0xae>
        	sendHTMLToLocalServer(localIP, regularHTML);
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <StartTaskUpdateWeb+0xf4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a18      	ldr	r2, [pc, #96]	@ (800101c <StartTaskUpdateWeb+0x104>)
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fc8e 	bl	80008e0 <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 8000fc4:	e012      	b.n	8000fec <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state == SYSTEM_OFF && system_state== SYSTEM_ON){
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10e      	bne.n	8000fec <StartTaskUpdateWeb+0xd4>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <StartTaskUpdateWeb+0xd4>
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <StartTaskUpdateWeb+0xfc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <StartTaskUpdateWeb+0xd4>
        	sendHTMLToLocalServer(localIP, regularHTML);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <StartTaskUpdateWeb+0xf4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <StartTaskUpdateWeb+0x104>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fc7a 	bl	80008e0 <sendHTMLToLocalServer>
        }

        // Update previous state
        prev_alarm_state = alarm_state;
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <StartTaskUpdateWeb+0xec>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
        prev_system_state = system_state;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <StartTaskUpdateWeb+0xfc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60bb      	str	r3, [r7, #8]

        osDelay(1000);  // Delay before checking again
 8000ff8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffc:	f005 fcf0 	bl	80069e0 <osDelay>
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8001000:	e792      	b.n	8000f28 <StartTaskUpdateWeb+0x10>
 8001002:	bf00      	nop
 8001004:	2000014c 	.word	0x2000014c
 8001008:	0800b23c 	.word	0x0800b23c
 800100c:	20000018 	.word	0x20000018
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000150 	.word	0x20000150
 8001018:	20000014 	.word	0x20000014
 800101c:	20000010 	.word	0x20000010

08001020 <StartTaskSystemButton>:
    }
}

void StartTaskSystemButton(void *argument) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
   for (;;) {
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001028:	2110      	movs	r1, #16
 800102a:	4819      	ldr	r0, [pc, #100]	@ (8001090 <StartTaskSystemButton+0x70>)
 800102c:	f001 fed8 	bl	8002de0 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f8      	bne.n	8001028 <StartTaskSystemButton+0x8>
           HAL_Delay(50); // Debounce delay
 8001036:	2032      	movs	r0, #50	@ 0x32
 8001038:	f000 ff96 	bl	8001f68 <HAL_Delay>
           osMutexAcquire(systemStateMutex, osWaitForever); // Lock mutex
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <StartTaskSystemButton+0x74>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001044:	4618      	mov	r0, r3
 8001046:	f005 fd6c 	bl	8006b22 <osMutexAcquire>
           system_state = !system_state;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <StartTaskSystemButton+0x78>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <StartTaskSystemButton+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
           if (system_state == SYSTEM_OFF){
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <StartTaskSystemButton+0x78>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <StartTaskSystemButton+0x4c>
               alarm_state = ALARM_OFF;
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <StartTaskSystemButton+0x7c>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
           }
           osMutexRelease(systemStateMutex); // Release mutex
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <StartTaskSystemButton+0x74>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f005 fda1 	bl	8006bb8 <osMutexRelease>
           // Wait for button release
           while (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET);
 8001076:	bf00      	nop
 8001078:	2110      	movs	r1, #16
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <StartTaskSystemButton+0x70>)
 800107c:	f001 feb0 	bl	8002de0 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f8      	beq.n	8001078 <StartTaskSystemButton+0x58>
           HAL_Delay(50); // Prevent multiple triggers
 8001086:	2032      	movs	r0, #50	@ 0x32
 8001088:	f000 ff6e 	bl	8001f68 <HAL_Delay>
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 800108c:	e7cc      	b.n	8001028 <StartTaskSystemButton+0x8>
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800
 8001094:	2000017c 	.word	0x2000017c
 8001098:	20000150 	.word	0x20000150
 800109c:	2000014c 	.word	0x2000014c

080010a0 <StartTaskLDR>:
       }
   }
}
void StartTaskLDR(void *argument) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
   int local_system_state = SYSTEM_OFF;  // Track the last known state
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
   for (;;) {
       // Acquire mutex before reading system_state
       osMutexAcquire(systemStateMutex, osWaitForever);
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <StartTaskLDR+0x88>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fd34 	bl	8006b22 <osMutexAcquire>
       int current_system_state = system_state;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <StartTaskLDR+0x8c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
       osMutexRelease(systemStateMutex);
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <StartTaskLDR+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 fd77 	bl	8006bb8 <osMutexRelease>
       // Check if system just turned ON
       if (current_system_state == SYSTEM_ON && local_system_state == SYSTEM_OFF) {
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d106      	bne.n	80010de <StartTaskLDR+0x3e>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d103      	bne.n	80010de <StartTaskLDR+0x3e>
           osDelay(2000);  // Delay before first LDR reading
 80010d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010da:	f005 fc81 	bl	80069e0 <osDelay>
       }
       // Update local state
       local_system_state = current_system_state;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	617b      	str	r3, [r7, #20]
       if (current_system_state == SYSTEM_ON) {
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d119      	bne.n	800111c <StartTaskLDR+0x7c>
           uint32_t adcValue;
           HAL_ADC_Start(&hadc1);
 80010e8:	4811      	ldr	r0, [pc, #68]	@ (8001130 <StartTaskLDR+0x90>)
 80010ea:	f000 ffa5 	bl	8002038 <HAL_ADC_Start>
           HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f2:	480f      	ldr	r0, [pc, #60]	@ (8001130 <StartTaskLDR+0x90>)
 80010f4:	f001 f8a5 	bl	8002242 <HAL_ADC_PollForConversion>
           adcValue = HAL_ADC_GetValue(&hadc1);
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <StartTaskLDR+0x90>)
 80010fa:	f001 f92d 	bl	8002358 <HAL_ADC_GetValue>
 80010fe:	60f8      	str	r0, [r7, #12]
           HAL_ADC_Stop(&hadc1);
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <StartTaskLDR+0x90>)
 8001102:	f001 f86b 	bl	80021dc <HAL_ADC_Stop>
           light_value = adcValue;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <StartTaskLDR+0x94>)
 800110a:	6013      	str	r3, [r2, #0]
           if (adcValue < 1500) {
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001112:	4293      	cmp	r3, r2
 8001114:	d802      	bhi.n	800111c <StartTaskLDR+0x7c>
               alarm_state = ALARM_ON;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <StartTaskLDR+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]

           }
       }
       osDelay(500);  // Regular delay between reads
 800111c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001120:	f005 fc5e 	bl	80069e0 <osDelay>
   for (;;) {
 8001124:	e7c2      	b.n	80010ac <StartTaskLDR+0xc>
 8001126:	bf00      	nop
 8001128:	2000017c 	.word	0x2000017c
 800112c:	20000150 	.word	0x20000150
 8001130:	200000ac 	.word	0x200000ac
 8001134:	20000008 	.word	0x20000008
 8001138:	2000014c 	.word	0x2000014c

0800113c <StartTaskLaser>:
	        SSD1306_Puts(buffer, &Font_11x18, 1);  // Display the light value
	        SSD1306_UpdateScreen();  // Update screen
	        osDelay(1000);  // Add delay to prevent flickering
	    }
}
void StartTaskLaser(void *argument) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <StartTaskLaser+0x30>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <StartTaskLaser+0x1c>
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2102      	movs	r1, #2
 8001150:	4807      	ldr	r0, [pc, #28]	@ (8001170 <StartTaskLaser+0x34>)
 8001152:	f001 fe5d 	bl	8002e10 <HAL_GPIO_WritePin>
 8001156:	e004      	b.n	8001162 <StartTaskLaser+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2102      	movs	r1, #2
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <StartTaskLaser+0x34>)
 800115e:	f001 fe57 	bl	8002e10 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001162:	2064      	movs	r0, #100	@ 0x64
 8001164:	f005 fc3c 	bl	80069e0 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001168:	e7ec      	b.n	8001144 <StartTaskLaser+0x8>
 800116a:	bf00      	nop
 800116c:	20000150 	.word	0x20000150
 8001170:	40020400 	.word	0x40020400

08001174 <StartTaskBuzzer>:
   }
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <StartTaskBuzzer+0x38>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d1fb      	bne.n	800117c <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8001184:	2201      	movs	r2, #1
 8001186:	2101      	movs	r1, #1
 8001188:	4809      	ldr	r0, [pc, #36]	@ (80011b0 <StartTaskBuzzer+0x3c>)
 800118a:	f001 fe41 	bl	8002e10 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 800118e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001192:	f000 fee9 	bl	8001f68 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <StartTaskBuzzer+0x3c>)
 800119c:	f001 fe38 	bl	8002e10 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80011a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a4:	f000 fee0 	bl	8001f68 <HAL_Delay>
		if(alarm_state == ALARM_ON){
 80011a8:	e7e8      	b.n	800117c <StartTaskBuzzer+0x8>
 80011aa:	bf00      	nop
 80011ac:	2000014c 	.word	0x2000014c
 80011b0:	40020400 	.word	0x40020400

080011b4 <StartTaskLed>:
		}
// Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	for(;;){
		if(alarm_state==ALARM_ON){
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <StartTaskLed+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <StartTaskLed+0x1c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <StartTaskLed+0x2c>)
 80011ca:	f001 fe21 	bl	8002e10 <HAL_GPIO_WritePin>
 80011ce:	e7f5      	b.n	80011bc <StartTaskLed+0x8>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2120      	movs	r1, #32
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <StartTaskLed+0x2c>)
 80011d6:	f001 fe1b 	bl	8002e10 <HAL_GPIO_WritePin>
		if(alarm_state==ALARM_ON){
 80011da:	e7ef      	b.n	80011bc <StartTaskLed+0x8>
 80011dc:	2000014c 	.word	0x2000014c
 80011e0:	40020000 	.word	0x40020000

080011e4 <StartTaskSystemLed>:
		}
		  // LED ON
	}
}
void StartTaskSystemLed(void *argument) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <StartTaskSystemLed+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <StartTaskSystemLed+0x1c>
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2140      	movs	r1, #64	@ 0x40
 80011f8:	4807      	ldr	r0, [pc, #28]	@ (8001218 <StartTaskSystemLed+0x34>)
 80011fa:	f001 fe09 	bl	8002e10 <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <StartTaskSystemLed+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2140      	movs	r1, #64	@ 0x40
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <StartTaskSystemLed+0x34>)
 8001206:	f001 fe03 	bl	8002e10 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 800120a:	2064      	movs	r0, #100	@ 0x64
 800120c:	f005 fbe8 	bl	80069e0 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001210:	e7ec      	b.n	80011ec <StartTaskSystemLed+0x8>
 8001212:	bf00      	nop
 8001214:	20000150 	.word	0x20000150
 8001218:	40020000 	.word	0x40020000

0800121c <StartTaskServo>:
   }
}
void StartTaskServo(void *argument) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001228:	f005 fbda 	bl	80069e0 <osDelay>
		if(alarm_state == ALARM_ON && door_state == DOOR_OPEN){
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <StartTaskServo+0x74>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d114      	bne.n	800125e <StartTaskServo+0x42>
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <StartTaskServo+0x78>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d110      	bne.n	800125e <StartTaskServo+0x42>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800123c:	2100      	movs	r1, #0
 800123e:	4816      	ldr	r0, [pc, #88]	@ (8001298 <StartTaskServo+0x7c>)
 8001240:	f003 fb00 	bl	8004844 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500); // Move to +180°
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <StartTaskServo+0x7c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(2000);
 800124e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001252:	f000 fe89 	bl	8001f68 <HAL_Delay>
			door_state = DOOR_CLOSED;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <StartTaskServo+0x78>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e017      	b.n	800128e <StartTaskServo+0x72>
		}else if(alarm_state == ALARM_OFF && door_state == DOOR_CLOSED){
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <StartTaskServo+0x74>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1de      	bne.n	8001224 <StartTaskServo+0x8>
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <StartTaskServo+0x78>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d1da      	bne.n	8001224 <StartTaskServo+0x8>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	@ (8001298 <StartTaskServo+0x7c>)
 8001272:	f003 fae7 	bl	8004844 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500); // Move to 0° (neutral)
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <StartTaskServo+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800127e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(2000);
 8001280:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001284:	f000 fe70 	bl	8001f68 <HAL_Delay>
			door_state = DOOR_OPEN;
 8001288:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <StartTaskServo+0x78>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 800128e:	e7c9      	b.n	8001224 <StartTaskServo+0x8>
 8001290:	2000014c 	.word	0x2000014c
 8001294:	20000154 	.word	0x20000154
 8001298:	200005d4 	.word	0x200005d4

0800129c <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <_write>:
{
}
/* USER CODE END Error_Handler_Debug */
}
int _write(int file, char *ptr, int len) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <_write+0x28>)
 80012c0:	f004 fa26 	bl	8005710 <HAL_UART_Transmit>
  return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000664 	.word	0x20000664

080012d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80012da:	f000 fa27 	bl	800172c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80012de:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80012e2:	2201      	movs	r2, #1
 80012e4:	2178      	movs	r1, #120	@ 0x78
 80012e6:	485b      	ldr	r0, [pc, #364]	@ (8001454 <SSD1306_Init+0x180>)
 80012e8:	f001 ffee 	bl	80032c8 <HAL_I2C_IsDeviceReady>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e0a9      	b.n	800144a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80012f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80012fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012fc:	e002      	b.n	8001304 <SSD1306_Init+0x30>
		p--;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3b01      	subs	r3, #1
 8001302:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800130a:	22ae      	movs	r2, #174	@ 0xae
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	@ 0x78
 8001310:	f000 fa88 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001314:	2220      	movs	r2, #32
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	@ 0x78
 800131a:	f000 fa83 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800131e:	2210      	movs	r2, #16
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	@ 0x78
 8001324:	f000 fa7e 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001328:	22b0      	movs	r2, #176	@ 0xb0
 800132a:	2100      	movs	r1, #0
 800132c:	2078      	movs	r0, #120	@ 0x78
 800132e:	f000 fa79 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001332:	22c8      	movs	r2, #200	@ 0xc8
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	@ 0x78
 8001338:	f000 fa74 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2078      	movs	r0, #120	@ 0x78
 8001342:	f000 fa6f 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001346:	2210      	movs	r2, #16
 8001348:	2100      	movs	r1, #0
 800134a:	2078      	movs	r0, #120	@ 0x78
 800134c:	f000 fa6a 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001350:	2240      	movs	r2, #64	@ 0x40
 8001352:	2100      	movs	r1, #0
 8001354:	2078      	movs	r0, #120	@ 0x78
 8001356:	f000 fa65 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800135a:	2281      	movs	r2, #129	@ 0x81
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	@ 0x78
 8001360:	f000 fa60 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001364:	22ff      	movs	r2, #255	@ 0xff
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	@ 0x78
 800136a:	f000 fa5b 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800136e:	22a1      	movs	r2, #161	@ 0xa1
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	@ 0x78
 8001374:	f000 fa56 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001378:	22a6      	movs	r2, #166	@ 0xa6
 800137a:	2100      	movs	r1, #0
 800137c:	2078      	movs	r0, #120	@ 0x78
 800137e:	f000 fa51 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001382:	22a8      	movs	r2, #168	@ 0xa8
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	@ 0x78
 8001388:	f000 fa4c 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800138c:	223f      	movs	r2, #63	@ 0x3f
 800138e:	2100      	movs	r1, #0
 8001390:	2078      	movs	r0, #120	@ 0x78
 8001392:	f000 fa47 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001396:	22a4      	movs	r2, #164	@ 0xa4
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	@ 0x78
 800139c:	f000 fa42 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013a0:	22d3      	movs	r2, #211	@ 0xd3
 80013a2:	2100      	movs	r1, #0
 80013a4:	2078      	movs	r0, #120	@ 0x78
 80013a6:	f000 fa3d 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2078      	movs	r0, #120	@ 0x78
 80013b0:	f000 fa38 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80013b4:	22d5      	movs	r2, #213	@ 0xd5
 80013b6:	2100      	movs	r1, #0
 80013b8:	2078      	movs	r0, #120	@ 0x78
 80013ba:	f000 fa33 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80013be:	22f0      	movs	r2, #240	@ 0xf0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	@ 0x78
 80013c4:	f000 fa2e 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80013c8:	22d9      	movs	r2, #217	@ 0xd9
 80013ca:	2100      	movs	r1, #0
 80013cc:	2078      	movs	r0, #120	@ 0x78
 80013ce:	f000 fa29 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80013d2:	2222      	movs	r2, #34	@ 0x22
 80013d4:	2100      	movs	r1, #0
 80013d6:	2078      	movs	r0, #120	@ 0x78
 80013d8:	f000 fa24 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80013dc:	22da      	movs	r2, #218	@ 0xda
 80013de:	2100      	movs	r1, #0
 80013e0:	2078      	movs	r0, #120	@ 0x78
 80013e2:	f000 fa1f 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80013e6:	2212      	movs	r2, #18
 80013e8:	2100      	movs	r1, #0
 80013ea:	2078      	movs	r0, #120	@ 0x78
 80013ec:	f000 fa1a 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80013f0:	22db      	movs	r2, #219	@ 0xdb
 80013f2:	2100      	movs	r1, #0
 80013f4:	2078      	movs	r0, #120	@ 0x78
 80013f6:	f000 fa15 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80013fa:	2220      	movs	r2, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	2078      	movs	r0, #120	@ 0x78
 8001400:	f000 fa10 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001404:	228d      	movs	r2, #141	@ 0x8d
 8001406:	2100      	movs	r1, #0
 8001408:	2078      	movs	r0, #120	@ 0x78
 800140a:	f000 fa0b 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800140e:	2214      	movs	r2, #20
 8001410:	2100      	movs	r1, #0
 8001412:	2078      	movs	r0, #120	@ 0x78
 8001414:	f000 fa06 	bl	8001824 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001418:	22af      	movs	r2, #175	@ 0xaf
 800141a:	2100      	movs	r1, #0
 800141c:	2078      	movs	r0, #120	@ 0x78
 800141e:	f000 fa01 	bl	8001824 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001422:	222e      	movs	r2, #46	@ 0x2e
 8001424:	2100      	movs	r1, #0
 8001426:	2078      	movs	r0, #120	@ 0x78
 8001428:	f000 f9fc 	bl	8001824 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800142c:	2000      	movs	r0, #0
 800142e:	f000 f843 	bl	80014b8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001432:	f000 f813 	bl	800145c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <SSD1306_Init+0x184>)
 8001438:	2200      	movs	r2, #0
 800143a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SSD1306_Init+0x184>)
 800143e:	2200      	movs	r2, #0
 8001440:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SSD1306_Init+0x184>)
 8001444:	2201      	movs	r2, #1
 8001446:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000f8 	.word	0x200000f8
 8001458:	20000580 	.word	0x20000580

0800145c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e01d      	b.n	80014a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3b50      	subs	r3, #80	@ 0x50
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	2100      	movs	r1, #0
 8001472:	2078      	movs	r0, #120	@ 0x78
 8001474:	f000 f9d6 	bl	8001824 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2078      	movs	r0, #120	@ 0x78
 800147e:	f000 f9d1 	bl	8001824 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001482:	2210      	movs	r2, #16
 8001484:	2100      	movs	r1, #0
 8001486:	2078      	movs	r0, #120	@ 0x78
 8001488:	f000 f9cc 	bl	8001824 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	01db      	lsls	r3, r3, #7
 8001490:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <SSD1306_UpdateScreen+0x58>)
 8001492:	441a      	add	r2, r3
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	2140      	movs	r1, #64	@ 0x40
 8001498:	2078      	movs	r0, #120	@ 0x78
 800149a:	f000 f95d 	bl	8001758 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3301      	adds	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	d9de      	bls.n	8001468 <SSD1306_UpdateScreen+0xc>
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000180 	.word	0x20000180

080014b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <SSD1306_Fill+0x14>
 80014c8:	2300      	movs	r3, #0
 80014ca:	e000      	b.n	80014ce <SSD1306_Fill+0x16>
 80014cc:	23ff      	movs	r3, #255	@ 0xff
 80014ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014d2:	4619      	mov	r1, r3
 80014d4:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <SSD1306_Fill+0x2c>)
 80014d6:	f008 fcc7 	bl	8009e68 <memset>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000180 	.word	0x20000180

080014e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
 80014f2:	460b      	mov	r3, r1
 80014f4:	80bb      	strh	r3, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	70fb      	strb	r3, [r7, #3]
	if (
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80014fe:	d848      	bhi.n	8001592 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	2b3f      	cmp	r3, #63	@ 0x3f
 8001504:	d845      	bhi.n	8001592 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <SSD1306_DrawPixel+0xb8>)
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d11a      	bne.n	8001558 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	b298      	uxth	r0, r3
 800152a:	4603      	mov	r3, r0
 800152c:	01db      	lsls	r3, r3, #7
 800152e:	4413      	add	r3, r2
 8001530:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <SSD1306_DrawPixel+0xbc>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	b25a      	sxtb	r2, r3
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b259      	sxtb	r1, r3
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	4603      	mov	r3, r0
 800154c:	01db      	lsls	r3, r3, #7
 800154e:	4413      	add	r3, r2
 8001550:	b2c9      	uxtb	r1, r1
 8001552:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <SSD1306_DrawPixel+0xbc>)
 8001554:	54d1      	strb	r1, [r2, r3]
 8001556:	e01d      	b.n	8001594 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	b298      	uxth	r0, r3
 8001560:	4603      	mov	r3, r0
 8001562:	01db      	lsls	r3, r3, #7
 8001564:	4413      	add	r3, r2
 8001566:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <SSD1306_DrawPixel+0xbc>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	b25a      	sxtb	r2, r3
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	b25b      	sxtb	r3, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4013      	ands	r3, r2
 8001580:	b259      	sxtb	r1, r3
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	4603      	mov	r3, r0
 8001586:	01db      	lsls	r3, r3, #7
 8001588:	4413      	add	r3, r2
 800158a:	b2c9      	uxtb	r1, r1
 800158c:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <SSD1306_DrawPixel+0xbc>)
 800158e:	54d1      	strb	r1, [r2, r3]
 8001590:	e000      	b.n	8001594 <SSD1306_DrawPixel+0xac>
		return;
 8001592:	bf00      	nop
	}
}
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000580 	.word	0x20000580
 80015a4:	20000180 	.word	0x20000180

080015a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <SSD1306_GotoXY+0x28>)
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <SSD1306_GotoXY+0x28>)
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	8053      	strh	r3, [r2, #2]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000580 	.word	0x20000580

080015d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015e4:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <SSD1306_Putc+0xf8>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
	if (
 80015f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80015f2:	dc07      	bgt.n	8001604 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80015f4:	4b35      	ldr	r3, [pc, #212]	@ (80016cc <SSD1306_Putc+0xf8>)
 80015f6:	885b      	ldrh	r3, [r3, #2]
 80015f8:	461a      	mov	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001600:	2b3f      	cmp	r3, #63	@ 0x3f
 8001602:	dd01      	ble.n	8001608 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001604:	2300      	movs	r3, #0
 8001606:	e05d      	b.n	80016c4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e04b      	b.n	80016a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	3b20      	subs	r3, #32
 8001616:	6839      	ldr	r1, [r7, #0]
 8001618:	7849      	ldrb	r1, [r1, #1]
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4619      	mov	r1, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	440b      	add	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e030      	b.n	8001694 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d010      	beq.n	8001664 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <SSD1306_Putc+0xf8>)
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4413      	add	r3, r2
 800164c:	b298      	uxth	r0, r3
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <SSD1306_Putc+0xf8>)
 8001650:	885a      	ldrh	r2, [r3, #2]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	79ba      	ldrb	r2, [r7, #6]
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff ff43 	bl	80014e8 <SSD1306_DrawPixel>
 8001662:	e014      	b.n	800168e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001664:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <SSD1306_Putc+0xf8>)
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	b29b      	uxth	r3, r3
 800166c:	4413      	add	r3, r2
 800166e:	b298      	uxth	r0, r3
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <SSD1306_Putc+0xf8>)
 8001672:	885a      	ldrh	r2, [r3, #2]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b299      	uxth	r1, r3
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	f7ff ff2d 	bl	80014e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	3301      	adds	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4293      	cmp	r3, r2
 800169e:	d3c8      	bcc.n	8001632 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	461a      	mov	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d3ad      	bcc.n	800160e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <SSD1306_Putc+0xf8>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <SSD1306_Putc+0xf8>)
 80016c0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000580 	.word	0x20000580

080016d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80016de:	e012      	b.n	8001706 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff73 	bl	80015d4 <SSD1306_Putc>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d002      	beq.n	8001700 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	e008      	b.n	8001712 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e8      	bne.n	80016e0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	781b      	ldrb	r3, [r3, #0]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff feca 	bl	80014b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001724:	f7ff fe9a 	bl	800145c <SSD1306_UpdateScreen>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <ssd1306_I2C_Init+0x28>)
 8001734:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001736:	e002      	b.n	800173e <ssd1306_I2C_Init+0x12>
		p--;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f9      	bne.n	8001738 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	0003d090 	.word	0x0003d090

08001758 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b0c7      	sub	sp, #284	@ 0x11c
 800175c:	af02      	add	r7, sp, #8
 800175e:	4604      	mov	r4, r0
 8001760:	4608      	mov	r0, r1
 8001762:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001766:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800176a:	600a      	str	r2, [r1, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001772:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001776:	4622      	mov	r2, r4
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800177e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001782:	4602      	mov	r2, r0
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800178a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800178e:	460a      	mov	r2, r1
 8001790:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001792:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800179a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800179e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80017ac:	e015      	b.n	80017da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80017ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017b2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017b6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	441a      	add	r2, r3
 80017be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017c2:	3301      	adds	r3, #1
 80017c4:	7811      	ldrb	r1, [r2, #0]
 80017c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017ca:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80017ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80017d0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017d4:	3301      	adds	r3, #1
 80017d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80017da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80017e8:	8812      	ldrh	r2, [r2, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d8df      	bhi.n	80017ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	b29b      	uxth	r3, r3
 8001808:	f107 020c 	add.w	r2, r7, #12
 800180c:	200a      	movs	r0, #10
 800180e:	9000      	str	r0, [sp, #0]
 8001810:	4803      	ldr	r0, [pc, #12]	@ (8001820 <ssd1306_I2C_WriteMulti+0xc8>)
 8001812:	f001 fc5b 	bl	80030cc <HAL_I2C_Master_Transmit>
}
 8001816:	bf00      	nop
 8001818:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	200000f8 	.word	0x200000f8

08001824 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af02      	add	r7, sp, #8
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	460b      	mov	r3, r1
 8001830:	71bb      	strb	r3, [r7, #6]
 8001832:	4613      	mov	r3, r2
 8001834:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800183a:	797b      	ldrb	r3, [r7, #5]
 800183c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	b299      	uxth	r1, r3
 8001842:	f107 020c 	add.w	r2, r7, #12
 8001846:	230a      	movs	r3, #10
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	4803      	ldr	r0, [pc, #12]	@ (800185c <ssd1306_I2C_Write+0x38>)
 800184e:	f001 fc3d 	bl	80030cc <HAL_I2C_Master_Transmit>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200000f8 	.word	0x200000f8

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_MspInit+0x54>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <HAL_MspInit+0x54>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_MspInit+0x54>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_MspInit+0x54>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_MspInit+0x54>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_MspInit+0x54>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	210f      	movs	r1, #15
 80018a2:	f06f 0001 	mvn.w	r0, #1
 80018a6:	f001 f84b 	bl	8002940 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_InitTick+0xe4>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	4a32      	ldr	r2, [pc, #200]	@ (800199c <HAL_InitTick+0xe4>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d8:	4b30      	ldr	r3, [pc, #192]	@ (800199c <HAL_InitTick+0xe4>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e4:	f107 0210 	add.w	r2, r7, #16
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 f98e 	bl	8003c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fe:	f002 f95f 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8001902:	6378      	str	r0, [r7, #52]	@ 0x34
 8001904:	e004      	b.n	8001910 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001906:	f002 f95b 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 800190a:	4603      	mov	r3, r0
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001912:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <HAL_InitTick+0xe8>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	0c9b      	lsrs	r3, r3, #18
 800191a:	3b01      	subs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_InitTick+0xec>)
 8001920:	4a21      	ldr	r2, [pc, #132]	@ (80019a8 <HAL_InitTick+0xf0>)
 8001922:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_InitTick+0xec>)
 8001926:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800192a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800192c:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <HAL_InitTick+0xec>)
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001930:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_InitTick+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <HAL_InitTick+0xec>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_InitTick+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001944:	4817      	ldr	r0, [pc, #92]	@ (80019a4 <HAL_InitTick+0xec>)
 8001946:	f002 fe63 	bl	8004610 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001950:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001954:	2b00      	cmp	r3, #0
 8001956:	d11b      	bne.n	8001990 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001958:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <HAL_InitTick+0xec>)
 800195a:	f002 fea9 	bl	80046b0 <HAL_TIM_Base_Start_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001968:	2b00      	cmp	r3, #0
 800196a:	d111      	bne.n	8001990 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800196c:	2036      	movs	r0, #54	@ 0x36
 800196e:	f001 f803 	bl	8002978 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d808      	bhi.n	800198a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	2036      	movs	r0, #54	@ 0x36
 800197e:	f000 ffdf 	bl	8002940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_InitTick+0xf4>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e002      	b.n	8001990 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001994:	4618      	mov	r0, r3
 8001996:	3738      	adds	r7, #56	@ 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	20000588 	.word	0x20000588
 80019a8:	40001000 	.word	0x40001000
 80019ac:	20000028 	.word	0x20000028

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <USART1_IRQHandler+0x10>)
 80019ee:	f003 ffb1 	bl	8005954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000061c 	.word	0x2000061c

080019fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM6_DAC_IRQHandler+0x10>)
 8001a02:	f002 ffe7 	bl	80049d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000588 	.word	0x20000588

08001a10 <_read>:
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_fstat>:
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	2300      	movs	r3, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_isatty>:
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_lseek>:
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <_sbrk>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
 8001ae4:	f008 f9c8 	bl	8009e78 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20020000 	.word	0x20020000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200005d0 	.word	0x200005d0
 8001b1c:	20005150 	.word	0x20005150

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	@ 0x38
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b7e:	2253      	movs	r2, #83	@ 0x53
 8001b80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b8a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9c:	4823      	ldr	r0, [pc, #140]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001b9e:	f002 fd37 	bl	8004610 <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ba8:	f7ff fb78 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481c      	ldr	r0, [pc, #112]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001bba:	f003 f8bd 	bl	8004d38 <HAL_TIM_ConfigClockSource>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bc4:	f7ff fb6a 	bl	800129c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bc8:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001bca:	f002 fde1 	bl	8004790 <HAL_TIM_PWM_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bd4:	f7ff fb62 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4619      	mov	r1, r3
 8001be6:	4811      	ldr	r0, [pc, #68]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001be8:	f003 fcb2 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bf2:	f7ff fb53 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf6:	2360      	movs	r3, #96	@ 0x60
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001bfa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001c10:	f002 ffd0 	bl	8004bb4 <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001c1a:	f7ff fb3f 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c1e:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <MX_TIM2_Init+0xe8>)
 8001c20:	f000 f826 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8001c24:	bf00      	nop
 8001c26:	3738      	adds	r7, #56	@ 0x38
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200005d4 	.word	0x200005d4

08001c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d10d      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_TIM_Base_MspInit+0x3c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_TIM_Base_MspInit+0x3c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_TIM_Base_MspInit+0x3c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c90:	d11e      	bne.n	8001cd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <HAL_TIM_MspPostInit+0x6c>)
 8001ccc:	f000 fef4 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <MX_USART1_UART_Init+0x50>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_USART1_UART_Init+0x4c>)
 8001d18:	f003 fcaa 	bl	8005670 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d22:	f7ff fabb 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000061c 	.word	0x2000061c
 8001d30:	40011000 	.word	0x40011000

08001d34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <MX_USART2_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_USART2_UART_Init+0x4c>)
 8001d6c:	f003 fc80 	bl	8005670 <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d76:	f7ff fa91 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000664 	.word	0x20000664
 8001d84:	40004400 	.word	0x40004400

08001d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	@ 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a36      	ldr	r2, [pc, #216]	@ (8001e80 <HAL_UART_MspInit+0xf8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d135      	bne.n	8001e16 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	4a34      	ldr	r2, [pc, #208]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dba:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a2d      	ldr	r2, [pc, #180]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df4:	2307      	movs	r3, #7
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4822      	ldr	r0, [pc, #136]	@ (8001e88 <HAL_UART_MspInit+0x100>)
 8001e00:	f000 fe5a 	bl	8002ab8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2105      	movs	r1, #5
 8001e08:	2025      	movs	r0, #37	@ 0x25
 8001e0a:	f000 fd99 	bl	8002940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e0e:	2025      	movs	r0, #37	@ 0x25
 8001e10:	f000 fdb2 	bl	8002978 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e14:	e030      	b.n	8001e78 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <HAL_UART_MspInit+0x104>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12b      	bne.n	8001e78 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e58:	230c      	movs	r3, #12
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <HAL_UART_MspInit+0x100>)
 8001e74:	f000 fe20 	bl	8002ab8 <HAL_GPIO_Init>
}
 8001e78:	bf00      	nop
 8001e7a:	3730      	adds	r7, #48	@ 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40004400 	.word	0x40004400

08001e90 <Reset_Handler>:
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec8 <LoopFillZerobss+0xe>
 8001e94:	f7ff fe44 	bl	8001b20 <SystemInit>
 8001e98:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <LoopFillZerobss+0x12>)
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x16>)
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x1a>)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:
 8001ea2:	58d4      	ldr	r4, [r2, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:
 8001ea8:	18c4      	adds	r4, r0, r3
 8001eaa:	428c      	cmp	r4, r1
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x1e>)
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <LoopFillZerobss+0x22>)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:
 8001eba:	42a2      	cmp	r2, r4
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>
 8001ebe:	f007 ffe1 	bl	8009e84 <__libc_init_array>
 8001ec2:	f7fe fea9 	bl	8000c18 <main>
 8001ec6:	4770      	bx	lr
 8001ec8:	20020000 	.word	0x20020000
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000090 	.word	0x20000090
 8001ed4:	0800c1c8 	.word	0x0800c1c8
 8001ed8:	20000090 	.word	0x20000090
 8001edc:	2000514c 	.word	0x2000514c

08001ee0 <ADC_IRQHandler>:
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>
	...

08001ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_Init+0x40>)
 8001eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <HAL_Init+0x40>)
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_Init+0x40>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 fd0c 	bl	800292a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f7ff fcd0 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fca2 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000002c 	.word	0x2000002c
 8001f4c:	200006ac 	.word	0x200006ac

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200006ac 	.word	0x200006ac

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000002c 	.word	0x2000002c

08001fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e033      	b.n	800202e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fb40 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ff6:	f023 0302 	bic.w	r3, r3, #2
 8001ffa:	f043 0202 	orr.w	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fae8 	bl	80025d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
 800201e:	e001      	b.n	8002024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Start+0x1a>
 800204e:	2302      	movs	r3, #2
 8002050:	e0b2      	b.n	80021b8 <HAL_ADC_Start+0x180>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d018      	beq.n	800209a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002078:	4b52      	ldr	r3, [pc, #328]	@ (80021c4 <HAL_ADC_Start+0x18c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_ADC_Start+0x190>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9a      	lsrs	r2, r3, #18
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800208c:	e002      	b.n	8002094 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3b01      	subs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d17a      	bne.n	800219e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020e6:	d106      	bne.n	80020f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	f023 0206 	bic.w	r2, r3, #6
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80020f4:	e002      	b.n	80020fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002104:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <HAL_ADC_Start+0x194>)
 8002106:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002110:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2b00      	cmp	r3, #0
 800211c:	d12a      	bne.n	8002174 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <HAL_ADC_Start+0x198>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d015      	beq.n	8002154 <HAL_ADC_Start+0x11c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <HAL_ADC_Start+0x19c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d105      	bne.n	800213e <HAL_ADC_Start+0x106>
 8002132:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <HAL_ADC_Start+0x194>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a25      	ldr	r2, [pc, #148]	@ (80021d8 <HAL_ADC_Start+0x1a0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d136      	bne.n	80021b6 <HAL_ADC_Start+0x17e>
 8002148:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_ADC_Start+0x194>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d130      	bne.n	80021b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d129      	bne.n	80021b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	e020      	b.n	80021b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <HAL_ADC_Start+0x198>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11b      	bne.n	80021b6 <HAL_ADC_Start+0x17e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d114      	bne.n	80021b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e00b      	b.n	80021b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f043 0210 	orr.w	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20000024 	.word	0x20000024
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	40012300 	.word	0x40012300
 80021d0:	40012000 	.word	0x40012000
 80021d4:	40012100 	.word	0x40012100
 80021d8:	40012200 	.word	0x40012200

080021dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Stop+0x16>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e021      	b.n	8002236 <HAL_ADC_Stop+0x5a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225e:	d113      	bne.n	8002288 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800226a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800226e:	d10b      	bne.n	8002288 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e063      	b.n	8002350 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002288:	f7ff fe62 	bl	8001f50 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800228e:	e021      	b.n	80022d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002296:	d01d      	beq.n	80022d4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_ADC_PollForConversion+0x6c>
 800229e:	f7ff fe57 	bl	8001f50 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d212      	bcs.n	80022d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d00b      	beq.n	80022d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d1d6      	bne.n	8002290 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0212 	mvn.w	r2, #18
 80022ea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d123      	bne.n	800234e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11f      	bne.n	800234e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002326:	2b00      	cmp	r3, #0
 8002328:	d111      	bne.n	800234e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1c>
 800238c:	2302      	movs	r3, #2
 800238e:	e113      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x244>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d925      	bls.n	80023ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68d9      	ldr	r1, [r3, #12]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	2207      	movs	r2, #7
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43da      	mvns	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	400a      	ands	r2, r1
 80023c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68d9      	ldr	r1, [r3, #12]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	4603      	mov	r3, r0
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4403      	add	r3, r0
 80023de:	3b1e      	subs	r3, #30
 80023e0:	409a      	lsls	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	e022      	b.n	8002432 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6919      	ldr	r1, [r3, #16]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	2207      	movs	r2, #7
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	400a      	ands	r2, r1
 800240e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6919      	ldr	r1, [r3, #16]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	4618      	mov	r0, r3
 8002422:	4603      	mov	r3, r0
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4403      	add	r3, r0
 8002428:	409a      	lsls	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d824      	bhi.n	8002484 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b05      	subs	r3, #5
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	400a      	ands	r2, r1
 800245a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b05      	subs	r3, #5
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	635a      	str	r2, [r3, #52]	@ 0x34
 8002482:	e04c      	b.n	800251e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b0c      	cmp	r3, #12
 800248a:	d824      	bhi.n	80024d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3b23      	subs	r3, #35	@ 0x23
 800249e:	221f      	movs	r2, #31
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43da      	mvns	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	400a      	ands	r2, r1
 80024ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	3b23      	subs	r3, #35	@ 0x23
 80024c8:	fa00 f203 	lsl.w	r2, r0, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024d4:	e023      	b.n	800251e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b41      	subs	r3, #65	@ 0x41
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b41      	subs	r3, #65	@ 0x41
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251e:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_ADC_ConfigChannel+0x250>)
 8002520:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a28      	ldr	r2, [pc, #160]	@ (80025c8 <HAL_ADC_ConfigChannel+0x254>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d10f      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1d8>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b12      	cmp	r3, #18
 8002532:	d10b      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <HAL_ADC_ConfigChannel+0x254>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d12b      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x23a>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1c      	ldr	r2, [pc, #112]	@ (80025cc <HAL_ADC_ConfigChannel+0x258>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d003      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x1f4>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b11      	cmp	r3, #17
 8002566:	d122      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_ADC_ConfigChannel+0x258>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258a:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <HAL_ADC_ConfigChannel+0x25c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <HAL_ADC_ConfigChannel+0x260>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	0c9a      	lsrs	r2, r3, #18
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025a0:	e002      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f9      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40012300 	.word	0x40012300
 80025c8:	40012000 	.word	0x40012000
 80025cc:	10000012 	.word	0x10000012
 80025d0:	20000024 	.word	0x20000024
 80025d4:	431bde83 	.word	0x431bde83

080025d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e0:	4b79      	ldr	r3, [pc, #484]	@ (80027c8 <ADC_Init+0x1f0>)
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	021a      	lsls	r2, r3, #8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	4a58      	ldr	r2, [pc, #352]	@ (80027cc <ADC_Init+0x1f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800267e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	e00f      	b.n	80026d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0202 	bic.w	r2, r2, #2
 80026e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e1b      	ldrb	r3, [r3, #24]
 80026f0:	005a      	lsls	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002712:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	3b01      	subs	r3, #1
 8002730:	035a      	lsls	r2, r3, #13
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	e007      	b.n	800274c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	3b01      	subs	r3, #1
 8002768:	051a      	lsls	r2, r3, #20
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800278e:	025a      	lsls	r2, r3, #9
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	029a      	lsls	r2, r3, #10
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012300 	.word	0x40012300
 80027cc:	0f000001 	.word	0x0f000001

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <__NVIC_EnableIRQ+0x38>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff4c 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002952:	f7ff ff61 	bl	8002818 <__NVIC_GetPriorityGrouping>
 8002956:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f7ff ffb1 	bl	80028c4 <NVIC_EncodePriority>
 8002962:	4602      	mov	r2, r0
 8002964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff80 	bl	8002870 <__NVIC_SetPriority>
}
 8002970:	bf00      	nop
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff54 	bl	8002834 <__NVIC_EnableIRQ>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a2:	f7ff fad5 	bl	8001f50 <HAL_GetTick>
 80029a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d008      	beq.n	80029c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2280      	movs	r2, #128	@ 0x80
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e052      	b.n	8002a6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0216 	bic.w	r2, r2, #22
 80029d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <HAL_DMA_Abort+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0208 	bic.w	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a16:	e013      	b.n	8002a40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a18:	f7ff fa9a 	bl	8001f50 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d90c      	bls.n	8002a40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e015      	b.n	8002a6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e4      	bne.n	8002a18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	223f      	movs	r2, #63	@ 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2280      	movs	r2, #128	@ 0x80
 8002a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00c      	b.n	8002aac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2205      	movs	r2, #5
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e165      	b.n	8002da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8154 	bne.w	8002d9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d017      	beq.n	8002ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ae 	beq.w	8002d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b5d      	ldr	r3, [pc, #372]	@ (8002db8 <HAL_GPIO_Init+0x300>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	4a5c      	ldr	r2, [pc, #368]	@ (8002db8 <HAL_GPIO_Init+0x300>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002db8 <HAL_GPIO_Init+0x300>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5a:	4a58      	ldr	r2, [pc, #352]	@ (8002dbc <HAL_GPIO_Init+0x304>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4f      	ldr	r2, [pc, #316]	@ (8002dc0 <HAL_GPIO_Init+0x308>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc4 <HAL_GPIO_Init+0x30c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x216>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc8 <HAL_GPIO_Init+0x310>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x212>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	@ (8002dcc <HAL_GPIO_Init+0x314>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x20e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd0 <HAL_GPIO_Init+0x318>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x20a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd4 <HAL_GPIO_Init+0x31c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x206>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a49      	ldr	r2, [pc, #292]	@ (8002dd8 <HAL_GPIO_Init+0x320>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x202>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cba:	2307      	movs	r3, #7
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce4:	4935      	ldr	r1, [pc, #212]	@ (8002dbc <HAL_GPIO_Init+0x304>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d16:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d40:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d46:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d94:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	f67f ae96 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3724      	adds	r7, #36	@ 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40021800 	.word	0x40021800
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12b      	b.n	80030ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fe8c 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	@ 0x24
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f000 fe8a 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	@ (80030b8 <HAL_I2C_Init+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d807      	bhi.n	8002ec8 <HAL_I2C_Init+0x84>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a80      	ldr	r2, [pc, #512]	@ (80030bc <HAL_I2C_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	@ (80030c0 <HAL_I2C_Init+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e7      	b.n	80030ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a78      	ldr	r2, [pc, #480]	@ (80030c4 <HAL_I2C_Init+0x280>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80030b8 <HAL_I2C_Init+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <HAL_I2C_Init+0xd4>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	e009      	b.n	8002f2c <HAL_I2C_Init+0xe8>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a69      	ldr	r2, [pc, #420]	@ (80030c8 <HAL_I2C_Init+0x284>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	495c      	ldr	r1, [pc, #368]	@ (80030b8 <HAL_I2C_Init+0x274>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d819      	bhi.n	8002f80 <HAL_I2C_Init+0x13c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_I2C_Init+0x138>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e59      	subs	r1, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	e051      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	e04f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_I2C_Init+0x168>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Init+0x18e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x196>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_I2C_Init+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e58      	subs	r0, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800304e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6911      	ldr	r1, [r2, #16]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	003d08ff 	.word	0x003d08ff
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7fe ff36 	bl	8001f50 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 80e0 	bne.w	80032b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	4970      	ldr	r1, [pc, #448]	@ (80032c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fa92 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	e0d3      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_I2C_Master_Transmit+0x50>
 8003118:	2302      	movs	r3, #2
 800311a:	e0cc      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d007      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2221      	movs	r2, #33	@ 0x21
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a50      	ldr	r2, [pc, #320]	@ (80032c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003182:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9ca 	bl	8003524 <I2C_MasterRequestWrite>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e08d      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031b0:	e066      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fb50 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d107      	bne.n	80031da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06b      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d11b      	bne.n	8003254 <HAL_I2C_Master_Transmit+0x188>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6a39      	ldr	r1, [r7, #32]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fb47 	bl	80038ec <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01a      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d194      	bne.n	80031b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	00100002 	.word	0x00100002
 80032c4:	ffff0000 	.word	0xffff0000

080032c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	@ 0x28
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7fe fe3a 	bl	8001f50 <HAL_GetTick>
 80032dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	f040 8111 	bne.w	8003512 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2319      	movs	r3, #25
 80032f6:	2201      	movs	r2, #1
 80032f8:	4988      	ldr	r1, [pc, #544]	@ (800351c <HAL_I2C_IsDeviceReady+0x254>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f994 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	e104      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_I2C_IsDeviceReady+0x50>
 8003314:	2302      	movs	r3, #2
 8003316:	e0fd      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d007      	beq.n	800333e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800334c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2224      	movs	r2, #36	@ 0x24
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a70      	ldr	r2, [pc, #448]	@ (8003520 <HAL_I2C_IsDeviceReady+0x258>)
 8003360:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003370:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f952 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003398:	d103      	bne.n	80033a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0b6      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fdcb 	bl	8001f50 <HAL_GetTick>
 80033ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033ea:	e025      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe fdb0 	bl	8001f50 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <HAL_I2C_IsDeviceReady+0x13a>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22a0      	movs	r2, #160	@ 0xa0
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2ba0      	cmp	r3, #160	@ 0xa0
 8003442:	d005      	beq.n	8003450 <HAL_I2C_IsDeviceReady+0x188>
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <HAL_I2C_IsDeviceReady+0x188>
 800344a:	7dbb      	ldrb	r3, [r7, #22]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0cd      	beq.n	80033ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d129      	bne.n	80034ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003474:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2319      	movs	r3, #25
 8003492:	2201      	movs	r2, #1
 8003494:	4921      	ldr	r1, [pc, #132]	@ (800351c <HAL_I2C_IsDeviceReady+0x254>)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8c6 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e036      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e02c      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2319      	movs	r3, #25
 80034da:	2201      	movs	r2, #1
 80034dc:	490f      	ldr	r1, [pc, #60]	@ (800351c <HAL_I2C_IsDeviceReady+0x254>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8a2 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e012      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	f4ff af32 	bcc.w	8003362 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00100002 	.word	0x00100002
 8003520:	ffff0000 	.word	0xffff0000

08003524 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d006      	beq.n	800354e <I2C_MasterRequestWrite+0x2a>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d003      	beq.n	800354e <I2C_MasterRequestWrite+0x2a>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800354c:	d108      	bne.n	8003560 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e00b      	b.n	8003578 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	2b12      	cmp	r3, #18
 8003566:	d107      	bne.n	8003578 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f84f 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00d      	beq.n	80035ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800359e:	d103      	bne.n	80035a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e035      	b.n	8003618 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b4:	d108      	bne.n	80035c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035c4:	611a      	str	r2, [r3, #16]
 80035c6:	e01b      	b.n	8003600 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	11db      	asrs	r3, r3, #7
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f003 0306 	and.w	r3, r3, #6
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f063 030f 	orn	r3, r3, #15
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	490e      	ldr	r1, [pc, #56]	@ (8003620 <I2C_MasterRequestWrite+0xfc>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f898 	bl	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e010      	b.n	8003618 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035f6:	897b      	ldrh	r3, [r7, #10]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4907      	ldr	r1, [pc, #28]	@ (8003624 <I2C_MasterRequestWrite+0x100>)
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f888 	bl	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010008 	.word	0x00010008
 8003624:	00010002 	.word	0x00010002

08003628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003638:	e048      	b.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003640:	d044      	beq.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe fc85 	bl	8001f50 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d139      	bne.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10d      	bne.n	800367e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	43da      	mvns	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	e00c      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0x70>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	43da      	mvns	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	429a      	cmp	r2, r3
 800369c:	d116      	bne.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e023      	b.n	8003714 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10d      	bne.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	e00c      	b.n	800370c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	429a      	cmp	r2, r3
 8003710:	d093      	beq.n	800363a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372a:	e071      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373a:	d123      	bne.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e067      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800378a:	d041      	beq.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378c:	f7fe fbe0 	bl	8001f50 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d302      	bcc.n	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d136      	bne.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10c      	bne.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e00b      	b.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	43da      	mvns	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4013      	ands	r3, r2
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e021      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10c      	bne.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	43da      	mvns	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e00b      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f af6d 	bne.w	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003868:	e034      	b.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f886 	bl	800397c <I2C_IsAcknowledgeFailed>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e034      	b.n	80038e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003880:	d028      	beq.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe fb65 	bl	8001f50 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11d      	bne.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a2:	2b80      	cmp	r3, #128	@ 0x80
 80038a4:	d016      	beq.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e007      	b.n	80038e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038de:	2b80      	cmp	r3, #128	@ 0x80
 80038e0:	d1c3      	bne.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f8:	e034      	b.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f83e 	bl	800397c <I2C_IsAcknowledgeFailed>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e034      	b.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003910:	d028      	beq.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fb1d 	bl	8001f50 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11d      	bne.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d016      	beq.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d1c3      	bne.n	80038fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003992:	d11b      	bne.n	80039cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800399c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	f043 0204 	orr.w	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fe fa40 	bl	8001f50 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe fa3c 	bl	8001f50 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f887 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fe98 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800c16c 	.word	0x0800c16c
 8003ba0:	20000024 	.word	0x20000024
 8003ba4:	20000028 	.word	0x20000028

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000024 	.word	0x20000024

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc4:	f7ff fff0 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0a9b      	lsrs	r3, r3, #10
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4903      	ldr	r1, [pc, #12]	@ (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	0800c17c 	.word	0x0800c17c

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bec:	f7ff ffdc 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0b5b      	lsrs	r3, r3, #13
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	0800c17c 	.word	0x0800c17c

08003c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c20:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <HAL_RCC_GetClockConfig+0x5c>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c6c <HAL_RCC_GetClockConfig+0x5c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c38:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <HAL_RCC_GetClockConfig+0x5c>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_RCC_GetClockConfig+0x5c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	08db      	lsrs	r3, r3, #3
 8003c4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c52:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <HAL_RCC_GetClockConfig+0x60>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40023c00 	.word	0x40023c00

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b0ae      	sub	sp, #184	@ 0xb8
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9a:	4bcb      	ldr	r3, [pc, #812]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	f200 8206 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x440>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	080040b5 	.word	0x080040b5
 8003cb8:	080040b5 	.word	0x080040b5
 8003cbc:	080040b5 	.word	0x080040b5
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	080040b5 	.word	0x080040b5
 8003cc8:	080040b5 	.word	0x080040b5
 8003ccc:	080040b5 	.word	0x080040b5
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	080040b5 	.word	0x080040b5
 8003cd8:	080040b5 	.word	0x080040b5
 8003cdc:	080040b5 	.word	0x080040b5
 8003ce0:	08003ee5 	.word	0x08003ee5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x358>)
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003cea:	e1e7      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cec:	4bb8      	ldr	r3, [pc, #736]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cf2:	e1e3      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4bb4      	ldr	r3, [pc, #720]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d00:	4bb1      	ldr	r3, [pc, #708]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d071      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4bae      	ldr	r3, [pc, #696]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d44:	0150      	lsls	r0, r2, #5
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	1a51      	subs	r1, r2, r1
 8003d4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb63 0301 	sbc.w	r3, r3, r1
 8003d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d64:	4649      	mov	r1, r9
 8003d66:	018b      	lsls	r3, r1, #6
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6e:	4641      	mov	r1, r8
 8003d70:	018a      	lsls	r2, r1, #6
 8003d72:	4641      	mov	r1, r8
 8003d74:	1a51      	subs	r1, r2, r1
 8003d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d78:	4649      	mov	r1, r9
 8003d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	00cb      	lsls	r3, r1, #3
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d96:	4641      	mov	r1, r8
 8003d98:	00ca      	lsls	r2, r1, #3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4622      	mov	r2, r4
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	462b      	mov	r3, r5
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	024b      	lsls	r3, r1, #9
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	024a      	lsls	r2, r1, #9
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ddc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003de0:	f7fc fa6e 	bl	80002c0 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4613      	mov	r3, r2
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dee:	e067      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df0:	4b75      	ldr	r3, [pc, #468]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dfc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	0159      	lsls	r1, r3, #5
 8003e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e24:	0150      	lsls	r0, r2, #5
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	1a51      	subs	r1, r2, r1
 8003e2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e44:	4649      	mov	r1, r9
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	4641      	mov	r1, r8
 8003e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4e:	4641      	mov	r1, r8
 8003e50:	018a      	lsls	r2, r1, #6
 8003e52:	4641      	mov	r1, r8
 8003e54:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e58:	4649      	mov	r1, r9
 8003e5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e72:	4692      	mov	sl, r2
 8003e74:	469b      	mov	fp, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb1a 0303 	adds.w	r3, sl, r3
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	462b      	mov	r3, r5
 8003e80:	eb4b 0303 	adc.w	r3, fp, r3
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e92:	4629      	mov	r1, r5
 8003e94:	028b      	lsls	r3, r1, #10
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	028a      	lsls	r2, r1, #10
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eac:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003eb2:	f7fc fa05 	bl	80002c0 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4613      	mov	r3, r2
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ec0:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ee2:	e0eb      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee4:	4b38      	ldr	r3, [pc, #224]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef0:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d06b      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4b32      	ldr	r3, [pc, #200]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	2200      	movs	r2, #0
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f10:	2300      	movs	r3, #0
 8003f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f18:	4622      	mov	r2, r4
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	0159      	lsls	r1, r3, #5
 8003f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2a:	0150      	lsls	r0, r2, #5
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4621      	mov	r1, r4
 8003f32:	1a51      	subs	r1, r2, r1
 8003f34:	61b9      	str	r1, [r7, #24]
 8003f36:	4629      	mov	r1, r5
 8003f38:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	018b      	lsls	r3, r1, #6
 8003f4e:	4651      	mov	r1, sl
 8003f50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f54:	4651      	mov	r1, sl
 8003f56:	018a      	lsls	r2, r1, #6
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f5e:	4659      	mov	r1, fp
 8003f60:	eb63 0901 	sbc.w	r9, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f78:	4690      	mov	r8, r2
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	eb18 0303 	adds.w	r3, r8, r3
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f98:	4629      	mov	r1, r5
 8003f9a:	024b      	lsls	r3, r1, #9
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	024a      	lsls	r2, r1, #9
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fae:	2200      	movs	r2, #0
 8003fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fb2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fb8:	f7fc f982 	bl	80002c0 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc6:	e065      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x420>
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	4611      	mov	r1, r2
 8003fe0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	0159      	lsls	r1, r3, #5
 8003ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004000:	0150      	lsls	r0, r2, #5
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4641      	mov	r1, r8
 8004008:	1a51      	subs	r1, r2, r1
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	4649      	mov	r1, r9
 800400e:	eb63 0301 	sbc.w	r3, r3, r1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004020:	4659      	mov	r1, fp
 8004022:	018b      	lsls	r3, r1, #6
 8004024:	4651      	mov	r1, sl
 8004026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800402a:	4651      	mov	r1, sl
 800402c:	018a      	lsls	r2, r1, #6
 800402e:	4651      	mov	r1, sl
 8004030:	1a54      	subs	r4, r2, r1
 8004032:	4659      	mov	r1, fp
 8004034:	eb63 0501 	sbc.w	r5, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	00eb      	lsls	r3, r5, #3
 8004042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004046:	00e2      	lsls	r2, r4, #3
 8004048:	4614      	mov	r4, r2
 800404a:	461d      	mov	r5, r3
 800404c:	4643      	mov	r3, r8
 800404e:	18e3      	adds	r3, r4, r3
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	464b      	mov	r3, r9
 8004054:	eb45 0303 	adc.w	r3, r5, r3
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004066:	4629      	mov	r1, r5
 8004068:	028b      	lsls	r3, r1, #10
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004070:	4621      	mov	r1, r4
 8004072:	028a      	lsls	r2, r1, #10
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800407c:	2200      	movs	r2, #0
 800407e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004080:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004082:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004086:	f7fc f91b 	bl	80002c0 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4613      	mov	r3, r2
 8004090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004094:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x458>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0f1b      	lsrs	r3, r3, #28
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80040a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040b2:	e003      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	37b8      	adds	r7, #184	@ 0xb8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400

080040d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e28d      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8083 	beq.w	80041fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040f4:	4b94      	ldr	r3, [pc, #592]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d019      	beq.n	8004134 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004100:	4b91      	ldr	r3, [pc, #580]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004108:	2b08      	cmp	r3, #8
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800410c:	4b8e      	ldr	r3, [pc, #568]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004118:	d00c      	beq.n	8004134 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411a:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d112      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004126:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004132:	d10b      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	4b84      	ldr	r3, [pc, #528]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05b      	beq.n	80041f8 <HAL_RCC_OscConfig+0x124>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d157      	bne.n	80041f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e25a      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x90>
 8004156:	4b7c      	ldr	r3, [pc, #496]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7b      	ldr	r2, [pc, #492]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e01d      	b.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0xb4>
 800416e:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a75      	ldr	r2, [pc, #468]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b73      	ldr	r3, [pc, #460]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a72      	ldr	r2, [pc, #456]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 8004188:	4b6f      	ldr	r3, [pc, #444]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6e      	ldr	r2, [pc, #440]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800418e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6b      	ldr	r2, [pc, #428]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800419a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800419e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fed2 	bl	8001f50 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fd fece 	bl	8001f50 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	@ 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e21f      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b61      	ldr	r3, [pc, #388]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0xdc>
 80041ce:	e014      	b.n	80041fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd febe 	bl	8001f50 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd feba 	bl	8001f50 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	@ 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e20b      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	4b57      	ldr	r3, [pc, #348]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x104>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d06f      	beq.n	80042e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004206:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004212:	4b4d      	ldr	r3, [pc, #308]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800421a:	2b08      	cmp	r3, #8
 800421c:	d105      	bne.n	800422a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d11c      	bne.n	8004270 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1d3      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4937      	ldr	r1, [pc, #220]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	e03a      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004278:	4b34      	ldr	r3, [pc, #208]	@ (800434c <HAL_RCC_OscConfig+0x278>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fe67 	bl	8001f50 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004286:	f7fd fe63 	bl	8001f50 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e1b4      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4925      	ldr	r1, [pc, #148]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <HAL_RCC_OscConfig+0x278>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fe46 	bl	8001f50 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fd fe42 	bl	8001f50 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e193      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d036      	beq.n	8004360 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd fe26 	bl	8001f50 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004308:	f7fd fe22 	bl	8001f50 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e173      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x234>
 8004326:	e01b      	b.n	8004360 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x27c>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fd fe0f 	bl	8001f50 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	e00e      	b.n	8004354 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004336:	f7fd fe0b 	bl	8001f50 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e15c      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b8a      	ldr	r3, [pc, #552]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8097 	beq.w	800449c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b83      	ldr	r3, [pc, #524]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b7f      	ldr	r3, [pc, #508]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	4a7e      	ldr	r2, [pc, #504]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	@ 0x40
 800438e:	4b7c      	ldr	r3, [pc, #496]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b79      	ldr	r3, [pc, #484]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b76      	ldr	r3, [pc, #472]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a75      	ldr	r2, [pc, #468]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fd fdcb 	bl	8001f50 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fd fdc7 	bl	8001f50 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e118      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x31e>
 80043e4:	4b66      	ldr	r3, [pc, #408]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a65      	ldr	r2, [pc, #404]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x358>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x340>
 80043fa:	4b61      	ldr	r3, [pc, #388]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a60      	ldr	r2, [pc, #384]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
 8004406:	4b5e      	ldr	r3, [pc, #376]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a5d      	ldr	r2, [pc, #372]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x358>
 8004414:	4b5a      	ldr	r3, [pc, #360]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	4a59      	ldr	r2, [pc, #356]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004420:	4b57      	ldr	r3, [pc, #348]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a56      	ldr	r2, [pc, #344]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fd fd8c 	bl	8001f50 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fd fd88 	bl	8001f50 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0d7      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b4b      	ldr	r3, [pc, #300]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ee      	beq.n	800443c <HAL_RCC_OscConfig+0x368>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fd fd76 	bl	8001f50 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fd fd72 	bl	8001f50 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0c1      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	4b40      	ldr	r3, [pc, #256]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4a3a      	ldr	r2, [pc, #232]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80ad 	beq.w	8004600 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a6:	4b36      	ldr	r3, [pc, #216]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d060      	beq.n	8004574 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d145      	bne.n	8004546 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b33      	ldr	r3, [pc, #204]	@ (8004588 <HAL_RCC_OscConfig+0x4b4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fd fd46 	bl	8001f50 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fd fd42 	bl	8001f50 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e093      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	3b01      	subs	r3, #1
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	491b      	ldr	r1, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x4b4>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd fd17 	bl	8001f50 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fd fd13 	bl	8001f50 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e064      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004538:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x452>
 8004544:	e05c      	b.n	8004600 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <HAL_RCC_OscConfig+0x4b4>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fd00 	bl	8001f50 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004554:	f7fd fcfc 	bl	8001f50 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04d      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x480>
 8004572:	e045      	b.n	8004600 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d107      	bne.n	800458c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e040      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000
 8004588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800458c:	4b1f      	ldr	r3, [pc, #124]	@ (800460c <HAL_RCC_OscConfig+0x538>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d030      	beq.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d129      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d122      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d119      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d10f      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e041      	b.n	80046a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd fafa 	bl	8001c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fc62 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e04e      	b.n	8004766 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <HAL_TIM_Base_Start_IT+0xc4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f2:	d01d      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <HAL_TIM_Base_Start_IT+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <HAL_TIM_Base_Start_IT+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <HAL_TIM_Base_Start_IT+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	@ (8004784 <HAL_TIM_Base_Start_IT+0xd4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <HAL_TIM_Base_Start_IT+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_TIM_Base_Start_IT+0xdc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d111      	bne.n	8004754 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d010      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	e007      	b.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40010400 	.word	0x40010400
 8004788:	40014000 	.word	0x40014000
 800478c:	40001800 	.word	0x40001800

08004790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e041      	b.n	8004826 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f839 	bl	800482e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fba2 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x24>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e022      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x3e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e015      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x58>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e008      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07c      	b.n	80049b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x82>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c4:	e013      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x92>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	e00b      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e4:	e003      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fe04 	bl	8005504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2d      	ldr	r2, [pc, #180]	@ (80049b8 <HAL_TIM_PWM_Start+0x174>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_PWM_Start+0xcc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	@ (80049bc <HAL_TIM_PWM_Start+0x178>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_TIM_PWM_Start+0xd0>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_TIM_PWM_Start+0xd2>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a22      	ldr	r2, [pc, #136]	@ (80049b8 <HAL_TIM_PWM_Start+0x174>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1f      	ldr	r2, [pc, #124]	@ (80049c0 <HAL_TIM_PWM_Start+0x17c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <HAL_TIM_PWM_Start+0x180>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1c      	ldr	r2, [pc, #112]	@ (80049c8 <HAL_TIM_PWM_Start+0x184>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a16      	ldr	r2, [pc, #88]	@ (80049bc <HAL_TIM_PWM_Start+0x178>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <HAL_TIM_PWM_Start+0x188>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_TIM_PWM_Start+0x18c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d111      	bne.n	800499e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b06      	cmp	r3, #6
 800498a:	d010      	beq.n	80049ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	e007      	b.n	80049ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40001800 	.word	0x40001800

080049d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0202 	mvn.w	r2, #2
 8004a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa5b 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa4d 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fa5e 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d020      	beq.n	8004a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0204 	mvn.w	r2, #4
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa35 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa27 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fa38 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d020      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01b      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0208 	mvn.w	r2, #8
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa0f 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa01 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa12 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0210 	mvn.w	r2, #16
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2208      	movs	r2, #8
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9e9 	bl	8004eda <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f9db 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f9ec 	bl	8004eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0201 	mvn.w	r2, #1
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc f9b0 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fd7c 	bl	800565c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9bd 	bl	8004f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0220 	mvn.w	r2, #32
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fd4e 	bl	8005648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e0ae      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	f200 809f 	bhi.w	8004d20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004be2:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004d21 	.word	0x08004d21
 8004bf0:	08004d21 	.word	0x08004d21
 8004bf4:	08004d21 	.word	0x08004d21
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004d21 	.word	0x08004d21
 8004c00:	08004d21 	.word	0x08004d21
 8004c04:	08004d21 	.word	0x08004d21
 8004c08:	08004c9f 	.word	0x08004c9f
 8004c0c:	08004d21 	.word	0x08004d21
 8004c10:	08004d21 	.word	0x08004d21
 8004c14:	08004d21 	.word	0x08004d21
 8004c18:	08004cdf 	.word	0x08004cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fa24 	bl	8005070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0204 	bic.w	r2, r2, #4
 8004c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6999      	ldr	r1, [r3, #24]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	619a      	str	r2, [r3, #24]
      break;
 8004c5a:	e064      	b.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa74 	bl	8005150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	619a      	str	r2, [r3, #24]
      break;
 8004c9c:	e043      	b.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fac9 	bl	800523c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0208 	orr.w	r2, r2, #8
 8004cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0204 	bic.w	r2, r2, #4
 8004cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69d9      	ldr	r1, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	61da      	str	r2, [r3, #28]
      break;
 8004cdc:	e023      	b.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fb1d 	bl	8005324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69d9      	ldr	r1, [r3, #28]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	021a      	lsls	r2, r3, #8
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	61da      	str	r2, [r3, #28]
      break;
 8004d1e:	e002      	b.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
      break;
 8004d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_ConfigClockSource+0x1c>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0b4      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x186>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d8c:	d03e      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0xd4>
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d92:	f200 8087 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9a:	f000 8086 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x172>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da2:	d87f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b70      	cmp	r3, #112	@ 0x70
 8004da6:	d01a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xa6>
 8004da8:	2b70      	cmp	r3, #112	@ 0x70
 8004daa:	d87b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b60      	cmp	r3, #96	@ 0x60
 8004dae:	d050      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x11a>
 8004db0:	2b60      	cmp	r3, #96	@ 0x60
 8004db2:	d877      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004db4:	2b50      	cmp	r3, #80	@ 0x50
 8004db6:	d03c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xfa>
 8004db8:	2b50      	cmp	r3, #80	@ 0x50
 8004dba:	d873      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b40      	cmp	r3, #64	@ 0x40
 8004dbe:	d058      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x13a>
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d86f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b30      	cmp	r3, #48	@ 0x30
 8004dc6:	d064      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	2b30      	cmp	r3, #48	@ 0x30
 8004dca:	d86b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d060      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d867      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d05a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ddc:	e062      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dee:	f000 fb69 	bl	80054c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e04f      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1c:	f000 fb52 	bl	80054c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e03c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 fac6 	bl	80053d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2150      	movs	r1, #80	@ 0x50
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fb1f 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 8004e50:	e02c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 fae5 	bl	800542e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2160      	movs	r1, #96	@ 0x60
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fb0f 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 8004e70:	e01c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 faa6 	bl	80053d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2140      	movs	r1, #64	@ 0x40
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 faff 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 8004e90:	e00c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 faf6 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e003      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a46      	ldr	r2, [pc, #280]	@ (8005044 <TIM_Base_SetConfig+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a43      	ldr	r2, [pc, #268]	@ (8005048 <TIM_Base_SetConfig+0x130>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a42      	ldr	r2, [pc, #264]	@ (800504c <TIM_Base_SetConfig+0x134>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a41      	ldr	r2, [pc, #260]	@ (8005050 <TIM_Base_SetConfig+0x138>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a40      	ldr	r2, [pc, #256]	@ (8005054 <TIM_Base_SetConfig+0x13c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a35      	ldr	r2, [pc, #212]	@ (8005044 <TIM_Base_SetConfig+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f78:	d027      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a32      	ldr	r2, [pc, #200]	@ (8005048 <TIM_Base_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a31      	ldr	r2, [pc, #196]	@ (800504c <TIM_Base_SetConfig+0x134>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <TIM_Base_SetConfig+0x138>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2f      	ldr	r2, [pc, #188]	@ (8005054 <TIM_Base_SetConfig+0x13c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005058 <TIM_Base_SetConfig+0x140>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800505c <TIM_Base_SetConfig+0x144>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2c      	ldr	r2, [pc, #176]	@ (8005060 <TIM_Base_SetConfig+0x148>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005064 <TIM_Base_SetConfig+0x14c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005068 <TIM_Base_SetConfig+0x150>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a29      	ldr	r2, [pc, #164]	@ (800506c <TIM_Base_SetConfig+0x154>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a10      	ldr	r2, [pc, #64]	@ (8005044 <TIM_Base_SetConfig+0x12c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a12      	ldr	r2, [pc, #72]	@ (8005054 <TIM_Base_SetConfig+0x13c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	611a      	str	r2, [r3, #16]
  }
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800
 8005064:	40001800 	.word	0x40001800
 8005068:	40001c00 	.word	0x40001c00
 800506c:	40002000 	.word	0x40002000

08005070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f023 0201 	bic.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 0302 	bic.w	r3, r3, #2
 80050b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a20      	ldr	r2, [pc, #128]	@ (8005148 <TIM_OC1_SetConfig+0xd8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC1_SetConfig+0x64>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <TIM_OC1_SetConfig+0xdc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d10c      	bne.n	80050ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0308 	bic.w	r3, r3, #8
 80050da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <TIM_OC1_SetConfig+0xd8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_OC1_SetConfig+0x8e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a14      	ldr	r2, [pc, #80]	@ (800514c <TIM_OC1_SetConfig+0xdc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d111      	bne.n	8005122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400

08005150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f023 0210 	bic.w	r2, r3, #16
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0320 	bic.w	r3, r3, #32
 800519a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <TIM_OC2_SetConfig+0xe4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_OC2_SetConfig+0x68>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <TIM_OC2_SetConfig+0xe8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d10d      	bne.n	80051d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <TIM_OC2_SetConfig+0xe4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC2_SetConfig+0x94>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a16      	ldr	r2, [pc, #88]	@ (8005238 <TIM_OC2_SetConfig+0xe8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d113      	bne.n	800520c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	40010400 	.word	0x40010400

0800523c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a21      	ldr	r2, [pc, #132]	@ (800531c <TIM_OC3_SetConfig+0xe0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d003      	beq.n	80052a2 <TIM_OC3_SetConfig+0x66>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a20      	ldr	r2, [pc, #128]	@ (8005320 <TIM_OC3_SetConfig+0xe4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10d      	bne.n	80052be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a16      	ldr	r2, [pc, #88]	@ (800531c <TIM_OC3_SetConfig+0xe0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_OC3_SetConfig+0x92>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a15      	ldr	r2, [pc, #84]	@ (8005320 <TIM_OC3_SetConfig+0xe4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d113      	bne.n	80052f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400

08005324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800536e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a12      	ldr	r2, [pc, #72]	@ (80053c8 <TIM_OC4_SetConfig+0xa4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC4_SetConfig+0x68>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a11      	ldr	r2, [pc, #68]	@ (80053cc <TIM_OC4_SetConfig+0xa8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d109      	bne.n	80053a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 030a 	bic.w	r3, r3, #10
 800540c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f023 0210 	bic.w	r2, r3, #16
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	031b      	lsls	r3, r3, #12
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800546a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f043 0307 	orr.w	r3, r3, #7
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2201      	movs	r2, #1
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	43db      	mvns	r3, r3
 8005526:	401a      	ands	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e05a      	b.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a21      	ldr	r2, [pc, #132]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d018      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a18      	ldr	r2, [pc, #96]	@ (800563c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a17      	ldr	r2, [pc, #92]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a15      	ldr	r2, [pc, #84]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10c      	bne.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40010400 	.word	0x40010400
 8005640:	40014000 	.word	0x40014000
 8005644:	40001800 	.word	0x40001800

08005648 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e042      	b.n	8005708 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc fb76 	bl	8001d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	@ 0x24
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fdff 	bl	80062b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	@ 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b20      	cmp	r3, #32
 800572e:	d175      	bne.n	800581c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_Transmit+0x2c>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e06e      	b.n	800581e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2221      	movs	r2, #33	@ 0x21
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574e:	f7fc fbff 	bl	8001f50 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005768:	d108      	bne.n	800577c <HAL_UART_Transmit+0x6c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e003      	b.n	8005784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005784:	e02e      	b.n	80057e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	2180      	movs	r1, #128	@ 0x80
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fb9b 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e03a      	b.n	800581e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	3302      	adds	r3, #2
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e007      	b.n	80057d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1cb      	bne.n	8005786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2140      	movs	r1, #64	@ 0x40
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fb67 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b08a      	sub	sp, #40	@ 0x28
 800582a:	af02      	add	r7, sp, #8
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b20      	cmp	r3, #32
 8005844:	f040 8081 	bne.w	800594a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Receive+0x2e>
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e079      	b.n	800594c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2222      	movs	r2, #34	@ 0x22
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586c:	f7fc fb70 	bl	8001f50 <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005886:	d108      	bne.n	800589a <HAL_UART_Receive+0x74>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e003      	b.n	80058a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80058a2:	e047      	b.n	8005934 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	2120      	movs	r1, #32
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fb0c 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e042      	b.n	800594c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d8:	b29a      	uxth	r2, r3
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3302      	adds	r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e01f      	b.n	8005926 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ee:	d007      	beq.n	8005900 <HAL_UART_Receive+0xda>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <HAL_UART_Receive+0xe8>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b2da      	uxtb	r2, r3
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e008      	b.n	8005920 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800591a:	b2da      	uxtb	r2, r3
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1b2      	bne.n	80058a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e000      	b.n	800594c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b0ba      	sub	sp, #232	@ 0xe8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_UART_IRQHandler+0x66>
 80059a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fbc2 	bl	800613c <UART_Receive_IT>
      return;
 80059b8:	e25b      	b.n	8005e72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80de 	beq.w	8005b80 <HAL_UART_IRQHandler+0x22c>
 80059c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80d1 	beq.w	8005b80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_UART_IRQHandler+0xae>
 80059ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <HAL_UART_IRQHandler+0xd2>
 8005a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f043 0202 	orr.w	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <HAL_UART_IRQHandler+0xf6>
 8005a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d011      	beq.n	8005a7a <HAL_UART_IRQHandler+0x126>
 8005a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	f043 0208 	orr.w	r2, r3, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 81f2 	beq.w	8005e68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x14e>
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fb4d 	bl	800613c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <HAL_UART_IRQHandler+0x17a>
 8005ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04f      	beq.n	8005b6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa55 	bl	8005f7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d141      	bne.n	8005b66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3314      	adds	r3, #20
 8005b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1d9      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d013      	beq.n	8005b5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d34 <HAL_UART_IRQHandler+0x3e0>)
 8005b3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fc ff96 	bl	8002a74 <HAL_DMA_Abort_IT>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d016      	beq.n	8005b7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00e      	b.n	8005b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f99e 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e00a      	b.n	8005b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f99a 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f996 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b7a:	e175      	b.n	8005e68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	bf00      	nop
    return;
 8005b7e:	e173      	b.n	8005e68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	f040 814f 	bne.w	8005e28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8148 	beq.w	8005e28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8141 	beq.w	8005e28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc6:	2b40      	cmp	r3, #64	@ 0x40
 8005bc8:	f040 80b6 	bne.w	8005d38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8145 	beq.w	8005e6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bea:	429a      	cmp	r2, r3
 8005bec:	f080 813e 	bcs.w	8005e6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c02:	f000 8088 	beq.w	8005d16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1d9      	bne.n	8005c06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3314      	adds	r3, #20
 8005c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e1      	bne.n	8005c52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e3      	bne.n	8005c8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce6:	f023 0310 	bic.w	r3, r3, #16
 8005cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e3      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fc fe3f 	bl	8002994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f8c1 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d32:	e09b      	b.n	8005e6c <HAL_UART_IRQHandler+0x518>
 8005d34:	08006045 	.word	0x08006045
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 808e 	beq.w	8005e70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8089 	beq.w	8005e70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e3      	bne.n	8005d5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	623b      	str	r3, [r7, #32]
   return(result);
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3314      	adds	r3, #20
 8005db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e3      	bne.n	8005d96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0310 	bic.w	r3, r3, #16
 8005df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e00:	61fa      	str	r2, [r7, #28]
 8005e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69b9      	ldr	r1, [r7, #24]
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e3      	bne.n	8005ddc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f847 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e26:	e023      	b.n	8005e70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_UART_IRQHandler+0x4f4>
 8005e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f913 	bl	800606c <UART_Transmit_IT>
    return;
 8005e46:	e014      	b.n	8005e72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <HAL_UART_IRQHandler+0x51e>
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f953 	bl	800610c <UART_EndTransmit_IT>
    return;
 8005e66:	e004      	b.n	8005e72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e68:	bf00      	nop
 8005e6a:	e002      	b.n	8005e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e6c:	bf00      	nop
 8005e6e:	e000      	b.n	8005e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e70:	bf00      	nop
  }
}
 8005e72:	37e8      	adds	r7, #232	@ 0xe8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	e03b      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ee4:	d037      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fc f833 	bl	8001f50 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e03a      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d023      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b80      	cmp	r3, #128	@ 0x80
 8005f12:	d020      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d01d      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d116      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f81d 	bl	8005f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2208      	movs	r2, #8
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e00f      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d0b4      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b095      	sub	sp, #84	@ 0x54
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	330c      	adds	r3, #12
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3314      	adds	r3, #20
 8005fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d119      	bne.n	800602a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	60bb      	str	r3, [r7, #8]
   return(result);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	647b      	str	r3, [r7, #68]	@ 0x44
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006016:	61ba      	str	r2, [r7, #24]
 8006018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6979      	ldr	r1, [r7, #20]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	613b      	str	r3, [r7, #16]
   return(result);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e5      	bne.n	8005ff6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006038:	bf00      	nop
 800603a:	3754      	adds	r7, #84	@ 0x54
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff ff1e 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b21      	cmp	r3, #33	@ 0x21
 800607e:	d13e      	bne.n	80060fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006088:	d114      	bne.n	80060b4 <UART_Transmit_IT+0x48>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d110      	bne.n	80060b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	1c9a      	adds	r2, r3, #2
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]
 80060b2:	e008      	b.n	80060c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6211      	str	r1, [r2, #32]
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4619      	mov	r1, r3
 80060d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006122:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fea3 	bl	8005e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	@ 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b22      	cmp	r3, #34	@ 0x22
 800614e:	f040 80ae 	bne.w	80062ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615a:	d117      	bne.n	800618c <UART_Receive_IT+0x50>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d113      	bne.n	800618c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	b29a      	uxth	r2, r3
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	629a      	str	r2, [r3, #40]	@ 0x28
 800618a:	e026      	b.n	80061da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619e:	d007      	beq.n	80061b0 <UART_Receive_IT+0x74>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <UART_Receive_IT+0x82>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e008      	b.n	80061d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4619      	mov	r1, r3
 80061e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d15d      	bne.n	80062aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0220 	bic.w	r2, r2, #32
 80061fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800620c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	2b01      	cmp	r3, #1
 8006232:	d135      	bne.n	80062a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	613b      	str	r3, [r7, #16]
   return(result);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f023 0310 	bic.w	r3, r3, #16
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625a:	623a      	str	r2, [r7, #32]
 800625c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	69f9      	ldr	r1, [r7, #28]
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	61bb      	str	r3, [r7, #24]
   return(result);
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e5      	bne.n	800623a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b10      	cmp	r3, #16
 800627a:	d10a      	bne.n	8006292 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fe0b 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
 800629e:	e002      	b.n	80062a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fdf3 	bl	8005e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e002      	b.n	80062b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	e000      	b.n	80062b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062ae:	2302      	movs	r3, #2
  }
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3730      	adds	r7, #48	@ 0x30
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062bc:	b0c0      	sub	sp, #256	@ 0x100
 80062be:	af00      	add	r7, sp, #0
 80062c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d4:	68d9      	ldr	r1, [r3, #12]
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	ea40 0301 	orr.w	r3, r0, r1
 80062e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006310:	f021 010c 	bic.w	r1, r1, #12
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800631e:	430b      	orrs	r3, r1
 8006320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	6999      	ldr	r1, [r3, #24]
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	ea40 0301 	orr.w	r3, r0, r1
 800633e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b8f      	ldr	r3, [pc, #572]	@ (8006584 <UART_SetConfig+0x2cc>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d005      	beq.n	8006358 <UART_SetConfig+0xa0>
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b8d      	ldr	r3, [pc, #564]	@ (8006588 <UART_SetConfig+0x2d0>)
 8006354:	429a      	cmp	r2, r3
 8006356:	d104      	bne.n	8006362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fd fc46 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 800635c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006360:	e003      	b.n	800636a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006362:	f7fd fc2d 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8006366:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006374:	f040 810c 	bne.w	8006590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637c:	2200      	movs	r2, #0
 800637e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006382:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	1891      	adds	r1, r2, r2
 8006390:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006392:	415b      	adcs	r3, r3
 8006394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800639a:	4621      	mov	r1, r4
 800639c:	eb12 0801 	adds.w	r8, r2, r1
 80063a0:	4629      	mov	r1, r5
 80063a2:	eb43 0901 	adc.w	r9, r3, r1
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ba:	4690      	mov	r8, r2
 80063bc:	4699      	mov	r9, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	eb18 0303 	adds.w	r3, r8, r3
 80063c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c8:	462b      	mov	r3, r5
 80063ca:	eb49 0303 	adc.w	r3, r9, r3
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063e6:	460b      	mov	r3, r1
 80063e8:	18db      	adds	r3, r3, r3
 80063ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ec:	4613      	mov	r3, r2
 80063ee:	eb42 0303 	adc.w	r3, r2, r3
 80063f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063fc:	f7f9 ff60 	bl	80002c0 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4b61      	ldr	r3, [pc, #388]	@ (800658c <UART_SetConfig+0x2d4>)
 8006406:	fba3 2302 	umull	r2, r3, r3, r2
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	011c      	lsls	r4, r3, #4
 800640e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006418:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800641c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	1891      	adds	r1, r2, r2
 8006426:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006428:	415b      	adcs	r3, r3
 800642a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800642c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006430:	4641      	mov	r1, r8
 8006432:	eb12 0a01 	adds.w	sl, r2, r1
 8006436:	4649      	mov	r1, r9
 8006438:	eb43 0b01 	adc.w	fp, r3, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800644c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006450:	4692      	mov	sl, r2
 8006452:	469b      	mov	fp, r3
 8006454:	4643      	mov	r3, r8
 8006456:	eb1a 0303 	adds.w	r3, sl, r3
 800645a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800645e:	464b      	mov	r3, r9
 8006460:	eb4b 0303 	adc.w	r3, fp, r3
 8006464:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006474:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800647c:	460b      	mov	r3, r1
 800647e:	18db      	adds	r3, r3, r3
 8006480:	643b      	str	r3, [r7, #64]	@ 0x40
 8006482:	4613      	mov	r3, r2
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	647b      	str	r3, [r7, #68]	@ 0x44
 800648a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800648e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006492:	f7f9 ff15 	bl	80002c0 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4611      	mov	r1, r2
 800649c:	4b3b      	ldr	r3, [pc, #236]	@ (800658c <UART_SetConfig+0x2d4>)
 800649e:	fba3 2301 	umull	r2, r3, r3, r1
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2264      	movs	r2, #100	@ 0x64
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	1acb      	subs	r3, r1, r3
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064b2:	4b36      	ldr	r3, [pc, #216]	@ (800658c <UART_SetConfig+0x2d4>)
 80064b4:	fba3 2302 	umull	r2, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064c0:	441c      	add	r4, r3
 80064c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	1891      	adds	r1, r2, r2
 80064da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064dc:	415b      	adcs	r3, r3
 80064de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064e4:	4641      	mov	r1, r8
 80064e6:	1851      	adds	r1, r2, r1
 80064e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80064ea:	4649      	mov	r1, r9
 80064ec:	414b      	adcs	r3, r1
 80064ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064fc:	4659      	mov	r1, fp
 80064fe:	00cb      	lsls	r3, r1, #3
 8006500:	4651      	mov	r1, sl
 8006502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006506:	4651      	mov	r1, sl
 8006508:	00ca      	lsls	r2, r1, #3
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	4603      	mov	r3, r0
 8006510:	4642      	mov	r2, r8
 8006512:	189b      	adds	r3, r3, r2
 8006514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006518:	464b      	mov	r3, r9
 800651a:	460a      	mov	r2, r1
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006530:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006538:	460b      	mov	r3, r1
 800653a:	18db      	adds	r3, r3, r3
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653e:	4613      	mov	r3, r2
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800654a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800654e:	f7f9 feb7 	bl	80002c0 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <UART_SetConfig+0x2d4>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	@ 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	3332      	adds	r3, #50	@ 0x32
 800656a:	4a08      	ldr	r2, [pc, #32]	@ (800658c <UART_SetConfig+0x2d4>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 0207 	and.w	r2, r3, #7
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4422      	add	r2, r4
 800657e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006580:	e106      	b.n	8006790 <UART_SetConfig+0x4d8>
 8006582:	bf00      	nop
 8006584:	40011000 	.word	0x40011000
 8006588:	40011400 	.word	0x40011400
 800658c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800659a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800659e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	1891      	adds	r1, r2, r2
 80065a8:	6239      	str	r1, [r7, #32]
 80065aa:	415b      	adcs	r3, r3
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065b2:	4641      	mov	r1, r8
 80065b4:	1854      	adds	r4, r2, r1
 80065b6:	4649      	mov	r1, r9
 80065b8:	eb43 0501 	adc.w	r5, r3, r1
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	00eb      	lsls	r3, r5, #3
 80065c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ca:	00e2      	lsls	r2, r4, #3
 80065cc:	4614      	mov	r4, r2
 80065ce:	461d      	mov	r5, r3
 80065d0:	4643      	mov	r3, r8
 80065d2:	18e3      	adds	r3, r4, r3
 80065d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065d8:	464b      	mov	r3, r9
 80065da:	eb45 0303 	adc.w	r3, r5, r3
 80065de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065fe:	4629      	mov	r1, r5
 8006600:	008b      	lsls	r3, r1, #2
 8006602:	4621      	mov	r1, r4
 8006604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006608:	4621      	mov	r1, r4
 800660a:	008a      	lsls	r2, r1, #2
 800660c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006610:	f7f9 fe56 	bl	80002c0 <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4b60      	ldr	r3, [pc, #384]	@ (800679c <UART_SetConfig+0x4e4>)
 800661a:	fba3 2302 	umull	r2, r3, r3, r2
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	011c      	lsls	r4, r3, #4
 8006622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006626:	2200      	movs	r2, #0
 8006628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800662c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	1891      	adds	r1, r2, r2
 800663a:	61b9      	str	r1, [r7, #24]
 800663c:	415b      	adcs	r3, r3
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006644:	4641      	mov	r1, r8
 8006646:	1851      	adds	r1, r2, r1
 8006648:	6139      	str	r1, [r7, #16]
 800664a:	4649      	mov	r1, r9
 800664c:	414b      	adcs	r3, r1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800665c:	4659      	mov	r1, fp
 800665e:	00cb      	lsls	r3, r1, #3
 8006660:	4651      	mov	r1, sl
 8006662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006666:	4651      	mov	r1, sl
 8006668:	00ca      	lsls	r2, r1, #3
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	4603      	mov	r3, r0
 8006670:	4642      	mov	r2, r8
 8006672:	189b      	adds	r3, r3, r2
 8006674:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006678:	464b      	mov	r3, r9
 800667a:	460a      	mov	r2, r1
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800668e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800669c:	4649      	mov	r1, r9
 800669e:	008b      	lsls	r3, r1, #2
 80066a0:	4641      	mov	r1, r8
 80066a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a6:	4641      	mov	r1, r8
 80066a8:	008a      	lsls	r2, r1, #2
 80066aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066ae:	f7f9 fe07 	bl	80002c0 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	4b38      	ldr	r3, [pc, #224]	@ (800679c <UART_SetConfig+0x4e4>)
 80066ba:	fba3 2301 	umull	r2, r3, r3, r1
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2264      	movs	r2, #100	@ 0x64
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	1acb      	subs	r3, r1, r3
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	3332      	adds	r3, #50	@ 0x32
 80066cc:	4a33      	ldr	r2, [pc, #204]	@ (800679c <UART_SetConfig+0x4e4>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066d8:	441c      	add	r4, r3
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066de:	2200      	movs	r2, #0
 80066e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80066e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80066e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	1891      	adds	r1, r2, r2
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	415b      	adcs	r3, r3
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f8:	4641      	mov	r1, r8
 80066fa:	1851      	adds	r1, r2, r1
 80066fc:	6039      	str	r1, [r7, #0]
 80066fe:	4649      	mov	r1, r9
 8006700:	414b      	adcs	r3, r1
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006710:	4659      	mov	r1, fp
 8006712:	00cb      	lsls	r3, r1, #3
 8006714:	4651      	mov	r1, sl
 8006716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671a:	4651      	mov	r1, sl
 800671c:	00ca      	lsls	r2, r1, #3
 800671e:	4610      	mov	r0, r2
 8006720:	4619      	mov	r1, r3
 8006722:	4603      	mov	r3, r0
 8006724:	4642      	mov	r2, r8
 8006726:	189b      	adds	r3, r3, r2
 8006728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800672a:	464b      	mov	r3, r9
 800672c:	460a      	mov	r2, r1
 800672e:	eb42 0303 	adc.w	r3, r2, r3
 8006732:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	663b      	str	r3, [r7, #96]	@ 0x60
 800673e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800674c:	4649      	mov	r1, r9
 800674e:	008b      	lsls	r3, r1, #2
 8006750:	4641      	mov	r1, r8
 8006752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006756:	4641      	mov	r1, r8
 8006758:	008a      	lsls	r2, r1, #2
 800675a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800675e:	f7f9 fdaf 	bl	80002c0 <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4b0d      	ldr	r3, [pc, #52]	@ (800679c <UART_SetConfig+0x4e4>)
 8006768:	fba3 1302 	umull	r1, r3, r3, r2
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	2164      	movs	r1, #100	@ 0x64
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	3332      	adds	r3, #50	@ 0x32
 800677a:	4a08      	ldr	r2, [pc, #32]	@ (800679c <UART_SetConfig+0x4e4>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4422      	add	r2, r4
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006796:	46bd      	mov	sp, r7
 8006798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679c:	51eb851f 	.word	0x51eb851f

080067a0 <__NVIC_SetPriority>:
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	db0a      	blt.n	80067ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	490c      	ldr	r1, [pc, #48]	@ (80067ec <__NVIC_SetPriority+0x4c>)
 80067ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067be:	0112      	lsls	r2, r2, #4
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	440b      	add	r3, r1
 80067c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067c8:	e00a      	b.n	80067e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	4908      	ldr	r1, [pc, #32]	@ (80067f0 <__NVIC_SetPriority+0x50>)
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	3b04      	subs	r3, #4
 80067d8:	0112      	lsls	r2, r2, #4
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	440b      	add	r3, r1
 80067de:	761a      	strb	r2, [r3, #24]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	e000e100 	.word	0xe000e100
 80067f0:	e000ed00 	.word	0xe000ed00

080067f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <SysTick_Handler+0x1c>)
 80067fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80067fc:	f002 f852 	bl	80088a4 <xTaskGetSchedulerState>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d001      	beq.n	800680a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006806:	f002 ff47 	bl	8009698 <xPortSysTickHandler>
  }
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010

08006814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006818:	2100      	movs	r1, #0
 800681a:	f06f 0004 	mvn.w	r0, #4
 800681e:	f7ff ffbf 	bl	80067a0 <__NVIC_SetPriority>
#endif
}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800682e:	f3ef 8305 	mrs	r3, IPSR
 8006832:	603b      	str	r3, [r7, #0]
  return(result);
 8006834:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800683a:	f06f 0305 	mvn.w	r3, #5
 800683e:	607b      	str	r3, [r7, #4]
 8006840:	e00c      	b.n	800685c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006842:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <osKernelInitialize+0x44>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800684a:	4b08      	ldr	r3, [pc, #32]	@ (800686c <osKernelInitialize+0x44>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006850:	2300      	movs	r3, #0
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	e002      	b.n	800685c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800685a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800685c:	687b      	ldr	r3, [r7, #4]
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	200006b0 	.word	0x200006b0

08006870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006876:	f3ef 8305 	mrs	r3, IPSR
 800687a:	603b      	str	r3, [r7, #0]
  return(result);
 800687c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006882:	f06f 0305 	mvn.w	r3, #5
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	e010      	b.n	80068ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800688a:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <osKernelStart+0x48>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d109      	bne.n	80068a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006892:	f7ff ffbf 	bl	8006814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006896:	4b08      	ldr	r3, [pc, #32]	@ (80068b8 <osKernelStart+0x48>)
 8006898:	2202      	movs	r2, #2
 800689a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800689c:	f001 fba4 	bl	8007fe8 <vTaskStartScheduler>
      stat = osOK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	e002      	b.n	80068ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068ac:	687b      	ldr	r3, [r7, #4]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200006b0 	.word	0x200006b0

080068bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08e      	sub	sp, #56	@ 0x38
 80068c0:	af04      	add	r7, sp, #16
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068cc:	f3ef 8305 	mrs	r3, IPSR
 80068d0:	617b      	str	r3, [r7, #20]
  return(result);
 80068d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d17e      	bne.n	80069d6 <osThreadNew+0x11a>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d07b      	beq.n	80069d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068de:	2380      	movs	r3, #128	@ 0x80
 80068e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068e2:	2318      	movs	r3, #24
 80068e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d045      	beq.n	8006982 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <osThreadNew+0x48>
        name = attr->name;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <osThreadNew+0x6e>
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b38      	cmp	r3, #56	@ 0x38
 800691c:	d805      	bhi.n	800692a <osThreadNew+0x6e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <osThreadNew+0x72>
        return (NULL);
 800692a:	2300      	movs	r3, #0
 800692c:	e054      	b.n	80069d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00e      	beq.n	8006964 <osThreadNew+0xa8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b5b      	cmp	r3, #91	@ 0x5b
 800694c:	d90a      	bls.n	8006964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006952:	2b00      	cmp	r3, #0
 8006954:	d006      	beq.n	8006964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <osThreadNew+0xa8>
        mem = 1;
 800695e:	2301      	movs	r3, #1
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e010      	b.n	8006986 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10c      	bne.n	8006986 <osThreadNew+0xca>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d108      	bne.n	8006986 <osThreadNew+0xca>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <osThreadNew+0xca>
          mem = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e001      	b.n	8006986 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d110      	bne.n	80069ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006994:	9202      	str	r2, [sp, #8]
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6a3a      	ldr	r2, [r7, #32]
 80069a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 f944 	bl	8007c30 <xTaskCreateStatic>
 80069a8:	4603      	mov	r3, r0
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	e013      	b.n	80069d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d110      	bne.n	80069d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	f107 0310 	add.w	r3, r7, #16
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f001 f992 	bl	8007cf0 <xTaskCreate>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d001      	beq.n	80069d6 <osThreadNew+0x11a>
            hTask = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069d6:	693b      	ldr	r3, [r7, #16]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3728      	adds	r7, #40	@ 0x28
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e8:	f3ef 8305 	mrs	r3, IPSR
 80069ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80069ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <osDelay+0x1c>
    stat = osErrorISR;
 80069f4:	f06f 0305 	mvn.w	r3, #5
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e007      	b.n	8006a0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fab8 	bl	8007f7c <vTaskDelay>
    }
  }

  return (stat);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b088      	sub	sp, #32
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a28:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d174      	bne.n	8006b18 <osMutexNew+0x102>
    if (attr != NULL) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <osMutexNew+0x26>
      type = attr->attr_bits;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e001      	b.n	8006a40 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <osMutexNew+0x3a>
      rmtx = 1U;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e001      	b.n	8006a54 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d15c      	bne.n	8006b18 <osMutexNew+0x102>
      mem = -1;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a62:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d015      	beq.n	8006a96 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <osMutexNew+0x6a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a78:	d902      	bls.n	8006a80 <osMutexNew+0x6a>
          mem = 1;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	e00c      	b.n	8006a9a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d108      	bne.n	8006a9a <osMutexNew+0x84>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <osMutexNew+0x84>
            mem = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	e001      	b.n	8006a9a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d112      	bne.n	8006ac6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	2004      	movs	r0, #4
 8006aae:	f000 fb20 	bl	80070f2 <xQueueCreateMutexStatic>
 8006ab2:	61f8      	str	r0, [r7, #28]
 8006ab4:	e016      	b.n	8006ae4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	4619      	mov	r1, r3
 8006abc:	2001      	movs	r0, #1
 8006abe:	f000 fb18 	bl	80070f2 <xQueueCreateMutexStatic>
 8006ac2:	61f8      	str	r0, [r7, #28]
 8006ac4:	e00e      	b.n	8006ae4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ad2:	2004      	movs	r0, #4
 8006ad4:	f000 faf5 	bl	80070c2 <xQueueCreateMutex>
 8006ad8:	61f8      	str	r0, [r7, #28]
 8006ada:	e003      	b.n	8006ae4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006adc:	2001      	movs	r0, #1
 8006ade:	f000 faf0 	bl	80070c2 <xQueueCreateMutex>
 8006ae2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <osMutexNew+0xee>
        if (attr != NULL) {
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <osMutexNew+0xe2>
          name = attr->name;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e001      	b.n	8006afc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006afc:	68f9      	ldr	r1, [r7, #12]
 8006afe:	69f8      	ldr	r0, [r7, #28]
 8006b00:	f001 f838 	bl	8007b74 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <osMutexNew+0x102>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006b18:	69fb      	ldr	r3, [r7, #28]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b40:	f3ef 8305 	mrs	r3, IPSR
 8006b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b46:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006b4c:	f06f 0305 	mvn.w	r3, #5
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	e02c      	b.n	8006bae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006b5a:	f06f 0303 	mvn.w	r3, #3
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e025      	b.n	8006bae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6938      	ldr	r0, [r7, #16]
 8006b6c:	f000 fb11 	bl	8007192 <xQueueTakeMutexRecursive>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d01b      	beq.n	8006bae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006b7c:	f06f 0301 	mvn.w	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e014      	b.n	8006bae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006b84:	f06f 0302 	mvn.w	r3, #2
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	e010      	b.n	8006bae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6938      	ldr	r0, [r7, #16]
 8006b90:	f000 fdb8 	bl	8007704 <xQueueSemaphoreTake>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d009      	beq.n	8006bae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006ba0:	f06f 0301 	mvn.w	r3, #1
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	e002      	b.n	8006bae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006ba8:	f06f 0302 	mvn.w	r3, #2
 8006bac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006bae:	697b      	ldr	r3, [r7, #20]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd4:	f3ef 8305 	mrs	r3, IPSR
 8006bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bda:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006be0:	f06f 0305 	mvn.w	r3, #5
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e01f      	b.n	8006c28 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006bee:	f06f 0303 	mvn.w	r3, #3
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e018      	b.n	8006c28 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006bfc:	6938      	ldr	r0, [r7, #16]
 8006bfe:	f000 fa93 	bl	8007128 <xQueueGiveMutexRecursive>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d00f      	beq.n	8006c28 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c08:	f06f 0302 	mvn.w	r3, #2
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e00b      	b.n	8006c28 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	2100      	movs	r1, #0
 8006c16:	6938      	ldr	r0, [r7, #16]
 8006c18:	f000 faf2 	bl	8007200 <xQueueGenericSend>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d002      	beq.n	8006c28 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c22:	f06f 0302 	mvn.w	r3, #2
 8006c26:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c28:	697b      	ldr	r3, [r7, #20]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4a07      	ldr	r2, [pc, #28]	@ (8006c60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4a06      	ldr	r2, [pc, #24]	@ (8006c64 <vApplicationGetIdleTaskMemory+0x30>)
 8006c4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2280      	movs	r2, #128	@ 0x80
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	200006b4 	.word	0x200006b4
 8006c64:	20000710 	.word	0x20000710

08006c68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a07      	ldr	r2, [pc, #28]	@ (8006c94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4a06      	ldr	r2, [pc, #24]	@ (8006c98 <vApplicationGetTimerTaskMemory+0x30>)
 8006c7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c86:	601a      	str	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000910 	.word	0x20000910
 8006c98:	2000096c 	.word	0x2000096c

08006c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f103 0208 	add.w	r2, r3, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f103 0208 	add.w	r2, r3, #8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f103 0208 	add.w	r2, r3, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]
}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d54:	d103      	bne.n	8006d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e00c      	b.n	8006d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3308      	adds	r3, #8
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e002      	b.n	8006d6c <vListInsert+0x2e>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d2f6      	bcs.n	8006d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6892      	ldr	r2, [r2, #8]
 8006dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6852      	ldr	r2, [r2, #4]
 8006dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d103      	bne.n	8006de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	1e5a      	subs	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10b      	bne.n	8006e30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e30:	f002 fba2 	bl	8009578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	441a      	add	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	3b01      	subs	r3, #1
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	441a      	add	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	22ff      	movs	r2, #255	@ 0xff
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	22ff      	movs	r2, #255	@ 0xff
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d114      	bne.n	8006eb0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01a      	beq.n	8006ec4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3310      	adds	r3, #16
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fb36 	bl	8008504 <xTaskRemoveFromEventList>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d012      	beq.n	8006ec4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <xQueueGenericReset+0xd0>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	e009      	b.n	8006ec4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3310      	adds	r3, #16
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fef1 	bl	8006c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3324      	adds	r3, #36	@ 0x24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff feec 	bl	8006c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ec4:	f002 fb8a 	bl	80095dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ec8:	2301      	movs	r3, #1
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	@ 0x38
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <xQueueGenericCreateStatic+0x56>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <xQueueGenericCreateStatic+0x5a>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <xQueueGenericCreateStatic+0x5c>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	623b      	str	r3, [r7, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <xQueueGenericCreateStatic+0x84>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <xQueueGenericCreateStatic+0x88>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <xQueueGenericCreateStatic+0x8a>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	61fb      	str	r3, [r7, #28]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f7e:	2350      	movs	r3, #80	@ 0x50
 8006f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b50      	cmp	r3, #80	@ 0x50
 8006f86:	d00b      	beq.n	8006fa0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	61bb      	str	r3, [r7, #24]
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	e7fd      	b.n	8006f9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fa0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00d      	beq.n	8006fc8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f840 	bl	8007048 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3730      	adds	r7, #48	@ 0x30
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b08a      	sub	sp, #40	@ 0x28
 8006fd6:	af02      	add	r7, sp, #8
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <xQueueGenericCreate+0x2c>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	613b      	str	r3, [r7, #16]
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	e7fd      	b.n	8006ffa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3350      	adds	r3, #80	@ 0x50
 800700c:	4618      	mov	r0, r3
 800700e:	f002 fbd5 	bl	80097bc <pvPortMalloc>
 8007012:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d011      	beq.n	800703e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3350      	adds	r3, #80	@ 0x50
 8007022:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800702c:	79fa      	ldrb	r2, [r7, #7]
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f805 	bl	8007048 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800703e:	69bb      	ldr	r3, [r7, #24]
	}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e002      	b.n	800706a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007076:	2101      	movs	r1, #1
 8007078:	69b8      	ldr	r0, [r7, #24]
 800707a:	f7ff fec3 	bl	8006e04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00e      	beq.n	80070ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f8a3 	bl	8007200 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	4603      	mov	r3, r0
 80070ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6939      	ldr	r1, [r7, #16]
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	f7ff ff79 	bl	8006fd2 <xQueueGenericCreate>
 80070e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff ffd3 	bl	800708e <prvInitialiseMutex>

		return xNewQueue;
 80070e8:	68fb      	ldr	r3, [r7, #12]
	}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b088      	sub	sp, #32
 80070f6:	af02      	add	r7, sp, #8
 80070f8:	4603      	mov	r3, r0
 80070fa:	6039      	str	r1, [r7, #0]
 80070fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80070fe:	2301      	movs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	2300      	movs	r3, #0
 8007104:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2200      	movs	r2, #0
 800710e:	6939      	ldr	r1, [r7, #16]
 8007110:	6978      	ldr	r0, [r7, #20]
 8007112:	f7ff fee1 	bl	8006ed8 <xQueueGenericCreateStatic>
 8007116:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff ffb8 	bl	800708e <prvInitialiseMutex>

		return xNewQueue;
 800711e:	68fb      	ldr	r3, [r7, #12]
	}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	60fb      	str	r3, [r7, #12]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	689c      	ldr	r4, [r3, #8]
 8007156:	f001 fb95 	bl	8008884 <xTaskGetCurrentTaskHandle>
 800715a:	4603      	mov	r3, r0
 800715c:	429c      	cmp	r4, r3
 800715e:	d111      	bne.n	8007184 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	1e5a      	subs	r2, r3, #1
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	6938      	ldr	r0, [r7, #16]
 800717a:	f000 f841 	bl	8007200 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800717e:	2301      	movs	r3, #1
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e001      	b.n	8007188 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007188:	697b      	ldr	r3, [r7, #20]
	}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	bd90      	pop	{r4, r7, pc}

08007192 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007192:	b590      	push	{r4, r7, lr}
 8007194:	b087      	sub	sp, #28
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	689c      	ldr	r4, [r3, #8]
 80071c2:	f001 fb5f 	bl	8008884 <xTaskGetCurrentTaskHandle>
 80071c6:	4603      	mov	r3, r0
 80071c8:	429c      	cmp	r4, r3
 80071ca:	d107      	bne.n	80071dc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80071d6:	2301      	movs	r3, #1
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e00c      	b.n	80071f6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6938      	ldr	r0, [r7, #16]
 80071e0:	f000 fa90 	bl	8007704 <xQueueSemaphoreTake>
 80071e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80071f6:	697b      	ldr	r3, [r7, #20]
	}
 80071f8:	4618      	mov	r0, r3
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd90      	pop	{r4, r7, pc}

08007200 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08e      	sub	sp, #56	@ 0x38
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800720e:	2300      	movs	r3, #0
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10b      	bne.n	8007234 <xQueueGenericSend+0x34>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d103      	bne.n	8007242 <xQueueGenericSend+0x42>
 800723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <xQueueGenericSend+0x46>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <xQueueGenericSend+0x48>
 8007246:	2300      	movs	r3, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <xQueueGenericSend+0x64>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d103      	bne.n	8007272 <xQueueGenericSend+0x72>
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <xQueueGenericSend+0x76>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <xQueueGenericSend+0x78>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <xQueueGenericSend+0x94>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	623b      	str	r3, [r7, #32]
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007294:	f001 fb06 	bl	80088a4 <xTaskGetSchedulerState>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d102      	bne.n	80072a4 <xQueueGenericSend+0xa4>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <xQueueGenericSend+0xa8>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <xQueueGenericSend+0xaa>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61fb      	str	r3, [r7, #28]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c6:	f002 f957 	bl	8009578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <xQueueGenericSend+0xdc>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d129      	bne.n	8007330 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072e2:	f000 fb37 	bl	8007954 <prvCopyDataToQueue>
 80072e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d010      	beq.n	8007312 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	3324      	adds	r3, #36	@ 0x24
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f905 	bl	8008504 <xTaskRemoveFromEventList>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d013      	beq.n	8007328 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007300:	4b3f      	ldr	r3, [pc, #252]	@ (8007400 <xQueueGenericSend+0x200>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	e00a      	b.n	8007328 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007318:	4b39      	ldr	r3, [pc, #228]	@ (8007400 <xQueueGenericSend+0x200>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007328:	f002 f958 	bl	80095dc <vPortExitCritical>
				return pdPASS;
 800732c:	2301      	movs	r3, #1
 800732e:	e063      	b.n	80073f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d103      	bne.n	800733e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007336:	f002 f951 	bl	80095dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800733a:	2300      	movs	r3, #0
 800733c:	e05c      	b.n	80073f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	4618      	mov	r0, r3
 800734a:	f001 f93f 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800734e:	2301      	movs	r3, #1
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007352:	f002 f943 	bl	80095dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007356:	f000 feaf 	bl	80080b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800735a:	f002 f90d 	bl	8009578 <vPortEnterCritical>
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007364:	b25b      	sxtb	r3, r3
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800736a:	d103      	bne.n	8007374 <xQueueGenericSend+0x174>
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800737a:	b25b      	sxtb	r3, r3
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007380:	d103      	bne.n	800738a <xQueueGenericSend+0x18a>
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800738a:	f002 f927 	bl	80095dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800738e:	1d3a      	adds	r2, r7, #4
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f001 f92e 	bl	80085f8 <xTaskCheckForTimeOut>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d124      	bne.n	80073ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073a4:	f000 fbce 	bl	8007b44 <prvIsQueueFull>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d018      	beq.n	80073e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	3310      	adds	r3, #16
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 f852 	bl	8008460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073be:	f000 fb59 	bl	8007a74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073c2:	f000 fe87 	bl	80080d4 <xTaskResumeAll>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f47f af7c 	bne.w	80072c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80073ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <xQueueGenericSend+0x200>)
 80073d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	e772      	b.n	80072c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073e2:	f000 fb47 	bl	8007a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073e6:	f000 fe75 	bl	80080d4 <xTaskResumeAll>
 80073ea:	e76c      	b.n	80072c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ee:	f000 fb41 	bl	8007a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073f2:	f000 fe6f 	bl	80080d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3738      	adds	r7, #56	@ 0x38
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b090      	sub	sp, #64	@ 0x40
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <xQueueGenericSendFromISR+0x3e>
 800743a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <xQueueGenericSendFromISR+0x42>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <xQueueGenericSendFromISR+0x44>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d103      	bne.n	8007472 <xQueueGenericSendFromISR+0x6e>
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <xQueueGenericSendFromISR+0x72>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <xQueueGenericSendFromISR+0x74>
 8007476:	2300      	movs	r3, #0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10b      	bne.n	8007494 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	623b      	str	r3, [r7, #32]
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	e7fd      	b.n	8007490 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007494:	f002 f950 	bl	8009738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007498:	f3ef 8211 	mrs	r2, BASEPRI
 800749c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	61fa      	str	r2, [r7, #28]
 80074ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <xQueueGenericSendFromISR+0xc2>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d12f      	bne.n	8007526 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074dc:	f000 fa3a 	bl	8007954 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e8:	d112      	bne.n	8007510 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d016      	beq.n	8007520 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	3324      	adds	r3, #36	@ 0x24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 f804 	bl	8008504 <xTaskRemoveFromEventList>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00e      	beq.n	8007520 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	e007      	b.n	8007520 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007510:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007514:	3301      	adds	r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	b25a      	sxtb	r2, r3
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007520:	2301      	movs	r3, #1
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007524:	e001      	b.n	800752a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800752a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007534:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007538:	4618      	mov	r0, r3
 800753a:	3740      	adds	r7, #64	@ 0x40
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08c      	sub	sp, #48	@ 0x30
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <xQueueReceive+0x32>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	623b      	str	r3, [r7, #32]
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <xQueueReceive+0x40>
 8007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <xQueueReceive+0x44>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <xQueueReceive+0x46>
 8007584:	2300      	movs	r3, #0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <xQueueReceive+0x62>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	61fb      	str	r3, [r7, #28]
}
 800759c:	bf00      	nop
 800759e:	bf00      	nop
 80075a0:	e7fd      	b.n	800759e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a2:	f001 f97f 	bl	80088a4 <xTaskGetSchedulerState>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <xQueueReceive+0x72>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <xQueueReceive+0x76>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <xQueueReceive+0x78>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10b      	bne.n	80075d4 <xQueueReceive+0x94>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	61bb      	str	r3, [r7, #24]
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d4:	f001 ffd0 	bl	8009578 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01f      	beq.n	8007624 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e8:	f000 fa1e 	bl	8007a28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00f      	beq.n	800761c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fe:	3310      	adds	r3, #16
 8007600:	4618      	mov	r0, r3
 8007602:	f000 ff7f 	bl	8008504 <xTaskRemoveFromEventList>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800760c:	4b3c      	ldr	r3, [pc, #240]	@ (8007700 <xQueueReceive+0x1c0>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800761c:	f001 ffde 	bl	80095dc <vPortExitCritical>
				return pdPASS;
 8007620:	2301      	movs	r3, #1
 8007622:	e069      	b.n	80076f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800762a:	f001 ffd7 	bl	80095dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800762e:	2300      	movs	r3, #0
 8007630:	e062      	b.n	80076f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007638:	f107 0310 	add.w	r3, r7, #16
 800763c:	4618      	mov	r0, r3
 800763e:	f000 ffc5 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007642:	2301      	movs	r3, #1
 8007644:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007646:	f001 ffc9 	bl	80095dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800764a:	f000 fd35 	bl	80080b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800764e:	f001 ff93 	bl	8009578 <vPortEnterCritical>
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007658:	b25b      	sxtb	r3, r3
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800765e:	d103      	bne.n	8007668 <xQueueReceive+0x128>
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800766e:	b25b      	sxtb	r3, r3
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007674:	d103      	bne.n	800767e <xQueueReceive+0x13e>
 8007676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800767e:	f001 ffad 	bl	80095dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007682:	1d3a      	adds	r2, r7, #4
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f000 ffb4 	bl	80085f8 <xTaskCheckForTimeOut>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d123      	bne.n	80076de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007698:	f000 fa3e 	bl	8007b18 <prvIsQueueEmpty>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d017      	beq.n	80076d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	3324      	adds	r3, #36	@ 0x24
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fed8 	bl	8008460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b2:	f000 f9df 	bl	8007a74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076b6:	f000 fd0d 	bl	80080d4 <xTaskResumeAll>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d189      	bne.n	80075d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80076c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007700 <xQueueReceive+0x1c0>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	e780      	b.n	80075d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d4:	f000 f9ce 	bl	8007a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076d8:	f000 fcfc 	bl	80080d4 <xTaskResumeAll>
 80076dc:	e77a      	b.n	80075d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076e0:	f000 f9c8 	bl	8007a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076e4:	f000 fcf6 	bl	80080d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076ea:	f000 fa15 	bl	8007b18 <prvIsQueueEmpty>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f43f af6f 	beq.w	80075d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3730      	adds	r7, #48	@ 0x30
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08e      	sub	sp, #56	@ 0x38
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	623b      	str	r3, [r7, #32]
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	61fb      	str	r3, [r7, #28]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007758:	f001 f8a4 	bl	80088a4 <xTaskGetSchedulerState>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <xQueueSemaphoreTake+0x64>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <xQueueSemaphoreTake+0x68>
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <xQueueSemaphoreTake+0x6a>
 800776c:	2300      	movs	r3, #0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10b      	bne.n	800778a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	61bb      	str	r3, [r7, #24]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800778a:	f001 fef5 	bl	8009578 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007792:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d024      	beq.n	80077e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	1e5a      	subs	r2, r3, #1
 800779e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077aa:	f001 f9f5 	bl	8008b98 <pvTaskIncrementMutexHeldCount>
 80077ae:	4602      	mov	r2, r0
 80077b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00f      	beq.n	80077dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	3310      	adds	r3, #16
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fe9f 	bl	8008504 <xTaskRemoveFromEventList>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077cc:	4b54      	ldr	r3, [pc, #336]	@ (8007920 <xQueueSemaphoreTake+0x21c>)
 80077ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077dc:	f001 fefe 	bl	80095dc <vPortExitCritical>
				return pdPASS;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e098      	b.n	8007916 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d112      	bne.n	8007810 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	617b      	str	r3, [r7, #20]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007808:	f001 fee8 	bl	80095dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800780c:	2300      	movs	r3, #0
 800780e:	e082      	b.n	8007916 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007816:	f107 030c 	add.w	r3, r7, #12
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fed6 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007824:	f001 feda 	bl	80095dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007828:	f000 fc46 	bl	80080b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782c:	f001 fea4 	bl	8009578 <vPortEnterCritical>
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007836:	b25b      	sxtb	r3, r3
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800783c:	d103      	bne.n	8007846 <xQueueSemaphoreTake+0x142>
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800784c:	b25b      	sxtb	r3, r3
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007852:	d103      	bne.n	800785c <xQueueSemaphoreTake+0x158>
 8007854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800785c:	f001 febe 	bl	80095dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007860:	463a      	mov	r2, r7
 8007862:	f107 030c 	add.w	r3, r7, #12
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fec5 	bl	80085f8 <xTaskCheckForTimeOut>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d132      	bne.n	80078da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007876:	f000 f94f 	bl	8007b18 <prvIsQueueEmpty>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d026      	beq.n	80078ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007888:	f001 fe76 	bl	8009578 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800788c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f825 	bl	80088e0 <xTaskPriorityInherit>
 8007896:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007898:	f001 fea0 	bl	80095dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	3324      	adds	r3, #36	@ 0x24
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fddb 	bl	8008460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078ac:	f000 f8e2 	bl	8007a74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078b0:	f000 fc10 	bl	80080d4 <xTaskResumeAll>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f47f af67 	bne.w	800778a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80078bc:	4b18      	ldr	r3, [pc, #96]	@ (8007920 <xQueueSemaphoreTake+0x21c>)
 80078be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	e75d      	b.n	800778a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078d0:	f000 f8d0 	bl	8007a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078d4:	f000 fbfe 	bl	80080d4 <xTaskResumeAll>
 80078d8:	e757      	b.n	800778a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078dc:	f000 f8ca 	bl	8007a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078e0:	f000 fbf8 	bl	80080d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078e6:	f000 f917 	bl	8007b18 <prvIsQueueEmpty>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f43f af4c 	beq.w	800778a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80078f8:	f001 fe3e 	bl	8009578 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078fe:	f000 f811 	bl	8007924 <prvGetDisinheritPriorityAfterTimeout>
 8007902:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f8c0 	bl	8008a90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007910:	f001 fe64 	bl	80095dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007916:	4618      	mov	r0, r3
 8007918:	3738      	adds	r7, #56	@ 0x38
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed04 	.word	0xe000ed04

08007924 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	d006      	beq.n	8007942 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	e001      	b.n	8007946 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007946:	68fb      	ldr	r3, [r7, #12]
	}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007968:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d14d      	bne.n	8007a16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	4618      	mov	r0, r3
 8007980:	f001 f816 	bl	80089b0 <xTaskPriorityDisinherit>
 8007984:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]
 800798c:	e043      	b.n	8007a16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d119      	bne.n	80079c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6858      	ldr	r0, [r3, #4]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799c:	461a      	mov	r2, r3
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	f002 fa97 	bl	8009ed2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d32b      	bcc.n	8007a16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	e026      	b.n	8007a16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68d8      	ldr	r0, [r3, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	461a      	mov	r2, r3
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	f002 fa7d 	bl	8009ed2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e0:	425b      	negs	r3, r3
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d207      	bcs.n	8007a04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	425b      	negs	r3, r3
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d105      	bne.n	8007a16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a1e:	697b      	ldr	r3, [r7, #20]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d018      	beq.n	8007a6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	441a      	add	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d303      	bcc.n	8007a5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68d9      	ldr	r1, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	461a      	mov	r2, r3
 8007a66:	6838      	ldr	r0, [r7, #0]
 8007a68:	f002 fa33 	bl	8009ed2 <memcpy>
	}
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a7c:	f001 fd7c 	bl	8009578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a88:	e011      	b.n	8007aae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d012      	beq.n	8007ab8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3324      	adds	r3, #36	@ 0x24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fd34 	bl	8008504 <xTaskRemoveFromEventList>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007aa2:	f000 fe0d 	bl	80086c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dce9      	bgt.n	8007a8a <prvUnlockQueue+0x16>
 8007ab6:	e000      	b.n	8007aba <prvUnlockQueue+0x46>
					break;
 8007ab8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	22ff      	movs	r2, #255	@ 0xff
 8007abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ac2:	f001 fd8b 	bl	80095dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ac6:	f001 fd57 	bl	8009578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ad0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ad2:	e011      	b.n	8007af8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d012      	beq.n	8007b02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3310      	adds	r3, #16
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fd0f 	bl	8008504 <xTaskRemoveFromEventList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007aec:	f000 fde8 	bl	80086c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dce9      	bgt.n	8007ad4 <prvUnlockQueue+0x60>
 8007b00:	e000      	b.n	8007b04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	22ff      	movs	r2, #255	@ 0xff
 8007b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007b0c:	f001 fd66 	bl	80095dc <vPortExitCritical>
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b20:	f001 fd2a 	bl	8009578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e001      	b.n	8007b36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b36:	f001 fd51 	bl	80095dc <vPortExitCritical>

	return xReturn;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b4c:	f001 fd14 	bl	8009578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d102      	bne.n	8007b62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e001      	b.n	8007b66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b66:	f001 fd39 	bl	80095dc <vPortExitCritical>

	return xReturn;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	e014      	b.n	8007bae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b84:	4a0f      	ldr	r2, [pc, #60]	@ (8007bc4 <vQueueAddToRegistry+0x50>)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b90:	490c      	ldr	r1, [pc, #48]	@ (8007bc4 <vQueueAddToRegistry+0x50>)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007bc4 <vQueueAddToRegistry+0x50>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ba6:	e006      	b.n	8007bb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b07      	cmp	r3, #7
 8007bb2:	d9e7      	bls.n	8007b84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000d6c 	.word	0x20000d6c

08007bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bd8:	f001 fcce 	bl	8009578 <vPortEnterCritical>
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007be2:	b25b      	sxtb	r3, r3
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be8:	d103      	bne.n	8007bf2 <vQueueWaitForMessageRestricted+0x2a>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bf8:	b25b      	sxtb	r3, r3
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bfe:	d103      	bne.n	8007c08 <vQueueWaitForMessageRestricted+0x40>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c08:	f001 fce8 	bl	80095dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	3324      	adds	r3, #36	@ 0x24
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fc45 	bl	80084ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c22:	6978      	ldr	r0, [r7, #20]
 8007c24:	f7ff ff26 	bl	8007a74 <prvUnlockQueue>
	}
 8007c28:	bf00      	nop
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08e      	sub	sp, #56	@ 0x38
 8007c34:	af04      	add	r7, sp, #16
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10b      	bne.n	8007c5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	623b      	str	r3, [r7, #32]
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	61fb      	str	r3, [r7, #28]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c7a:	235c      	movs	r3, #92	@ 0x5c
 8007c7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c82:	d00b      	beq.n	8007c9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	61bb      	str	r3, [r7, #24]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01e      	beq.n	8007ce2 <xTaskCreateStatic+0xb2>
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01b      	beq.n	8007ce2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f850 	bl	8007d7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cdc:	f000 f8de 	bl	8007e9c <prvAddNewTaskToReadyList>
 8007ce0:	e001      	b.n	8007ce6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ce6:	697b      	ldr	r3, [r7, #20]
	}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08c      	sub	sp, #48	@ 0x30
 8007cf4:	af04      	add	r7, sp, #16
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 fd59 	bl	80097bc <pvPortMalloc>
 8007d0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00e      	beq.n	8007d30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d12:	205c      	movs	r0, #92	@ 0x5c
 8007d14:	f001 fd52 	bl	80097bc <pvPortMalloc>
 8007d18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d26:	e005      	b.n	8007d34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d28:	6978      	ldr	r0, [r7, #20]
 8007d2a:	f001 fe15 	bl	8009958 <vPortFree>
 8007d2e:	e001      	b.n	8007d34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d017      	beq.n	8007d6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	2300      	movs	r3, #0
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 f80e 	bl	8007d7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d5e:	69f8      	ldr	r0, [r7, #28]
 8007d60:	f000 f89c 	bl	8007e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d64:	2301      	movs	r3, #1
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	e002      	b.n	8007d70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d70:	69bb      	ldr	r3, [r7, #24]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b088      	sub	sp, #32
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	461a      	mov	r2, r3
 8007d92:	21a5      	movs	r1, #165	@ 0xa5
 8007d94:	f002 f868 	bl	8009e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007da2:	3b01      	subs	r3, #1
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	617b      	str	r3, [r7, #20]
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	e7fd      	b.n	8007dd0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01f      	beq.n	8007e1a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	e012      	b.n	8007e06 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	7819      	ldrb	r1, [r3, #0]
 8007de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	3334      	adds	r3, #52	@ 0x34
 8007df0:	460a      	mov	r2, r1
 8007df2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	3301      	adds	r3, #1
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	2b0f      	cmp	r3, #15
 8007e0a:	d9e9      	bls.n	8007de0 <prvInitialiseNewTask+0x66>
 8007e0c:	e000      	b.n	8007e10 <prvInitialiseNewTask+0x96>
			{
				break;
 8007e0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e18:	e003      	b.n	8007e22 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	2b37      	cmp	r3, #55	@ 0x37
 8007e26:	d901      	bls.n	8007e2c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e28:	2337      	movs	r3, #55	@ 0x37
 8007e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e30:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e36:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	3304      	adds	r3, #4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe ff4a 	bl	8006cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	3318      	adds	r3, #24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe ff45 	bl	8006cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e66:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	68f9      	ldr	r1, [r7, #12]
 8007e7a:	69b8      	ldr	r0, [r7, #24]
 8007e7c:	f001 fa4e 	bl	800931c <pxPortInitialiseStack>
 8007e80:	4602      	mov	r2, r0
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e92:	bf00      	nop
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ea4:	f001 fb68 	bl	8009578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8007f60 <prvAddNewTaskToReadyList+0xc4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	4a2c      	ldr	r2, [pc, #176]	@ (8007f60 <prvAddNewTaskToReadyList+0xc4>)
 8007eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007eba:	4a2a      	ldr	r2, [pc, #168]	@ (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ec0:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <prvAddNewTaskToReadyList+0xc4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d110      	bne.n	8007eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ec8:	f000 fc1e 	bl	8008708 <prvInitialiseTaskLists>
 8007ecc:	e00d      	b.n	8007eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ece:	4b26      	ldr	r3, [pc, #152]	@ (8007f68 <prvAddNewTaskToReadyList+0xcc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ed6:	4b23      	ldr	r3, [pc, #140]	@ (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d802      	bhi.n	8007eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007eea:	4b20      	ldr	r3, [pc, #128]	@ (8007f6c <prvAddNewTaskToReadyList+0xd0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8007f6c <prvAddNewTaskToReadyList+0xd0>)
 8007ef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f6c <prvAddNewTaskToReadyList+0xd0>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f00:	4b1b      	ldr	r3, [pc, #108]	@ (8007f70 <prvAddNewTaskToReadyList+0xd4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d903      	bls.n	8007f10 <prvAddNewTaskToReadyList+0x74>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0c:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <prvAddNewTaskToReadyList+0xd4>)
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <prvAddNewTaskToReadyList+0xd8>)
 8007f1e:	441a      	add	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fe fee5 	bl	8006cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f2c:	f001 fb56 	bl	80095dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f30:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <prvAddNewTaskToReadyList+0xcc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00e      	beq.n	8007f56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f38:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <prvAddNewTaskToReadyList+0xc8>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d207      	bcs.n	8007f56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f46:	4b0c      	ldr	r3, [pc, #48]	@ (8007f78 <prvAddNewTaskToReadyList+0xdc>)
 8007f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20001280 	.word	0x20001280
 8007f64:	20000dac 	.word	0x20000dac
 8007f68:	2000128c 	.word	0x2000128c
 8007f6c:	2000129c 	.word	0x2000129c
 8007f70:	20001288 	.word	0x20001288
 8007f74:	20000db0 	.word	0x20000db0
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d018      	beq.n	8007fc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f8e:	4b14      	ldr	r3, [pc, #80]	@ (8007fe0 <vTaskDelay+0x64>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <vTaskDelay+0x32>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	60bb      	str	r3, [r7, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	e7fd      	b.n	8007faa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fae:	f000 f883 	bl	80080b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fe03 	bl	8008bc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fba:	f000 f88b 	bl	80080d4 <xTaskResumeAll>
 8007fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d107      	bne.n	8007fd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007fc6:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <vTaskDelay+0x68>)
 8007fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200012a8 	.word	0x200012a8
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	@ 0x28
 8007fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	1d39      	adds	r1, r7, #4
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fe18 	bl	8006c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	9202      	str	r2, [sp, #8]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2300      	movs	r3, #0
 8008014:	460a      	mov	r2, r1
 8008016:	4922      	ldr	r1, [pc, #136]	@ (80080a0 <vTaskStartScheduler+0xb8>)
 8008018:	4822      	ldr	r0, [pc, #136]	@ (80080a4 <vTaskStartScheduler+0xbc>)
 800801a:	f7ff fe09 	bl	8007c30 <xTaskCreateStatic>
 800801e:	4603      	mov	r3, r0
 8008020:	4a21      	ldr	r2, [pc, #132]	@ (80080a8 <vTaskStartScheduler+0xc0>)
 8008022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008024:	4b20      	ldr	r3, [pc, #128]	@ (80080a8 <vTaskStartScheduler+0xc0>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800802c:	2301      	movs	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e001      	b.n	8008036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d102      	bne.n	8008042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800803c:	f000 fe14 	bl	8008c68 <xTimerCreateTimerTask>
 8008040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d116      	bne.n	8008076 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	613b      	str	r3, [r7, #16]
}
 800805a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800805c:	4b13      	ldr	r3, [pc, #76]	@ (80080ac <vTaskStartScheduler+0xc4>)
 800805e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008062:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008064:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <vTaskStartScheduler+0xc8>)
 8008066:	2201      	movs	r2, #1
 8008068:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800806a:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <vTaskStartScheduler+0xcc>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008070:	f001 f9de 	bl	8009430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008074:	e00f      	b.n	8008096 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800807c:	d10b      	bne.n	8008096 <vTaskStartScheduler+0xae>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60fb      	str	r3, [r7, #12]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <vTaskStartScheduler+0xaa>
}
 8008096:	bf00      	nop
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	0800b280 	.word	0x0800b280
 80080a4:	080086d9 	.word	0x080086d9
 80080a8:	200012a4 	.word	0x200012a4
 80080ac:	200012a0 	.word	0x200012a0
 80080b0:	2000128c 	.word	0x2000128c
 80080b4:	20001284 	.word	0x20001284

080080b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080bc:	4b04      	ldr	r3, [pc, #16]	@ (80080d0 <vTaskSuspendAll+0x18>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	4a03      	ldr	r2, [pc, #12]	@ (80080d0 <vTaskSuspendAll+0x18>)
 80080c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080c6:	bf00      	nop
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	200012a8 	.word	0x200012a8

080080d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080e2:	4b42      	ldr	r3, [pc, #264]	@ (80081ec <xTaskResumeAll+0x118>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <xTaskResumeAll+0x2e>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	603b      	str	r3, [r7, #0]
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	e7fd      	b.n	80080fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008102:	f001 fa39 	bl	8009578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008106:	4b39      	ldr	r3, [pc, #228]	@ (80081ec <xTaskResumeAll+0x118>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3b01      	subs	r3, #1
 800810c:	4a37      	ldr	r2, [pc, #220]	@ (80081ec <xTaskResumeAll+0x118>)
 800810e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008110:	4b36      	ldr	r3, [pc, #216]	@ (80081ec <xTaskResumeAll+0x118>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d162      	bne.n	80081de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008118:	4b35      	ldr	r3, [pc, #212]	@ (80081f0 <xTaskResumeAll+0x11c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05e      	beq.n	80081de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008120:	e02f      	b.n	8008182 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008122:	4b34      	ldr	r3, [pc, #208]	@ (80081f4 <xTaskResumeAll+0x120>)
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3318      	adds	r3, #24
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fe3e 	bl	8006db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3304      	adds	r3, #4
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fe39 	bl	8006db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008142:	4b2d      	ldr	r3, [pc, #180]	@ (80081f8 <xTaskResumeAll+0x124>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d903      	bls.n	8008152 <xTaskResumeAll+0x7e>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	4a2a      	ldr	r2, [pc, #168]	@ (80081f8 <xTaskResumeAll+0x124>)
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4a27      	ldr	r2, [pc, #156]	@ (80081fc <xTaskResumeAll+0x128>)
 8008160:	441a      	add	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f7fe fdc4 	bl	8006cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008172:	4b23      	ldr	r3, [pc, #140]	@ (8008200 <xTaskResumeAll+0x12c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	429a      	cmp	r2, r3
 800817a:	d302      	bcc.n	8008182 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800817c:	4b21      	ldr	r3, [pc, #132]	@ (8008204 <xTaskResumeAll+0x130>)
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008182:	4b1c      	ldr	r3, [pc, #112]	@ (80081f4 <xTaskResumeAll+0x120>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1cb      	bne.n	8008122 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008190:	f000 fb58 	bl	8008844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008194:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <xTaskResumeAll+0x134>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d010      	beq.n	80081c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081a0:	f000 f846 	bl	8008230 <xTaskIncrementTick>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80081aa:	4b16      	ldr	r3, [pc, #88]	@ (8008204 <xTaskResumeAll+0x130>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f1      	bne.n	80081a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80081bc:	4b12      	ldr	r3, [pc, #72]	@ (8008208 <xTaskResumeAll+0x134>)
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081c2:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <xTaskResumeAll+0x130>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081ce:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <xTaskResumeAll+0x138>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081de:	f001 f9fd 	bl	80095dc <vPortExitCritical>

	return xAlreadyYielded;
 80081e2:	68bb      	ldr	r3, [r7, #8]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	200012a8 	.word	0x200012a8
 80081f0:	20001280 	.word	0x20001280
 80081f4:	20001240 	.word	0x20001240
 80081f8:	20001288 	.word	0x20001288
 80081fc:	20000db0 	.word	0x20000db0
 8008200:	20000dac 	.word	0x20000dac
 8008204:	20001294 	.word	0x20001294
 8008208:	20001290 	.word	0x20001290
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008216:	4b05      	ldr	r3, [pc, #20]	@ (800822c <xTaskGetTickCount+0x1c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800821c:	687b      	ldr	r3, [r7, #4]
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20001284 	.word	0x20001284

08008230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800823a:	4b4f      	ldr	r3, [pc, #316]	@ (8008378 <xTaskIncrementTick+0x148>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f040 8090 	bne.w	8008364 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008244:	4b4d      	ldr	r3, [pc, #308]	@ (800837c <xTaskIncrementTick+0x14c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800824c:	4a4b      	ldr	r2, [pc, #300]	@ (800837c <xTaskIncrementTick+0x14c>)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d121      	bne.n	800829c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008258:	4b49      	ldr	r3, [pc, #292]	@ (8008380 <xTaskIncrementTick+0x150>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	603b      	str	r3, [r7, #0]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <xTaskIncrementTick+0x46>
 800827a:	4b41      	ldr	r3, [pc, #260]	@ (8008380 <xTaskIncrementTick+0x150>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	4b40      	ldr	r3, [pc, #256]	@ (8008384 <xTaskIncrementTick+0x154>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a3e      	ldr	r2, [pc, #248]	@ (8008380 <xTaskIncrementTick+0x150>)
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	4a3e      	ldr	r2, [pc, #248]	@ (8008384 <xTaskIncrementTick+0x154>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	4b3e      	ldr	r3, [pc, #248]	@ (8008388 <xTaskIncrementTick+0x158>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	4a3c      	ldr	r2, [pc, #240]	@ (8008388 <xTaskIncrementTick+0x158>)
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	f000 fad4 	bl	8008844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800829c:	4b3b      	ldr	r3, [pc, #236]	@ (800838c <xTaskIncrementTick+0x15c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d349      	bcc.n	800833a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a6:	4b36      	ldr	r3, [pc, #216]	@ (8008380 <xTaskIncrementTick+0x150>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b0:	4b36      	ldr	r3, [pc, #216]	@ (800838c <xTaskIncrementTick+0x15c>)
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082b6:	601a      	str	r2, [r3, #0]
					break;
 80082b8:	e03f      	b.n	800833a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ba:	4b31      	ldr	r3, [pc, #196]	@ (8008380 <xTaskIncrementTick+0x150>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d203      	bcs.n	80082da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082d2:	4a2e      	ldr	r2, [pc, #184]	@ (800838c <xTaskIncrementTick+0x15c>)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082d8:	e02f      	b.n	800833a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	3304      	adds	r3, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd66 	bl	8006db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	3318      	adds	r3, #24
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fd5d 	bl	8006db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082fa:	4b25      	ldr	r3, [pc, #148]	@ (8008390 <xTaskIncrementTick+0x160>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d903      	bls.n	800830a <xTaskIncrementTick+0xda>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	4a22      	ldr	r2, [pc, #136]	@ (8008390 <xTaskIncrementTick+0x160>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4a1f      	ldr	r2, [pc, #124]	@ (8008394 <xTaskIncrementTick+0x164>)
 8008318:	441a      	add	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fe fce8 	bl	8006cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832a:	4b1b      	ldr	r3, [pc, #108]	@ (8008398 <xTaskIncrementTick+0x168>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008330:	429a      	cmp	r2, r3
 8008332:	d3b8      	bcc.n	80082a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008338:	e7b5      	b.n	80082a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800833a:	4b17      	ldr	r3, [pc, #92]	@ (8008398 <xTaskIncrementTick+0x168>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008340:	4914      	ldr	r1, [pc, #80]	@ (8008394 <xTaskIncrementTick+0x164>)
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d901      	bls.n	8008356 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008352:	2301      	movs	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008356:	4b11      	ldr	r3, [pc, #68]	@ (800839c <xTaskIncrementTick+0x16c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800835e:	2301      	movs	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e004      	b.n	800836e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008364:	4b0e      	ldr	r3, [pc, #56]	@ (80083a0 <xTaskIncrementTick+0x170>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	4a0d      	ldr	r2, [pc, #52]	@ (80083a0 <xTaskIncrementTick+0x170>)
 800836c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800836e:	697b      	ldr	r3, [r7, #20]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200012a8 	.word	0x200012a8
 800837c:	20001284 	.word	0x20001284
 8008380:	20001238 	.word	0x20001238
 8008384:	2000123c 	.word	0x2000123c
 8008388:	20001298 	.word	0x20001298
 800838c:	200012a0 	.word	0x200012a0
 8008390:	20001288 	.word	0x20001288
 8008394:	20000db0 	.word	0x20000db0
 8008398:	20000dac 	.word	0x20000dac
 800839c:	20001294 	.word	0x20001294
 80083a0:	20001290 	.word	0x20001290

080083a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083aa:	4b28      	ldr	r3, [pc, #160]	@ (800844c <vTaskSwitchContext+0xa8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083b2:	4b27      	ldr	r3, [pc, #156]	@ (8008450 <vTaskSwitchContext+0xac>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083b8:	e042      	b.n	8008440 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80083ba:	4b25      	ldr	r3, [pc, #148]	@ (8008450 <vTaskSwitchContext+0xac>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c0:	4b24      	ldr	r3, [pc, #144]	@ (8008454 <vTaskSwitchContext+0xb0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e011      	b.n	80083ec <vTaskSwitchContext+0x48>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	e7fd      	b.n	80083e2 <vTaskSwitchContext+0x3e>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	491a      	ldr	r1, [pc, #104]	@ (8008458 <vTaskSwitchContext+0xb4>)
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0e3      	beq.n	80083c8 <vTaskSwitchContext+0x24>
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a13      	ldr	r2, [pc, #76]	@ (8008458 <vTaskSwitchContext+0xb4>)
 800840c:	4413      	add	r3, r2
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3308      	adds	r3, #8
 8008422:	429a      	cmp	r2, r3
 8008424:	d104      	bne.n	8008430 <vTaskSwitchContext+0x8c>
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	605a      	str	r2, [r3, #4]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	4a09      	ldr	r2, [pc, #36]	@ (800845c <vTaskSwitchContext+0xb8>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	4a06      	ldr	r2, [pc, #24]	@ (8008454 <vTaskSwitchContext+0xb0>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6013      	str	r3, [r2, #0]
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	200012a8 	.word	0x200012a8
 8008450:	20001294 	.word	0x20001294
 8008454:	20001288 	.word	0x20001288
 8008458:	20000db0 	.word	0x20000db0
 800845c:	20000dac 	.word	0x20000dac

08008460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10b      	bne.n	8008488 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	60fb      	str	r3, [r7, #12]
}
 8008482:	bf00      	nop
 8008484:	bf00      	nop
 8008486:	e7fd      	b.n	8008484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008488:	4b07      	ldr	r3, [pc, #28]	@ (80084a8 <vTaskPlaceOnEventList+0x48>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3318      	adds	r3, #24
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7fe fc54 	bl	8006d3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008496:	2101      	movs	r1, #1
 8008498:	6838      	ldr	r0, [r7, #0]
 800849a:	f000 fb91 	bl	8008bc0 <prvAddCurrentTaskToDelayedList>
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000dac 	.word	0x20000dac

080084ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <vTaskPlaceOnEventListRestricted+0x54>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3318      	adds	r3, #24
 80084dc:	4619      	mov	r1, r3
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7fe fc09 	bl	8006cf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80084ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	68b8      	ldr	r0, [r7, #8]
 80084f4:	f000 fb64 	bl	8008bc0 <prvAddCurrentTaskToDelayedList>
	}
 80084f8:	bf00      	nop
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000dac 	.word	0x20000dac

08008504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	60fb      	str	r3, [r7, #12]
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	e7fd      	b.n	800852e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	3318      	adds	r3, #24
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fc3a 	bl	8006db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853c:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <xTaskRemoveFromEventList+0xb0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d11d      	bne.n	8008580 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fc31 	bl	8006db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008552:	4b19      	ldr	r3, [pc, #100]	@ (80085b8 <xTaskRemoveFromEventList+0xb4>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d903      	bls.n	8008562 <xTaskRemoveFromEventList+0x5e>
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	4a16      	ldr	r2, [pc, #88]	@ (80085b8 <xTaskRemoveFromEventList+0xb4>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4a13      	ldr	r2, [pc, #76]	@ (80085bc <xTaskRemoveFromEventList+0xb8>)
 8008570:	441a      	add	r2, r3
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3304      	adds	r3, #4
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f7fe fbbc 	bl	8006cf6 <vListInsertEnd>
 800857e:	e005      	b.n	800858c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3318      	adds	r3, #24
 8008584:	4619      	mov	r1, r3
 8008586:	480e      	ldr	r0, [pc, #56]	@ (80085c0 <xTaskRemoveFromEventList+0xbc>)
 8008588:	f7fe fbb5 	bl	8006cf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008590:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <xTaskRemoveFromEventList+0xc0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	429a      	cmp	r2, r3
 8008598:	d905      	bls.n	80085a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800859a:	2301      	movs	r3, #1
 800859c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800859e:	4b0a      	ldr	r3, [pc, #40]	@ (80085c8 <xTaskRemoveFromEventList+0xc4>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e001      	b.n	80085aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085aa:	697b      	ldr	r3, [r7, #20]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	200012a8 	.word	0x200012a8
 80085b8:	20001288 	.word	0x20001288
 80085bc:	20000db0 	.word	0x20000db0
 80085c0:	20001240 	.word	0x20001240
 80085c4:	20000dac 	.word	0x20000dac
 80085c8:	20001294 	.word	0x20001294

080085cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085d4:	4b06      	ldr	r3, [pc, #24]	@ (80085f0 <vTaskInternalSetTimeOutState+0x24>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085dc:	4b05      	ldr	r3, [pc, #20]	@ (80085f4 <vTaskInternalSetTimeOutState+0x28>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20001298 	.word	0x20001298
 80085f4:	20001284 	.word	0x20001284

080085f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10b      	bne.n	8008620 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	613b      	str	r3, [r7, #16]
}
 800861a:	bf00      	nop
 800861c:	bf00      	nop
 800861e:	e7fd      	b.n	800861c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10b      	bne.n	800863e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60fb      	str	r3, [r7, #12]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800863e:	f000 ff9b 	bl	8009578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008642:	4b1d      	ldr	r3, [pc, #116]	@ (80086b8 <xTaskCheckForTimeOut+0xc0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800865a:	d102      	bne.n	8008662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800865c:	2300      	movs	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	e023      	b.n	80086aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b15      	ldr	r3, [pc, #84]	@ (80086bc <xTaskCheckForTimeOut+0xc4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d007      	beq.n	800867e <xTaskCheckForTimeOut+0x86>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	429a      	cmp	r2, r3
 8008676:	d302      	bcc.n	800867e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	e015      	b.n	80086aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	429a      	cmp	r2, r3
 8008686:	d20b      	bcs.n	80086a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff ff99 	bl	80085cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800869a:	2300      	movs	r3, #0
 800869c:	61fb      	str	r3, [r7, #28]
 800869e:	e004      	b.n	80086aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086a6:	2301      	movs	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086aa:	f000 ff97 	bl	80095dc <vPortExitCritical>

	return xReturn;
 80086ae:	69fb      	ldr	r3, [r7, #28]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20001284 	.word	0x20001284
 80086bc:	20001298 	.word	0x20001298

080086c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086c4:	4b03      	ldr	r3, [pc, #12]	@ (80086d4 <vTaskMissedYield+0x14>)
 80086c6:	2201      	movs	r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
}
 80086ca:	bf00      	nop
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	20001294 	.word	0x20001294

080086d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086e0:	f000 f852 	bl	8008788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086e4:	4b06      	ldr	r3, [pc, #24]	@ (8008700 <prvIdleTask+0x28>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d9f9      	bls.n	80086e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <prvIdleTask+0x2c>)
 80086ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086fc:	e7f0      	b.n	80086e0 <prvIdleTask+0x8>
 80086fe:	bf00      	nop
 8008700:	20000db0 	.word	0x20000db0
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800870e:	2300      	movs	r3, #0
 8008710:	607b      	str	r3, [r7, #4]
 8008712:	e00c      	b.n	800872e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4a12      	ldr	r2, [pc, #72]	@ (8008768 <prvInitialiseTaskLists+0x60>)
 8008720:	4413      	add	r3, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe faba 	bl	8006c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3301      	adds	r3, #1
 800872c:	607b      	str	r3, [r7, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b37      	cmp	r3, #55	@ 0x37
 8008732:	d9ef      	bls.n	8008714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008734:	480d      	ldr	r0, [pc, #52]	@ (800876c <prvInitialiseTaskLists+0x64>)
 8008736:	f7fe fab1 	bl	8006c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800873a:	480d      	ldr	r0, [pc, #52]	@ (8008770 <prvInitialiseTaskLists+0x68>)
 800873c:	f7fe faae 	bl	8006c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008740:	480c      	ldr	r0, [pc, #48]	@ (8008774 <prvInitialiseTaskLists+0x6c>)
 8008742:	f7fe faab 	bl	8006c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008746:	480c      	ldr	r0, [pc, #48]	@ (8008778 <prvInitialiseTaskLists+0x70>)
 8008748:	f7fe faa8 	bl	8006c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800874c:	480b      	ldr	r0, [pc, #44]	@ (800877c <prvInitialiseTaskLists+0x74>)
 800874e:	f7fe faa5 	bl	8006c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008752:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <prvInitialiseTaskLists+0x78>)
 8008754:	4a05      	ldr	r2, [pc, #20]	@ (800876c <prvInitialiseTaskLists+0x64>)
 8008756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008758:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <prvInitialiseTaskLists+0x7c>)
 800875a:	4a05      	ldr	r2, [pc, #20]	@ (8008770 <prvInitialiseTaskLists+0x68>)
 800875c:	601a      	str	r2, [r3, #0]
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000db0 	.word	0x20000db0
 800876c:	20001210 	.word	0x20001210
 8008770:	20001224 	.word	0x20001224
 8008774:	20001240 	.word	0x20001240
 8008778:	20001254 	.word	0x20001254
 800877c:	2000126c 	.word	0x2000126c
 8008780:	20001238 	.word	0x20001238
 8008784:	2000123c 	.word	0x2000123c

08008788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800878e:	e019      	b.n	80087c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008790:	f000 fef2 	bl	8009578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008794:	4b10      	ldr	r3, [pc, #64]	@ (80087d8 <prvCheckTasksWaitingTermination+0x50>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fb05 	bl	8006db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <prvCheckTasksWaitingTermination+0x54>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4a0b      	ldr	r2, [pc, #44]	@ (80087dc <prvCheckTasksWaitingTermination+0x54>)
 80087ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087b0:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <prvCheckTasksWaitingTermination+0x58>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	4a0a      	ldr	r2, [pc, #40]	@ (80087e0 <prvCheckTasksWaitingTermination+0x58>)
 80087b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087ba:	f000 ff0f 	bl	80095dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f810 	bl	80087e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087c4:	4b06      	ldr	r3, [pc, #24]	@ (80087e0 <prvCheckTasksWaitingTermination+0x58>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e1      	bne.n	8008790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001254 	.word	0x20001254
 80087dc:	20001280 	.word	0x20001280
 80087e0:	20001268 	.word	0x20001268

080087e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d108      	bne.n	8008808 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 f8ac 	bl	8009958 <vPortFree>
				vPortFree( pxTCB );
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 f8a9 	bl	8009958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008806:	e019      	b.n	800883c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800880e:	2b01      	cmp	r3, #1
 8008810:	d103      	bne.n	800881a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f8a0 	bl	8009958 <vPortFree>
	}
 8008818:	e010      	b.n	800883c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008820:	2b02      	cmp	r3, #2
 8008822:	d00b      	beq.n	800883c <prvDeleteTCB+0x58>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <prvDeleteTCB+0x54>
	}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800884a:	4b0c      	ldr	r3, [pc, #48]	@ (800887c <prvResetNextTaskUnblockTime+0x38>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008854:	4b0a      	ldr	r3, [pc, #40]	@ (8008880 <prvResetNextTaskUnblockTime+0x3c>)
 8008856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800885a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800885c:	e008      	b.n	8008870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885e:	4b07      	ldr	r3, [pc, #28]	@ (800887c <prvResetNextTaskUnblockTime+0x38>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	4a04      	ldr	r2, [pc, #16]	@ (8008880 <prvResetNextTaskUnblockTime+0x3c>)
 800886e:	6013      	str	r3, [r2, #0]
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	20001238 	.word	0x20001238
 8008880:	200012a0 	.word	0x200012a0

08008884 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800888a:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008890:	687b      	ldr	r3, [r7, #4]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20000dac 	.word	0x20000dac

080088a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088aa:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <xTaskGetSchedulerState+0x34>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088b2:	2301      	movs	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	e008      	b.n	80088ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b8:	4b08      	ldr	r3, [pc, #32]	@ (80088dc <xTaskGetSchedulerState+0x38>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088c0:	2302      	movs	r3, #2
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e001      	b.n	80088ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088c6:	2300      	movs	r3, #0
 80088c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088ca:	687b      	ldr	r3, [r7, #4]
	}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	2000128c 	.word	0x2000128c
 80088dc:	200012a8 	.word	0x200012a8

080088e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d051      	beq.n	800899a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fa:	4b2a      	ldr	r3, [pc, #168]	@ (80089a4 <xTaskPriorityInherit+0xc4>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008900:	429a      	cmp	r2, r3
 8008902:	d241      	bcs.n	8008988 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	db06      	blt.n	800891a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890c:	4b25      	ldr	r3, [pc, #148]	@ (80089a4 <xTaskPriorityInherit+0xc4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008912:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6959      	ldr	r1, [r3, #20]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4a1f      	ldr	r2, [pc, #124]	@ (80089a8 <xTaskPriorityInherit+0xc8>)
 800892c:	4413      	add	r3, r2
 800892e:	4299      	cmp	r1, r3
 8008930:	d122      	bne.n	8008978 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3304      	adds	r3, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fa3a 	bl	8006db0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800893c:	4b19      	ldr	r3, [pc, #100]	@ (80089a4 <xTaskPriorityInherit+0xc4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800894a:	4b18      	ldr	r3, [pc, #96]	@ (80089ac <xTaskPriorityInherit+0xcc>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d903      	bls.n	800895a <xTaskPriorityInherit+0x7a>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008956:	4a15      	ldr	r2, [pc, #84]	@ (80089ac <xTaskPriorityInherit+0xcc>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4a10      	ldr	r2, [pc, #64]	@ (80089a8 <xTaskPriorityInherit+0xc8>)
 8008968:	441a      	add	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe f9c0 	bl	8006cf6 <vListInsertEnd>
 8008976:	e004      	b.n	8008982 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008978:	4b0a      	ldr	r3, [pc, #40]	@ (80089a4 <xTaskPriorityInherit+0xc4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008982:	2301      	movs	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e008      	b.n	800899a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800898c:	4b05      	ldr	r3, [pc, #20]	@ (80089a4 <xTaskPriorityInherit+0xc4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008992:	429a      	cmp	r2, r3
 8008994:	d201      	bcs.n	800899a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800899a:	68fb      	ldr	r3, [r7, #12]
	}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20000dac 	.word	0x20000dac
 80089a8:	20000db0 	.word	0x20000db0
 80089ac:	20001288 	.word	0x20001288

080089b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d058      	beq.n	8008a78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008a84 <xTaskPriorityDisinherit+0xd4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d00b      	beq.n	80089e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60bb      	str	r3, [r7, #8]
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	e7fd      	b.n	8008a04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0c:	1e5a      	subs	r2, r3, #1
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d02c      	beq.n	8008a78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d128      	bne.n	8008a78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe f9c0 	bl	8006db0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a48:	4b0f      	ldr	r3, [pc, #60]	@ (8008a88 <xTaskPriorityDisinherit+0xd8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d903      	bls.n	8008a58 <xTaskPriorityDisinherit+0xa8>
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4a0c      	ldr	r2, [pc, #48]	@ (8008a88 <xTaskPriorityDisinherit+0xd8>)
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4a09      	ldr	r2, [pc, #36]	@ (8008a8c <xTaskPriorityDisinherit+0xdc>)
 8008a66:	441a      	add	r2, r3
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f7fe f941 	bl	8006cf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a78:	697b      	ldr	r3, [r7, #20]
	}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000dac 	.word	0x20000dac
 8008a88:	20001288 	.word	0x20001288
 8008a8c:	20000db0 	.word	0x20000db0

08008a90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d06c      	beq.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d902      	bls.n	8008ad8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	e002      	b.n	8008ade <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008adc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d04c      	beq.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d147      	bne.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008af2:	4b26      	ldr	r3, [pc, #152]	@ (8008b8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d10b      	bne.n	8008b14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	60bb      	str	r3, [r7, #8]
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	e7fd      	b.n	8008b10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	db04      	blt.n	8008b32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	6959      	ldr	r1, [r3, #20]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4a13      	ldr	r2, [pc, #76]	@ (8008b90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b42:	4413      	add	r3, r2
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d11c      	bne.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe f92f 	bl	8006db0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b56:	4b0f      	ldr	r3, [pc, #60]	@ (8008b94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d903      	bls.n	8008b66 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b62:	4a0c      	ldr	r2, [pc, #48]	@ (8008b94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4a07      	ldr	r2, [pc, #28]	@ (8008b90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b74:	441a      	add	r2, r3
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f7fe f8ba 	bl	8006cf6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b82:	bf00      	nop
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000dac 	.word	0x20000dac
 8008b90:	20000db0 	.word	0x20000db0
 8008b94:	20001288 	.word	0x20001288

08008b98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b9c:	4b07      	ldr	r3, [pc, #28]	@ (8008bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ba4:	4b05      	ldr	r3, [pc, #20]	@ (8008bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008baa:	3201      	adds	r2, #1
 8008bac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008bae:	4b03      	ldr	r3, [pc, #12]	@ (8008bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
	}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000dac 	.word	0x20000dac

08008bc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bca:	4b21      	ldr	r3, [pc, #132]	@ (8008c50 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd0:	4b20      	ldr	r3, [pc, #128]	@ (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe f8ea 	bl	8006db0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008be2:	d10a      	bne.n	8008bfa <prvAddCurrentTaskToDelayedList+0x3a>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d007      	beq.n	8008bfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bea:	4b1a      	ldr	r3, [pc, #104]	@ (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4819      	ldr	r0, [pc, #100]	@ (8008c58 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bf4:	f7fe f87f 	bl	8006cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bf8:	e026      	b.n	8008c48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c02:	4b14      	ldr	r3, [pc, #80]	@ (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d209      	bcs.n	8008c26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fe f88d 	bl	8006d3e <vListInsert>
}
 8008c24:	e010      	b.n	8008c48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c26:	4b0e      	ldr	r3, [pc, #56]	@ (8008c60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f7fe f883 	bl	8006d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c38:	4b0a      	ldr	r3, [pc, #40]	@ (8008c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d202      	bcs.n	8008c48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c42:	4a08      	ldr	r2, [pc, #32]	@ (8008c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6013      	str	r3, [r2, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20001284 	.word	0x20001284
 8008c54:	20000dac 	.word	0x20000dac
 8008c58:	2000126c 	.word	0x2000126c
 8008c5c:	2000123c 	.word	0x2000123c
 8008c60:	20001238 	.word	0x20001238
 8008c64:	200012a0 	.word	0x200012a0

08008c68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	@ 0x28
 8008c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c72:	f000 fb13 	bl	800929c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c76:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <xTimerCreateTimerTask+0x84>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d021      	beq.n	8008cc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c86:	1d3a      	adds	r2, r7, #4
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	f107 030c 	add.w	r3, r7, #12
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fd ffe9 	bl	8006c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	9202      	str	r2, [sp, #8]
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	460a      	mov	r2, r1
 8008ca8:	4911      	ldr	r1, [pc, #68]	@ (8008cf0 <xTimerCreateTimerTask+0x88>)
 8008caa:	4812      	ldr	r0, [pc, #72]	@ (8008cf4 <xTimerCreateTimerTask+0x8c>)
 8008cac:	f7fe ffc0 	bl	8007c30 <xTaskCreateStatic>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4a11      	ldr	r2, [pc, #68]	@ (8008cf8 <xTimerCreateTimerTask+0x90>)
 8008cb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cb6:	4b10      	ldr	r3, [pc, #64]	@ (8008cf8 <xTimerCreateTimerTask+0x90>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10b      	bne.n	8008ce0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	613b      	str	r3, [r7, #16]
}
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
 8008cde:	e7fd      	b.n	8008cdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ce0:	697b      	ldr	r3, [r7, #20]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200012dc 	.word	0x200012dc
 8008cf0:	0800b288 	.word	0x0800b288
 8008cf4:	08008e35 	.word	0x08008e35
 8008cf8:	200012e0 	.word	0x200012e0

08008cfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	@ 0x28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10b      	bne.n	8008d2c <xTimerGenericCommand+0x30>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	623b      	str	r3, [r7, #32]
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d2c:	4b19      	ldr	r3, [pc, #100]	@ (8008d94 <xTimerGenericCommand+0x98>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d02a      	beq.n	8008d8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	dc18      	bgt.n	8008d78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d46:	f7ff fdad 	bl	80088a4 <xTaskGetSchedulerState>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d109      	bne.n	8008d64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d50:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <xTimerGenericCommand+0x98>)
 8008d52:	6818      	ldr	r0, [r3, #0]
 8008d54:	f107 0110 	add.w	r1, r7, #16
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d5c:	f7fe fa50 	bl	8007200 <xQueueGenericSend>
 8008d60:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d62:	e012      	b.n	8008d8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d64:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <xTimerGenericCommand+0x98>)
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	f107 0110 	add.w	r1, r7, #16
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f7fe fa46 	bl	8007200 <xQueueGenericSend>
 8008d74:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d76:	e008      	b.n	8008d8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d78:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <xTimerGenericCommand+0x98>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	f107 0110 	add.w	r1, r7, #16
 8008d80:	2300      	movs	r3, #0
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	f7fe fb3e 	bl	8007404 <xQueueGenericSendFromISR>
 8008d88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3728      	adds	r7, #40	@ 0x28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	200012dc 	.word	0x200012dc

08008d98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da2:	4b23      	ldr	r3, [pc, #140]	@ (8008e30 <prvProcessExpiredTimer+0x98>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fd fffd 	bl	8006db0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d023      	beq.n	8008e0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	18d1      	adds	r1, r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	6978      	ldr	r0, [r7, #20]
 8008dd2:	f000 f8d5 	bl	8008f80 <prvInsertTimerInActiveList>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d020      	beq.n	8008e1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	2300      	movs	r3, #0
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	2100      	movs	r1, #0
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f7ff ff88 	bl	8008cfc <xTimerGenericCommand>
 8008dec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d114      	bne.n	8008e1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60fb      	str	r3, [r7, #12]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e12:	f023 0301 	bic.w	r3, r3, #1
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	6978      	ldr	r0, [r7, #20]
 8008e24:	4798      	blx	r3
}
 8008e26:	bf00      	nop
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	200012d4 	.word	0x200012d4

08008e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e3c:	f107 0308 	add.w	r3, r7, #8
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f859 	bl	8008ef8 <prvGetNextExpireTime>
 8008e46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f805 	bl	8008e5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e52:	f000 f8d7 	bl	8009004 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e56:	bf00      	nop
 8008e58:	e7f0      	b.n	8008e3c <prvTimerTask+0x8>
	...

08008e5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e66:	f7ff f927 	bl	80080b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e6a:	f107 0308 	add.w	r3, r7, #8
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f866 	bl	8008f40 <prvSampleTimeNow>
 8008e74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d130      	bne.n	8008ede <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <prvProcessTimerOrBlockTask+0x3c>
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d806      	bhi.n	8008e98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e8a:	f7ff f923 	bl	80080d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff ff81 	bl	8008d98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e96:	e024      	b.n	8008ee2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d008      	beq.n	8008eb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e9e:	4b13      	ldr	r3, [pc, #76]	@ (8008eec <prvProcessTimerOrBlockTask+0x90>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <prvProcessTimerOrBlockTask+0x50>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <prvProcessTimerOrBlockTask+0x52>
 8008eac:	2300      	movs	r3, #0
 8008eae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef0 <prvProcessTimerOrBlockTask+0x94>)
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	f7fe fe83 	bl	8007bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ec2:	f7ff f907 	bl	80080d4 <xTaskResumeAll>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ecc:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <prvProcessTimerOrBlockTask+0x98>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	f3bf 8f6f 	isb	sy
}
 8008edc:	e001      	b.n	8008ee2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ede:	f7ff f8f9 	bl	80080d4 <xTaskResumeAll>
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	200012d8 	.word	0x200012d8
 8008ef0:	200012dc 	.word	0x200012dc
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f00:	4b0e      	ldr	r3, [pc, #56]	@ (8008f3c <prvGetNextExpireTime+0x44>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <prvGetNextExpireTime+0x16>
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	e000      	b.n	8008f10 <prvGetNextExpireTime+0x18>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d105      	bne.n	8008f28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f1c:	4b07      	ldr	r3, [pc, #28]	@ (8008f3c <prvGetNextExpireTime+0x44>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	e001      	b.n	8008f2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	200012d4 	.word	0x200012d4

08008f40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f48:	f7ff f962 	bl	8008210 <xTaskGetTickCount>
 8008f4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <prvSampleTimeNow+0x3c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d205      	bcs.n	8008f64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f58:	f000 f93a 	bl	80091d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	e002      	b.n	8008f6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f6a:	4a04      	ldr	r2, [pc, #16]	@ (8008f7c <prvSampleTimeNow+0x3c>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f70:	68fb      	ldr	r3, [r7, #12]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	200012e4 	.word	0x200012e4

08008f80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d812      	bhi.n	8008fcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	1ad2      	subs	r2, r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d302      	bcc.n	8008fba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e01b      	b.n	8008ff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fba:	4b10      	ldr	r3, [pc, #64]	@ (8008ffc <prvInsertTimerInActiveList+0x7c>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	f7fd feba 	bl	8006d3e <vListInsert>
 8008fca:	e012      	b.n	8008ff2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d206      	bcs.n	8008fe2 <prvInsertTimerInActiveList+0x62>
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d302      	bcc.n	8008fe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	e007      	b.n	8008ff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fe2:	4b07      	ldr	r3, [pc, #28]	@ (8009000 <prvInsertTimerInActiveList+0x80>)
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4619      	mov	r1, r3
 8008fec:	4610      	mov	r0, r2
 8008fee:	f7fd fea6 	bl	8006d3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ff2:	697b      	ldr	r3, [r7, #20]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	200012d8 	.word	0x200012d8
 8009000:	200012d4 	.word	0x200012d4

08009004 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08e      	sub	sp, #56	@ 0x38
 8009008:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800900a:	e0ce      	b.n	80091aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	da19      	bge.n	8009046 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009012:	1d3b      	adds	r3, r7, #4
 8009014:	3304      	adds	r3, #4
 8009016:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10b      	bne.n	8009036 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	61fb      	str	r3, [r7, #28]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800903c:	6850      	ldr	r0, [r2, #4]
 800903e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009040:	6892      	ldr	r2, [r2, #8]
 8009042:	4611      	mov	r1, r2
 8009044:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f2c0 80ae 	blt.w	80091aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d004      	beq.n	8009064 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800905a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905c:	3304      	adds	r3, #4
 800905e:	4618      	mov	r0, r3
 8009060:	f7fd fea6 	bl	8006db0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009064:	463b      	mov	r3, r7
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff ff6a 	bl	8008f40 <prvSampleTimeNow>
 800906c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b09      	cmp	r3, #9
 8009072:	f200 8097 	bhi.w	80091a4 <prvProcessReceivedCommands+0x1a0>
 8009076:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <prvProcessReceivedCommands+0x78>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090a5 	.word	0x080090a5
 8009080:	080090a5 	.word	0x080090a5
 8009084:	080090a5 	.word	0x080090a5
 8009088:	0800911b 	.word	0x0800911b
 800908c:	0800912f 	.word	0x0800912f
 8009090:	0800917b 	.word	0x0800917b
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090a5 	.word	0x080090a5
 800909c:	0800911b 	.word	0x0800911b
 80090a0:	0800912f 	.word	0x0800912f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	18d1      	adds	r1, r2, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090c4:	f7ff ff5c 	bl	8008f80 <prvInsertTimerInActiveList>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d06c      	beq.n	80091a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d061      	beq.n	80091a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	441a      	add	r2, r3
 80090ec:	2300      	movs	r3, #0
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	2300      	movs	r3, #0
 80090f2:	2100      	movs	r1, #0
 80090f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090f6:	f7ff fe01 	bl	8008cfc <xTimerGenericCommand>
 80090fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d152      	bne.n	80091a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	61bb      	str	r3, [r7, #24]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800911a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	b2da      	uxtb	r2, r3
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800912c:	e03d      	b.n	80091aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009134:	f043 0301 	orr.w	r3, r3, #1
 8009138:	b2da      	uxtb	r2, r3
 800913a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	617b      	str	r3, [r7, #20]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	18d1      	adds	r1, r2, r3
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009174:	f7ff ff04 	bl	8008f80 <prvInsertTimerInActiveList>
					break;
 8009178:	e017      	b.n	80091aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800918a:	f000 fbe5 	bl	8009958 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800918e:	e00c      	b.n	80091aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009192:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009196:	f023 0301 	bic.w	r3, r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80091a2:	e002      	b.n	80091aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <prvProcessReceivedCommands+0x1a6>
					break;
 80091a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091aa:	4b08      	ldr	r3, [pc, #32]	@ (80091cc <prvProcessReceivedCommands+0x1c8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	1d39      	adds	r1, r7, #4
 80091b0:	2200      	movs	r2, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe f9c4 	bl	8007540 <xQueueReceive>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f47f af26 	bne.w	800900c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	3730      	adds	r7, #48	@ 0x30
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200012dc 	.word	0x200012dc

080091d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091d6:	e049      	b.n	800926c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009294 <prvSwitchTimerLists+0xc4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e2:	4b2c      	ldr	r3, [pc, #176]	@ (8009294 <prvSwitchTimerLists+0xc4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fd fddd 	bl	8006db0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d02f      	beq.n	800926c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4413      	add	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	429a      	cmp	r2, r3
 800921c:	d90e      	bls.n	800923c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800922a:	4b1a      	ldr	r3, [pc, #104]	@ (8009294 <prvSwitchTimerLists+0xc4>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3304      	adds	r3, #4
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f7fd fd82 	bl	8006d3e <vListInsert>
 800923a:	e017      	b.n	800926c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800923c:	2300      	movs	r3, #0
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2300      	movs	r3, #0
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	2100      	movs	r1, #0
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f7ff fd58 	bl	8008cfc <xTimerGenericCommand>
 800924c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	603b      	str	r3, [r7, #0]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800926c:	4b09      	ldr	r3, [pc, #36]	@ (8009294 <prvSwitchTimerLists+0xc4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1b0      	bne.n	80091d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009276:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <prvSwitchTimerLists+0xc4>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <prvSwitchTimerLists+0xc8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a04      	ldr	r2, [pc, #16]	@ (8009294 <prvSwitchTimerLists+0xc4>)
 8009282:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009284:	4a04      	ldr	r2, [pc, #16]	@ (8009298 <prvSwitchTimerLists+0xc8>)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	6013      	str	r3, [r2, #0]
}
 800928a:	bf00      	nop
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	200012d4 	.word	0x200012d4
 8009298:	200012d8 	.word	0x200012d8

0800929c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092a2:	f000 f969 	bl	8009578 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092a6:	4b15      	ldr	r3, [pc, #84]	@ (80092fc <prvCheckForValidListAndQueue+0x60>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d120      	bne.n	80092f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80092ae:	4814      	ldr	r0, [pc, #80]	@ (8009300 <prvCheckForValidListAndQueue+0x64>)
 80092b0:	f7fd fcf4 	bl	8006c9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092b4:	4813      	ldr	r0, [pc, #76]	@ (8009304 <prvCheckForValidListAndQueue+0x68>)
 80092b6:	f7fd fcf1 	bl	8006c9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092ba:	4b13      	ldr	r3, [pc, #76]	@ (8009308 <prvCheckForValidListAndQueue+0x6c>)
 80092bc:	4a10      	ldr	r2, [pc, #64]	@ (8009300 <prvCheckForValidListAndQueue+0x64>)
 80092be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092c0:	4b12      	ldr	r3, [pc, #72]	@ (800930c <prvCheckForValidListAndQueue+0x70>)
 80092c2:	4a10      	ldr	r2, [pc, #64]	@ (8009304 <prvCheckForValidListAndQueue+0x68>)
 80092c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092c6:	2300      	movs	r3, #0
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4b11      	ldr	r3, [pc, #68]	@ (8009310 <prvCheckForValidListAndQueue+0x74>)
 80092cc:	4a11      	ldr	r2, [pc, #68]	@ (8009314 <prvCheckForValidListAndQueue+0x78>)
 80092ce:	2110      	movs	r1, #16
 80092d0:	200a      	movs	r0, #10
 80092d2:	f7fd fe01 	bl	8006ed8 <xQueueGenericCreateStatic>
 80092d6:	4603      	mov	r3, r0
 80092d8:	4a08      	ldr	r2, [pc, #32]	@ (80092fc <prvCheckForValidListAndQueue+0x60>)
 80092da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092dc:	4b07      	ldr	r3, [pc, #28]	@ (80092fc <prvCheckForValidListAndQueue+0x60>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092e4:	4b05      	ldr	r3, [pc, #20]	@ (80092fc <prvCheckForValidListAndQueue+0x60>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	490b      	ldr	r1, [pc, #44]	@ (8009318 <prvCheckForValidListAndQueue+0x7c>)
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fc42 	bl	8007b74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092f0:	f000 f974 	bl	80095dc <vPortExitCritical>
}
 80092f4:	bf00      	nop
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200012dc 	.word	0x200012dc
 8009300:	200012ac 	.word	0x200012ac
 8009304:	200012c0 	.word	0x200012c0
 8009308:	200012d4 	.word	0x200012d4
 800930c:	200012d8 	.word	0x200012d8
 8009310:	20001388 	.word	0x20001388
 8009314:	200012e8 	.word	0x200012e8
 8009318:	0800b290 	.word	0x0800b290

0800931c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3b04      	subs	r3, #4
 800932c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3b04      	subs	r3, #4
 800933a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f023 0201 	bic.w	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3b04      	subs	r3, #4
 800934a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800934c:	4a0c      	ldr	r2, [pc, #48]	@ (8009380 <pxPortInitialiseStack+0x64>)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3b14      	subs	r3, #20
 8009356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3b04      	subs	r3, #4
 8009362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f06f 0202 	mvn.w	r2, #2
 800936a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3b20      	subs	r3, #32
 8009370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009372:	68fb      	ldr	r3, [r7, #12]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	08009385 	.word	0x08009385

08009384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800938e:	4b13      	ldr	r3, [pc, #76]	@ (80093dc <prvTaskExitError+0x58>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009396:	d00b      	beq.n	80093b0 <prvTaskExitError+0x2c>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	60fb      	str	r3, [r7, #12]
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	e7fd      	b.n	80093ac <prvTaskExitError+0x28>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60bb      	str	r3, [r7, #8]
}
 80093c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093c4:	bf00      	nop
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0fc      	beq.n	80093c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000030 	.word	0x20000030

080093e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093e0:	4b07      	ldr	r3, [pc, #28]	@ (8009400 <pxCurrentTCBConst2>)
 80093e2:	6819      	ldr	r1, [r3, #0]
 80093e4:	6808      	ldr	r0, [r1, #0]
 80093e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	f380 8809 	msr	PSP, r0
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8811 	msr	BASEPRI, r0
 80093fa:	4770      	bx	lr
 80093fc:	f3af 8000 	nop.w

08009400 <pxCurrentTCBConst2>:
 8009400:	20000dac 	.word	0x20000dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop

08009408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009408:	4808      	ldr	r0, [pc, #32]	@ (800942c <prvPortStartFirstTask+0x24>)
 800940a:	6800      	ldr	r0, [r0, #0]
 800940c:	6800      	ldr	r0, [r0, #0]
 800940e:	f380 8808 	msr	MSP, r0
 8009412:	f04f 0000 	mov.w	r0, #0
 8009416:	f380 8814 	msr	CONTROL, r0
 800941a:	b662      	cpsie	i
 800941c:	b661      	cpsie	f
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	df00      	svc	0
 8009428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800942a:	bf00      	nop
 800942c:	e000ed08 	.word	0xe000ed08

08009430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009436:	4b47      	ldr	r3, [pc, #284]	@ (8009554 <xPortStartScheduler+0x124>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a47      	ldr	r2, [pc, #284]	@ (8009558 <xPortStartScheduler+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10b      	bne.n	8009458 <xPortStartScheduler+0x28>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	613b      	str	r3, [r7, #16]
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009458:	4b3e      	ldr	r3, [pc, #248]	@ (8009554 <xPortStartScheduler+0x124>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a3f      	ldr	r2, [pc, #252]	@ (800955c <xPortStartScheduler+0x12c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d10b      	bne.n	800947a <xPortStartScheduler+0x4a>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	60fb      	str	r3, [r7, #12]
}
 8009474:	bf00      	nop
 8009476:	bf00      	nop
 8009478:	e7fd      	b.n	8009476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800947a:	4b39      	ldr	r3, [pc, #228]	@ (8009560 <xPortStartScheduler+0x130>)
 800947c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	22ff      	movs	r2, #255	@ 0xff
 800948a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800949c:	b2da      	uxtb	r2, r3
 800949e:	4b31      	ldr	r3, [pc, #196]	@ (8009564 <xPortStartScheduler+0x134>)
 80094a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094a2:	4b31      	ldr	r3, [pc, #196]	@ (8009568 <xPortStartScheduler+0x138>)
 80094a4:	2207      	movs	r2, #7
 80094a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094a8:	e009      	b.n	80094be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80094aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009568 <xPortStartScheduler+0x138>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009568 <xPortStartScheduler+0x138>)
 80094b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094c6:	2b80      	cmp	r3, #128	@ 0x80
 80094c8:	d0ef      	beq.n	80094aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094ca:	4b27      	ldr	r3, [pc, #156]	@ (8009568 <xPortStartScheduler+0x138>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f1c3 0307 	rsb	r3, r3, #7
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d00b      	beq.n	80094ee <xPortStartScheduler+0xbe>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	60bb      	str	r3, [r7, #8]
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009568 <xPortStartScheduler+0x138>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009568 <xPortStartScheduler+0x138>)
 80094f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009568 <xPortStartScheduler+0x138>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009500:	4a19      	ldr	r2, [pc, #100]	@ (8009568 <xPortStartScheduler+0x138>)
 8009502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	b2da      	uxtb	r2, r3
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800950c:	4b17      	ldr	r3, [pc, #92]	@ (800956c <xPortStartScheduler+0x13c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a16      	ldr	r2, [pc, #88]	@ (800956c <xPortStartScheduler+0x13c>)
 8009512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009518:	4b14      	ldr	r3, [pc, #80]	@ (800956c <xPortStartScheduler+0x13c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a13      	ldr	r2, [pc, #76]	@ (800956c <xPortStartScheduler+0x13c>)
 800951e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009524:	f000 f8da 	bl	80096dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009528:	4b11      	ldr	r3, [pc, #68]	@ (8009570 <xPortStartScheduler+0x140>)
 800952a:	2200      	movs	r2, #0
 800952c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800952e:	f000 f8f9 	bl	8009724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009532:	4b10      	ldr	r3, [pc, #64]	@ (8009574 <xPortStartScheduler+0x144>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a0f      	ldr	r2, [pc, #60]	@ (8009574 <xPortStartScheduler+0x144>)
 8009538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800953c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800953e:	f7ff ff63 	bl	8009408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009542:	f7fe ff2f 	bl	80083a4 <vTaskSwitchContext>
	prvTaskExitError();
 8009546:	f7ff ff1d 	bl	8009384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	e000ed00 	.word	0xe000ed00
 8009558:	410fc271 	.word	0x410fc271
 800955c:	410fc270 	.word	0x410fc270
 8009560:	e000e400 	.word	0xe000e400
 8009564:	200013d8 	.word	0x200013d8
 8009568:	200013dc 	.word	0x200013dc
 800956c:	e000ed20 	.word	0xe000ed20
 8009570:	20000030 	.word	0x20000030
 8009574:	e000ef34 	.word	0xe000ef34

08009578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	607b      	str	r3, [r7, #4]
}
 8009590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009592:	4b10      	ldr	r3, [pc, #64]	@ (80095d4 <vPortEnterCritical+0x5c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3301      	adds	r3, #1
 8009598:	4a0e      	ldr	r2, [pc, #56]	@ (80095d4 <vPortEnterCritical+0x5c>)
 800959a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800959c:	4b0d      	ldr	r3, [pc, #52]	@ (80095d4 <vPortEnterCritical+0x5c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d110      	bne.n	80095c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095a4:	4b0c      	ldr	r3, [pc, #48]	@ (80095d8 <vPortEnterCritical+0x60>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00b      	beq.n	80095c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	603b      	str	r3, [r7, #0]
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	e7fd      	b.n	80095c2 <vPortEnterCritical+0x4a>
	}
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20000030 	.word	0x20000030
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095e2:	4b12      	ldr	r3, [pc, #72]	@ (800962c <vPortExitCritical+0x50>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10b      	bne.n	8009602 <vPortExitCritical+0x26>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	607b      	str	r3, [r7, #4]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009602:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <vPortExitCritical+0x50>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3b01      	subs	r3, #1
 8009608:	4a08      	ldr	r2, [pc, #32]	@ (800962c <vPortExitCritical+0x50>)
 800960a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800960c:	4b07      	ldr	r3, [pc, #28]	@ (800962c <vPortExitCritical+0x50>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d105      	bne.n	8009620 <vPortExitCritical+0x44>
 8009614:	2300      	movs	r3, #0
 8009616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f383 8811 	msr	BASEPRI, r3
}
 800961e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	20000030 	.word	0x20000030

08009630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009630:	f3ef 8009 	mrs	r0, PSP
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	4b15      	ldr	r3, [pc, #84]	@ (8009690 <pxCurrentTCBConst>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	f01e 0f10 	tst.w	lr, #16
 8009640:	bf08      	it	eq
 8009642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964a:	6010      	str	r0, [r2, #0]
 800964c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009654:	f380 8811 	msr	BASEPRI, r0
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f7fe fea0 	bl	80083a4 <vTaskSwitchContext>
 8009664:	f04f 0000 	mov.w	r0, #0
 8009668:	f380 8811 	msr	BASEPRI, r0
 800966c:	bc09      	pop	{r0, r3}
 800966e:	6819      	ldr	r1, [r3, #0]
 8009670:	6808      	ldr	r0, [r1, #0]
 8009672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009676:	f01e 0f10 	tst.w	lr, #16
 800967a:	bf08      	it	eq
 800967c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009680:	f380 8809 	msr	PSP, r0
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst>:
 8009690:	20000dac 	.word	0x20000dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096b2:	f7fe fdbd 	bl	8008230 <xTaskIncrementTick>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096bc:	4b06      	ldr	r3, [pc, #24]	@ (80096d8 <xPortSysTickHandler+0x40>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f383 8811 	msr	BASEPRI, r3
}
 80096ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009710 <vPortSetupTimerInterrupt+0x34>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <vPortSetupTimerInterrupt+0x38>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009718 <vPortSetupTimerInterrupt+0x3c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a0a      	ldr	r2, [pc, #40]	@ (800971c <vPortSetupTimerInterrupt+0x40>)
 80096f2:	fba2 2303 	umull	r2, r3, r2, r3
 80096f6:	099b      	lsrs	r3, r3, #6
 80096f8:	4a09      	ldr	r2, [pc, #36]	@ (8009720 <vPortSetupTimerInterrupt+0x44>)
 80096fa:	3b01      	subs	r3, #1
 80096fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096fe:	4b04      	ldr	r3, [pc, #16]	@ (8009710 <vPortSetupTimerInterrupt+0x34>)
 8009700:	2207      	movs	r2, #7
 8009702:	601a      	str	r2, [r3, #0]
}
 8009704:	bf00      	nop
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	e000e010 	.word	0xe000e010
 8009714:	e000e018 	.word	0xe000e018
 8009718:	20000024 	.word	0x20000024
 800971c:	10624dd3 	.word	0x10624dd3
 8009720:	e000e014 	.word	0xe000e014

08009724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009734 <vPortEnableVFP+0x10>
 8009728:	6801      	ldr	r1, [r0, #0]
 800972a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800972e:	6001      	str	r1, [r0, #0]
 8009730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009732:	bf00      	nop
 8009734:	e000ed88 	.word	0xe000ed88

08009738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800973e:	f3ef 8305 	mrs	r3, IPSR
 8009742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b0f      	cmp	r3, #15
 8009748:	d915      	bls.n	8009776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800974a:	4a18      	ldr	r2, [pc, #96]	@ (80097ac <vPortValidateInterruptPriority+0x74>)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009754:	4b16      	ldr	r3, [pc, #88]	@ (80097b0 <vPortValidateInterruptPriority+0x78>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	7afa      	ldrb	r2, [r7, #11]
 800975a:	429a      	cmp	r2, r3
 800975c:	d20b      	bcs.n	8009776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
 8009772:	bf00      	nop
 8009774:	e7fd      	b.n	8009772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009776:	4b0f      	ldr	r3, [pc, #60]	@ (80097b4 <vPortValidateInterruptPriority+0x7c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800977e:	4b0e      	ldr	r3, [pc, #56]	@ (80097b8 <vPortValidateInterruptPriority+0x80>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d90b      	bls.n	800979e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	603b      	str	r3, [r7, #0]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <vPortValidateInterruptPriority+0x62>
	}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	e000e3f0 	.word	0xe000e3f0
 80097b0:	200013d8 	.word	0x200013d8
 80097b4:	e000ed0c 	.word	0xe000ed0c
 80097b8:	200013dc 	.word	0x200013dc

080097bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	@ 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097c8:	f7fe fc76 	bl	80080b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009940 <pvPortMalloc+0x184>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097d4:	f000 f924 	bl	8009a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009944 <pvPortMalloc+0x188>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4013      	ands	r3, r2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f040 8095 	bne.w	8009910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01e      	beq.n	800982a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80097ec:	2208      	movs	r2, #8
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4413      	add	r3, r2
 80097f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f003 0307 	and.w	r3, r3, #7
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d015      	beq.n	800982a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f023 0307 	bic.w	r3, r3, #7
 8009804:	3308      	adds	r3, #8
 8009806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00b      	beq.n	800982a <pvPortMalloc+0x6e>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	617b      	str	r3, [r7, #20]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d06f      	beq.n	8009910 <pvPortMalloc+0x154>
 8009830:	4b45      	ldr	r3, [pc, #276]	@ (8009948 <pvPortMalloc+0x18c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	429a      	cmp	r2, r3
 8009838:	d86a      	bhi.n	8009910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800983a:	4b44      	ldr	r3, [pc, #272]	@ (800994c <pvPortMalloc+0x190>)
 800983c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800983e:	4b43      	ldr	r3, [pc, #268]	@ (800994c <pvPortMalloc+0x190>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009844:	e004      	b.n	8009850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	429a      	cmp	r2, r3
 8009858:	d903      	bls.n	8009862 <pvPortMalloc+0xa6>
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f1      	bne.n	8009846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009862:	4b37      	ldr	r3, [pc, #220]	@ (8009940 <pvPortMalloc+0x184>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009868:	429a      	cmp	r2, r3
 800986a:	d051      	beq.n	8009910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2208      	movs	r2, #8
 8009872:	4413      	add	r3, r2
 8009874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	1ad2      	subs	r2, r2, r3
 8009886:	2308      	movs	r3, #8
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	429a      	cmp	r2, r3
 800988c:	d920      	bls.n	80098d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800988e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4413      	add	r3, r2
 8009894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f003 0307 	and.w	r3, r3, #7
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <pvPortMalloc+0xfc>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	613b      	str	r3, [r7, #16]
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	1ad2      	subs	r2, r2, r3
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098ca:	69b8      	ldr	r0, [r7, #24]
 80098cc:	f000 f90a 	bl	8009ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009948 <pvPortMalloc+0x18c>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	4a1b      	ldr	r2, [pc, #108]	@ (8009948 <pvPortMalloc+0x18c>)
 80098dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098de:	4b1a      	ldr	r3, [pc, #104]	@ (8009948 <pvPortMalloc+0x18c>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009950 <pvPortMalloc+0x194>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d203      	bcs.n	80098f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098ea:	4b17      	ldr	r3, [pc, #92]	@ (8009948 <pvPortMalloc+0x18c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a18      	ldr	r2, [pc, #96]	@ (8009950 <pvPortMalloc+0x194>)
 80098f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	4b13      	ldr	r3, [pc, #76]	@ (8009944 <pvPortMalloc+0x188>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009906:	4b13      	ldr	r3, [pc, #76]	@ (8009954 <pvPortMalloc+0x198>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	4a11      	ldr	r2, [pc, #68]	@ (8009954 <pvPortMalloc+0x198>)
 800990e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009910:	f7fe fbe0 	bl	80080d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <pvPortMalloc+0x17a>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	60fb      	str	r3, [r7, #12]
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <pvPortMalloc+0x176>
	return pvReturn;
 8009936:	69fb      	ldr	r3, [r7, #28]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3728      	adds	r7, #40	@ 0x28
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20004fe8 	.word	0x20004fe8
 8009944:	20004ffc 	.word	0x20004ffc
 8009948:	20004fec 	.word	0x20004fec
 800994c:	20004fe0 	.word	0x20004fe0
 8009950:	20004ff0 	.word	0x20004ff0
 8009954:	20004ff4 	.word	0x20004ff4

08009958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d04f      	beq.n	8009a0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800996a:	2308      	movs	r3, #8
 800996c:	425b      	negs	r3, r3
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	4b25      	ldr	r3, [pc, #148]	@ (8009a14 <vPortFree+0xbc>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4013      	ands	r3, r2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10b      	bne.n	800999e <vPortFree+0x46>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60fb      	str	r3, [r7, #12]
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	e7fd      	b.n	800999a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <vPortFree+0x66>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	60bb      	str	r3, [r7, #8]
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	e7fd      	b.n	80099ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	4b14      	ldr	r3, [pc, #80]	@ (8009a14 <vPortFree+0xbc>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4013      	ands	r3, r2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01e      	beq.n	8009a0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d11a      	bne.n	8009a0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009a14 <vPortFree+0xbc>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	43db      	mvns	r3, r3
 80099de:	401a      	ands	r2, r3
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099e4:	f7fe fb68 	bl	80080b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <vPortFree+0xc0>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4413      	add	r3, r2
 80099f2:	4a09      	ldr	r2, [pc, #36]	@ (8009a18 <vPortFree+0xc0>)
 80099f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099f6:	6938      	ldr	r0, [r7, #16]
 80099f8:	f000 f874 	bl	8009ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099fc:	4b07      	ldr	r3, [pc, #28]	@ (8009a1c <vPortFree+0xc4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	4a06      	ldr	r2, [pc, #24]	@ (8009a1c <vPortFree+0xc4>)
 8009a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009a06:	f7fe fb65 	bl	80080d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a0a:	bf00      	nop
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20004ffc 	.word	0x20004ffc
 8009a18:	20004fec 	.word	0x20004fec
 8009a1c:	20004ff8 	.word	0x20004ff8

08009a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a2c:	4b27      	ldr	r3, [pc, #156]	@ (8009acc <prvHeapInit+0xac>)
 8009a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00c      	beq.n	8009a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3307      	adds	r3, #7
 8009a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0307 	bic.w	r3, r3, #7
 8009a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009acc <prvHeapInit+0xac>)
 8009a50:	4413      	add	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad0 <prvHeapInit+0xb0>)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ad0 <prvHeapInit+0xb0>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	4413      	add	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	1a9b      	subs	r3, r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0307 	bic.w	r3, r3, #7
 8009a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a15      	ldr	r2, [pc, #84]	@ (8009ad4 <prvHeapInit+0xb4>)
 8009a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a82:	4b14      	ldr	r3, [pc, #80]	@ (8009ad4 <prvHeapInit+0xb4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <prvHeapInit+0xb4>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	1ad2      	subs	r2, r2, r3
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad4 <prvHeapInit+0xb4>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad8 <prvHeapInit+0xb8>)
 8009aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4a09      	ldr	r2, [pc, #36]	@ (8009adc <prvHeapInit+0xbc>)
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ab8:	4b09      	ldr	r3, [pc, #36]	@ (8009ae0 <prvHeapInit+0xc0>)
 8009aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009abe:	601a      	str	r2, [r3, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	200013e0 	.word	0x200013e0
 8009ad0:	20004fe0 	.word	0x20004fe0
 8009ad4:	20004fe8 	.word	0x20004fe8
 8009ad8:	20004ff0 	.word	0x20004ff0
 8009adc:	20004fec 	.word	0x20004fec
 8009ae0:	20004ffc 	.word	0x20004ffc

08009ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009aec:	4b28      	ldr	r3, [pc, #160]	@ (8009b90 <prvInsertBlockIntoFreeList+0xac>)
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e002      	b.n	8009af8 <prvInsertBlockIntoFreeList+0x14>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d8f7      	bhi.n	8009af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d108      	bne.n	8009b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	441a      	add	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	441a      	add	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d118      	bne.n	8009b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	4b15      	ldr	r3, [pc, #84]	@ (8009b94 <prvInsertBlockIntoFreeList+0xb0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d00d      	beq.n	8009b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	441a      	add	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	e008      	b.n	8009b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b62:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <prvInsertBlockIntoFreeList+0xb0>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e003      	b.n	8009b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d002      	beq.n	8009b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b82:	bf00      	nop
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20004fe0 	.word	0x20004fe0
 8009b94:	20004fe8 	.word	0x20004fe8

08009b98 <siprintf>:
 8009b98:	b40e      	push	{r1, r2, r3}
 8009b9a:	b500      	push	{lr}
 8009b9c:	b09c      	sub	sp, #112	@ 0x70
 8009b9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ba0:	9002      	str	r0, [sp, #8]
 8009ba2:	9006      	str	r0, [sp, #24]
 8009ba4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ba8:	4809      	ldr	r0, [pc, #36]	@ (8009bd0 <siprintf+0x38>)
 8009baa:	9107      	str	r1, [sp, #28]
 8009bac:	9104      	str	r1, [sp, #16]
 8009bae:	4909      	ldr	r1, [pc, #36]	@ (8009bd4 <siprintf+0x3c>)
 8009bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb4:	9105      	str	r1, [sp, #20]
 8009bb6:	6800      	ldr	r0, [r0, #0]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	a902      	add	r1, sp, #8
 8009bbc:	f000 f9f2 	bl	8009fa4 <_svfiprintf_r>
 8009bc0:	9b02      	ldr	r3, [sp, #8]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	701a      	strb	r2, [r3, #0]
 8009bc6:	b01c      	add	sp, #112	@ 0x70
 8009bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bcc:	b003      	add	sp, #12
 8009bce:	4770      	bx	lr
 8009bd0:	20000040 	.word	0x20000040
 8009bd4:	ffff0208 	.word	0xffff0208

08009bd8 <std>:
 8009bd8:	2300      	movs	r3, #0
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	4604      	mov	r4, r0
 8009bde:	e9c0 3300 	strd	r3, r3, [r0]
 8009be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009be6:	6083      	str	r3, [r0, #8]
 8009be8:	8181      	strh	r1, [r0, #12]
 8009bea:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bec:	81c2      	strh	r2, [r0, #14]
 8009bee:	6183      	str	r3, [r0, #24]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	2208      	movs	r2, #8
 8009bf4:	305c      	adds	r0, #92	@ 0x5c
 8009bf6:	f000 f937 	bl	8009e68 <memset>
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009c30 <std+0x58>)
 8009bfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <std+0x5c>)
 8009c00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c02:	4b0d      	ldr	r3, [pc, #52]	@ (8009c38 <std+0x60>)
 8009c04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c06:	4b0d      	ldr	r3, [pc, #52]	@ (8009c3c <std+0x64>)
 8009c08:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c40 <std+0x68>)
 8009c0c:	6224      	str	r4, [r4, #32]
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	d006      	beq.n	8009c20 <std+0x48>
 8009c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c16:	4294      	cmp	r4, r2
 8009c18:	d002      	beq.n	8009c20 <std+0x48>
 8009c1a:	33d0      	adds	r3, #208	@ 0xd0
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	d105      	bne.n	8009c2c <std+0x54>
 8009c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c28:	f000 b950 	b.w	8009ecc <__retarget_lock_init_recursive>
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800a9f1 	.word	0x0800a9f1
 8009c34:	0800aa13 	.word	0x0800aa13
 8009c38:	0800aa4b 	.word	0x0800aa4b
 8009c3c:	0800aa6f 	.word	0x0800aa6f
 8009c40:	20005000 	.word	0x20005000

08009c44 <stdio_exit_handler>:
 8009c44:	4a02      	ldr	r2, [pc, #8]	@ (8009c50 <stdio_exit_handler+0xc>)
 8009c46:	4903      	ldr	r1, [pc, #12]	@ (8009c54 <stdio_exit_handler+0x10>)
 8009c48:	4803      	ldr	r0, [pc, #12]	@ (8009c58 <stdio_exit_handler+0x14>)
 8009c4a:	f000 b869 	b.w	8009d20 <_fwalk_sglue>
 8009c4e:	bf00      	nop
 8009c50:	20000034 	.word	0x20000034
 8009c54:	0800a989 	.word	0x0800a989
 8009c58:	20000044 	.word	0x20000044

08009c5c <cleanup_stdio>:
 8009c5c:	6841      	ldr	r1, [r0, #4]
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c90 <cleanup_stdio+0x34>)
 8009c60:	4299      	cmp	r1, r3
 8009c62:	b510      	push	{r4, lr}
 8009c64:	4604      	mov	r4, r0
 8009c66:	d001      	beq.n	8009c6c <cleanup_stdio+0x10>
 8009c68:	f000 fe8e 	bl	800a988 <_fflush_r>
 8009c6c:	68a1      	ldr	r1, [r4, #8]
 8009c6e:	4b09      	ldr	r3, [pc, #36]	@ (8009c94 <cleanup_stdio+0x38>)
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <cleanup_stdio+0x1e>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 fe87 	bl	800a988 <_fflush_r>
 8009c7a:	68e1      	ldr	r1, [r4, #12]
 8009c7c:	4b06      	ldr	r3, [pc, #24]	@ (8009c98 <cleanup_stdio+0x3c>)
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	d004      	beq.n	8009c8c <cleanup_stdio+0x30>
 8009c82:	4620      	mov	r0, r4
 8009c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c88:	f000 be7e 	b.w	800a988 <_fflush_r>
 8009c8c:	bd10      	pop	{r4, pc}
 8009c8e:	bf00      	nop
 8009c90:	20005000 	.word	0x20005000
 8009c94:	20005068 	.word	0x20005068
 8009c98:	200050d0 	.word	0x200050d0

08009c9c <global_stdio_init.part.0>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ccc <global_stdio_init.part.0+0x30>)
 8009ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8009cd0 <global_stdio_init.part.0+0x34>)
 8009ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8009cd4 <global_stdio_init.part.0+0x38>)
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2104      	movs	r1, #4
 8009cac:	f7ff ff94 	bl	8009bd8 <std>
 8009cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	2109      	movs	r1, #9
 8009cb8:	f7ff ff8e 	bl	8009bd8 <std>
 8009cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc6:	2112      	movs	r1, #18
 8009cc8:	f7ff bf86 	b.w	8009bd8 <std>
 8009ccc:	20005138 	.word	0x20005138
 8009cd0:	20005000 	.word	0x20005000
 8009cd4:	08009c45 	.word	0x08009c45

08009cd8 <__sfp_lock_acquire>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	@ (8009ce0 <__sfp_lock_acquire+0x8>)
 8009cda:	f000 b8f8 	b.w	8009ece <__retarget_lock_acquire_recursive>
 8009cde:	bf00      	nop
 8009ce0:	2000513d 	.word	0x2000513d

08009ce4 <__sfp_lock_release>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	@ (8009cec <__sfp_lock_release+0x8>)
 8009ce6:	f000 b8f3 	b.w	8009ed0 <__retarget_lock_release_recursive>
 8009cea:	bf00      	nop
 8009cec:	2000513d 	.word	0x2000513d

08009cf0 <__sinit>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	f7ff fff0 	bl	8009cd8 <__sfp_lock_acquire>
 8009cf8:	6a23      	ldr	r3, [r4, #32]
 8009cfa:	b11b      	cbz	r3, 8009d04 <__sinit+0x14>
 8009cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d00:	f7ff bff0 	b.w	8009ce4 <__sfp_lock_release>
 8009d04:	4b04      	ldr	r3, [pc, #16]	@ (8009d18 <__sinit+0x28>)
 8009d06:	6223      	str	r3, [r4, #32]
 8009d08:	4b04      	ldr	r3, [pc, #16]	@ (8009d1c <__sinit+0x2c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1f5      	bne.n	8009cfc <__sinit+0xc>
 8009d10:	f7ff ffc4 	bl	8009c9c <global_stdio_init.part.0>
 8009d14:	e7f2      	b.n	8009cfc <__sinit+0xc>
 8009d16:	bf00      	nop
 8009d18:	08009c5d 	.word	0x08009c5d
 8009d1c:	20005138 	.word	0x20005138

08009d20 <_fwalk_sglue>:
 8009d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d24:	4607      	mov	r7, r0
 8009d26:	4688      	mov	r8, r1
 8009d28:	4614      	mov	r4, r2
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d30:	f1b9 0901 	subs.w	r9, r9, #1
 8009d34:	d505      	bpl.n	8009d42 <_fwalk_sglue+0x22>
 8009d36:	6824      	ldr	r4, [r4, #0]
 8009d38:	2c00      	cmp	r4, #0
 8009d3a:	d1f7      	bne.n	8009d2c <_fwalk_sglue+0xc>
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d42:	89ab      	ldrh	r3, [r5, #12]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d907      	bls.n	8009d58 <_fwalk_sglue+0x38>
 8009d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	d003      	beq.n	8009d58 <_fwalk_sglue+0x38>
 8009d50:	4629      	mov	r1, r5
 8009d52:	4638      	mov	r0, r7
 8009d54:	47c0      	blx	r8
 8009d56:	4306      	orrs	r6, r0
 8009d58:	3568      	adds	r5, #104	@ 0x68
 8009d5a:	e7e9      	b.n	8009d30 <_fwalk_sglue+0x10>

08009d5c <iprintf>:
 8009d5c:	b40f      	push	{r0, r1, r2, r3}
 8009d5e:	b507      	push	{r0, r1, r2, lr}
 8009d60:	4906      	ldr	r1, [pc, #24]	@ (8009d7c <iprintf+0x20>)
 8009d62:	ab04      	add	r3, sp, #16
 8009d64:	6808      	ldr	r0, [r1, #0]
 8009d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6a:	6881      	ldr	r1, [r0, #8]
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	f000 fa3f 	bl	800a1f0 <_vfiprintf_r>
 8009d72:	b003      	add	sp, #12
 8009d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d78:	b004      	add	sp, #16
 8009d7a:	4770      	bx	lr
 8009d7c:	20000040 	.word	0x20000040

08009d80 <_puts_r>:
 8009d80:	6a03      	ldr	r3, [r0, #32]
 8009d82:	b570      	push	{r4, r5, r6, lr}
 8009d84:	6884      	ldr	r4, [r0, #8]
 8009d86:	4605      	mov	r5, r0
 8009d88:	460e      	mov	r6, r1
 8009d8a:	b90b      	cbnz	r3, 8009d90 <_puts_r+0x10>
 8009d8c:	f7ff ffb0 	bl	8009cf0 <__sinit>
 8009d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d92:	07db      	lsls	r3, r3, #31
 8009d94:	d405      	bmi.n	8009da2 <_puts_r+0x22>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	0598      	lsls	r0, r3, #22
 8009d9a:	d402      	bmi.n	8009da2 <_puts_r+0x22>
 8009d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d9e:	f000 f896 	bl	8009ece <__retarget_lock_acquire_recursive>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	0719      	lsls	r1, r3, #28
 8009da6:	d502      	bpl.n	8009dae <_puts_r+0x2e>
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d135      	bne.n	8009e1a <_puts_r+0x9a>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 fecd 	bl	800ab50 <__swsetup_r>
 8009db6:	b380      	cbz	r0, 8009e1a <_puts_r+0x9a>
 8009db8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dbe:	07da      	lsls	r2, r3, #31
 8009dc0:	d405      	bmi.n	8009dce <_puts_r+0x4e>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	059b      	lsls	r3, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_puts_r+0x4e>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dca:	f000 f881 	bl	8009ed0 <__retarget_lock_release_recursive>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	da04      	bge.n	8009de0 <_puts_r+0x60>
 8009dd6:	69a2      	ldr	r2, [r4, #24]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	dc17      	bgt.n	8009e0c <_puts_r+0x8c>
 8009ddc:	290a      	cmp	r1, #10
 8009dde:	d015      	beq.n	8009e0c <_puts_r+0x8c>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	6022      	str	r2, [r4, #0]
 8009de6:	7019      	strb	r1, [r3, #0]
 8009de8:	68a3      	ldr	r3, [r4, #8]
 8009dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dee:	3b01      	subs	r3, #1
 8009df0:	60a3      	str	r3, [r4, #8]
 8009df2:	2900      	cmp	r1, #0
 8009df4:	d1ed      	bne.n	8009dd2 <_puts_r+0x52>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	da11      	bge.n	8009e1e <_puts_r+0x9e>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	210a      	movs	r1, #10
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f000 fe67 	bl	800aad2 <__swbuf_r>
 8009e04:	3001      	adds	r0, #1
 8009e06:	d0d7      	beq.n	8009db8 <_puts_r+0x38>
 8009e08:	250a      	movs	r5, #10
 8009e0a:	e7d7      	b.n	8009dbc <_puts_r+0x3c>
 8009e0c:	4622      	mov	r2, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 fe5f 	bl	800aad2 <__swbuf_r>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d1e7      	bne.n	8009de8 <_puts_r+0x68>
 8009e18:	e7ce      	b.n	8009db8 <_puts_r+0x38>
 8009e1a:	3e01      	subs	r6, #1
 8009e1c:	e7e4      	b.n	8009de8 <_puts_r+0x68>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	6022      	str	r2, [r4, #0]
 8009e24:	220a      	movs	r2, #10
 8009e26:	701a      	strb	r2, [r3, #0]
 8009e28:	e7ee      	b.n	8009e08 <_puts_r+0x88>
	...

08009e2c <puts>:
 8009e2c:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <puts+0xc>)
 8009e2e:	4601      	mov	r1, r0
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	f7ff bfa5 	b.w	8009d80 <_puts_r>
 8009e36:	bf00      	nop
 8009e38:	20000040 	.word	0x20000040

08009e3c <strstr>:
 8009e3c:	780a      	ldrb	r2, [r1, #0]
 8009e3e:	b570      	push	{r4, r5, r6, lr}
 8009e40:	b96a      	cbnz	r2, 8009e5e <strstr+0x22>
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d109      	bne.n	8009e5c <strstr+0x20>
 8009e48:	460c      	mov	r4, r1
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0f6      	beq.n	8009e42 <strstr+0x6>
 8009e54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009e58:	429e      	cmp	r6, r3
 8009e5a:	d0f7      	beq.n	8009e4c <strstr+0x10>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	7803      	ldrb	r3, [r0, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1ef      	bne.n	8009e44 <strstr+0x8>
 8009e64:	4618      	mov	r0, r3
 8009e66:	e7ec      	b.n	8009e42 <strstr+0x6>

08009e68 <memset>:
 8009e68:	4402      	add	r2, r0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d100      	bne.n	8009e72 <memset+0xa>
 8009e70:	4770      	bx	lr
 8009e72:	f803 1b01 	strb.w	r1, [r3], #1
 8009e76:	e7f9      	b.n	8009e6c <memset+0x4>

08009e78 <__errno>:
 8009e78:	4b01      	ldr	r3, [pc, #4]	@ (8009e80 <__errno+0x8>)
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	20000040 	.word	0x20000040

08009e84 <__libc_init_array>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	4d0d      	ldr	r5, [pc, #52]	@ (8009ebc <__libc_init_array+0x38>)
 8009e88:	4c0d      	ldr	r4, [pc, #52]	@ (8009ec0 <__libc_init_array+0x3c>)
 8009e8a:	1b64      	subs	r4, r4, r5
 8009e8c:	10a4      	asrs	r4, r4, #2
 8009e8e:	2600      	movs	r6, #0
 8009e90:	42a6      	cmp	r6, r4
 8009e92:	d109      	bne.n	8009ea8 <__libc_init_array+0x24>
 8009e94:	4d0b      	ldr	r5, [pc, #44]	@ (8009ec4 <__libc_init_array+0x40>)
 8009e96:	4c0c      	ldr	r4, [pc, #48]	@ (8009ec8 <__libc_init_array+0x44>)
 8009e98:	f000 fff6 	bl	800ae88 <_init>
 8009e9c:	1b64      	subs	r4, r4, r5
 8009e9e:	10a4      	asrs	r4, r4, #2
 8009ea0:	2600      	movs	r6, #0
 8009ea2:	42a6      	cmp	r6, r4
 8009ea4:	d105      	bne.n	8009eb2 <__libc_init_array+0x2e>
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eac:	4798      	blx	r3
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7ee      	b.n	8009e90 <__libc_init_array+0xc>
 8009eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb6:	4798      	blx	r3
 8009eb8:	3601      	adds	r6, #1
 8009eba:	e7f2      	b.n	8009ea2 <__libc_init_array+0x1e>
 8009ebc:	0800c1c0 	.word	0x0800c1c0
 8009ec0:	0800c1c0 	.word	0x0800c1c0
 8009ec4:	0800c1c0 	.word	0x0800c1c0
 8009ec8:	0800c1c4 	.word	0x0800c1c4

08009ecc <__retarget_lock_init_recursive>:
 8009ecc:	4770      	bx	lr

08009ece <__retarget_lock_acquire_recursive>:
 8009ece:	4770      	bx	lr

08009ed0 <__retarget_lock_release_recursive>:
 8009ed0:	4770      	bx	lr

08009ed2 <memcpy>:
 8009ed2:	440a      	add	r2, r1
 8009ed4:	4291      	cmp	r1, r2
 8009ed6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009eda:	d100      	bne.n	8009ede <memcpy+0xc>
 8009edc:	4770      	bx	lr
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee8:	4291      	cmp	r1, r2
 8009eea:	d1f9      	bne.n	8009ee0 <memcpy+0xe>
 8009eec:	bd10      	pop	{r4, pc}

08009eee <__ssputs_r>:
 8009eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef2:	688e      	ldr	r6, [r1, #8]
 8009ef4:	461f      	mov	r7, r3
 8009ef6:	42be      	cmp	r6, r7
 8009ef8:	680b      	ldr	r3, [r1, #0]
 8009efa:	4682      	mov	sl, r0
 8009efc:	460c      	mov	r4, r1
 8009efe:	4690      	mov	r8, r2
 8009f00:	d82d      	bhi.n	8009f5e <__ssputs_r+0x70>
 8009f02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f06:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f0a:	d026      	beq.n	8009f5a <__ssputs_r+0x6c>
 8009f0c:	6965      	ldr	r5, [r4, #20]
 8009f0e:	6909      	ldr	r1, [r1, #16]
 8009f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f14:	eba3 0901 	sub.w	r9, r3, r1
 8009f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f1c:	1c7b      	adds	r3, r7, #1
 8009f1e:	444b      	add	r3, r9
 8009f20:	106d      	asrs	r5, r5, #1
 8009f22:	429d      	cmp	r5, r3
 8009f24:	bf38      	it	cc
 8009f26:	461d      	movcc	r5, r3
 8009f28:	0553      	lsls	r3, r2, #21
 8009f2a:	d527      	bpl.n	8009f7c <__ssputs_r+0x8e>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f000 fa99 	bl	800a464 <_malloc_r>
 8009f32:	4606      	mov	r6, r0
 8009f34:	b360      	cbz	r0, 8009f90 <__ssputs_r+0xa2>
 8009f36:	6921      	ldr	r1, [r4, #16]
 8009f38:	464a      	mov	r2, r9
 8009f3a:	f7ff ffca 	bl	8009ed2 <memcpy>
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	6126      	str	r6, [r4, #16]
 8009f4c:	6165      	str	r5, [r4, #20]
 8009f4e:	444e      	add	r6, r9
 8009f50:	eba5 0509 	sub.w	r5, r5, r9
 8009f54:	6026      	str	r6, [r4, #0]
 8009f56:	60a5      	str	r5, [r4, #8]
 8009f58:	463e      	mov	r6, r7
 8009f5a:	42be      	cmp	r6, r7
 8009f5c:	d900      	bls.n	8009f60 <__ssputs_r+0x72>
 8009f5e:	463e      	mov	r6, r7
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	4632      	mov	r2, r6
 8009f64:	4641      	mov	r1, r8
 8009f66:	f000 feab 	bl	800acc0 <memmove>
 8009f6a:	68a3      	ldr	r3, [r4, #8]
 8009f6c:	1b9b      	subs	r3, r3, r6
 8009f6e:	60a3      	str	r3, [r4, #8]
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	4433      	add	r3, r6
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	2000      	movs	r0, #0
 8009f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	f000 fd7a 	bl	800aa76 <_realloc_r>
 8009f82:	4606      	mov	r6, r0
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d1e0      	bne.n	8009f4a <__ssputs_r+0x5c>
 8009f88:	6921      	ldr	r1, [r4, #16]
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	f000 ff2a 	bl	800ade4 <_free_r>
 8009f90:	230c      	movs	r3, #12
 8009f92:	f8ca 3000 	str.w	r3, [sl]
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fa2:	e7e9      	b.n	8009f78 <__ssputs_r+0x8a>

08009fa4 <_svfiprintf_r>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4698      	mov	r8, r3
 8009faa:	898b      	ldrh	r3, [r1, #12]
 8009fac:	061b      	lsls	r3, r3, #24
 8009fae:	b09d      	sub	sp, #116	@ 0x74
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	d510      	bpl.n	8009fda <_svfiprintf_r+0x36>
 8009fb8:	690b      	ldr	r3, [r1, #16]
 8009fba:	b973      	cbnz	r3, 8009fda <_svfiprintf_r+0x36>
 8009fbc:	2140      	movs	r1, #64	@ 0x40
 8009fbe:	f000 fa51 	bl	800a464 <_malloc_r>
 8009fc2:	6028      	str	r0, [r5, #0]
 8009fc4:	6128      	str	r0, [r5, #16]
 8009fc6:	b930      	cbnz	r0, 8009fd6 <_svfiprintf_r+0x32>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fd0:	b01d      	add	sp, #116	@ 0x74
 8009fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd6:	2340      	movs	r3, #64	@ 0x40
 8009fd8:	616b      	str	r3, [r5, #20]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fde:	2320      	movs	r3, #32
 8009fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe8:	2330      	movs	r3, #48	@ 0x30
 8009fea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a188 <_svfiprintf_r+0x1e4>
 8009fee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ff2:	f04f 0901 	mov.w	r9, #1
 8009ff6:	4623      	mov	r3, r4
 8009ff8:	469a      	mov	sl, r3
 8009ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffe:	b10a      	cbz	r2, 800a004 <_svfiprintf_r+0x60>
 800a000:	2a25      	cmp	r2, #37	@ 0x25
 800a002:	d1f9      	bne.n	8009ff8 <_svfiprintf_r+0x54>
 800a004:	ebba 0b04 	subs.w	fp, sl, r4
 800a008:	d00b      	beq.n	800a022 <_svfiprintf_r+0x7e>
 800a00a:	465b      	mov	r3, fp
 800a00c:	4622      	mov	r2, r4
 800a00e:	4629      	mov	r1, r5
 800a010:	4638      	mov	r0, r7
 800a012:	f7ff ff6c 	bl	8009eee <__ssputs_r>
 800a016:	3001      	adds	r0, #1
 800a018:	f000 80a7 	beq.w	800a16a <_svfiprintf_r+0x1c6>
 800a01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a01e:	445a      	add	r2, fp
 800a020:	9209      	str	r2, [sp, #36]	@ 0x24
 800a022:	f89a 3000 	ldrb.w	r3, [sl]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 809f 	beq.w	800a16a <_svfiprintf_r+0x1c6>
 800a02c:	2300      	movs	r3, #0
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a036:	f10a 0a01 	add.w	sl, sl, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	9307      	str	r3, [sp, #28]
 800a03e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a042:	931a      	str	r3, [sp, #104]	@ 0x68
 800a044:	4654      	mov	r4, sl
 800a046:	2205      	movs	r2, #5
 800a048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04c:	484e      	ldr	r0, [pc, #312]	@ (800a188 <_svfiprintf_r+0x1e4>)
 800a04e:	f7f6 f8e7 	bl	8000220 <memchr>
 800a052:	9a04      	ldr	r2, [sp, #16]
 800a054:	b9d8      	cbnz	r0, 800a08e <_svfiprintf_r+0xea>
 800a056:	06d0      	lsls	r0, r2, #27
 800a058:	bf44      	itt	mi
 800a05a:	2320      	movmi	r3, #32
 800a05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a060:	0711      	lsls	r1, r2, #28
 800a062:	bf44      	itt	mi
 800a064:	232b      	movmi	r3, #43	@ 0x2b
 800a066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a06a:	f89a 3000 	ldrb.w	r3, [sl]
 800a06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a070:	d015      	beq.n	800a09e <_svfiprintf_r+0xfa>
 800a072:	9a07      	ldr	r2, [sp, #28]
 800a074:	4654      	mov	r4, sl
 800a076:	2000      	movs	r0, #0
 800a078:	f04f 0c0a 	mov.w	ip, #10
 800a07c:	4621      	mov	r1, r4
 800a07e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a082:	3b30      	subs	r3, #48	@ 0x30
 800a084:	2b09      	cmp	r3, #9
 800a086:	d94b      	bls.n	800a120 <_svfiprintf_r+0x17c>
 800a088:	b1b0      	cbz	r0, 800a0b8 <_svfiprintf_r+0x114>
 800a08a:	9207      	str	r2, [sp, #28]
 800a08c:	e014      	b.n	800a0b8 <_svfiprintf_r+0x114>
 800a08e:	eba0 0308 	sub.w	r3, r0, r8
 800a092:	fa09 f303 	lsl.w	r3, r9, r3
 800a096:	4313      	orrs	r3, r2
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	46a2      	mov	sl, r4
 800a09c:	e7d2      	b.n	800a044 <_svfiprintf_r+0xa0>
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	1d19      	adds	r1, r3, #4
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	9103      	str	r1, [sp, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bfbb      	ittet	lt
 800a0aa:	425b      	neglt	r3, r3
 800a0ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b0:	9307      	strge	r3, [sp, #28]
 800a0b2:	9307      	strlt	r3, [sp, #28]
 800a0b4:	bfb8      	it	lt
 800a0b6:	9204      	strlt	r2, [sp, #16]
 800a0b8:	7823      	ldrb	r3, [r4, #0]
 800a0ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0bc:	d10a      	bne.n	800a0d4 <_svfiprintf_r+0x130>
 800a0be:	7863      	ldrb	r3, [r4, #1]
 800a0c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0c2:	d132      	bne.n	800a12a <_svfiprintf_r+0x186>
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	9203      	str	r2, [sp, #12]
 800a0cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0d0:	3402      	adds	r4, #2
 800a0d2:	9305      	str	r3, [sp, #20]
 800a0d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a198 <_svfiprintf_r+0x1f4>
 800a0d8:	7821      	ldrb	r1, [r4, #0]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	4650      	mov	r0, sl
 800a0de:	f7f6 f89f 	bl	8000220 <memchr>
 800a0e2:	b138      	cbz	r0, 800a0f4 <_svfiprintf_r+0x150>
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ea:	2240      	movs	r2, #64	@ 0x40
 800a0ec:	4082      	lsls	r2, r0
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	3401      	adds	r4, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f8:	4824      	ldr	r0, [pc, #144]	@ (800a18c <_svfiprintf_r+0x1e8>)
 800a0fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0fe:	2206      	movs	r2, #6
 800a100:	f7f6 f88e 	bl	8000220 <memchr>
 800a104:	2800      	cmp	r0, #0
 800a106:	d036      	beq.n	800a176 <_svfiprintf_r+0x1d2>
 800a108:	4b21      	ldr	r3, [pc, #132]	@ (800a190 <_svfiprintf_r+0x1ec>)
 800a10a:	bb1b      	cbnz	r3, 800a154 <_svfiprintf_r+0x1b0>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	3307      	adds	r3, #7
 800a110:	f023 0307 	bic.w	r3, r3, #7
 800a114:	3308      	adds	r3, #8
 800a116:	9303      	str	r3, [sp, #12]
 800a118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11a:	4433      	add	r3, r6
 800a11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a11e:	e76a      	b.n	8009ff6 <_svfiprintf_r+0x52>
 800a120:	fb0c 3202 	mla	r2, ip, r2, r3
 800a124:	460c      	mov	r4, r1
 800a126:	2001      	movs	r0, #1
 800a128:	e7a8      	b.n	800a07c <_svfiprintf_r+0xd8>
 800a12a:	2300      	movs	r3, #0
 800a12c:	3401      	adds	r4, #1
 800a12e:	9305      	str	r3, [sp, #20]
 800a130:	4619      	mov	r1, r3
 800a132:	f04f 0c0a 	mov.w	ip, #10
 800a136:	4620      	mov	r0, r4
 800a138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a13c:	3a30      	subs	r2, #48	@ 0x30
 800a13e:	2a09      	cmp	r2, #9
 800a140:	d903      	bls.n	800a14a <_svfiprintf_r+0x1a6>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c6      	beq.n	800a0d4 <_svfiprintf_r+0x130>
 800a146:	9105      	str	r1, [sp, #20]
 800a148:	e7c4      	b.n	800a0d4 <_svfiprintf_r+0x130>
 800a14a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a14e:	4604      	mov	r4, r0
 800a150:	2301      	movs	r3, #1
 800a152:	e7f0      	b.n	800a136 <_svfiprintf_r+0x192>
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	462a      	mov	r2, r5
 800a15a:	4b0e      	ldr	r3, [pc, #56]	@ (800a194 <_svfiprintf_r+0x1f0>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4638      	mov	r0, r7
 800a160:	f3af 8000 	nop.w
 800a164:	1c42      	adds	r2, r0, #1
 800a166:	4606      	mov	r6, r0
 800a168:	d1d6      	bne.n	800a118 <_svfiprintf_r+0x174>
 800a16a:	89ab      	ldrh	r3, [r5, #12]
 800a16c:	065b      	lsls	r3, r3, #25
 800a16e:	f53f af2d 	bmi.w	8009fcc <_svfiprintf_r+0x28>
 800a172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a174:	e72c      	b.n	8009fd0 <_svfiprintf_r+0x2c>
 800a176:	ab03      	add	r3, sp, #12
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	462a      	mov	r2, r5
 800a17c:	4b05      	ldr	r3, [pc, #20]	@ (800a194 <_svfiprintf_r+0x1f0>)
 800a17e:	a904      	add	r1, sp, #16
 800a180:	4638      	mov	r0, r7
 800a182:	f000 fa5d 	bl	800a640 <_printf_i>
 800a186:	e7ed      	b.n	800a164 <_svfiprintf_r+0x1c0>
 800a188:	0800c184 	.word	0x0800c184
 800a18c:	0800c18e 	.word	0x0800c18e
 800a190:	00000000 	.word	0x00000000
 800a194:	08009eef 	.word	0x08009eef
 800a198:	0800c18a 	.word	0x0800c18a

0800a19c <__sfputc_r>:
 800a19c:	6893      	ldr	r3, [r2, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	b410      	push	{r4}
 800a1a4:	6093      	str	r3, [r2, #8]
 800a1a6:	da08      	bge.n	800a1ba <__sfputc_r+0x1e>
 800a1a8:	6994      	ldr	r4, [r2, #24]
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	db01      	blt.n	800a1b2 <__sfputc_r+0x16>
 800a1ae:	290a      	cmp	r1, #10
 800a1b0:	d103      	bne.n	800a1ba <__sfputc_r+0x1e>
 800a1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b6:	f000 bc8c 	b.w	800aad2 <__swbuf_r>
 800a1ba:	6813      	ldr	r3, [r2, #0]
 800a1bc:	1c58      	adds	r0, r3, #1
 800a1be:	6010      	str	r0, [r2, #0]
 800a1c0:	7019      	strb	r1, [r3, #0]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <__sfputs_r>:
 800a1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	18d5      	adds	r5, r2, r3
 800a1d4:	42ac      	cmp	r4, r5
 800a1d6:	d101      	bne.n	800a1dc <__sfputs_r+0x12>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e007      	b.n	800a1ec <__sfputs_r+0x22>
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ffda 	bl	800a19c <__sfputc_r>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d1f3      	bne.n	800a1d4 <__sfputs_r+0xa>
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1f0 <_vfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	b09d      	sub	sp, #116	@ 0x74
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	4698      	mov	r8, r3
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	b118      	cbz	r0, 800a208 <_vfiprintf_r+0x18>
 800a200:	6a03      	ldr	r3, [r0, #32]
 800a202:	b90b      	cbnz	r3, 800a208 <_vfiprintf_r+0x18>
 800a204:	f7ff fd74 	bl	8009cf0 <__sinit>
 800a208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a20a:	07d9      	lsls	r1, r3, #31
 800a20c:	d405      	bmi.n	800a21a <_vfiprintf_r+0x2a>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	059a      	lsls	r2, r3, #22
 800a212:	d402      	bmi.n	800a21a <_vfiprintf_r+0x2a>
 800a214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a216:	f7ff fe5a 	bl	8009ece <__retarget_lock_acquire_recursive>
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	071b      	lsls	r3, r3, #28
 800a21e:	d501      	bpl.n	800a224 <_vfiprintf_r+0x34>
 800a220:	692b      	ldr	r3, [r5, #16]
 800a222:	b99b      	cbnz	r3, 800a24c <_vfiprintf_r+0x5c>
 800a224:	4629      	mov	r1, r5
 800a226:	4630      	mov	r0, r6
 800a228:	f000 fc92 	bl	800ab50 <__swsetup_r>
 800a22c:	b170      	cbz	r0, 800a24c <_vfiprintf_r+0x5c>
 800a22e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a230:	07dc      	lsls	r4, r3, #31
 800a232:	d504      	bpl.n	800a23e <_vfiprintf_r+0x4e>
 800a234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a238:	b01d      	add	sp, #116	@ 0x74
 800a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	0598      	lsls	r0, r3, #22
 800a242:	d4f7      	bmi.n	800a234 <_vfiprintf_r+0x44>
 800a244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a246:	f7ff fe43 	bl	8009ed0 <__retarget_lock_release_recursive>
 800a24a:	e7f3      	b.n	800a234 <_vfiprintf_r+0x44>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a250:	2320      	movs	r3, #32
 800a252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a256:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25a:	2330      	movs	r3, #48	@ 0x30
 800a25c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a40c <_vfiprintf_r+0x21c>
 800a260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a264:	f04f 0901 	mov.w	r9, #1
 800a268:	4623      	mov	r3, r4
 800a26a:	469a      	mov	sl, r3
 800a26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a270:	b10a      	cbz	r2, 800a276 <_vfiprintf_r+0x86>
 800a272:	2a25      	cmp	r2, #37	@ 0x25
 800a274:	d1f9      	bne.n	800a26a <_vfiprintf_r+0x7a>
 800a276:	ebba 0b04 	subs.w	fp, sl, r4
 800a27a:	d00b      	beq.n	800a294 <_vfiprintf_r+0xa4>
 800a27c:	465b      	mov	r3, fp
 800a27e:	4622      	mov	r2, r4
 800a280:	4629      	mov	r1, r5
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ffa1 	bl	800a1ca <__sfputs_r>
 800a288:	3001      	adds	r0, #1
 800a28a:	f000 80a7 	beq.w	800a3dc <_vfiprintf_r+0x1ec>
 800a28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a290:	445a      	add	r2, fp
 800a292:	9209      	str	r2, [sp, #36]	@ 0x24
 800a294:	f89a 3000 	ldrb.w	r3, [sl]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 809f 	beq.w	800a3dc <_vfiprintf_r+0x1ec>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2205      	movs	r2, #5
 800a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2be:	4853      	ldr	r0, [pc, #332]	@ (800a40c <_vfiprintf_r+0x21c>)
 800a2c0:	f7f5 ffae 	bl	8000220 <memchr>
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	b9d8      	cbnz	r0, 800a300 <_vfiprintf_r+0x110>
 800a2c8:	06d1      	lsls	r1, r2, #27
 800a2ca:	bf44      	itt	mi
 800a2cc:	2320      	movmi	r3, #32
 800a2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2d2:	0713      	lsls	r3, r2, #28
 800a2d4:	bf44      	itt	mi
 800a2d6:	232b      	movmi	r3, #43	@ 0x2b
 800a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2e2:	d015      	beq.n	800a310 <_vfiprintf_r+0x120>
 800a2e4:	9a07      	ldr	r2, [sp, #28]
 800a2e6:	4654      	mov	r4, sl
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f04f 0c0a 	mov.w	ip, #10
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f4:	3b30      	subs	r3, #48	@ 0x30
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d94b      	bls.n	800a392 <_vfiprintf_r+0x1a2>
 800a2fa:	b1b0      	cbz	r0, 800a32a <_vfiprintf_r+0x13a>
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	e014      	b.n	800a32a <_vfiprintf_r+0x13a>
 800a300:	eba0 0308 	sub.w	r3, r0, r8
 800a304:	fa09 f303 	lsl.w	r3, r9, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	46a2      	mov	sl, r4
 800a30e:	e7d2      	b.n	800a2b6 <_vfiprintf_r+0xc6>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	1d19      	adds	r1, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9103      	str	r1, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbb      	ittet	lt
 800a31c:	425b      	neglt	r3, r3
 800a31e:	f042 0202 	orrlt.w	r2, r2, #2
 800a322:	9307      	strge	r3, [sp, #28]
 800a324:	9307      	strlt	r3, [sp, #28]
 800a326:	bfb8      	it	lt
 800a328:	9204      	strlt	r2, [sp, #16]
 800a32a:	7823      	ldrb	r3, [r4, #0]
 800a32c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a32e:	d10a      	bne.n	800a346 <_vfiprintf_r+0x156>
 800a330:	7863      	ldrb	r3, [r4, #1]
 800a332:	2b2a      	cmp	r3, #42	@ 0x2a
 800a334:	d132      	bne.n	800a39c <_vfiprintf_r+0x1ac>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	1d1a      	adds	r2, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9203      	str	r2, [sp, #12]
 800a33e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a342:	3402      	adds	r4, #2
 800a344:	9305      	str	r3, [sp, #20]
 800a346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a41c <_vfiprintf_r+0x22c>
 800a34a:	7821      	ldrb	r1, [r4, #0]
 800a34c:	2203      	movs	r2, #3
 800a34e:	4650      	mov	r0, sl
 800a350:	f7f5 ff66 	bl	8000220 <memchr>
 800a354:	b138      	cbz	r0, 800a366 <_vfiprintf_r+0x176>
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	eba0 000a 	sub.w	r0, r0, sl
 800a35c:	2240      	movs	r2, #64	@ 0x40
 800a35e:	4082      	lsls	r2, r0
 800a360:	4313      	orrs	r3, r2
 800a362:	3401      	adds	r4, #1
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36a:	4829      	ldr	r0, [pc, #164]	@ (800a410 <_vfiprintf_r+0x220>)
 800a36c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a370:	2206      	movs	r2, #6
 800a372:	f7f5 ff55 	bl	8000220 <memchr>
 800a376:	2800      	cmp	r0, #0
 800a378:	d03f      	beq.n	800a3fa <_vfiprintf_r+0x20a>
 800a37a:	4b26      	ldr	r3, [pc, #152]	@ (800a414 <_vfiprintf_r+0x224>)
 800a37c:	bb1b      	cbnz	r3, 800a3c6 <_vfiprintf_r+0x1d6>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	f023 0307 	bic.w	r3, r3, #7
 800a386:	3308      	adds	r3, #8
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a38c:	443b      	add	r3, r7
 800a38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a390:	e76a      	b.n	800a268 <_vfiprintf_r+0x78>
 800a392:	fb0c 3202 	mla	r2, ip, r2, r3
 800a396:	460c      	mov	r4, r1
 800a398:	2001      	movs	r0, #1
 800a39a:	e7a8      	b.n	800a2ee <_vfiprintf_r+0xfe>
 800a39c:	2300      	movs	r3, #0
 800a39e:	3401      	adds	r4, #1
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f04f 0c0a 	mov.w	ip, #10
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ae:	3a30      	subs	r2, #48	@ 0x30
 800a3b0:	2a09      	cmp	r2, #9
 800a3b2:	d903      	bls.n	800a3bc <_vfiprintf_r+0x1cc>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0c6      	beq.n	800a346 <_vfiprintf_r+0x156>
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	e7c4      	b.n	800a346 <_vfiprintf_r+0x156>
 800a3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7f0      	b.n	800a3a8 <_vfiprintf_r+0x1b8>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b12      	ldr	r3, [pc, #72]	@ (800a418 <_vfiprintf_r+0x228>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f3af 8000 	nop.w
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	1c78      	adds	r0, r7, #1
 800a3da:	d1d6      	bne.n	800a38a <_vfiprintf_r+0x19a>
 800a3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3de:	07d9      	lsls	r1, r3, #31
 800a3e0:	d405      	bmi.n	800a3ee <_vfiprintf_r+0x1fe>
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	059a      	lsls	r2, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_vfiprintf_r+0x1fe>
 800a3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ea:	f7ff fd71 	bl	8009ed0 <__retarget_lock_release_recursive>
 800a3ee:	89ab      	ldrh	r3, [r5, #12]
 800a3f0:	065b      	lsls	r3, r3, #25
 800a3f2:	f53f af1f 	bmi.w	800a234 <_vfiprintf_r+0x44>
 800a3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3f8:	e71e      	b.n	800a238 <_vfiprintf_r+0x48>
 800a3fa:	ab03      	add	r3, sp, #12
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	462a      	mov	r2, r5
 800a400:	4b05      	ldr	r3, [pc, #20]	@ (800a418 <_vfiprintf_r+0x228>)
 800a402:	a904      	add	r1, sp, #16
 800a404:	4630      	mov	r0, r6
 800a406:	f000 f91b 	bl	800a640 <_printf_i>
 800a40a:	e7e4      	b.n	800a3d6 <_vfiprintf_r+0x1e6>
 800a40c:	0800c184 	.word	0x0800c184
 800a410:	0800c18e 	.word	0x0800c18e
 800a414:	00000000 	.word	0x00000000
 800a418:	0800a1cb 	.word	0x0800a1cb
 800a41c:	0800c18a 	.word	0x0800c18a

0800a420 <sbrk_aligned>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4e0f      	ldr	r6, [pc, #60]	@ (800a460 <sbrk_aligned+0x40>)
 800a424:	460c      	mov	r4, r1
 800a426:	6831      	ldr	r1, [r6, #0]
 800a428:	4605      	mov	r5, r0
 800a42a:	b911      	cbnz	r1, 800a432 <sbrk_aligned+0x12>
 800a42c:	f000 fcb8 	bl	800ada0 <_sbrk_r>
 800a430:	6030      	str	r0, [r6, #0]
 800a432:	4621      	mov	r1, r4
 800a434:	4628      	mov	r0, r5
 800a436:	f000 fcb3 	bl	800ada0 <_sbrk_r>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d103      	bne.n	800a446 <sbrk_aligned+0x26>
 800a43e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a442:	4620      	mov	r0, r4
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	1cc4      	adds	r4, r0, #3
 800a448:	f024 0403 	bic.w	r4, r4, #3
 800a44c:	42a0      	cmp	r0, r4
 800a44e:	d0f8      	beq.n	800a442 <sbrk_aligned+0x22>
 800a450:	1a21      	subs	r1, r4, r0
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fca4 	bl	800ada0 <_sbrk_r>
 800a458:	3001      	adds	r0, #1
 800a45a:	d1f2      	bne.n	800a442 <sbrk_aligned+0x22>
 800a45c:	e7ef      	b.n	800a43e <sbrk_aligned+0x1e>
 800a45e:	bf00      	nop
 800a460:	20005140 	.word	0x20005140

0800a464 <_malloc_r>:
 800a464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a468:	1ccd      	adds	r5, r1, #3
 800a46a:	f025 0503 	bic.w	r5, r5, #3
 800a46e:	3508      	adds	r5, #8
 800a470:	2d0c      	cmp	r5, #12
 800a472:	bf38      	it	cc
 800a474:	250c      	movcc	r5, #12
 800a476:	2d00      	cmp	r5, #0
 800a478:	4606      	mov	r6, r0
 800a47a:	db01      	blt.n	800a480 <_malloc_r+0x1c>
 800a47c:	42a9      	cmp	r1, r5
 800a47e:	d904      	bls.n	800a48a <_malloc_r+0x26>
 800a480:	230c      	movs	r3, #12
 800a482:	6033      	str	r3, [r6, #0]
 800a484:	2000      	movs	r0, #0
 800a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a560 <_malloc_r+0xfc>
 800a48e:	f000 faa3 	bl	800a9d8 <__malloc_lock>
 800a492:	f8d8 3000 	ldr.w	r3, [r8]
 800a496:	461c      	mov	r4, r3
 800a498:	bb44      	cbnz	r4, 800a4ec <_malloc_r+0x88>
 800a49a:	4629      	mov	r1, r5
 800a49c:	4630      	mov	r0, r6
 800a49e:	f7ff ffbf 	bl	800a420 <sbrk_aligned>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	d158      	bne.n	800a55a <_malloc_r+0xf6>
 800a4a8:	f8d8 4000 	ldr.w	r4, [r8]
 800a4ac:	4627      	mov	r7, r4
 800a4ae:	2f00      	cmp	r7, #0
 800a4b0:	d143      	bne.n	800a53a <_malloc_r+0xd6>
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	d04b      	beq.n	800a54e <_malloc_r+0xea>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	eb04 0903 	add.w	r9, r4, r3
 800a4c0:	f000 fc6e 	bl	800ada0 <_sbrk_r>
 800a4c4:	4581      	cmp	r9, r0
 800a4c6:	d142      	bne.n	800a54e <_malloc_r+0xea>
 800a4c8:	6821      	ldr	r1, [r4, #0]
 800a4ca:	1a6d      	subs	r5, r5, r1
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7ff ffa6 	bl	800a420 <sbrk_aligned>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d03a      	beq.n	800a54e <_malloc_r+0xea>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	442b      	add	r3, r5
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	bb62      	cbnz	r2, 800a540 <_malloc_r+0xdc>
 800a4e6:	f8c8 7000 	str.w	r7, [r8]
 800a4ea:	e00f      	b.n	800a50c <_malloc_r+0xa8>
 800a4ec:	6822      	ldr	r2, [r4, #0]
 800a4ee:	1b52      	subs	r2, r2, r5
 800a4f0:	d420      	bmi.n	800a534 <_malloc_r+0xd0>
 800a4f2:	2a0b      	cmp	r2, #11
 800a4f4:	d917      	bls.n	800a526 <_malloc_r+0xc2>
 800a4f6:	1961      	adds	r1, r4, r5
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	6025      	str	r5, [r4, #0]
 800a4fc:	bf18      	it	ne
 800a4fe:	6059      	strne	r1, [r3, #4]
 800a500:	6863      	ldr	r3, [r4, #4]
 800a502:	bf08      	it	eq
 800a504:	f8c8 1000 	streq.w	r1, [r8]
 800a508:	5162      	str	r2, [r4, r5]
 800a50a:	604b      	str	r3, [r1, #4]
 800a50c:	4630      	mov	r0, r6
 800a50e:	f000 fa69 	bl	800a9e4 <__malloc_unlock>
 800a512:	f104 000b 	add.w	r0, r4, #11
 800a516:	1d23      	adds	r3, r4, #4
 800a518:	f020 0007 	bic.w	r0, r0, #7
 800a51c:	1ac2      	subs	r2, r0, r3
 800a51e:	bf1c      	itt	ne
 800a520:	1a1b      	subne	r3, r3, r0
 800a522:	50a3      	strne	r3, [r4, r2]
 800a524:	e7af      	b.n	800a486 <_malloc_r+0x22>
 800a526:	6862      	ldr	r2, [r4, #4]
 800a528:	42a3      	cmp	r3, r4
 800a52a:	bf0c      	ite	eq
 800a52c:	f8c8 2000 	streq.w	r2, [r8]
 800a530:	605a      	strne	r2, [r3, #4]
 800a532:	e7eb      	b.n	800a50c <_malloc_r+0xa8>
 800a534:	4623      	mov	r3, r4
 800a536:	6864      	ldr	r4, [r4, #4]
 800a538:	e7ae      	b.n	800a498 <_malloc_r+0x34>
 800a53a:	463c      	mov	r4, r7
 800a53c:	687f      	ldr	r7, [r7, #4]
 800a53e:	e7b6      	b.n	800a4ae <_malloc_r+0x4a>
 800a540:	461a      	mov	r2, r3
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	42a3      	cmp	r3, r4
 800a546:	d1fb      	bne.n	800a540 <_malloc_r+0xdc>
 800a548:	2300      	movs	r3, #0
 800a54a:	6053      	str	r3, [r2, #4]
 800a54c:	e7de      	b.n	800a50c <_malloc_r+0xa8>
 800a54e:	230c      	movs	r3, #12
 800a550:	6033      	str	r3, [r6, #0]
 800a552:	4630      	mov	r0, r6
 800a554:	f000 fa46 	bl	800a9e4 <__malloc_unlock>
 800a558:	e794      	b.n	800a484 <_malloc_r+0x20>
 800a55a:	6005      	str	r5, [r0, #0]
 800a55c:	e7d6      	b.n	800a50c <_malloc_r+0xa8>
 800a55e:	bf00      	nop
 800a560:	20005144 	.word	0x20005144

0800a564 <_printf_common>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	4616      	mov	r6, r2
 800a56a:	4698      	mov	r8, r3
 800a56c:	688a      	ldr	r2, [r1, #8]
 800a56e:	690b      	ldr	r3, [r1, #16]
 800a570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a574:	4293      	cmp	r3, r2
 800a576:	bfb8      	it	lt
 800a578:	4613      	movlt	r3, r2
 800a57a:	6033      	str	r3, [r6, #0]
 800a57c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a580:	4607      	mov	r7, r0
 800a582:	460c      	mov	r4, r1
 800a584:	b10a      	cbz	r2, 800a58a <_printf_common+0x26>
 800a586:	3301      	adds	r3, #1
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	0699      	lsls	r1, r3, #26
 800a58e:	bf42      	ittt	mi
 800a590:	6833      	ldrmi	r3, [r6, #0]
 800a592:	3302      	addmi	r3, #2
 800a594:	6033      	strmi	r3, [r6, #0]
 800a596:	6825      	ldr	r5, [r4, #0]
 800a598:	f015 0506 	ands.w	r5, r5, #6
 800a59c:	d106      	bne.n	800a5ac <_printf_common+0x48>
 800a59e:	f104 0a19 	add.w	sl, r4, #25
 800a5a2:	68e3      	ldr	r3, [r4, #12]
 800a5a4:	6832      	ldr	r2, [r6, #0]
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	42ab      	cmp	r3, r5
 800a5aa:	dc26      	bgt.n	800a5fa <_printf_common+0x96>
 800a5ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	3b00      	subs	r3, #0
 800a5b4:	bf18      	it	ne
 800a5b6:	2301      	movne	r3, #1
 800a5b8:	0692      	lsls	r2, r2, #26
 800a5ba:	d42b      	bmi.n	800a614 <_printf_common+0xb0>
 800a5bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	47c8      	blx	r9
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d01e      	beq.n	800a608 <_printf_common+0xa4>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	f003 0306 	and.w	r3, r3, #6
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	bf02      	ittt	eq
 800a5d6:	68e5      	ldreq	r5, [r4, #12]
 800a5d8:	6833      	ldreq	r3, [r6, #0]
 800a5da:	1aed      	subeq	r5, r5, r3
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	bf0c      	ite	eq
 800a5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e4:	2500      	movne	r5, #0
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	bfc4      	itt	gt
 800a5ea:	1a9b      	subgt	r3, r3, r2
 800a5ec:	18ed      	addgt	r5, r5, r3
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	341a      	adds	r4, #26
 800a5f2:	42b5      	cmp	r5, r6
 800a5f4:	d11a      	bne.n	800a62c <_printf_common+0xc8>
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	e008      	b.n	800a60c <_printf_common+0xa8>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4652      	mov	r2, sl
 800a5fe:	4641      	mov	r1, r8
 800a600:	4638      	mov	r0, r7
 800a602:	47c8      	blx	r9
 800a604:	3001      	adds	r0, #1
 800a606:	d103      	bne.n	800a610 <_printf_common+0xac>
 800a608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a610:	3501      	adds	r5, #1
 800a612:	e7c6      	b.n	800a5a2 <_printf_common+0x3e>
 800a614:	18e1      	adds	r1, r4, r3
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	2030      	movs	r0, #48	@ 0x30
 800a61a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a61e:	4422      	add	r2, r4
 800a620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a628:	3302      	adds	r3, #2
 800a62a:	e7c7      	b.n	800a5bc <_printf_common+0x58>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4622      	mov	r2, r4
 800a630:	4641      	mov	r1, r8
 800a632:	4638      	mov	r0, r7
 800a634:	47c8      	blx	r9
 800a636:	3001      	adds	r0, #1
 800a638:	d0e6      	beq.n	800a608 <_printf_common+0xa4>
 800a63a:	3601      	adds	r6, #1
 800a63c:	e7d9      	b.n	800a5f2 <_printf_common+0x8e>
	...

0800a640 <_printf_i>:
 800a640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a644:	7e0f      	ldrb	r7, [r1, #24]
 800a646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a648:	2f78      	cmp	r7, #120	@ 0x78
 800a64a:	4691      	mov	r9, r2
 800a64c:	4680      	mov	r8, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	469a      	mov	sl, r3
 800a652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a656:	d807      	bhi.n	800a668 <_printf_i+0x28>
 800a658:	2f62      	cmp	r7, #98	@ 0x62
 800a65a:	d80a      	bhi.n	800a672 <_printf_i+0x32>
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	f000 80d2 	beq.w	800a806 <_printf_i+0x1c6>
 800a662:	2f58      	cmp	r7, #88	@ 0x58
 800a664:	f000 80b9 	beq.w	800a7da <_printf_i+0x19a>
 800a668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a66c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a670:	e03a      	b.n	800a6e8 <_printf_i+0xa8>
 800a672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a676:	2b15      	cmp	r3, #21
 800a678:	d8f6      	bhi.n	800a668 <_printf_i+0x28>
 800a67a:	a101      	add	r1, pc, #4	@ (adr r1, 800a680 <_printf_i+0x40>)
 800a67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a680:	0800a6d9 	.word	0x0800a6d9
 800a684:	0800a6ed 	.word	0x0800a6ed
 800a688:	0800a669 	.word	0x0800a669
 800a68c:	0800a669 	.word	0x0800a669
 800a690:	0800a669 	.word	0x0800a669
 800a694:	0800a669 	.word	0x0800a669
 800a698:	0800a6ed 	.word	0x0800a6ed
 800a69c:	0800a669 	.word	0x0800a669
 800a6a0:	0800a669 	.word	0x0800a669
 800a6a4:	0800a669 	.word	0x0800a669
 800a6a8:	0800a669 	.word	0x0800a669
 800a6ac:	0800a7ed 	.word	0x0800a7ed
 800a6b0:	0800a717 	.word	0x0800a717
 800a6b4:	0800a7a7 	.word	0x0800a7a7
 800a6b8:	0800a669 	.word	0x0800a669
 800a6bc:	0800a669 	.word	0x0800a669
 800a6c0:	0800a80f 	.word	0x0800a80f
 800a6c4:	0800a669 	.word	0x0800a669
 800a6c8:	0800a717 	.word	0x0800a717
 800a6cc:	0800a669 	.word	0x0800a669
 800a6d0:	0800a669 	.word	0x0800a669
 800a6d4:	0800a7af 	.word	0x0800a7af
 800a6d8:	6833      	ldr	r3, [r6, #0]
 800a6da:	1d1a      	adds	r2, r3, #4
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6032      	str	r2, [r6, #0]
 800a6e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e09d      	b.n	800a828 <_printf_i+0x1e8>
 800a6ec:	6833      	ldr	r3, [r6, #0]
 800a6ee:	6820      	ldr	r0, [r4, #0]
 800a6f0:	1d19      	adds	r1, r3, #4
 800a6f2:	6031      	str	r1, [r6, #0]
 800a6f4:	0606      	lsls	r6, r0, #24
 800a6f6:	d501      	bpl.n	800a6fc <_printf_i+0xbc>
 800a6f8:	681d      	ldr	r5, [r3, #0]
 800a6fa:	e003      	b.n	800a704 <_printf_i+0xc4>
 800a6fc:	0645      	lsls	r5, r0, #25
 800a6fe:	d5fb      	bpl.n	800a6f8 <_printf_i+0xb8>
 800a700:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a704:	2d00      	cmp	r5, #0
 800a706:	da03      	bge.n	800a710 <_printf_i+0xd0>
 800a708:	232d      	movs	r3, #45	@ 0x2d
 800a70a:	426d      	negs	r5, r5
 800a70c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a710:	4859      	ldr	r0, [pc, #356]	@ (800a878 <_printf_i+0x238>)
 800a712:	230a      	movs	r3, #10
 800a714:	e011      	b.n	800a73a <_printf_i+0xfa>
 800a716:	6821      	ldr	r1, [r4, #0]
 800a718:	6833      	ldr	r3, [r6, #0]
 800a71a:	0608      	lsls	r0, r1, #24
 800a71c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a720:	d402      	bmi.n	800a728 <_printf_i+0xe8>
 800a722:	0649      	lsls	r1, r1, #25
 800a724:	bf48      	it	mi
 800a726:	b2ad      	uxthmi	r5, r5
 800a728:	2f6f      	cmp	r7, #111	@ 0x6f
 800a72a:	4853      	ldr	r0, [pc, #332]	@ (800a878 <_printf_i+0x238>)
 800a72c:	6033      	str	r3, [r6, #0]
 800a72e:	bf14      	ite	ne
 800a730:	230a      	movne	r3, #10
 800a732:	2308      	moveq	r3, #8
 800a734:	2100      	movs	r1, #0
 800a736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a73a:	6866      	ldr	r6, [r4, #4]
 800a73c:	60a6      	str	r6, [r4, #8]
 800a73e:	2e00      	cmp	r6, #0
 800a740:	bfa2      	ittt	ge
 800a742:	6821      	ldrge	r1, [r4, #0]
 800a744:	f021 0104 	bicge.w	r1, r1, #4
 800a748:	6021      	strge	r1, [r4, #0]
 800a74a:	b90d      	cbnz	r5, 800a750 <_printf_i+0x110>
 800a74c:	2e00      	cmp	r6, #0
 800a74e:	d04b      	beq.n	800a7e8 <_printf_i+0x1a8>
 800a750:	4616      	mov	r6, r2
 800a752:	fbb5 f1f3 	udiv	r1, r5, r3
 800a756:	fb03 5711 	mls	r7, r3, r1, r5
 800a75a:	5dc7      	ldrb	r7, [r0, r7]
 800a75c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a760:	462f      	mov	r7, r5
 800a762:	42bb      	cmp	r3, r7
 800a764:	460d      	mov	r5, r1
 800a766:	d9f4      	bls.n	800a752 <_printf_i+0x112>
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d10b      	bne.n	800a784 <_printf_i+0x144>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	07df      	lsls	r7, r3, #31
 800a770:	d508      	bpl.n	800a784 <_printf_i+0x144>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	6861      	ldr	r1, [r4, #4]
 800a776:	4299      	cmp	r1, r3
 800a778:	bfde      	ittt	le
 800a77a:	2330      	movle	r3, #48	@ 0x30
 800a77c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a780:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a784:	1b92      	subs	r2, r2, r6
 800a786:	6122      	str	r2, [r4, #16]
 800a788:	f8cd a000 	str.w	sl, [sp]
 800a78c:	464b      	mov	r3, r9
 800a78e:	aa03      	add	r2, sp, #12
 800a790:	4621      	mov	r1, r4
 800a792:	4640      	mov	r0, r8
 800a794:	f7ff fee6 	bl	800a564 <_printf_common>
 800a798:	3001      	adds	r0, #1
 800a79a:	d14a      	bne.n	800a832 <_printf_i+0x1f2>
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a0:	b004      	add	sp, #16
 800a7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	f043 0320 	orr.w	r3, r3, #32
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	4833      	ldr	r0, [pc, #204]	@ (800a87c <_printf_i+0x23c>)
 800a7b0:	2778      	movs	r7, #120	@ 0x78
 800a7b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	6831      	ldr	r1, [r6, #0]
 800a7ba:	061f      	lsls	r7, r3, #24
 800a7bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7c0:	d402      	bmi.n	800a7c8 <_printf_i+0x188>
 800a7c2:	065f      	lsls	r7, r3, #25
 800a7c4:	bf48      	it	mi
 800a7c6:	b2ad      	uxthmi	r5, r5
 800a7c8:	6031      	str	r1, [r6, #0]
 800a7ca:	07d9      	lsls	r1, r3, #31
 800a7cc:	bf44      	itt	mi
 800a7ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a7d2:	6023      	strmi	r3, [r4, #0]
 800a7d4:	b11d      	cbz	r5, 800a7de <_printf_i+0x19e>
 800a7d6:	2310      	movs	r3, #16
 800a7d8:	e7ac      	b.n	800a734 <_printf_i+0xf4>
 800a7da:	4827      	ldr	r0, [pc, #156]	@ (800a878 <_printf_i+0x238>)
 800a7dc:	e7e9      	b.n	800a7b2 <_printf_i+0x172>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f023 0320 	bic.w	r3, r3, #32
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	e7f6      	b.n	800a7d6 <_printf_i+0x196>
 800a7e8:	4616      	mov	r6, r2
 800a7ea:	e7bd      	b.n	800a768 <_printf_i+0x128>
 800a7ec:	6833      	ldr	r3, [r6, #0]
 800a7ee:	6825      	ldr	r5, [r4, #0]
 800a7f0:	6961      	ldr	r1, [r4, #20]
 800a7f2:	1d18      	adds	r0, r3, #4
 800a7f4:	6030      	str	r0, [r6, #0]
 800a7f6:	062e      	lsls	r6, r5, #24
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	d501      	bpl.n	800a800 <_printf_i+0x1c0>
 800a7fc:	6019      	str	r1, [r3, #0]
 800a7fe:	e002      	b.n	800a806 <_printf_i+0x1c6>
 800a800:	0668      	lsls	r0, r5, #25
 800a802:	d5fb      	bpl.n	800a7fc <_printf_i+0x1bc>
 800a804:	8019      	strh	r1, [r3, #0]
 800a806:	2300      	movs	r3, #0
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	4616      	mov	r6, r2
 800a80c:	e7bc      	b.n	800a788 <_printf_i+0x148>
 800a80e:	6833      	ldr	r3, [r6, #0]
 800a810:	1d1a      	adds	r2, r3, #4
 800a812:	6032      	str	r2, [r6, #0]
 800a814:	681e      	ldr	r6, [r3, #0]
 800a816:	6862      	ldr	r2, [r4, #4]
 800a818:	2100      	movs	r1, #0
 800a81a:	4630      	mov	r0, r6
 800a81c:	f7f5 fd00 	bl	8000220 <memchr>
 800a820:	b108      	cbz	r0, 800a826 <_printf_i+0x1e6>
 800a822:	1b80      	subs	r0, r0, r6
 800a824:	6060      	str	r0, [r4, #4]
 800a826:	6863      	ldr	r3, [r4, #4]
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	2300      	movs	r3, #0
 800a82c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a830:	e7aa      	b.n	800a788 <_printf_i+0x148>
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	4632      	mov	r2, r6
 800a836:	4649      	mov	r1, r9
 800a838:	4640      	mov	r0, r8
 800a83a:	47d0      	blx	sl
 800a83c:	3001      	adds	r0, #1
 800a83e:	d0ad      	beq.n	800a79c <_printf_i+0x15c>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	079b      	lsls	r3, r3, #30
 800a844:	d413      	bmi.n	800a86e <_printf_i+0x22e>
 800a846:	68e0      	ldr	r0, [r4, #12]
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	4298      	cmp	r0, r3
 800a84c:	bfb8      	it	lt
 800a84e:	4618      	movlt	r0, r3
 800a850:	e7a6      	b.n	800a7a0 <_printf_i+0x160>
 800a852:	2301      	movs	r3, #1
 800a854:	4632      	mov	r2, r6
 800a856:	4649      	mov	r1, r9
 800a858:	4640      	mov	r0, r8
 800a85a:	47d0      	blx	sl
 800a85c:	3001      	adds	r0, #1
 800a85e:	d09d      	beq.n	800a79c <_printf_i+0x15c>
 800a860:	3501      	adds	r5, #1
 800a862:	68e3      	ldr	r3, [r4, #12]
 800a864:	9903      	ldr	r1, [sp, #12]
 800a866:	1a5b      	subs	r3, r3, r1
 800a868:	42ab      	cmp	r3, r5
 800a86a:	dcf2      	bgt.n	800a852 <_printf_i+0x212>
 800a86c:	e7eb      	b.n	800a846 <_printf_i+0x206>
 800a86e:	2500      	movs	r5, #0
 800a870:	f104 0619 	add.w	r6, r4, #25
 800a874:	e7f5      	b.n	800a862 <_printf_i+0x222>
 800a876:	bf00      	nop
 800a878:	0800c195 	.word	0x0800c195
 800a87c:	0800c1a6 	.word	0x0800c1a6

0800a880 <__sflush_r>:
 800a880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a888:	0716      	lsls	r6, r2, #28
 800a88a:	4605      	mov	r5, r0
 800a88c:	460c      	mov	r4, r1
 800a88e:	d454      	bmi.n	800a93a <__sflush_r+0xba>
 800a890:	684b      	ldr	r3, [r1, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	dc02      	bgt.n	800a89c <__sflush_r+0x1c>
 800a896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a898:	2b00      	cmp	r3, #0
 800a89a:	dd48      	ble.n	800a92e <__sflush_r+0xae>
 800a89c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d045      	beq.n	800a92e <__sflush_r+0xae>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8a8:	682f      	ldr	r7, [r5, #0]
 800a8aa:	6a21      	ldr	r1, [r4, #32]
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	d030      	beq.n	800a912 <__sflush_r+0x92>
 800a8b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	0759      	lsls	r1, r3, #29
 800a8b6:	d505      	bpl.n	800a8c4 <__sflush_r+0x44>
 800a8b8:	6863      	ldr	r3, [r4, #4]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8be:	b10b      	cbz	r3, 800a8c4 <__sflush_r+0x44>
 800a8c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8c8:	6a21      	ldr	r1, [r4, #32]
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b0      	blx	r6
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	d106      	bne.n	800a8e2 <__sflush_r+0x62>
 800a8d4:	6829      	ldr	r1, [r5, #0]
 800a8d6:	291d      	cmp	r1, #29
 800a8d8:	d82b      	bhi.n	800a932 <__sflush_r+0xb2>
 800a8da:	4a2a      	ldr	r2, [pc, #168]	@ (800a984 <__sflush_r+0x104>)
 800a8dc:	410a      	asrs	r2, r1
 800a8de:	07d6      	lsls	r6, r2, #31
 800a8e0:	d427      	bmi.n	800a932 <__sflush_r+0xb2>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	6062      	str	r2, [r4, #4]
 800a8e6:	04d9      	lsls	r1, r3, #19
 800a8e8:	6922      	ldr	r2, [r4, #16]
 800a8ea:	6022      	str	r2, [r4, #0]
 800a8ec:	d504      	bpl.n	800a8f8 <__sflush_r+0x78>
 800a8ee:	1c42      	adds	r2, r0, #1
 800a8f0:	d101      	bne.n	800a8f6 <__sflush_r+0x76>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b903      	cbnz	r3, 800a8f8 <__sflush_r+0x78>
 800a8f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	b1b9      	cbz	r1, 800a92e <__sflush_r+0xae>
 800a8fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a902:	4299      	cmp	r1, r3
 800a904:	d002      	beq.n	800a90c <__sflush_r+0x8c>
 800a906:	4628      	mov	r0, r5
 800a908:	f000 fa6c 	bl	800ade4 <_free_r>
 800a90c:	2300      	movs	r3, #0
 800a90e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a910:	e00d      	b.n	800a92e <__sflush_r+0xae>
 800a912:	2301      	movs	r3, #1
 800a914:	4628      	mov	r0, r5
 800a916:	47b0      	blx	r6
 800a918:	4602      	mov	r2, r0
 800a91a:	1c50      	adds	r0, r2, #1
 800a91c:	d1c9      	bne.n	800a8b2 <__sflush_r+0x32>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0c6      	beq.n	800a8b2 <__sflush_r+0x32>
 800a924:	2b1d      	cmp	r3, #29
 800a926:	d001      	beq.n	800a92c <__sflush_r+0xac>
 800a928:	2b16      	cmp	r3, #22
 800a92a:	d11e      	bne.n	800a96a <__sflush_r+0xea>
 800a92c:	602f      	str	r7, [r5, #0]
 800a92e:	2000      	movs	r0, #0
 800a930:	e022      	b.n	800a978 <__sflush_r+0xf8>
 800a932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a936:	b21b      	sxth	r3, r3
 800a938:	e01b      	b.n	800a972 <__sflush_r+0xf2>
 800a93a:	690f      	ldr	r7, [r1, #16]
 800a93c:	2f00      	cmp	r7, #0
 800a93e:	d0f6      	beq.n	800a92e <__sflush_r+0xae>
 800a940:	0793      	lsls	r3, r2, #30
 800a942:	680e      	ldr	r6, [r1, #0]
 800a944:	bf08      	it	eq
 800a946:	694b      	ldreq	r3, [r1, #20]
 800a948:	600f      	str	r7, [r1, #0]
 800a94a:	bf18      	it	ne
 800a94c:	2300      	movne	r3, #0
 800a94e:	eba6 0807 	sub.w	r8, r6, r7
 800a952:	608b      	str	r3, [r1, #8]
 800a954:	f1b8 0f00 	cmp.w	r8, #0
 800a958:	dde9      	ble.n	800a92e <__sflush_r+0xae>
 800a95a:	6a21      	ldr	r1, [r4, #32]
 800a95c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a95e:	4643      	mov	r3, r8
 800a960:	463a      	mov	r2, r7
 800a962:	4628      	mov	r0, r5
 800a964:	47b0      	blx	r6
 800a966:	2800      	cmp	r0, #0
 800a968:	dc08      	bgt.n	800a97c <__sflush_r+0xfc>
 800a96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a97c:	4407      	add	r7, r0
 800a97e:	eba8 0800 	sub.w	r8, r8, r0
 800a982:	e7e7      	b.n	800a954 <__sflush_r+0xd4>
 800a984:	dfbffffe 	.word	0xdfbffffe

0800a988 <_fflush_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	690b      	ldr	r3, [r1, #16]
 800a98c:	4605      	mov	r5, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	b913      	cbnz	r3, 800a998 <_fflush_r+0x10>
 800a992:	2500      	movs	r5, #0
 800a994:	4628      	mov	r0, r5
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	b118      	cbz	r0, 800a9a2 <_fflush_r+0x1a>
 800a99a:	6a03      	ldr	r3, [r0, #32]
 800a99c:	b90b      	cbnz	r3, 800a9a2 <_fflush_r+0x1a>
 800a99e:	f7ff f9a7 	bl	8009cf0 <__sinit>
 800a9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0f3      	beq.n	800a992 <_fflush_r+0xa>
 800a9aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9ac:	07d0      	lsls	r0, r2, #31
 800a9ae:	d404      	bmi.n	800a9ba <_fflush_r+0x32>
 800a9b0:	0599      	lsls	r1, r3, #22
 800a9b2:	d402      	bmi.n	800a9ba <_fflush_r+0x32>
 800a9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9b6:	f7ff fa8a 	bl	8009ece <__retarget_lock_acquire_recursive>
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	4621      	mov	r1, r4
 800a9be:	f7ff ff5f 	bl	800a880 <__sflush_r>
 800a9c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9c4:	07da      	lsls	r2, r3, #31
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	d4e4      	bmi.n	800a994 <_fflush_r+0xc>
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	059b      	lsls	r3, r3, #22
 800a9ce:	d4e1      	bmi.n	800a994 <_fflush_r+0xc>
 800a9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d2:	f7ff fa7d 	bl	8009ed0 <__retarget_lock_release_recursive>
 800a9d6:	e7dd      	b.n	800a994 <_fflush_r+0xc>

0800a9d8 <__malloc_lock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	@ (800a9e0 <__malloc_lock+0x8>)
 800a9da:	f7ff ba78 	b.w	8009ece <__retarget_lock_acquire_recursive>
 800a9de:	bf00      	nop
 800a9e0:	2000513c 	.word	0x2000513c

0800a9e4 <__malloc_unlock>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	@ (800a9ec <__malloc_unlock+0x8>)
 800a9e6:	f7ff ba73 	b.w	8009ed0 <__retarget_lock_release_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	2000513c 	.word	0x2000513c

0800a9f0 <__sread>:
 800a9f0:	b510      	push	{r4, lr}
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f8:	f000 f9c0 	bl	800ad7c <_read_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	bfab      	itete	ge
 800aa00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa02:	89a3      	ldrhlt	r3, [r4, #12]
 800aa04:	181b      	addge	r3, r3, r0
 800aa06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa0a:	bfac      	ite	ge
 800aa0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa0e:	81a3      	strhlt	r3, [r4, #12]
 800aa10:	bd10      	pop	{r4, pc}

0800aa12 <__swrite>:
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	461f      	mov	r7, r3
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	05db      	lsls	r3, r3, #23
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4616      	mov	r6, r2
 800aa22:	d505      	bpl.n	800aa30 <__swrite+0x1e>
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	2302      	movs	r3, #2
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f000 f994 	bl	800ad58 <_lseek_r>
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	463b      	mov	r3, r7
 800aa40:	4628      	mov	r0, r5
 800aa42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	f000 b9bb 	b.w	800adc0 <_write_r>

0800aa4a <__sseek>:
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa52:	f000 f981 	bl	800ad58 <_lseek_r>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	bf15      	itete	ne
 800aa5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa66:	81a3      	strheq	r3, [r4, #12]
 800aa68:	bf18      	it	ne
 800aa6a:	81a3      	strhne	r3, [r4, #12]
 800aa6c:	bd10      	pop	{r4, pc}

0800aa6e <__sclose>:
 800aa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa72:	f000 b93f 	b.w	800acf4 <_close_r>

0800aa76 <_realloc_r>:
 800aa76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7a:	4680      	mov	r8, r0
 800aa7c:	4615      	mov	r5, r2
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b921      	cbnz	r1, 800aa8c <_realloc_r+0x16>
 800aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa86:	4611      	mov	r1, r2
 800aa88:	f7ff bcec 	b.w	800a464 <_malloc_r>
 800aa8c:	b92a      	cbnz	r2, 800aa9a <_realloc_r+0x24>
 800aa8e:	f000 f9a9 	bl	800ade4 <_free_r>
 800aa92:	2400      	movs	r4, #0
 800aa94:	4620      	mov	r0, r4
 800aa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9a:	f000 f9ed 	bl	800ae78 <_malloc_usable_size_r>
 800aa9e:	4285      	cmp	r5, r0
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	d802      	bhi.n	800aaaa <_realloc_r+0x34>
 800aaa4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aaa8:	d8f4      	bhi.n	800aa94 <_realloc_r+0x1e>
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4640      	mov	r0, r8
 800aaae:	f7ff fcd9 	bl	800a464 <_malloc_r>
 800aab2:	4607      	mov	r7, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d0ec      	beq.n	800aa92 <_realloc_r+0x1c>
 800aab8:	42b5      	cmp	r5, r6
 800aaba:	462a      	mov	r2, r5
 800aabc:	4621      	mov	r1, r4
 800aabe:	bf28      	it	cs
 800aac0:	4632      	movcs	r2, r6
 800aac2:	f7ff fa06 	bl	8009ed2 <memcpy>
 800aac6:	4621      	mov	r1, r4
 800aac8:	4640      	mov	r0, r8
 800aaca:	f000 f98b 	bl	800ade4 <_free_r>
 800aace:	463c      	mov	r4, r7
 800aad0:	e7e0      	b.n	800aa94 <_realloc_r+0x1e>

0800aad2 <__swbuf_r>:
 800aad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad4:	460e      	mov	r6, r1
 800aad6:	4614      	mov	r4, r2
 800aad8:	4605      	mov	r5, r0
 800aada:	b118      	cbz	r0, 800aae4 <__swbuf_r+0x12>
 800aadc:	6a03      	ldr	r3, [r0, #32]
 800aade:	b90b      	cbnz	r3, 800aae4 <__swbuf_r+0x12>
 800aae0:	f7ff f906 	bl	8009cf0 <__sinit>
 800aae4:	69a3      	ldr	r3, [r4, #24]
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	071a      	lsls	r2, r3, #28
 800aaec:	d501      	bpl.n	800aaf2 <__swbuf_r+0x20>
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	b943      	cbnz	r3, 800ab04 <__swbuf_r+0x32>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f000 f82b 	bl	800ab50 <__swsetup_r>
 800aafa:	b118      	cbz	r0, 800ab04 <__swbuf_r+0x32>
 800aafc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ab00:	4638      	mov	r0, r7
 800ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	6922      	ldr	r2, [r4, #16]
 800ab08:	1a98      	subs	r0, r3, r2
 800ab0a:	6963      	ldr	r3, [r4, #20]
 800ab0c:	b2f6      	uxtb	r6, r6
 800ab0e:	4283      	cmp	r3, r0
 800ab10:	4637      	mov	r7, r6
 800ab12:	dc05      	bgt.n	800ab20 <__swbuf_r+0x4e>
 800ab14:	4621      	mov	r1, r4
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7ff ff36 	bl	800a988 <_fflush_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1ed      	bne.n	800aafc <__swbuf_r+0x2a>
 800ab20:	68a3      	ldr	r3, [r4, #8]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	60a3      	str	r3, [r4, #8]
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	6022      	str	r2, [r4, #0]
 800ab2c:	701e      	strb	r6, [r3, #0]
 800ab2e:	6962      	ldr	r2, [r4, #20]
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d004      	beq.n	800ab40 <__swbuf_r+0x6e>
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	07db      	lsls	r3, r3, #31
 800ab3a:	d5e1      	bpl.n	800ab00 <__swbuf_r+0x2e>
 800ab3c:	2e0a      	cmp	r6, #10
 800ab3e:	d1df      	bne.n	800ab00 <__swbuf_r+0x2e>
 800ab40:	4621      	mov	r1, r4
 800ab42:	4628      	mov	r0, r5
 800ab44:	f7ff ff20 	bl	800a988 <_fflush_r>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d0d9      	beq.n	800ab00 <__swbuf_r+0x2e>
 800ab4c:	e7d6      	b.n	800aafc <__swbuf_r+0x2a>
	...

0800ab50 <__swsetup_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4b29      	ldr	r3, [pc, #164]	@ (800abf8 <__swsetup_r+0xa8>)
 800ab54:	4605      	mov	r5, r0
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	460c      	mov	r4, r1
 800ab5a:	b118      	cbz	r0, 800ab64 <__swsetup_r+0x14>
 800ab5c:	6a03      	ldr	r3, [r0, #32]
 800ab5e:	b90b      	cbnz	r3, 800ab64 <__swsetup_r+0x14>
 800ab60:	f7ff f8c6 	bl	8009cf0 <__sinit>
 800ab64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab68:	0719      	lsls	r1, r3, #28
 800ab6a:	d422      	bmi.n	800abb2 <__swsetup_r+0x62>
 800ab6c:	06da      	lsls	r2, r3, #27
 800ab6e:	d407      	bmi.n	800ab80 <__swsetup_r+0x30>
 800ab70:	2209      	movs	r2, #9
 800ab72:	602a      	str	r2, [r5, #0]
 800ab74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab7e:	e033      	b.n	800abe8 <__swsetup_r+0x98>
 800ab80:	0758      	lsls	r0, r3, #29
 800ab82:	d512      	bpl.n	800abaa <__swsetup_r+0x5a>
 800ab84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab86:	b141      	cbz	r1, 800ab9a <__swsetup_r+0x4a>
 800ab88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	d002      	beq.n	800ab96 <__swsetup_r+0x46>
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 f927 	bl	800ade4 <_free_r>
 800ab96:	2300      	movs	r3, #0
 800ab98:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	2300      	movs	r3, #0
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	6923      	ldr	r3, [r4, #16]
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	f043 0308 	orr.w	r3, r3, #8
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	6923      	ldr	r3, [r4, #16]
 800abb4:	b94b      	cbnz	r3, 800abca <__swsetup_r+0x7a>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abc0:	d003      	beq.n	800abca <__swsetup_r+0x7a>
 800abc2:	4621      	mov	r1, r4
 800abc4:	4628      	mov	r0, r5
 800abc6:	f000 f83f 	bl	800ac48 <__smakebuf_r>
 800abca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abce:	f013 0201 	ands.w	r2, r3, #1
 800abd2:	d00a      	beq.n	800abea <__swsetup_r+0x9a>
 800abd4:	2200      	movs	r2, #0
 800abd6:	60a2      	str	r2, [r4, #8]
 800abd8:	6962      	ldr	r2, [r4, #20]
 800abda:	4252      	negs	r2, r2
 800abdc:	61a2      	str	r2, [r4, #24]
 800abde:	6922      	ldr	r2, [r4, #16]
 800abe0:	b942      	cbnz	r2, 800abf4 <__swsetup_r+0xa4>
 800abe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abe6:	d1c5      	bne.n	800ab74 <__swsetup_r+0x24>
 800abe8:	bd38      	pop	{r3, r4, r5, pc}
 800abea:	0799      	lsls	r1, r3, #30
 800abec:	bf58      	it	pl
 800abee:	6962      	ldrpl	r2, [r4, #20]
 800abf0:	60a2      	str	r2, [r4, #8]
 800abf2:	e7f4      	b.n	800abde <__swsetup_r+0x8e>
 800abf4:	2000      	movs	r0, #0
 800abf6:	e7f7      	b.n	800abe8 <__swsetup_r+0x98>
 800abf8:	20000040 	.word	0x20000040

0800abfc <__swhatbuf_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	b096      	sub	sp, #88	@ 0x58
 800ac08:	4615      	mov	r5, r2
 800ac0a:	461e      	mov	r6, r3
 800ac0c:	da0d      	bge.n	800ac2a <__swhatbuf_r+0x2e>
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac14:	f04f 0100 	mov.w	r1, #0
 800ac18:	bf14      	ite	ne
 800ac1a:	2340      	movne	r3, #64	@ 0x40
 800ac1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac20:	2000      	movs	r0, #0
 800ac22:	6031      	str	r1, [r6, #0]
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	b016      	add	sp, #88	@ 0x58
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	466a      	mov	r2, sp
 800ac2c:	f000 f872 	bl	800ad14 <_fstat_r>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	dbec      	blt.n	800ac0e <__swhatbuf_r+0x12>
 800ac34:	9901      	ldr	r1, [sp, #4]
 800ac36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac3e:	4259      	negs	r1, r3
 800ac40:	4159      	adcs	r1, r3
 800ac42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac46:	e7eb      	b.n	800ac20 <__swhatbuf_r+0x24>

0800ac48 <__smakebuf_r>:
 800ac48:	898b      	ldrh	r3, [r1, #12]
 800ac4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac4c:	079d      	lsls	r5, r3, #30
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460c      	mov	r4, r1
 800ac52:	d507      	bpl.n	800ac64 <__smakebuf_r+0x1c>
 800ac54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	6123      	str	r3, [r4, #16]
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	6163      	str	r3, [r4, #20]
 800ac60:	b003      	add	sp, #12
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	ab01      	add	r3, sp, #4
 800ac66:	466a      	mov	r2, sp
 800ac68:	f7ff ffc8 	bl	800abfc <__swhatbuf_r>
 800ac6c:	9f00      	ldr	r7, [sp, #0]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	4639      	mov	r1, r7
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7ff fbf6 	bl	800a464 <_malloc_r>
 800ac78:	b948      	cbnz	r0, 800ac8e <__smakebuf_r+0x46>
 800ac7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7e:	059a      	lsls	r2, r3, #22
 800ac80:	d4ee      	bmi.n	800ac60 <__smakebuf_r+0x18>
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	f043 0302 	orr.w	r3, r3, #2
 800ac8a:	81a3      	strh	r3, [r4, #12]
 800ac8c:	e7e2      	b.n	800ac54 <__smakebuf_r+0xc>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	6020      	str	r0, [r4, #0]
 800ac92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	9b01      	ldr	r3, [sp, #4]
 800ac9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac9e:	b15b      	cbz	r3, 800acb8 <__smakebuf_r+0x70>
 800aca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca4:	4630      	mov	r0, r6
 800aca6:	f000 f847 	bl	800ad38 <_isatty_r>
 800acaa:	b128      	cbz	r0, 800acb8 <__smakebuf_r+0x70>
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	f043 0301 	orr.w	r3, r3, #1
 800acb6:	81a3      	strh	r3, [r4, #12]
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	431d      	orrs	r5, r3
 800acbc:	81a5      	strh	r5, [r4, #12]
 800acbe:	e7cf      	b.n	800ac60 <__smakebuf_r+0x18>

0800acc0 <memmove>:
 800acc0:	4288      	cmp	r0, r1
 800acc2:	b510      	push	{r4, lr}
 800acc4:	eb01 0402 	add.w	r4, r1, r2
 800acc8:	d902      	bls.n	800acd0 <memmove+0x10>
 800acca:	4284      	cmp	r4, r0
 800accc:	4623      	mov	r3, r4
 800acce:	d807      	bhi.n	800ace0 <memmove+0x20>
 800acd0:	1e43      	subs	r3, r0, #1
 800acd2:	42a1      	cmp	r1, r4
 800acd4:	d008      	beq.n	800ace8 <memmove+0x28>
 800acd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acde:	e7f8      	b.n	800acd2 <memmove+0x12>
 800ace0:	4402      	add	r2, r0
 800ace2:	4601      	mov	r1, r0
 800ace4:	428a      	cmp	r2, r1
 800ace6:	d100      	bne.n	800acea <memmove+0x2a>
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acf2:	e7f7      	b.n	800ace4 <memmove+0x24>

0800acf4 <_close_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d06      	ldr	r5, [pc, #24]	@ (800ad10 <_close_r+0x1c>)
 800acf8:	2300      	movs	r3, #0
 800acfa:	4604      	mov	r4, r0
 800acfc:	4608      	mov	r0, r1
 800acfe:	602b      	str	r3, [r5, #0]
 800ad00:	f7f6 fea3 	bl	8001a4a <_close>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_close_r+0x1a>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_close_r+0x1a>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20005148 	.word	0x20005148

0800ad14 <_fstat_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	@ (800ad34 <_fstat_r+0x20>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	f7f6 fe9e 	bl	8001a62 <_fstat>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	d102      	bne.n	800ad30 <_fstat_r+0x1c>
 800ad2a:	682b      	ldr	r3, [r5, #0]
 800ad2c:	b103      	cbz	r3, 800ad30 <_fstat_r+0x1c>
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	bd38      	pop	{r3, r4, r5, pc}
 800ad32:	bf00      	nop
 800ad34:	20005148 	.word	0x20005148

0800ad38 <_isatty_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d06      	ldr	r5, [pc, #24]	@ (800ad54 <_isatty_r+0x1c>)
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	f7f6 fe9d 	bl	8001a82 <_isatty>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_isatty_r+0x1a>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_isatty_r+0x1a>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20005148 	.word	0x20005148

0800ad58 <_lseek_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	@ (800ad78 <_lseek_r+0x20>)
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	4608      	mov	r0, r1
 800ad60:	4611      	mov	r1, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f7f6 fe96 	bl	8001a98 <_lseek>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_lseek_r+0x1e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_lseek_r+0x1e>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	20005148 	.word	0x20005148

0800ad7c <_read_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	@ (800ad9c <_read_r+0x20>)
 800ad80:	4604      	mov	r4, r0
 800ad82:	4608      	mov	r0, r1
 800ad84:	4611      	mov	r1, r2
 800ad86:	2200      	movs	r2, #0
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f7f6 fe40 	bl	8001a10 <_read>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_read_r+0x1e>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_read_r+0x1e>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20005148 	.word	0x20005148

0800ada0 <_sbrk_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	@ (800adbc <_sbrk_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f6 fe82 	bl	8001ab4 <_sbrk>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_sbrk_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_sbrk_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20005148 	.word	0x20005148

0800adc0 <_write_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	@ (800ade0 <_write_r+0x20>)
 800adc4:	4604      	mov	r4, r0
 800adc6:	4608      	mov	r0, r1
 800adc8:	4611      	mov	r1, r2
 800adca:	2200      	movs	r2, #0
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	f7f6 fa6a 	bl	80012a8 <_write>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_write_r+0x1e>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_write_r+0x1e>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20005148 	.word	0x20005148

0800ade4 <_free_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4605      	mov	r5, r0
 800ade8:	2900      	cmp	r1, #0
 800adea:	d041      	beq.n	800ae70 <_free_r+0x8c>
 800adec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf0:	1f0c      	subs	r4, r1, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bfb8      	it	lt
 800adf6:	18e4      	addlt	r4, r4, r3
 800adf8:	f7ff fdee 	bl	800a9d8 <__malloc_lock>
 800adfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ae74 <_free_r+0x90>)
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	b933      	cbnz	r3, 800ae10 <_free_r+0x2c>
 800ae02:	6063      	str	r3, [r4, #4]
 800ae04:	6014      	str	r4, [r2, #0]
 800ae06:	4628      	mov	r0, r5
 800ae08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0c:	f7ff bdea 	b.w	800a9e4 <__malloc_unlock>
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d908      	bls.n	800ae26 <_free_r+0x42>
 800ae14:	6820      	ldr	r0, [r4, #0]
 800ae16:	1821      	adds	r1, r4, r0
 800ae18:	428b      	cmp	r3, r1
 800ae1a:	bf01      	itttt	eq
 800ae1c:	6819      	ldreq	r1, [r3, #0]
 800ae1e:	685b      	ldreq	r3, [r3, #4]
 800ae20:	1809      	addeq	r1, r1, r0
 800ae22:	6021      	streq	r1, [r4, #0]
 800ae24:	e7ed      	b.n	800ae02 <_free_r+0x1e>
 800ae26:	461a      	mov	r2, r3
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	b10b      	cbz	r3, 800ae30 <_free_r+0x4c>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d9fa      	bls.n	800ae26 <_free_r+0x42>
 800ae30:	6811      	ldr	r1, [r2, #0]
 800ae32:	1850      	adds	r0, r2, r1
 800ae34:	42a0      	cmp	r0, r4
 800ae36:	d10b      	bne.n	800ae50 <_free_r+0x6c>
 800ae38:	6820      	ldr	r0, [r4, #0]
 800ae3a:	4401      	add	r1, r0
 800ae3c:	1850      	adds	r0, r2, r1
 800ae3e:	4283      	cmp	r3, r0
 800ae40:	6011      	str	r1, [r2, #0]
 800ae42:	d1e0      	bne.n	800ae06 <_free_r+0x22>
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	6053      	str	r3, [r2, #4]
 800ae4a:	4408      	add	r0, r1
 800ae4c:	6010      	str	r0, [r2, #0]
 800ae4e:	e7da      	b.n	800ae06 <_free_r+0x22>
 800ae50:	d902      	bls.n	800ae58 <_free_r+0x74>
 800ae52:	230c      	movs	r3, #12
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	e7d6      	b.n	800ae06 <_free_r+0x22>
 800ae58:	6820      	ldr	r0, [r4, #0]
 800ae5a:	1821      	adds	r1, r4, r0
 800ae5c:	428b      	cmp	r3, r1
 800ae5e:	bf04      	itt	eq
 800ae60:	6819      	ldreq	r1, [r3, #0]
 800ae62:	685b      	ldreq	r3, [r3, #4]
 800ae64:	6063      	str	r3, [r4, #4]
 800ae66:	bf04      	itt	eq
 800ae68:	1809      	addeq	r1, r1, r0
 800ae6a:	6021      	streq	r1, [r4, #0]
 800ae6c:	6054      	str	r4, [r2, #4]
 800ae6e:	e7ca      	b.n	800ae06 <_free_r+0x22>
 800ae70:	bd38      	pop	{r3, r4, r5, pc}
 800ae72:	bf00      	nop
 800ae74:	20005144 	.word	0x20005144

0800ae78 <_malloc_usable_size_r>:
 800ae78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7c:	1f18      	subs	r0, r3, #4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfbc      	itt	lt
 800ae82:	580b      	ldrlt	r3, [r1, r0]
 800ae84:	18c0      	addlt	r0, r0, r3
 800ae86:	4770      	bx	lr

0800ae88 <_init>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	bf00      	nop
 800ae8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8e:	bc08      	pop	{r3}
 800ae90:	469e      	mov	lr, r3
 800ae92:	4770      	bx	lr

0800ae94 <_fini>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	bf00      	nop
 800ae98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9a:	bc08      	pop	{r3}
 800ae9c:	469e      	mov	lr, r3
 800ae9e:	4770      	bx	lr
