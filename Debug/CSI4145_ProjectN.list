
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c210  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001348  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d728  0800d728  0000f090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d728  0800d728  0000e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d730  0800d730  0000f090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d730  0800d730  0000e730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d734  0800d734  0000e734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800d738  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005160  20000090  0800d7c8  0000f090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051f0  0800d7c8  0000f1f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ec  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004df0  00000000  00000000  0002faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a7  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002832b  00000000  00000000  00037a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d24  00000000  00000000  0005fd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed0af  00000000  00000000  00082a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016fb1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea0  00000000  00000000  0016fb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00177a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c3c8 	.word	0x0800c3c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800c3c8 	.word	0x0800c3c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <MX_ADC1_Init+0x9c>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <MX_ADC1_Init+0xa0>)
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000dee:	f001 ffaf 	bl	8002d50 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 ff92 	bl	8001d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000e04:	2305      	movs	r3, #5
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_ADC1_Init+0x98>)
 8000e0e:	f002 f981 	bl	8003114 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 ff82 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000ac 	.word	0x200000ac
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	0f000001 	.word	0x0f000001

08000e30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_ADC_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d127      	bne.n	8000ea2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_ADC_MspInit+0x80>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_ADC_MspInit+0x84>)
 8000e9e:	f002 fcdb 	bl	8003858 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012000 	.word	0x40012000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <send_AT_command>:
// Global buffer for ESP8266 responses
char buffer[600];
int buffer_index = 0;
volatile uint8_t intrusion_detected = 0; // 1 = Detected, 0 = Normal

void send_AT_command(char *cmd, const char *expectedResponse, uint32_t timeout) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    printf("Sending: %s", cmd);
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <send_AT_command+0x48>)
 8000ec8:	f00a f9e8 	bl	800b29c <iprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff f99f 	bl	8000210 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <send_AT_command+0x4c>)
 8000ede:	f005 feb1 	bl	8006c44 <HAL_UART_Transmit>

    if (!waitFor(expectedResponse, timeout)) {
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f000 f811 	bl	8000f0c <waitFor>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <send_AT_command+0x40>
        printf("Warning: No valid response for: %s\n", cmd);
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <send_AT_command+0x50>)
 8000ef4:	f00a f9d2 	bl	800b29c <iprintf>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800c3e0 	.word	0x0800c3e0
 8000f04:	200006c0 	.word	0x200006c0
 8000f08:	0800c3ec 	.word	0x0800c3ec

08000f0c <waitFor>:
int waitFor(const char *expectedResponse, uint32_t timeout) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b6      	sub	sp, #216	@ 0xd8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[200] = {0};  // Increased buffer size
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	22c4      	movs	r2, #196	@ 0xc4
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a fa40 	bl	800b3a8 <memset>
    uint32_t startTick = HAL_GetTick();
 8000f28:	f001 fee2 	bl	8002cf0 <HAL_GetTick>
 8000f2c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    int index = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000f36:	e044      	b.n	8000fc2 <waitFor+0xb6>
        if (HAL_UART_Receive(&huart1, &rxBuffer[index], 1, 100) == HAL_OK) {
 8000f38:	f107 0208 	add.w	r2, r7, #8
 8000f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f40:	18d1      	adds	r1, r2, r3
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	2201      	movs	r2, #1
 8000f46:	4828      	ldr	r0, [pc, #160]	@ (8000fe8 <waitFor+0xdc>)
 8000f48:	f005 ff07 	bl	8006d5a <HAL_UART_Receive>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d137      	bne.n	8000fc2 <waitFor+0xb6>
            if (rxBuffer[index] == '\n' || rxBuffer[index] == '\r') {  // Stop at newline
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d007      	beq.n	8000f72 <waitFor+0x66>
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b0d      	cmp	r3, #13
 8000f70:	d11b      	bne.n	8000faa <waitFor+0x9e>
                rxBuffer[index] = '\0';  // Null terminate string
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

                if (strstr((char *)rxBuffer, expectedResponse)) {
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a f9f8 	bl	800b37c <strstr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <waitFor+0x96>
                	printf("ESP Response: %s\n", rxBuffer);// Check if expected response exists
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	@ (8000fec <waitFor+0xe0>)
 8000f9a:	f00a f97f 	bl	800b29c <iprintf>
                    return 1;  // Found the expected response
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e01d      	b.n	8000fde <waitFor+0xd2>
                }

                index = 0;  // Reset buffer if response not matched
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fa8:	e00b      	b.n	8000fc2 <waitFor+0xb6>
            } else {
                index++;
 8000faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                if (index >= sizeof(rxBuffer) - 1) index = 0;  // Prevent buffer overflow
 8000fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000fb8:	2bc6      	cmp	r3, #198	@ 0xc6
 8000fba:	d902      	bls.n	8000fc2 <waitFor+0xb6>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    while ((HAL_GetTick() - startTick) < timeout) {  // Timeout check
 8000fc2:	f001 fe95 	bl	8002cf0 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8b1      	bhi.n	8000f38 <waitFor+0x2c>
            }
        }
    }
    printf("Timeout waiting for: %s\n", expectedResponse);
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <waitFor+0xe4>)
 8000fd8:	f00a f960 	bl	800b29c <iprintf>
    return 0;  // Timeout reached without expected response
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	37d8      	adds	r7, #216	@ 0xd8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200006c0 	.word	0x200006c0
 8000fec:	0800c410 	.word	0x0800c410
 8000ff0:	0800c424 	.word	0x0800c424

08000ff4 <ESP_Server_Init>:
void ESP_Server_Init(const char *ssid, const char *password) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    char cmdBuffer[100];  // Buffer for AT commands

    printf("RESETTING ESP8266...\n");
 8000ffe:	4821      	ldr	r0, [pc, #132]	@ (8001084 <ESP_Server_Init+0x90>)
 8001000:	f00a f9b4 	bl	800b36c <puts>
    send_AT_command("AT+RST\r\n", "OK", 5000);
 8001004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001008:	491f      	ldr	r1, [pc, #124]	@ (8001088 <ESP_Server_Init+0x94>)
 800100a:	4820      	ldr	r0, [pc, #128]	@ (800108c <ESP_Server_Init+0x98>)
 800100c:	f7ff ff54 	bl	8000eb8 <send_AT_command>

    printf("Testing AT Command...\n");
 8001010:	481f      	ldr	r0, [pc, #124]	@ (8001090 <ESP_Server_Init+0x9c>)
 8001012:	f00a f9ab 	bl	800b36c <puts>
    send_AT_command("AT\r\n", "OK", 5000);
 8001016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800101a:	491b      	ldr	r1, [pc, #108]	@ (8001088 <ESP_Server_Init+0x94>)
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <ESP_Server_Init+0xa0>)
 800101e:	f7ff ff4b 	bl	8000eb8 <send_AT_command>

    printf("Connecting to Wi-Fi...\n");
 8001022:	481d      	ldr	r0, [pc, #116]	@ (8001098 <ESP_Server_Init+0xa4>)
 8001024:	f00a f9a2 	bl	800b36c <puts>
    sprintf(cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001028:	f107 000c 	add.w	r0, r7, #12
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	491a      	ldr	r1, [pc, #104]	@ (800109c <ESP_Server_Init+0xa8>)
 8001032:	f00a f851 	bl	800b0d8 <siprintf>
    send_AT_command(cmdBuffer, "WIFI CONNECTED", 15000);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800103e:	4918      	ldr	r1, [pc, #96]	@ (80010a0 <ESP_Server_Init+0xac>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff39 	bl	8000eb8 <send_AT_command>

    printf("Checking assigned IP address...\n");
 8001046:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <ESP_Server_Init+0xb0>)
 8001048:	f00a f990 	bl	800b36c <puts>
    send_AT_command("AT+CIFSR\r\n", "+CIFSR", 5000);  // Wait for IP Address
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4915      	ldr	r1, [pc, #84]	@ (80010a8 <ESP_Server_Init+0xb4>)
 8001052:	4816      	ldr	r0, [pc, #88]	@ (80010ac <ESP_Server_Init+0xb8>)
 8001054:	f7ff ff30 	bl	8000eb8 <send_AT_command>

    printf("Enabling single connections...\n");
 8001058:	4815      	ldr	r0, [pc, #84]	@ (80010b0 <ESP_Server_Init+0xbc>)
 800105a:	f00a f987 	bl	800b36c <puts>
    send_AT_command("AT+CIPMUX=0\r\n", "OK", 2000);
 800105e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <ESP_Server_Init+0x94>)
 8001064:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <ESP_Server_Init+0xc0>)
 8001066:	f7ff ff27 	bl	8000eb8 <send_AT_command>

    // Enable UART Receive Interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <ESP_Server_Init+0xc4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <ESP_Server_Init+0xc4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	60da      	str	r2, [r3, #12]
}
 800107a:	bf00      	nop
 800107c:	3770      	adds	r7, #112	@ 0x70
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800c440 	.word	0x0800c440
 8001088:	0800c458 	.word	0x0800c458
 800108c:	0800c45c 	.word	0x0800c45c
 8001090:	0800c468 	.word	0x0800c468
 8001094:	0800c480 	.word	0x0800c480
 8001098:	0800c488 	.word	0x0800c488
 800109c:	0800c4a0 	.word	0x0800c4a0
 80010a0:	0800c4b8 	.word	0x0800c4b8
 80010a4:	0800c4c8 	.word	0x0800c4c8
 80010a8:	0800c4e8 	.word	0x0800c4e8
 80010ac:	0800c4f0 	.word	0x0800c4f0
 80010b0:	0800c4fc 	.word	0x0800c4fc
 80010b4:	0800c51c 	.word	0x0800c51c
 80010b8:	200006c0 	.word	0x200006c0

080010bc <sendHTMLToLocalServer>:

void sendHTMLToLocalServer(const char *serverIP, const char *htmlContent) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010c8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010d2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80010d6:	6019      	str	r1, [r3, #0]
    char cmdBuffer[500];
    char responseBuffer[100];

    // Step 1: Connect to Local Server
    sprintf(cmdBuffer, "AT+CIPSTART=\"TCP\",\"%s\",8080\r\n", serverIP);
 80010d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80010dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80010e0:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	492b      	ldr	r1, [pc, #172]	@ (8001194 <sendHTMLToLocalServer+0xd8>)
 80010e8:	f009 fff6 	bl	800b0d8 <siprintf>
    send_AT_command(cmdBuffer, "OK", 2000);
 80010ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010f4:	4928      	ldr	r1, [pc, #160]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fede 	bl	8000eb8 <send_AT_command>

    // Step 2: Prepare HTTP POST Request
    sprintf(cmdBuffer,
 80010fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001100:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4601      	mov	r1, r0
 800110c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001110:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8001114:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001118:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800111c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	491c      	ldr	r1, [pc, #112]	@ (800119c <sendHTMLToLocalServer+0xe0>)
 800112a:	f009 ffd5 	bl	800b0d8 <siprintf>
            "Content-Type: text/html\r\n"
            "Content-Length: %d\r\n\r\n"
            "%s\r\n",
            serverIP, strlen(htmlContent), htmlContent);

    int requestLength = strlen(cmdBuffer);
 800112e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f86c 	bl	8000210 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

    // Step 3: Send the Length of the Request
    sprintf(responseBuffer, "AT+CIPSEND=%d\r\n", requestLength);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8001146:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <sendHTMLToLocalServer+0xe4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f009 ffc5 	bl	800b0d8 <siprintf>
    send_AT_command(responseBuffer, ">", 500);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001156:	4913      	ldr	r1, [pc, #76]	@ (80011a4 <sendHTMLToLocalServer+0xe8>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fead 	bl	8000eb8 <send_AT_command>

    // Step 4: Send the Actual Data
    send_AT_command(cmdBuffer, "SEND OK", 1000);
 800115e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001166:	4910      	ldr	r1, [pc, #64]	@ (80011a8 <sendHTMLToLocalServer+0xec>)
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fea5 	bl	8000eb8 <send_AT_command>

    // Step 5: Close the Connection
    send_AT_command("AT+CIPCLOSE\r\n", "OK", 500);
 800116e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001172:	4909      	ldr	r1, [pc, #36]	@ (8001198 <sendHTMLToLocalServer+0xdc>)
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <sendHTMLToLocalServer+0xf0>)
 8001176:	f7ff fe9f 	bl	8000eb8 <send_AT_command>

    printf("HTML sent to Local Server: %s\n", htmlContent);
 800117a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800117e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <sendHTMLToLocalServer+0xf4>)
 8001186:	f00a f889 	bl	800b29c <iprintf>
}
 800118a:	bf00      	nop
 800118c:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800c52c 	.word	0x0800c52c
 8001198:	0800c458 	.word	0x0800c458
 800119c:	0800c54c 	.word	0x0800c54c
 80011a0:	0800c5a8 	.word	0x0800c5a8
 80011a4:	0800c5b8 	.word	0x0800c5b8
 80011a8:	0800c5bc 	.word	0x0800c5bc
 80011ac:	0800c5c4 	.word	0x0800c5c4
 80011b0:	0800c5d4 	.word	0x0800c5d4

080011b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <MX_FREERTOS_Init+0x18>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_FREERTOS_Init+0x1c>)
 80011be:	f006 fe17 	bl	8007df0 <osThreadNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <MX_FREERTOS_Init+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0800d540 	.word	0x0800d540
 80011d0:	080011d9 	.word	0x080011d9
 80011d4:	200000f4 	.word	0x200000f4

080011d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f006 fe97 	bl	8007f14 <osDelay>
 80011e6:	e7fb      	b.n	80011e0 <StartDefaultTask+0x8>

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <MX_GPIO_Init+0x138>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <MX_GPIO_Init+0x138>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <MX_GPIO_Init+0x138>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <MX_GPIO_Init+0x138>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|System_state_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2160      	movs	r1, #96	@ 0x60
 8001272:	482c      	ldr	r0, [pc, #176]	@ (8001324 <MX_GPIO_Init+0x13c>)
 8001274:	f002 fc9c 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2103      	movs	r1, #3
 800127c:	482a      	ldr	r0, [pc, #168]	@ (8001328 <MX_GPIO_Init+0x140>)
 800127e:	f002 fc97 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001288:	4828      	ldr	r0, [pc, #160]	@ (800132c <MX_GPIO_Init+0x144>)
 800128a:	f002 fc91 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001294:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4821      	ldr	r0, [pc, #132]	@ (800132c <MX_GPIO_Init+0x144>)
 80012a6:	f002 fad7 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|System_state_Pin;
 80012aa:	2360      	movs	r3, #96	@ 0x60
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_GPIO_Init+0x13c>)
 80012c2:	f002 fac9 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = control_System_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(control_System_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <MX_GPIO_Init+0x144>)
 80012da:	f002 fabd 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 80012de:	2303      	movs	r3, #3
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <MX_GPIO_Init+0x140>)
 80012f6:	f002 faaf 	bl	8003858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_GPIO_Init+0x144>)
 8001314:	f002 faa0 	bl	8003858 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <MX_I2C1_Init+0x54>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_I2C1_Init+0x50>)
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <MX_I2C1_Init+0x58>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_I2C1_Init+0x50>)
 800134e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_I2C1_Init+0x50>)
 800136e:	f002 fc39 	bl	8003be4 <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001378:	f000 fcd2 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f8 	.word	0x200000f8
 8001384:	40005400 	.word	0x40005400
 8001388:	00061a80 	.word	0x00061a80

0800138c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_I2C_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	@ 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <HAL_I2C_MspInit+0x8c>)
 80013e6:	f002 fa37 	bl	8003858 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_I2C_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <delay>:
/**
* @brief  The application entry point.
* @retval int
*/

void delay (uint16_t time){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <delay+0x30>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 800142e:	bf00      	nop
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <delay+0x30>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3f9      	bcc.n	8001430 <delay+0x14>
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000678 	.word	0x20000678

08001450 <main>:

int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8001454:	f001 fc16 	bl	8002c84 <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 8001458:	f000 f8e8 	bl	800162c <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 800145c:	f7ff fec4 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001460:	f001 fb38 	bl	8002ad4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001464:	f7ff ff64 	bl	8001330 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001468:	f7ff fc90 	bl	8000d8c <MX_ADC1_Init>
  MX_TIM2_Init();
 800146c:	f001 f958 	bl	8002720 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001470:	f001 fb06 	bl	8002a80 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001474:	f001 f8b2 	bl	80025dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001478:	f001 f9c8 	bl	800280c <MX_TIM3_Init>
/* USER CODE BEGIN 2 */
SSD1306_Init(); // Initialize OLED display
 800147c:	f000 fc6c 	bl	8001d58 <SSD1306_Init>
SSD1306_Clear(); // Clear the display
 8001480:	f000 fe8d 	bl	800219e <SSD1306_Clear>
SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 8001484:	210a      	movs	r1, #10
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fdd0 	bl	800202c <SSD1306_GotoXY>
SSD1306_Puts("main", &Font_11x18, 1); // Display simple message
 800148c:	2201      	movs	r2, #1
 800148e:	493f      	ldr	r1, [pc, #252]	@ (800158c <main+0x13c>)
 8001490:	483f      	ldr	r0, [pc, #252]	@ (8001590 <main+0x140>)
 8001492:	f000 fe5f 	bl	8002154 <SSD1306_Puts>
SSD1306_UpdateScreen(); // Update the screen
 8001496:	f000 fd23 	bl	8001ee0 <SSD1306_UpdateScreen>
// test_Laser();
// test_Buzzer();
// test_LED();
// test_Servo();
// test_ESP8266();
HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800149a:	2100      	movs	r1, #0
 800149c:	483d      	ldr	r0, [pc, #244]	@ (8001594 <main+0x144>)
 800149e:	f004 f9b9 	bl	8005814 <HAL_TIM_IC_Start_IT>
ESP_Server_Init(username, pwd);
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <main+0x148>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <main+0x14c>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fda1 	bl	8000ff4 <ESP_Server_Init>

sendHTMLToLocalServer(localIP, regularHTML);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <main+0x150>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <main+0x154>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdfd 	bl	80010bc <sendHTMLToLocalServer>
systemStateMutex = osMutexNew(&systemStateMutex_attributes);
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <main+0x158>)
 80014c4:	f006 fd41 	bl	8007f4a <osMutexNew>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a38      	ldr	r2, [pc, #224]	@ (80015ac <main+0x15c>)
 80014cc:	6013      	str	r3, [r2, #0]
if (systemStateMutex == NULL) {
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <main+0x15c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <main+0x8c>
    printf("Failed to create system state mutex\n");
 80014d6:	4836      	ldr	r0, [pc, #216]	@ (80015b0 <main+0x160>)
 80014d8:	f009 ff48 	bl	800b36c <puts>
}
// test_Button();
/* USER CODE END 2 */
/* Init scheduler */
osKernelInitialize();
 80014dc:	f006 fc3e 	bl	8007d5c <osKernelInitialize>
/* Call init function for freertos objects (in freertos.c) */
MX_FREERTOS_Init();
 80014e0:	f7ff fe68 	bl	80011b4 <MX_FREERTOS_Init>
TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 80014e4:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <main+0x164>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4833      	ldr	r0, [pc, #204]	@ (80015b8 <main+0x168>)
 80014ea:	f006 fc81 	bl	8007df0 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <main+0x16c>)
 80014f2:	6013      	str	r3, [r2, #0]
TaskSystemButtonHandle = osThreadNew(StartTaskSystemButton, NULL, &TaskSystemButton_attributes);
 80014f4:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <main+0x170>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4832      	ldr	r0, [pc, #200]	@ (80015c4 <main+0x174>)
 80014fa:	f006 fc79 	bl	8007df0 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <main+0x178>)
 8001502:	6013      	str	r3, [r2, #0]
TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 8001504:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <main+0x17c>)
 8001506:	2100      	movs	r1, #0
 8001508:	4831      	ldr	r0, [pc, #196]	@ (80015d0 <main+0x180>)
 800150a:	f006 fc71 	bl	8007df0 <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <main+0x184>)
 8001512:	6013      	str	r3, [r2, #0]
//laser
TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 8001514:	4a30      	ldr	r2, [pc, #192]	@ (80015d8 <main+0x188>)
 8001516:	2100      	movs	r1, #0
 8001518:	4830      	ldr	r0, [pc, #192]	@ (80015dc <main+0x18c>)
 800151a:	f006 fc69 	bl	8007df0 <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <main+0x190>)
 8001522:	6013      	str	r3, [r2, #0]
TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <main+0x194>)
 8001526:	2100      	movs	r1, #0
 8001528:	482f      	ldr	r0, [pc, #188]	@ (80015e8 <main+0x198>)
 800152a:	f006 fc61 	bl	8007df0 <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <main+0x19c>)
 8001532:	6013      	str	r3, [r2, #0]
TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 8001534:	4a2e      	ldr	r2, [pc, #184]	@ (80015f0 <main+0x1a0>)
 8001536:	2100      	movs	r1, #0
 8001538:	482e      	ldr	r0, [pc, #184]	@ (80015f4 <main+0x1a4>)
 800153a:	f006 fc59 	bl	8007df0 <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a2d      	ldr	r2, [pc, #180]	@ (80015f8 <main+0x1a8>)
 8001542:	6013      	str	r3, [r2, #0]
TaskLedSystemHandle = osThreadNew(StartTaskSystemLed, NULL, &StartTaskSystemLed_attributes);
 8001544:	4a2d      	ldr	r2, [pc, #180]	@ (80015fc <main+0x1ac>)
 8001546:	2100      	movs	r1, #0
 8001548:	482d      	ldr	r0, [pc, #180]	@ (8001600 <main+0x1b0>)
 800154a:	f006 fc51 	bl	8007df0 <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <main+0x1b4>)
 8001552:	6013      	str	r3, [r2, #0]
TaskLaserHandle = osThreadNew(StartTaskLaser, NULL, &StartTaskLaser_attributes);
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <main+0x1b8>)
 8001556:	2100      	movs	r1, #0
 8001558:	482c      	ldr	r0, [pc, #176]	@ (800160c <main+0x1bc>)
 800155a:	f006 fc49 	bl	8007df0 <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a2b      	ldr	r2, [pc, #172]	@ (8001610 <main+0x1c0>)
 8001562:	6013      	str	r3, [r2, #0]
TaskUpdateWebHandle = osThreadNew(StartTaskUpdateWeb, NULL, &StartTaskUpdateWeb_attributes);
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <main+0x1c4>)
 8001566:	2100      	movs	r1, #0
 8001568:	482b      	ldr	r0, [pc, #172]	@ (8001618 <main+0x1c8>)
 800156a:	f006 fc41 	bl	8007df0 <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a2a      	ldr	r2, [pc, #168]	@ (800161c <main+0x1cc>)
 8001572:	6013      	str	r3, [r2, #0]
TaskDistanceHandle = osThreadNew(StartTaskDistance, NULL, &StartTaskDistance_attributes);
 8001574:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <main+0x1d0>)
 8001576:	2100      	movs	r1, #0
 8001578:	482a      	ldr	r0, [pc, #168]	@ (8001624 <main+0x1d4>)
 800157a:	f006 fc39 	bl	8007df0 <osThreadNew>
 800157e:	4603      	mov	r3, r0
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <main+0x1d8>)
 8001582:	6013      	str	r3, [r2, #0]
/* Start scheduler */
osKernelStart();
 8001584:	f006 fc0e 	bl	8007da4 <osKernelStart>
/* We should never get here as control is now taken by the scheduler */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <main+0x138>
 800158c:	20000000 	.word	0x20000000
 8001590:	0800c758 	.word	0x0800c758
 8001594:	20000678 	.word	0x20000678
 8001598:	20000020 	.word	0x20000020
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000010 	.word	0x20000010
 80015a8:	0800d6cc 	.word	0x0800d6cc
 80015ac:	20000190 	.word	0x20000190
 80015b0:	0800c760 	.word	0x0800c760
 80015b4:	0800d564 	.word	0x0800d564
 80015b8:	0800172d 	.word	0x0800172d
 80015bc:	20000168 	.word	0x20000168
 80015c0:	0800d588 	.word	0x0800d588
 80015c4:	080018f9 	.word	0x080018f9
 80015c8:	2000016c 	.word	0x2000016c
 80015cc:	0800d5ac 	.word	0x0800d5ac
 80015d0:	08001979 	.word	0x08001979
 80015d4:	20000170 	.word	0x20000170
 80015d8:	0800d5d0 	.word	0x0800d5d0
 80015dc:	08001a4d 	.word	0x08001a4d
 80015e0:	20000174 	.word	0x20000174
 80015e4:	0800d5f4 	.word	0x0800d5f4
 80015e8:	08001a8d 	.word	0x08001a8d
 80015ec:	20000178 	.word	0x20000178
 80015f0:	0800d618 	.word	0x0800d618
 80015f4:	08001af5 	.word	0x08001af5
 80015f8:	2000017c 	.word	0x2000017c
 80015fc:	0800d63c 	.word	0x0800d63c
 8001600:	08001abd 	.word	0x08001abd
 8001604:	20000180 	.word	0x20000180
 8001608:	0800d660 	.word	0x0800d660
 800160c:	08001a15 	.word	0x08001a15
 8001610:	20000184 	.word	0x20000184
 8001614:	0800d684 	.word	0x0800d684
 8001618:	080017f1 	.word	0x080017f1
 800161c:	20000188 	.word	0x20000188
 8001620:	0800d6a8 	.word	0x0800d6a8
 8001624:	08001781 	.word	0x08001781
 8001628:	2000018c 	.word	0x2000018c

0800162c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2234      	movs	r2, #52	@ 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 feb4 	bl	800b3a8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
__HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <SystemClock_Config+0xd4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <SystemClock_Config+0xd4>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <SystemClock_Config+0xd4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <SystemClock_Config+0xd8>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SystemClock_Config+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 336;
 80016a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fbda 	bl	8004e74 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x9e>
{
  Error_Handler();
 80016c6:	f000 fb2b 	bl	8001d20 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 f848 	bl	800477c <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xca>
{
  Error_Handler();
 80016f2:	f000 fb15 	bl	8001d20 <Error_Handler>
}
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:
* a global variable "uwTick" used as application time base.
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */
/* USER CODE END Callback 0 */
if (htim->Instance == TIM6) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
  HAL_IncTick();
 800171a:	f001 fad5 	bl	8002cc8 <HAL_IncTick>
}
/* USER CODE BEGIN Callback 1 */
/* USER CODE END Callback 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001000 	.word	0x40001000

0800172c <StartTaskButton>:
void StartTaskButton(void *argument) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001738:	480e      	ldr	r0, [pc, #56]	@ (8001774 <StartTaskButton+0x48>)
 800173a:	f002 fa21 	bl	8003b80 <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f7      	bne.n	8001734 <StartTaskButton+0x8>
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <StartTaskButton+0x4c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d1f3      	bne.n	8001734 <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 800174c:	2032      	movs	r0, #50	@ 0x32
 800174e:	f001 fadb 	bl	8002d08 <HAL_Delay>
			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <StartTaskButton+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET);
 8001758:	bf00      	nop
 800175a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <StartTaskButton+0x48>)
 8001760:	f002 fa0e 	bl	8003b80 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f7      	beq.n	800175a <StartTaskButton+0x2e>
			HAL_Delay(50); // Prevent multiple triggers
 800176a:	2032      	movs	r0, #50	@ 0x32
 800176c:	f001 facc 	bl	8002d08 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, B1_Pin) == GPIO_PIN_RESET && system_state == SYSTEM_ON) {
 8001770:	e7e0      	b.n	8001734 <StartTaskButton+0x8>
 8001772:	bf00      	nop
 8001774:	40020800 	.word	0x40020800
 8001778:	20000150 	.word	0x20000150
 800177c:	2000014c 	.word	0x2000014c

08001780 <StartTaskDistance>:
		}
	}
}

void StartTaskDistance(void *argument) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		 HCSR04_Read();  // Trigger distance measurement
 8001788:	f000 faaa 	bl	8001ce0 <HCSR04_Read>
		 HAL_Delay(200);  // Delay to allow sensor to respond
 800178c:	20c8      	movs	r0, #200	@ 0xc8
 800178e:	f001 fabb 	bl	8002d08 <HAL_Delay>

		 char buffer[10];
		 SSD1306_Clear();
 8001792:	f000 fd04 	bl	800219e <SSD1306_Clear>
		 SSD1306_GotoXY(0, 10);
 8001796:	210a      	movs	r1, #10
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fc47 	bl	800202c <SSD1306_GotoXY>
		 SSD1306_Puts("Distance", &Font_11x18, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	490f      	ldr	r1, [pc, #60]	@ (80017e0 <StartTaskDistance+0x60>)
 80017a2:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <StartTaskDistance+0x64>)
 80017a4:	f000 fcd6 	bl	8002154 <SSD1306_Puts>
		 SSD1306_GotoXY(0, 30);
 80017a8:	211e      	movs	r1, #30
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fc3e 	bl	800202c <SSD1306_GotoXY>
		 sprintf(buffer, "%d cm", Distance);
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <StartTaskDistance+0x68>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	490c      	ldr	r1, [pc, #48]	@ (80017ec <StartTaskDistance+0x6c>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 fc8b 	bl	800b0d8 <siprintf>
		 SSD1306_Puts(buffer, &Font_11x18, 1);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2201      	movs	r2, #1
 80017c8:	4905      	ldr	r1, [pc, #20]	@ (80017e0 <StartTaskDistance+0x60>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fcc2 	bl	8002154 <SSD1306_Puts>
		 SSD1306_UpdateScreen();
 80017d0:	f000 fb86 	bl	8001ee0 <SSD1306_UpdateScreen>

		 osDelay(500);  // Delay to avoid excessive updates
 80017d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017d8:	f006 fb9c 	bl	8007f14 <osDelay>
	{
 80017dc:	bf00      	nop
 80017de:	e7d3      	b.n	8001788 <StartTaskDistance+0x8>
 80017e0:	20000000 	.word	0x20000000
 80017e4:	0800c784 	.word	0x0800c784
 80017e8:	20000165 	.word	0x20000165
 80017ec:	0800c790 	.word	0x0800c790

080017f0 <StartTaskUpdateWeb>:
		}
	}


void StartTaskUpdateWeb(void *argument) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    int prev_alarm_state = ALARM_OFF;  // Track previous state && prev_alarm_state == ALARM_OFF
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
    int prev_system_state = SYSTEM_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]

    for (;;) {
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 8001800:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4619      	mov	r1, r3
 8001808:	4835      	ldr	r0, [pc, #212]	@ (80018e0 <StartTaskUpdateWeb+0xf0>)
 800180a:	f009 fd47 	bl	800b29c <iprintf>

        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 800180e:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10b      	bne.n	800182e <StartTaskUpdateWeb+0x3e>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d108      	bne.n	800182e <StartTaskUpdateWeb+0x3e>
            // Alarm just turned ON
            sendHTMLToLocalServer(localIP, intrusionHTML);
 800181c:	4b31      	ldr	r3, [pc, #196]	@ (80018e4 <StartTaskUpdateWeb+0xf4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <StartTaskUpdateWeb+0xf8>)
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fc48 	bl	80010bc <sendHTMLToLocalServer>
        if (alarm_state == ALARM_ON && prev_alarm_state == ALARM_OFF) {
 800182c:	e04a      	b.n	80018c4 <StartTaskUpdateWeb+0xd4>
        }
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 800182e:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <StartTaskUpdateWeb+0x66>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10c      	bne.n	8001856 <StartTaskUpdateWeb+0x66>
 800183c:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <StartTaskUpdateWeb+0xfc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d108      	bne.n	8001856 <StartTaskUpdateWeb+0x66>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <StartTaskUpdateWeb+0xf4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a29      	ldr	r2, [pc, #164]	@ (80018f0 <StartTaskUpdateWeb+0x100>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc34 	bl	80010bc <sendHTMLToLocalServer>
        else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON && system_state== SYSTEM_OFF) {
 8001854:	e036      	b.n	80018c4 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10f      	bne.n	800187e <StartTaskUpdateWeb+0x8e>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d10c      	bne.n	800187e <StartTaskUpdateWeb+0x8e>
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <StartTaskUpdateWeb+0xfc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d108      	bne.n	800187e <StartTaskUpdateWeb+0x8e>
            // Alarm just turned OFF
            sendHTMLToLocalServer(localIP, systemoffHTML);
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <StartTaskUpdateWeb+0xf4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1f      	ldr	r2, [pc, #124]	@ (80018f0 <StartTaskUpdateWeb+0x100>)
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc20 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_system_state== SYSTEM_ON && system_state== SYSTEM_OFF) {
 800187c:	e022      	b.n	80018c4 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10b      	bne.n	800189e <StartTaskUpdateWeb+0xae>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <StartTaskUpdateWeb+0xae>
        	sendHTMLToLocalServer(localIP, regularHTML);
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <StartTaskUpdateWeb+0xf4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <StartTaskUpdateWeb+0x104>)
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc10 	bl	80010bc <sendHTMLToLocalServer>
        }else if (alarm_state == ALARM_OFF && prev_alarm_state == ALARM_ON){
 800189c:	e012      	b.n	80018c4 <StartTaskUpdateWeb+0xd4>
        }else if (alarm_state == ALARM_OFF && prev_system_state == SYSTEM_OFF && system_state== SYSTEM_ON){
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10e      	bne.n	80018c4 <StartTaskUpdateWeb+0xd4>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10b      	bne.n	80018c4 <StartTaskUpdateWeb+0xd4>
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <StartTaskUpdateWeb+0xfc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <StartTaskUpdateWeb+0xd4>
        	sendHTMLToLocalServer(localIP, regularHTML);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <StartTaskUpdateWeb+0xf4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <StartTaskUpdateWeb+0x104>)
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fbfc 	bl	80010bc <sendHTMLToLocalServer>
        }

        // Update previous state
        prev_alarm_state = alarm_state;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <StartTaskUpdateWeb+0xec>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
        prev_system_state = system_state;
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <StartTaskUpdateWeb+0xfc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60bb      	str	r3, [r7, #8]

        osDelay(1000);  // Delay before checking again
 80018d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d4:	f006 fb1e 	bl	8007f14 <osDelay>
    	printf("Current Alarm State: %d | Previous Alarm State: %d\n", alarm_state, prev_alarm_state);
 80018d8:	e792      	b.n	8001800 <StartTaskUpdateWeb+0x10>
 80018da:	bf00      	nop
 80018dc:	2000014c 	.word	0x2000014c
 80018e0:	0800c798 	.word	0x0800c798
 80018e4:	20000018 	.word	0x20000018
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	20000150 	.word	0x20000150
 80018f0:	20000014 	.word	0x20000014
 80018f4:	20000010 	.word	0x20000010

080018f8 <StartTaskSystemButton>:
    }
}

void StartTaskSystemButton(void *argument) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
   for (;;) {
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001900:	2110      	movs	r1, #16
 8001902:	4819      	ldr	r0, [pc, #100]	@ (8001968 <StartTaskSystemButton+0x70>)
 8001904:	f002 f93c 	bl	8003b80 <HAL_GPIO_ReadPin>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f8      	bne.n	8001900 <StartTaskSystemButton+0x8>
           HAL_Delay(50); // Debounce delay
 800190e:	2032      	movs	r0, #50	@ 0x32
 8001910:	f001 f9fa 	bl	8002d08 <HAL_Delay>
           osMutexAcquire(systemStateMutex, osWaitForever); // Lock mutex
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <StartTaskSystemButton+0x74>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fb9a 	bl	8008056 <osMutexAcquire>
           system_state = !system_state;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <StartTaskSystemButton+0x78>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <StartTaskSystemButton+0x78>)
 8001934:	601a      	str	r2, [r3, #0]
           if (system_state == SYSTEM_OFF){
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <StartTaskSystemButton+0x78>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <StartTaskSystemButton+0x4c>
               alarm_state = ALARM_OFF;
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <StartTaskSystemButton+0x7c>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
           }
           osMutexRelease(systemStateMutex); // Release mutex
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <StartTaskSystemButton+0x74>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f006 fbcf 	bl	80080ec <osMutexRelease>
           // Wait for button release
           while (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET);
 800194e:	bf00      	nop
 8001950:	2110      	movs	r1, #16
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <StartTaskSystemButton+0x70>)
 8001954:	f002 f914 	bl	8003b80 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f8      	beq.n	8001950 <StartTaskSystemButton+0x58>
           HAL_Delay(50); // Prevent multiple triggers
 800195e:	2032      	movs	r0, #50	@ 0x32
 8001960:	f001 f9d2 	bl	8002d08 <HAL_Delay>
       if (HAL_GPIO_ReadPin(GPIOC, control_System_Pin) == GPIO_PIN_RESET) {
 8001964:	e7cc      	b.n	8001900 <StartTaskSystemButton+0x8>
 8001966:	bf00      	nop
 8001968:	40020800 	.word	0x40020800
 800196c:	20000190 	.word	0x20000190
 8001970:	20000150 	.word	0x20000150
 8001974:	2000014c 	.word	0x2000014c

08001978 <StartTaskLDR>:
       }
   }
}
void StartTaskLDR(void *argument) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
   int local_system_state = SYSTEM_OFF;  // Track the last known state
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
   for (;;) {
       // Acquire mutex before reading system_state
       osMutexAcquire(systemStateMutex, osWaitForever);
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <StartTaskLDR+0x88>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800198c:	4618      	mov	r0, r3
 800198e:	f006 fb62 	bl	8008056 <osMutexAcquire>
       int current_system_state = system_state;
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <StartTaskLDR+0x8c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	613b      	str	r3, [r7, #16]
       osMutexRelease(systemStateMutex);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <StartTaskLDR+0x88>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f006 fba5 	bl	80080ec <osMutexRelease>
       // Check if system just turned ON
       if (current_system_state == SYSTEM_ON && local_system_state == SYSTEM_OFF) {
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <StartTaskLDR+0x3e>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <StartTaskLDR+0x3e>
           osDelay(2000);  // Delay before first LDR reading
 80019ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019b2:	f006 faaf 	bl	8007f14 <osDelay>
       }
       // Update local state
       local_system_state = current_system_state;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	617b      	str	r3, [r7, #20]
       if (current_system_state == SYSTEM_ON) {
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d119      	bne.n	80019f4 <StartTaskLDR+0x7c>
           uint32_t adcValue;
           HAL_ADC_Start(&hadc1);
 80019c0:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <StartTaskLDR+0x90>)
 80019c2:	f001 fa09 	bl	8002dd8 <HAL_ADC_Start>
           HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ca:	480f      	ldr	r0, [pc, #60]	@ (8001a08 <StartTaskLDR+0x90>)
 80019cc:	f001 fb09 	bl	8002fe2 <HAL_ADC_PollForConversion>
           adcValue = HAL_ADC_GetValue(&hadc1);
 80019d0:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <StartTaskLDR+0x90>)
 80019d2:	f001 fb91 	bl	80030f8 <HAL_ADC_GetValue>
 80019d6:	60f8      	str	r0, [r7, #12]
           HAL_ADC_Stop(&hadc1);
 80019d8:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <StartTaskLDR+0x90>)
 80019da:	f001 facf 	bl	8002f7c <HAL_ADC_Stop>
           light_value = adcValue;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <StartTaskLDR+0x94>)
 80019e2:	6013      	str	r3, [r2, #0]
           if (adcValue < 1500) {
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d802      	bhi.n	80019f4 <StartTaskLDR+0x7c>
               alarm_state = ALARM_ON;
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <StartTaskLDR+0x98>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

           }
       }
       osDelay(500);  // Regular delay between reads
 80019f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019f8:	f006 fa8c 	bl	8007f14 <osDelay>
   for (;;) {
 80019fc:	e7c2      	b.n	8001984 <StartTaskLDR+0xc>
 80019fe:	bf00      	nop
 8001a00:	20000190 	.word	0x20000190
 8001a04:	20000150 	.word	0x20000150
 8001a08:	200000ac 	.word	0x200000ac
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000014c 	.word	0x2000014c

08001a14 <StartTaskLaser>:
   }
}


void StartTaskLaser(void *argument) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <StartTaskLaser+0x30>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <StartTaskLaser+0x1c>
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2102      	movs	r1, #2
 8001a28:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <StartTaskLaser+0x34>)
 8001a2a:	f002 f8c1 	bl	8003bb0 <HAL_GPIO_WritePin>
 8001a2e:	e004      	b.n	8001a3a <StartTaskLaser+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	2102      	movs	r1, #2
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <StartTaskLaser+0x34>)
 8001a36:	f002 f8bb 	bl	8003bb0 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001a3a:	2064      	movs	r0, #100	@ 0x64
 8001a3c:	f006 fa6a 	bl	8007f14 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001a40:	e7ec      	b.n	8001a1c <StartTaskLaser+0x8>
 8001a42:	bf00      	nop
 8001a44:	20000150 	.word	0x20000150
 8001a48:	40020400 	.word	0x40020400

08001a4c <StartTaskBuzzer>:
   }
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <StartTaskBuzzer+0x38>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d1fb      	bne.n	8001a54 <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <StartTaskBuzzer+0x3c>)
 8001a62:	f002 f8a5 	bl	8003bb0 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001a66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a6a:	f001 f94d 	bl	8002d08 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <StartTaskBuzzer+0x3c>)
 8001a74:	f002 f89c 	bl	8003bb0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001a78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a7c:	f001 f944 	bl	8002d08 <HAL_Delay>
		if(alarm_state == ALARM_ON){
 8001a80:	e7e8      	b.n	8001a54 <StartTaskBuzzer+0x8>
 8001a82:	bf00      	nop
 8001a84:	2000014c 	.word	0x2000014c
 8001a88:	40020400 	.word	0x40020400

08001a8c <StartTaskLed>:
		}
// Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	for(;;){
		if(alarm_state==ALARM_ON){
 8001a94:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <StartTaskLed+0x28>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <StartTaskLed+0x1c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <StartTaskLed+0x2c>)
 8001aa2:	f002 f885 	bl	8003bb0 <HAL_GPIO_WritePin>
 8001aa6:	e7f5      	b.n	8001a94 <StartTaskLed+0x8>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2120      	movs	r1, #32
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <StartTaskLed+0x2c>)
 8001aae:	f002 f87f 	bl	8003bb0 <HAL_GPIO_WritePin>
		if(alarm_state==ALARM_ON){
 8001ab2:	e7ef      	b.n	8001a94 <StartTaskLed+0x8>
 8001ab4:	2000014c 	.word	0x2000014c
 8001ab8:	40020000 	.word	0x40020000

08001abc <StartTaskSystemLed>:
		}
		  // LED ON
	}
}
void StartTaskSystemLed(void *argument) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
   for(;;) {
       if (system_state == SYSTEM_ON) {
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <StartTaskSystemLed+0x30>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <StartTaskSystemLed+0x1c>
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2140      	movs	r1, #64	@ 0x40
 8001ad0:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <StartTaskSystemLed+0x34>)
 8001ad2:	f002 f86d 	bl	8003bb0 <HAL_GPIO_WritePin>
 8001ad6:	e004      	b.n	8001ae2 <StartTaskSystemLed+0x26>
       } else {
           HAL_GPIO_WritePin(GPIOA, System_state_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2140      	movs	r1, #64	@ 0x40
 8001adc:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <StartTaskSystemLed+0x34>)
 8001ade:	f002 f867 	bl	8003bb0 <HAL_GPIO_WritePin>
       }
       osDelay(100);
 8001ae2:	2064      	movs	r0, #100	@ 0x64
 8001ae4:	f006 fa16 	bl	8007f14 <osDelay>
       if (system_state == SYSTEM_ON) {
 8001ae8:	e7ec      	b.n	8001ac4 <StartTaskSystemLed+0x8>
 8001aea:	bf00      	nop
 8001aec:	20000150 	.word	0x20000150
 8001af0:	40020000 	.word	0x40020000

08001af4 <StartTaskServo>:
   }
}
void StartTaskServo(void *argument) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		osDelay(1000);
 8001afc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b00:	f006 fa08 	bl	8007f14 <osDelay>
		 if(alarm_state == ALARM_ON && door_state == DOOR_OPEN) {
 8001b04:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <StartTaskServo+0x98>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d11d      	bne.n	8001b48 <StartTaskServo+0x54>
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <StartTaskServo+0x9c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d119      	bne.n	8001b48 <StartTaskServo+0x54>
		            // Move both servos 90° to the left
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b14:	2100      	movs	r1, #0
 8001b16:	481f      	ldr	r0, [pc, #124]	@ (8001b94 <StartTaskServo+0xa0>)
 8001b18:	f003 fd64 	bl	80055e4 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	481e      	ldr	r0, [pc, #120]	@ (8001b98 <StartTaskServo+0xa4>)
 8001b20:	f003 fd60 	bl	80055e4 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);  // 90° for first servo
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <StartTaskServo+0xa0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);  // 90° for second servo (same direction)
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <StartTaskServo+0xa4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b36:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001b38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b3c:	f001 f8e4 	bl	8002d08 <HAL_Delay>
		            door_state = DOOR_CLOSED;
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <StartTaskServo+0x9c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e020      	b.n	8001b8a <StartTaskServo+0x96>
		        }
		        else if(alarm_state == ALARM_OFF && door_state == DOOR_CLOSED) {
 8001b48:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <StartTaskServo+0x98>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1d5      	bne.n	8001afc <StartTaskServo+0x8>
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <StartTaskServo+0x9c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d1d1      	bne.n	8001afc <StartTaskServo+0x8>
		            // Move both servos back to 0° (neutral)
		            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480e      	ldr	r0, [pc, #56]	@ (8001b94 <StartTaskServo+0xa0>)
 8001b5c:	f003 fd42 	bl	80055e4 <HAL_TIM_PWM_Start>
		            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b60:	2100      	movs	r1, #0
 8001b62:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <StartTaskServo+0xa4>)
 8001b64:	f003 fd3e 	bl	80055e4 <HAL_TIM_PWM_Start>
		            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);  // Back to 0° for first servo
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <StartTaskServo+0xa0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b70:	635a      	str	r2, [r3, #52]	@ 0x34
		            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2500);   // Back to 0° for second servo (same direction)
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <StartTaskServo+0xa4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001b7a:	635a      	str	r2, [r3, #52]	@ 0x34
		            HAL_Delay(2000);
 8001b7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b80:	f001 f8c2 	bl	8002d08 <HAL_Delay>
		            door_state = DOOR_OPEN;
 8001b84:	4b02      	ldr	r3, [pc, #8]	@ (8001b90 <StartTaskServo+0x9c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001b8a:	e7b7      	b.n	8001afc <StartTaskServo+0x8>
 8001b8c:	2000014c 	.word	0x2000014c
 8001b90:	20000154 	.word	0x20000154
 8001b94:	20000630 	.word	0x20000630
 8001b98:	200005e8 	.word	0x200005e8
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <HAL_TIM_IC_CaptureCallback>:
	}
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7f1b      	ldrb	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 8083 	bne.w	8001cb8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001bb2:	4b45      	ldr	r3, [pc, #276]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f004 fa67 	bl	8006090 <HAL_TIM_ReadCapturedValue>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a41      	ldr	r2, [pc, #260]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bc6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020a 	bic.w	r2, r2, #10
 8001bdc:	621a      	str	r2, [r3, #32]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0202 	orr.w	r2, r2, #2
 8001bec:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8001bee:	e063      	b.n	8001cb8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001bf0:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d15f      	bne.n	8001cb8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f004 fa48 	bl	8006090 <HAL_TIM_ReadCapturedValue>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a33      	ldr	r2, [pc, #204]	@ (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c04:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8001c0e:	4b30      	ldr	r3, [pc, #192]	@ (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d907      	bls.n	8001c2a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e00f      	b.n	8001c4a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001c2a:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d909      	bls.n	8001c4a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c44:	33ff      	adds	r3, #255	@ 0xff
 8001c46:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c48:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc78 	bl	8000544 <__aeabi_ui2d>
 8001c54:	a31a      	add	r3, pc, #104	@ (adr r3, 8001cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fced 	bl	8000638 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c6e:	f7fe fe0d 	bl	800088c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe feef 	bl	8000a5c <__aeabi_d2uiz>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c84:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a1a      	ldr	r2, [r3, #32]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020a 	bic.w	r2, r2, #10
 8001c9a:	621a      	str	r2, [r3, #32]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a12      	ldr	r2, [r2, #32]
 8001ca6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0202 	bic.w	r2, r2, #2
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	b020c49c 	.word	0xb020c49c
 8001cc4:	3fa16872 	.word	0x3fa16872
 8001cc8:	20000164 	.word	0x20000164
 8001ccc:	20000158 	.word	0x20000158
 8001cd0:	2000015c 	.word	0x2000015c
 8001cd4:	20000160 	.word	0x20000160
 8001cd8:	20000165 	.word	0x20000165
 8001cdc:	20000678 	.word	0x20000678

08001ce0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cea:	480b      	ldr	r0, [pc, #44]	@ (8001d18 <HCSR04_Read+0x38>)
 8001cec:	f001 ff60 	bl	8003bb0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f7ff fb93 	bl	800141c <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <HCSR04_Read+0x38>)
 8001cfe:	f001 ff57 	bl	8003bb0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HCSR04_Read+0x3c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <HCSR04_Read+0x3c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0202 	orr.w	r2, r2, #2
 8001d10:	60da      	str	r2, [r3, #12]
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	200005e8 	.word	0x200005e8

08001d20 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <Error_Handler+0x8>

08001d2c <_write>:
{
}
/* USER CODE END Error_Handler_Debug */
}
int _write(int file, char *ptr, int len) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <_write+0x28>)
 8001d44:	f004 ff7e 	bl	8006c44 <HAL_UART_Transmit>
  return len;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000708 	.word	0x20000708

08001d58 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d5e:	f000 fa27 	bl	80021b0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d62:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001d66:	2201      	movs	r2, #1
 8001d68:	2178      	movs	r1, #120	@ 0x78
 8001d6a:	485b      	ldr	r0, [pc, #364]	@ (8001ed8 <SSD1306_Init+0x180>)
 8001d6c:	f002 f97c 	bl	8004068 <HAL_I2C_IsDeviceReady>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e0a9      	b.n	8001ece <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001d7a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001d7e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d80:	e002      	b.n	8001d88 <SSD1306_Init+0x30>
		p--;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001d8e:	22ae      	movs	r2, #174	@ 0xae
 8001d90:	2100      	movs	r1, #0
 8001d92:	2078      	movs	r0, #120	@ 0x78
 8001d94:	f000 fa88 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001d98:	2220      	movs	r2, #32
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2078      	movs	r0, #120	@ 0x78
 8001d9e:	f000 fa83 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001da2:	2210      	movs	r2, #16
 8001da4:	2100      	movs	r1, #0
 8001da6:	2078      	movs	r0, #120	@ 0x78
 8001da8:	f000 fa7e 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001dac:	22b0      	movs	r2, #176	@ 0xb0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2078      	movs	r0, #120	@ 0x78
 8001db2:	f000 fa79 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001db6:	22c8      	movs	r2, #200	@ 0xc8
 8001db8:	2100      	movs	r1, #0
 8001dba:	2078      	movs	r0, #120	@ 0x78
 8001dbc:	f000 fa74 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2078      	movs	r0, #120	@ 0x78
 8001dc6:	f000 fa6f 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001dca:	2210      	movs	r2, #16
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2078      	movs	r0, #120	@ 0x78
 8001dd0:	f000 fa6a 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001dd4:	2240      	movs	r2, #64	@ 0x40
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2078      	movs	r0, #120	@ 0x78
 8001dda:	f000 fa65 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001dde:	2281      	movs	r2, #129	@ 0x81
 8001de0:	2100      	movs	r1, #0
 8001de2:	2078      	movs	r0, #120	@ 0x78
 8001de4:	f000 fa60 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001de8:	22ff      	movs	r2, #255	@ 0xff
 8001dea:	2100      	movs	r1, #0
 8001dec:	2078      	movs	r0, #120	@ 0x78
 8001dee:	f000 fa5b 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001df2:	22a1      	movs	r2, #161	@ 0xa1
 8001df4:	2100      	movs	r1, #0
 8001df6:	2078      	movs	r0, #120	@ 0x78
 8001df8:	f000 fa56 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001dfc:	22a6      	movs	r2, #166	@ 0xa6
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2078      	movs	r0, #120	@ 0x78
 8001e02:	f000 fa51 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e06:	22a8      	movs	r2, #168	@ 0xa8
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2078      	movs	r0, #120	@ 0x78
 8001e0c:	f000 fa4c 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e10:	223f      	movs	r2, #63	@ 0x3f
 8001e12:	2100      	movs	r1, #0
 8001e14:	2078      	movs	r0, #120	@ 0x78
 8001e16:	f000 fa47 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e1a:	22a4      	movs	r2, #164	@ 0xa4
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2078      	movs	r0, #120	@ 0x78
 8001e20:	f000 fa42 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e24:	22d3      	movs	r2, #211	@ 0xd3
 8001e26:	2100      	movs	r1, #0
 8001e28:	2078      	movs	r0, #120	@ 0x78
 8001e2a:	f000 fa3d 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2078      	movs	r0, #120	@ 0x78
 8001e34:	f000 fa38 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e38:	22d5      	movs	r2, #213	@ 0xd5
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2078      	movs	r0, #120	@ 0x78
 8001e3e:	f000 fa33 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e42:	22f0      	movs	r2, #240	@ 0xf0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	@ 0x78
 8001e48:	f000 fa2e 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e4c:	22d9      	movs	r2, #217	@ 0xd9
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2078      	movs	r0, #120	@ 0x78
 8001e52:	f000 fa29 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e56:	2222      	movs	r2, #34	@ 0x22
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2078      	movs	r0, #120	@ 0x78
 8001e5c:	f000 fa24 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e60:	22da      	movs	r2, #218	@ 0xda
 8001e62:	2100      	movs	r1, #0
 8001e64:	2078      	movs	r0, #120	@ 0x78
 8001e66:	f000 fa1f 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e6a:	2212      	movs	r2, #18
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2078      	movs	r0, #120	@ 0x78
 8001e70:	f000 fa1a 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e74:	22db      	movs	r2, #219	@ 0xdb
 8001e76:	2100      	movs	r1, #0
 8001e78:	2078      	movs	r0, #120	@ 0x78
 8001e7a:	f000 fa15 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e7e:	2220      	movs	r2, #32
 8001e80:	2100      	movs	r1, #0
 8001e82:	2078      	movs	r0, #120	@ 0x78
 8001e84:	f000 fa10 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001e88:	228d      	movs	r2, #141	@ 0x8d
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2078      	movs	r0, #120	@ 0x78
 8001e8e:	f000 fa0b 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001e92:	2214      	movs	r2, #20
 8001e94:	2100      	movs	r1, #0
 8001e96:	2078      	movs	r0, #120	@ 0x78
 8001e98:	f000 fa06 	bl	80022a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e9c:	22af      	movs	r2, #175	@ 0xaf
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2078      	movs	r0, #120	@ 0x78
 8001ea2:	f000 fa01 	bl	80022a8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ea6:	222e      	movs	r2, #46	@ 0x2e
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	@ 0x78
 8001eac:	f000 f9fc 	bl	80022a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f000 f843 	bl	8001f3c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001eb6:	f000 f813 	bl	8001ee0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <SSD1306_Init+0x184>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <SSD1306_Init+0x184>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SSD1306_Init+0x184>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200000f8 	.word	0x200000f8
 8001edc:	20000594 	.word	0x20000594

08001ee0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	e01d      	b.n	8001f28 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	3b50      	subs	r3, #80	@ 0x50
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2078      	movs	r0, #120	@ 0x78
 8001ef8:	f000 f9d6 	bl	80022a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2078      	movs	r0, #120	@ 0x78
 8001f02:	f000 f9d1 	bl	80022a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f06:	2210      	movs	r2, #16
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2078      	movs	r0, #120	@ 0x78
 8001f0c:	f000 f9cc 	bl	80022a8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	01db      	lsls	r3, r3, #7
 8001f14:	4a08      	ldr	r2, [pc, #32]	@ (8001f38 <SSD1306_UpdateScreen+0x58>)
 8001f16:	441a      	add	r2, r3
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	2140      	movs	r1, #64	@ 0x40
 8001f1c:	2078      	movs	r0, #120	@ 0x78
 8001f1e:	f000 f95d 	bl	80021dc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	3301      	adds	r3, #1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b07      	cmp	r3, #7
 8001f2c:	d9de      	bls.n	8001eec <SSD1306_UpdateScreen+0xc>
	}
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000194 	.word	0x20000194

08001f3c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <SSD1306_Fill+0x14>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <SSD1306_Fill+0x16>
 8001f50:	23ff      	movs	r3, #255	@ 0xff
 8001f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f56:	4619      	mov	r1, r3
 8001f58:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <SSD1306_Fill+0x2c>)
 8001f5a:	f009 fa25 	bl	800b3a8 <memset>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000194 	.word	0x20000194

08001f6c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
 8001f76:	460b      	mov	r3, r1
 8001f78:	80bb      	strh	r3, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	70fb      	strb	r3, [r7, #3]
	if (
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f82:	d848      	bhi.n	8002016 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001f84:	88bb      	ldrh	r3, [r7, #4]
 8001f86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f88:	d845      	bhi.n	8002016 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <SSD1306_DrawPixel+0xb8>)
 8001f8c:	791b      	ldrb	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d11a      	bne.n	8001fdc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	b298      	uxth	r0, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	01db      	lsls	r3, r3, #7
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002028 <SSD1306_DrawPixel+0xbc>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	b25a      	sxtb	r2, r3
 8001fba:	88bb      	ldrh	r3, [r7, #4]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b259      	sxtb	r1, r3
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	01db      	lsls	r3, r3, #7
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2c9      	uxtb	r1, r1
 8001fd6:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <SSD1306_DrawPixel+0xbc>)
 8001fd8:	54d1      	strb	r1, [r2, r3]
 8001fda:	e01d      	b.n	8002018 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fdc:	88fa      	ldrh	r2, [r7, #6]
 8001fde:	88bb      	ldrh	r3, [r7, #4]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	b298      	uxth	r0, r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	01db      	lsls	r3, r3, #7
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <SSD1306_DrawPixel+0xbc>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	b25a      	sxtb	r2, r3
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	b25b      	sxtb	r3, r3
 8002002:	4013      	ands	r3, r2
 8002004:	b259      	sxtb	r1, r3
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	4603      	mov	r3, r0
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4413      	add	r3, r2
 800200e:	b2c9      	uxtb	r1, r1
 8002010:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <SSD1306_DrawPixel+0xbc>)
 8002012:	54d1      	strb	r1, [r2, r3]
 8002014:	e000      	b.n	8002018 <SSD1306_DrawPixel+0xac>
		return;
 8002016:	bf00      	nop
	}
}
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000594 	.word	0x20000594
 8002028:	20000194 	.word	0x20000194

0800202c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	4613      	mov	r3, r2
 800203a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800203c:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SSD1306_GotoXY+0x28>)
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <SSD1306_GotoXY+0x28>)
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	8053      	strh	r3, [r2, #2]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	20000594 	.word	0x20000594

08002058 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	4613      	mov	r3, r2
 8002066:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002068:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <SSD1306_Putc+0xf8>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
	if (
 8002074:	2b7f      	cmp	r3, #127	@ 0x7f
 8002076:	dc07      	bgt.n	8002088 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002078:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <SSD1306_Putc+0xf8>)
 800207a:	885b      	ldrh	r3, [r3, #2]
 800207c:	461a      	mov	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002084:	2b3f      	cmp	r3, #63	@ 0x3f
 8002086:	dd01      	ble.n	800208c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002088:	2300      	movs	r3, #0
 800208a:	e05d      	b.n	8002148 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e04b      	b.n	800212a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	3b20      	subs	r3, #32
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	7849      	ldrb	r1, [r1, #1]
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	440b      	add	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e030      	b.n	8002118 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020c6:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <SSD1306_Putc+0xf8>)
 80020c8:	881a      	ldrh	r2, [r3, #0]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	b298      	uxth	r0, r3
 80020d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <SSD1306_Putc+0xf8>)
 80020d4:	885a      	ldrh	r2, [r3, #2]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4413      	add	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	79ba      	ldrb	r2, [r7, #6]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7ff ff43 	bl	8001f6c <SSD1306_DrawPixel>
 80020e6:	e014      	b.n	8002112 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80020e8:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <SSD1306_Putc+0xf8>)
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b298      	uxth	r0, r3
 80020f4:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <SSD1306_Putc+0xf8>)
 80020f6:	885a      	ldrh	r2, [r3, #2]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	b299      	uxth	r1, r3
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	f7ff ff2d 	bl	8001f6c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	3301      	adds	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4293      	cmp	r3, r2
 8002122:	d3c8      	bcc.n	80020b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	461a      	mov	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4293      	cmp	r3, r2
 8002134:	d3ad      	bcc.n	8002092 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <SSD1306_Putc+0xf8>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	4413      	add	r3, r2
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <SSD1306_Putc+0xf8>)
 8002144:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002146:	79fb      	ldrb	r3, [r7, #7]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000594 	.word	0x20000594

08002154 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002162:	e012      	b.n	800218a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	79fa      	ldrb	r2, [r7, #7]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff73 	bl	8002058 <SSD1306_Putc>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d002      	beq.n	8002184 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	e008      	b.n	8002196 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3301      	adds	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e8      	bne.n	8002164 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff feca 	bl	8001f3c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021a8:	f7ff fe9a 	bl	8001ee0 <SSD1306_UpdateScreen>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <ssd1306_I2C_Init+0x28>)
 80021b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021ba:	e002      	b.n	80021c2 <ssd1306_I2C_Init+0x12>
		p--;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f9      	bne.n	80021bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	0003d090 	.word	0x0003d090

080021dc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b0c7      	sub	sp, #284	@ 0x11c
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	4604      	mov	r4, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80021ea:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80021ee:	600a      	str	r2, [r1, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021f6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021fa:	4622      	mov	r2, r4
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002202:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002206:	4602      	mov	r2, r0
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800220e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002212:	460a      	mov	r2, r1
 8002214:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800221a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800221e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002222:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002230:	e015      	b.n	800225e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002232:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002236:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800223a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	441a      	add	r2, r3
 8002242:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002246:	3301      	adds	r3, #1
 8002248:	7811      	ldrb	r1, [r2, #0]
 800224a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800224e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002252:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002254:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002258:	3301      	adds	r3, #1
 800225a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800225e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002262:	b29b      	uxth	r3, r3
 8002264:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002268:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d8df      	bhi.n	8002232 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002272:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002276:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b299      	uxth	r1, r3
 800227e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002282:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	f107 020c 	add.w	r2, r7, #12
 8002290:	200a      	movs	r0, #10
 8002292:	9000      	str	r0, [sp, #0]
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <ssd1306_I2C_WriteMulti+0xc8>)
 8002296:	f001 fde9 	bl	8003e6c <HAL_I2C_Master_Transmit>
}
 800229a:	bf00      	nop
 800229c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	200000f8 	.word	0x200000f8

080022a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	460b      	mov	r3, r1
 80022b4:	71bb      	strb	r3, [r7, #6]
 80022b6:	4613      	mov	r3, r2
 80022b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022be:	797b      	ldrb	r3, [r7, #5]
 80022c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	b299      	uxth	r1, r3
 80022c6:	f107 020c 	add.w	r2, r7, #12
 80022ca:	230a      	movs	r3, #10
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2302      	movs	r3, #2
 80022d0:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <ssd1306_I2C_Write+0x38>)
 80022d2:	f001 fdcb 	bl	8003e6c <HAL_I2C_Master_Transmit>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200000f8 	.word	0x200000f8

080022e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_MspInit+0x54>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a11      	ldr	r2, [pc, #68]	@ (8002338 <HAL_MspInit+0x54>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_MspInit+0x54>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_MspInit+0x54>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_MspInit+0x54>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	@ 0x40
 8002316:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <HAL_MspInit+0x54>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	210f      	movs	r1, #15
 8002326:	f06f 0001 	mvn.w	r0, #1
 800232a:	f001 f9d9 	bl	80036e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800

0800233c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08e      	sub	sp, #56	@ 0x38
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	4b33      	ldr	r3, [pc, #204]	@ (8002420 <HAL_InitTick+0xe4>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	4a32      	ldr	r2, [pc, #200]	@ (8002420 <HAL_InitTick+0xe4>)
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	6413      	str	r3, [r2, #64]	@ 0x40
 800235c:	4b30      	ldr	r3, [pc, #192]	@ (8002420 <HAL_InitTick+0xe4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002368:	f107 0210 	add.w	r2, r7, #16
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fb1c 	bl	80049b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002382:	f002 faed 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8002386:	6378      	str	r0, [r7, #52]	@ 0x34
 8002388:	e004      	b.n	8002394 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800238a:	f002 fae9 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 800238e:	4603      	mov	r3, r0
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002396:	4a23      	ldr	r2, [pc, #140]	@ (8002424 <HAL_InitTick+0xe8>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	3b01      	subs	r3, #1
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023a2:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_InitTick+0xec>)
 80023a4:	4a21      	ldr	r2, [pc, #132]	@ (800242c <HAL_InitTick+0xf0>)
 80023a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_InitTick+0xec>)
 80023aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <HAL_InitTick+0xec>)
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_InitTick+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_InitTick+0xec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_InitTick+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023c8:	4817      	ldr	r0, [pc, #92]	@ (8002428 <HAL_InitTick+0xec>)
 80023ca:	f002 fff1 	bl	80053b0 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11b      	bne.n	8002414 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023dc:	4812      	ldr	r0, [pc, #72]	@ (8002428 <HAL_InitTick+0xec>)
 80023de:	f003 f837 	bl	8005450 <HAL_TIM_Base_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023f0:	2036      	movs	r0, #54	@ 0x36
 80023f2:	f001 f991 	bl	8003718 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d808      	bhi.n	800240e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	2036      	movs	r0, #54	@ 0x36
 8002402:	f001 f96d 	bl	80036e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <HAL_InitTick+0xf4>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e002      	b.n	8002414 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002418:	4618      	mov	r0, r3
 800241a:	3738      	adds	r7, #56	@ 0x38
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	431bde83 	.word	0x431bde83
 8002428:	2000059c 	.word	0x2000059c
 800242c:	40001000 	.word	0x40001000
 8002430:	20000028 	.word	0x20000028

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <NMI_Handler+0x4>

0800243c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <MemManage_Handler+0x4>

0800244c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <UsageFault_Handler+0x4>

0800245c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <TIM3_IRQHandler+0x10>)
 8002472:	f003 faf7 	bl	8005a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000678 	.word	0x20000678

08002480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <USART1_IRQHandler+0x10>)
 8002486:	f004 fcff 	bl	8006e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200006c0 	.word	0x200006c0

08002494 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <TIM6_DAC_IRQHandler+0x10>)
 800249a:	f003 fae3 	bl	8005a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000059c 	.word	0x2000059c

080024a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	e00a      	b.n	80024d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ba:	f3af 8000 	nop.w
 80024be:	4601      	mov	r1, r0
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	b2ca      	uxtb	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dbf0      	blt.n	80024ba <_read+0x12>
  }

  return len;
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800250a:	605a      	str	r2, [r3, #4]
  return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_isatty>:

int _isatty(int file)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	@ (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f008 ff1c 	bl	800b3b8 <__errno>
 8002580:	4603      	mov	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20020000 	.word	0x20020000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	200005e4 	.word	0x200005e4
 80025b4:	200051f0 	.word	0x200051f0

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b096      	sub	sp, #88	@ 0x58
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2220      	movs	r2, #32
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f008 fec7 	bl	800b3a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800261a:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <MX_TIM1_Init+0x13c>)
 800261c:	4a3f      	ldr	r2, [pc, #252]	@ (800271c <MX_TIM1_Init+0x140>)
 800261e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002620:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002622:	2253      	movs	r2, #83	@ 0x53
 8002624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002626:	4b3c      	ldr	r3, [pc, #240]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800262c:	4b3a      	ldr	r3, [pc, #232]	@ (8002718 <MX_TIM1_Init+0x13c>)
 800262e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002634:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800263a:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <MX_TIM1_Init+0x13c>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002646:	4834      	ldr	r0, [pc, #208]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002648:	f002 feb2 	bl	80053b0 <HAL_TIM_Base_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002652:	f7ff fb65 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800265c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002660:	4619      	mov	r1, r3
 8002662:	482d      	ldr	r0, [pc, #180]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002664:	f003 fc4c 	bl	8005f00 <HAL_TIM_ConfigClockSource>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800266e:	f7ff fb57 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002672:	4829      	ldr	r0, [pc, #164]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002674:	f002 ff5c 	bl	8005530 <HAL_TIM_PWM_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800267e:	f7ff fb4f 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800268e:	4619      	mov	r1, r3
 8002690:	4821      	ldr	r0, [pc, #132]	@ (8002718 <MX_TIM1_Init+0x13c>)
 8002692:	f004 f9a5 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800269c:	f7ff fb40 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a0:	2360      	movs	r3, #96	@ 0x60
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 80026a4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c2:	2200      	movs	r2, #0
 80026c4:	4619      	mov	r1, r3
 80026c6:	4814      	ldr	r0, [pc, #80]	@ (8002718 <MX_TIM1_Init+0x13c>)
 80026c8:	f003 fb58 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80026d2:	f7ff fb25 	bl	8001d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4807      	ldr	r0, [pc, #28]	@ (8002718 <MX_TIM1_Init+0x13c>)
 80026fa:	f004 f9ed 	bl	8006ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002704:	f7ff fb0c 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002708:	4803      	ldr	r0, [pc, #12]	@ (8002718 <MX_TIM1_Init+0x13c>)
 800270a:	f000 f959 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 800270e:	bf00      	nop
 8002710:	3758      	adds	r7, #88	@ 0x58
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200005e8 	.word	0x200005e8
 800271c:	40010000 	.word	0x40010000

08002720 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	@ 0x38
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
 800274c:	615a      	str	r2, [r3, #20]
 800274e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002750:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <MX_TIM2_Init+0xe8>)
 8002752:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <MX_TIM2_Init+0xe8>)
 800275a:	2253      	movs	r2, #83	@ 0x53
 800275c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <MX_TIM2_Init+0xe8>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <MX_TIM2_Init+0xe8>)
 8002766:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800276a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <MX_TIM2_Init+0xe8>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <MX_TIM2_Init+0xe8>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002778:	4823      	ldr	r0, [pc, #140]	@ (8002808 <MX_TIM2_Init+0xe8>)
 800277a:	f002 fe19 	bl	80053b0 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002784:	f7ff facc 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002792:	4619      	mov	r1, r3
 8002794:	481c      	ldr	r0, [pc, #112]	@ (8002808 <MX_TIM2_Init+0xe8>)
 8002796:	f003 fbb3 	bl	8005f00 <HAL_TIM_ConfigClockSource>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80027a0:	f7ff fabe 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027a4:	4818      	ldr	r0, [pc, #96]	@ (8002808 <MX_TIM2_Init+0xe8>)
 80027a6:	f002 fec3 	bl	8005530 <HAL_TIM_PWM_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027b0:	f7ff fab6 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	4619      	mov	r1, r3
 80027c2:	4811      	ldr	r0, [pc, #68]	@ (8002808 <MX_TIM2_Init+0xe8>)
 80027c4:	f004 f90c 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027ce:	f7ff faa7 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d2:	2360      	movs	r3, #96	@ 0x60
 80027d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80027d6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80027da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	4619      	mov	r1, r3
 80027ea:	4807      	ldr	r0, [pc, #28]	@ (8002808 <MX_TIM2_Init+0xe8>)
 80027ec:	f003 fac6 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027f6:	f7ff fa93 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027fa:	4803      	ldr	r0, [pc, #12]	@ (8002808 <MX_TIM2_Init+0xe8>)
 80027fc:	f000 f8e0 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 8002800:	bf00      	nop
 8002802:	3738      	adds	r7, #56	@ 0x38
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000630 	.word	0x20000630

0800280c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800281c:	463b      	mov	r3, r7
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002828:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <MX_TIM3_Init+0xa0>)
 800282a:	4a21      	ldr	r2, [pc, #132]	@ (80028b0 <MX_TIM3_Init+0xa4>)
 800282c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800282e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002830:	2247      	movs	r2, #71	@ 0x47
 8002832:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800283a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <MX_TIM3_Init+0xa0>)
 800283c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002840:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002842:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <MX_TIM3_Init+0xa0>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800284e:	4817      	ldr	r0, [pc, #92]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002850:	f002 ff90 	bl	8005774 <HAL_TIM_IC_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800285a:	f7ff fa61 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	4619      	mov	r1, r3
 800286c:	480f      	ldr	r0, [pc, #60]	@ (80028ac <MX_TIM3_Init+0xa0>)
 800286e:	f004 f8b7 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002878:	f7ff fa52 	bl	8001d20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002880:	2301      	movs	r3, #1
 8002882:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	4806      	ldr	r0, [pc, #24]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002894:	f003 f9d6 	bl	8005c44 <HAL_TIM_IC_ConfigChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800289e:	f7ff fa3f 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000678 	.word	0x20000678
 80028b0:	40000400 	.word	0x40000400

080028b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <HAL_TIM_Base_MspInit+0x64>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b14      	ldr	r3, [pc, #80]	@ (800291c <HAL_TIM_Base_MspInit+0x68>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	4a13      	ldr	r2, [pc, #76]	@ (800291c <HAL_TIM_Base_MspInit+0x68>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d6:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_TIM_Base_MspInit+0x68>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028e2:	e012      	b.n	800290a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d10d      	bne.n	800290a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_TIM_Base_MspInit+0x68>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a09      	ldr	r2, [pc, #36]	@ (800291c <HAL_TIM_Base_MspInit+0x68>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <HAL_TIM_Base_MspInit+0x68>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_TIM_IC_MspInit+0x94>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d133      	bne.n	80029aa <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <HAL_TIM_IC_MspInit+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_TIM_IC_MspInit+0x98>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_TIM_IC_MspInit+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_TIM_IC_MspInit+0x98>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <HAL_TIM_IC_MspInit+0x98>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <HAL_TIM_IC_MspInit+0x98>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800297a:	2340      	movs	r3, #64	@ 0x40
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800298a:	2302      	movs	r3, #2
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4809      	ldr	r0, [pc, #36]	@ (80029bc <HAL_TIM_IC_MspInit+0x9c>)
 8002996:	f000 ff5f 	bl	8003858 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2105      	movs	r1, #5
 800299e:	201d      	movs	r0, #29
 80029a0:	f000 fe9e 	bl	80036e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029a4:	201d      	movs	r0, #29
 80029a6:	f000 feb7 	bl	8003718 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	@ 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020800 	.word	0x40020800

080029c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a25      	ldr	r2, [pc, #148]	@ (8002a74 <HAL_TIM_MspPostInit+0xb4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d11f      	bne.n	8002a22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_TIM_MspPostInit+0xb8>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a23      	ldr	r2, [pc, #140]	@ (8002a78 <HAL_TIM_MspPostInit+0xb8>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b21      	ldr	r3, [pc, #132]	@ (8002a78 <HAL_TIM_MspPostInit+0xb8>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4818      	ldr	r0, [pc, #96]	@ (8002a7c <HAL_TIM_MspPostInit+0xbc>)
 8002a1c:	f000 ff1c 	bl	8003858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a20:	e023      	b.n	8002a6a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a2a:	d11e      	bne.n	8002a6a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_TIM_MspPostInit+0xb8>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	4a10      	ldr	r2, [pc, #64]	@ (8002a78 <HAL_TIM_MspPostInit+0xb8>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <HAL_TIM_MspPostInit+0xb8>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <HAL_TIM_MspPostInit+0xbc>)
 8002a66:	f000 fef7 	bl	8003858 <HAL_GPIO_Init>
}
 8002a6a:	bf00      	nop
 8002a6c:	3728      	adds	r7, #40	@ 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020000 	.word	0x40020000

08002a80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	@ (8002ad0 <MX_USART1_UART_Init+0x50>)
 8002a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab6:	4805      	ldr	r0, [pc, #20]	@ (8002acc <MX_USART1_UART_Init+0x4c>)
 8002ab8:	f004 f874 	bl	8006ba4 <HAL_UART_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ac2:	f7ff f92d 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200006c0 	.word	0x200006c0
 8002ad0:	40011000 	.word	0x40011000

08002ad4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <MX_USART2_UART_Init+0x50>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	f004 f84a 	bl	8006ba4 <HAL_UART_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b16:	f7ff f903 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000708 	.word	0x20000708
 8002b24:	40004400 	.word	0x40004400

08002b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a36      	ldr	r2, [pc, #216]	@ (8002c20 <HAL_UART_MspInit+0xf8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d135      	bne.n	8002bb6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	4a34      	ldr	r2, [pc, #208]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5a:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b94:	2307      	movs	r3, #7
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4822      	ldr	r0, [pc, #136]	@ (8002c28 <HAL_UART_MspInit+0x100>)
 8002ba0:	f000 fe5a 	bl	8003858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2105      	movs	r1, #5
 8002ba8:	2025      	movs	r0, #37	@ 0x25
 8002baa:	f000 fd99 	bl	80036e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bae:	2025      	movs	r0, #37	@ 0x25
 8002bb0:	f000 fdb2 	bl	8003718 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bb4:	e030      	b.n	8002c18 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <HAL_UART_MspInit+0x104>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d12b      	bne.n	8002c18 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bec:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_UART_MspInit+0xfc>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <HAL_UART_MspInit+0x100>)
 8002c14:	f000 fe20 	bl	8003858 <HAL_GPIO_Init>
}
 8002c18:	bf00      	nop
 8002c1a:	3730      	adds	r7, #48	@ 0x30
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40004400 	.word	0x40004400

08002c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c34:	f7ff fcc0 	bl	80025b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c38:	480c      	ldr	r0, [pc, #48]	@ (8002c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c3a:	490d      	ldr	r1, [pc, #52]	@ (8002c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c40:	e002      	b.n	8002c48 <LoopCopyDataInit>

08002c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c46:	3304      	adds	r3, #4

08002c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c4c:	d3f9      	bcc.n	8002c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c50:	4c0a      	ldr	r4, [pc, #40]	@ (8002c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c54:	e001      	b.n	8002c5a <LoopFillZerobss>

08002c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c58:	3204      	adds	r2, #4

08002c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c5c:	d3fb      	bcc.n	8002c56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f008 fbb1 	bl	800b3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c62:	f7fe fbf5 	bl	8001450 <main>
  bx  lr    
 8002c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c70:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c74:	0800d738 	.word	0x0800d738
  ldr r2, =_sbss
 8002c78:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c7c:	200051f0 	.word	0x200051f0

08002c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC_IRQHandler>
	...

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <HAL_Init+0x40>)
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <HAL_Init+0x40>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <HAL_Init+0x40>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 fd0c 	bl	80036ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb2:	200f      	movs	r0, #15
 8002cb4:	f7ff fb42 	bl	800233c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb8:	f7ff fb14 	bl	80022e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	2000002c 	.word	0x2000002c
 8002cec:	20000750 	.word	0x20000750

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000750 	.word	0x20000750

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000002c 	.word	0x2000002c

08002d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e033      	b.n	8002dce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe f85e 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d96:	f023 0302 	bic.w	r3, r3, #2
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fae8 	bl	8003378 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dbe:	e001      	b.n	8002dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Start+0x1a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0b2      	b.n	8002f58 <HAL_ADC_Start+0x180>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d018      	beq.n	8002e3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e18:	4b52      	ldr	r3, [pc, #328]	@ (8002f64 <HAL_ADC_Start+0x18c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	@ (8002f68 <HAL_ADC_Start+0x190>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9a      	lsrs	r2, r3, #18
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d17a      	bne.n	8002f3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e86:	d106      	bne.n	8002e96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	f023 0206 	bic.w	r2, r3, #6
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea4:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <HAL_ADC_Start+0x194>)
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d12a      	bne.n	8002f14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8002f70 <HAL_ADC_Start+0x198>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d015      	beq.n	8002ef4 <HAL_ADC_Start+0x11c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a29      	ldr	r2, [pc, #164]	@ (8002f74 <HAL_ADC_Start+0x19c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d105      	bne.n	8002ede <HAL_ADC_Start+0x106>
 8002ed2:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <HAL_ADC_Start+0x194>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	@ (8002f78 <HAL_ADC_Start+0x1a0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d136      	bne.n	8002f56 <HAL_ADC_Start+0x17e>
 8002ee8:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <HAL_ADC_Start+0x194>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d130      	bne.n	8002f56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d129      	bne.n	8002f56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e020      	b.n	8002f56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <HAL_ADC_Start+0x198>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11b      	bne.n	8002f56 <HAL_ADC_Start+0x17e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d114      	bne.n	8002f56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	e00b      	b.n	8002f56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	20000024 	.word	0x20000024
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	40012000 	.word	0x40012000
 8002f74:	40012100 	.word	0x40012100
 8002f78:	40012200 	.word	0x40012200

08002f7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Stop+0x16>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e021      	b.n	8002fd6 <HAL_ADC_Stop+0x5a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffe:	d113      	bne.n	8003028 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800300a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800300e:	d10b      	bne.n	8003028 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e063      	b.n	80030f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003028:	f7ff fe62 	bl	8002cf0 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800302e:	e021      	b.n	8003074 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003036:	d01d      	beq.n	8003074 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_ADC_PollForConversion+0x6c>
 800303e:	f7ff fe57 	bl	8002cf0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d212      	bcs.n	8003074 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d00b      	beq.n	8003074 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	f043 0204 	orr.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e03d      	b.n	80030f0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d1d6      	bne.n	8003030 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0212 	mvn.w	r2, #18
 800308a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d123      	bne.n	80030ee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11f      	bne.n	80030ee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d111      	bne.n	80030ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x1c>
 800312c:	2302      	movs	r3, #2
 800312e:	e113      	b.n	8003358 <HAL_ADC_ConfigChannel+0x244>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d925      	bls.n	800318c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	3b1e      	subs	r3, #30
 8003156:	2207      	movs	r2, #7
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43da      	mvns	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	400a      	ands	r2, r1
 8003164:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68d9      	ldr	r1, [r3, #12]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	4603      	mov	r3, r0
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4403      	add	r3, r0
 800317e:	3b1e      	subs	r3, #30
 8003180:	409a      	lsls	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e022      	b.n	80031d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6919      	ldr	r1, [r3, #16]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	2207      	movs	r2, #7
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	400a      	ands	r2, r1
 80031ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4403      	add	r3, r0
 80031c8:	409a      	lsls	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d824      	bhi.n	8003224 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	3b05      	subs	r3, #5
 80031ec:	221f      	movs	r2, #31
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43da      	mvns	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	400a      	ands	r2, r1
 80031fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	4618      	mov	r0, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	3b05      	subs	r3, #5
 8003216:	fa00 f203 	lsl.w	r2, r0, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34
 8003222:	e04c      	b.n	80032be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d824      	bhi.n	8003276 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b23      	subs	r3, #35	@ 0x23
 800323e:	221f      	movs	r2, #31
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43da      	mvns	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	400a      	ands	r2, r1
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	4618      	mov	r0, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b23      	subs	r3, #35	@ 0x23
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
 8003274:	e023      	b.n	80032be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	3b41      	subs	r3, #65	@ 0x41
 8003288:	221f      	movs	r2, #31
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43da      	mvns	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	400a      	ands	r2, r1
 8003296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	3b41      	subs	r3, #65	@ 0x41
 80032b2:	fa00 f203 	lsl.w	r2, r0, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032be:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <HAL_ADC_ConfigChannel+0x250>)
 80032c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <HAL_ADC_ConfigChannel+0x254>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10f      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1d8>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b12      	cmp	r3, #18
 80032d2:	d10b      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <HAL_ADC_ConfigChannel+0x254>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d12b      	bne.n	800334e <HAL_ADC_ConfigChannel+0x23a>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_ADC_ConfigChannel+0x258>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x1f4>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b11      	cmp	r3, #17
 8003306:	d122      	bne.n	800334e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_ADC_ConfigChannel+0x258>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d111      	bne.n	800334e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332a:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_ADC_ConfigChannel+0x25c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a11      	ldr	r2, [pc, #68]	@ (8003374 <HAL_ADC_ConfigChannel+0x260>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9a      	lsrs	r2, r3, #18
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003340:	e002      	b.n	8003348 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3b01      	subs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f9      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40012300 	.word	0x40012300
 8003368:	40012000 	.word	0x40012000
 800336c:	10000012 	.word	0x10000012
 8003370:	20000024 	.word	0x20000024
 8003374:	431bde83 	.word	0x431bde83

08003378 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003380:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <ADC_Init+0x1f0>)
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	021a      	lsls	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	4a58      	ldr	r2, [pc, #352]	@ (800356c <ADC_Init+0x1f4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800341e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e00f      	b.n	8003476 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003474:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0202 	bic.w	r2, r2, #2
 8003484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6899      	ldr	r1, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7e1b      	ldrb	r3, [r3, #24]
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	3b01      	subs	r3, #1
 80034d0:	035a      	lsls	r2, r3, #13
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	e007      	b.n	80034ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	3b01      	subs	r3, #1
 8003508:	051a      	lsls	r2, r3, #20
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800352e:	025a      	lsls	r2, r3, #9
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	029a      	lsls	r2, r3, #10
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012300 	.word	0x40012300
 800356c:	0f000001 	.word	0x0f000001

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4907      	ldr	r1, [pc, #28]	@ (800360c <__NVIC_EnableIRQ+0x38>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	@ (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	@ (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
         );
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	@ 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ff4c 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f2:	f7ff ff61 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 80036f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	6978      	ldr	r0, [r7, #20]
 80036fe:	f7ff ffb1 	bl	8003664 <NVIC_EncodePriority>
 8003702:	4602      	mov	r2, r0
 8003704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff80 	bl	8003610 <__NVIC_SetPriority>
}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff ff54 	bl	80035d4 <__NVIC_EnableIRQ>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003742:	f7ff fad5 	bl	8002cf0 <HAL_GetTick>
 8003746:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e052      	b.n	800380c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0216 	bic.w	r2, r2, #22
 8003774:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003784:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_DMA_Abort+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0208 	bic.w	r2, r2, #8
 80037a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b6:	e013      	b.n	80037e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b8:	f7ff fa9a 	bl	8002cf0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d90c      	bls.n	80037e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2203      	movs	r2, #3
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e015      	b.n	800380c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e4      	bne.n	80037b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f2:	223f      	movs	r2, #63	@ 0x3f
 80037f4:	409a      	lsls	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e00c      	b.n	800384c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2205      	movs	r2, #5
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	@ 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	e165      	b.n	8003b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003874:	2201      	movs	r2, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	f040 8154 	bne.w	8003b3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d005      	beq.n	80038aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d130      	bne.n	800390c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e0:	2201      	movs	r2, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 0201 	and.w	r2, r3, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b03      	cmp	r3, #3
 8003916:	d017      	beq.n	8003948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d123      	bne.n	800399c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	08da      	lsrs	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3208      	adds	r2, #8
 8003996:	69b9      	ldr	r1, [r7, #24]
 8003998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80ae 	beq.w	8003b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b58 <HAL_GPIO_Init+0x300>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b58 <HAL_GPIO_Init+0x300>)
 80039e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003b58 <HAL_GPIO_Init+0x300>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fa:	4a58      	ldr	r2, [pc, #352]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	3302      	adds	r3, #2
 8003a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	220f      	movs	r2, #15
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4f      	ldr	r2, [pc, #316]	@ (8003b60 <HAL_GPIO_Init+0x308>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d025      	beq.n	8003a72 <HAL_GPIO_Init+0x21a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4e      	ldr	r2, [pc, #312]	@ (8003b64 <HAL_GPIO_Init+0x30c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <HAL_GPIO_Init+0x216>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4d      	ldr	r2, [pc, #308]	@ (8003b68 <HAL_GPIO_Init+0x310>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d019      	beq.n	8003a6a <HAL_GPIO_Init+0x212>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4c      	ldr	r2, [pc, #304]	@ (8003b6c <HAL_GPIO_Init+0x314>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	@ (8003b70 <HAL_GPIO_Init+0x318>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_GPIO_Init+0x20a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4a      	ldr	r2, [pc, #296]	@ (8003b74 <HAL_GPIO_Init+0x31c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <HAL_GPIO_Init+0x206>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a49      	ldr	r2, [pc, #292]	@ (8003b78 <HAL_GPIO_Init+0x320>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_GPIO_Init+0x202>
 8003a56:	2306      	movs	r3, #6
 8003a58:	e00c      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a5a:	2307      	movs	r3, #7
 8003a5c:	e00a      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e008      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e004      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_GPIO_Init+0x21c>
 8003a72:	2300      	movs	r3, #0
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f002 0203 	and.w	r2, r2, #3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a84:	4935      	ldr	r1, [pc, #212]	@ (8003b5c <HAL_GPIO_Init+0x304>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a92:	4b3a      	ldr	r3, [pc, #232]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab6:	4a31      	ldr	r2, [pc, #196]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003abc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae0:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae6:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b10:	4b1a      	ldr	r3, [pc, #104]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b34:	4a11      	ldr	r2, [pc, #68]	@ (8003b7c <HAL_GPIO_Init+0x324>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f ae96 	bls.w	8003874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3724      	adds	r7, #36	@ 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40021400 	.word	0x40021400
 8003b78:	40021800 	.word	0x40021800
 8003b7c:	40013c00 	.word	0x40013c00

08003b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	887b      	ldrh	r3, [r7, #2]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e001      	b.n	8003ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc0:	787b      	ldrb	r3, [r7, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bcc:	e003      	b.n	8003bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	041a      	lsls	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	619a      	str	r2, [r3, #24]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e12b      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fbbe 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	@ 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c48:	f000 fe8a 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a81      	ldr	r2, [pc, #516]	@ (8003e58 <HAL_I2C_Init+0x274>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d807      	bhi.n	8003c68 <HAL_I2C_Init+0x84>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a80      	ldr	r2, [pc, #512]	@ (8003e5c <HAL_I2C_Init+0x278>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e006      	b.n	8003c76 <HAL_I2C_Init+0x92>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e60 <HAL_I2C_Init+0x27c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0e7      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a78      	ldr	r2, [pc, #480]	@ (8003e64 <HAL_I2C_Init+0x280>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a6a      	ldr	r2, [pc, #424]	@ (8003e58 <HAL_I2C_Init+0x274>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_I2C_Init+0xd4>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	e009      	b.n	8003ccc <HAL_I2C_Init+0xe8>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	4a69      	ldr	r2, [pc, #420]	@ (8003e68 <HAL_I2C_Init+0x284>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	3301      	adds	r3, #1
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	495c      	ldr	r1, [pc, #368]	@ (8003e58 <HAL_I2C_Init+0x274>)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d819      	bhi.n	8003d20 <HAL_I2C_Init+0x13c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e59      	subs	r1, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d00:	400b      	ands	r3, r1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_I2C_Init+0x138>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e59      	subs	r1, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	e051      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e04f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <HAL_I2C_Init+0x168>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e012      	b.n	8003d72 <HAL_I2C_Init+0x18e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	0099      	lsls	r1, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x196>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e022      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10e      	bne.n	8003da0 <HAL_I2C_Init+0x1bc>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e58      	subs	r0, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	440b      	add	r3, r1
 8003d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9e:	e00f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	0099      	lsls	r1, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	6809      	ldr	r1, [r1, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6911      	ldr	r1, [r2, #16]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	000186a0 	.word	0x000186a0
 8003e5c:	001e847f 	.word	0x001e847f
 8003e60:	003d08ff 	.word	0x003d08ff
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	10624dd3 	.word	0x10624dd3

08003e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	461a      	mov	r2, r3
 8003e78:	460b      	mov	r3, r1
 8003e7a:	817b      	strh	r3, [r7, #10]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e80:	f7fe ff36 	bl	8002cf0 <HAL_GetTick>
 8003e84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	f040 80e0 	bne.w	8004054 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2319      	movs	r3, #25
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4970      	ldr	r1, [pc, #448]	@ (8004060 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa92 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e0d3      	b.n	8004056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2C_Master_Transmit+0x50>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0cc      	b.n	8004056 <HAL_I2C_Master_Transmit+0x1ea>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d007      	beq.n	8003ee2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2221      	movs	r2, #33	@ 0x21
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2210      	movs	r2, #16
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	893a      	ldrh	r2, [r7, #8]
 8003f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a50      	ldr	r2, [pc, #320]	@ (8004064 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f24:	8979      	ldrh	r1, [r7, #10]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f9ca 	bl	80042c4 <I2C_MasterRequestWrite>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e08d      	b.n	8004056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f50:	e066      	b.n	8004020 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	6a39      	ldr	r1, [r7, #32]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fb50 	bl	80045fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d107      	bne.n	8003f7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06b      	b.n	8004056 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_I2C_Master_Transmit+0x188>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d017      	beq.n	8003ff4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	6a39      	ldr	r1, [r7, #32]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fb47 	bl	800468c <I2C_WaitOnBTFFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	2b04      	cmp	r3, #4
 800400a:	d107      	bne.n	800401c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e01a      	b.n	8004056 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d194      	bne.n	8003f52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	00100002 	.word	0x00100002
 8004064:	ffff0000 	.word	0xffff0000

08004068 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	@ 0x28
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	460b      	mov	r3, r1
 8004076:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004078:	f7fe fe3a 	bl	8002cf0 <HAL_GetTick>
 800407c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	f040 8111 	bne.w	80042b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2319      	movs	r3, #25
 8004096:	2201      	movs	r2, #1
 8004098:	4988      	ldr	r1, [pc, #544]	@ (80042bc <HAL_I2C_IsDeviceReady+0x254>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f994 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	e104      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_I2C_IsDeviceReady+0x50>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e0fd      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d007      	beq.n	80040de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2224      	movs	r2, #36	@ 0x24
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a70      	ldr	r2, [pc, #448]	@ (80042c0 <HAL_I2C_IsDeviceReady+0x258>)
 8004100:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004110:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f952 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004138:	d103      	bne.n	8004142 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004140:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0b6      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004154:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004156:	f7fe fdcb 	bl	8002cf0 <HAL_GetTick>
 800415a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800418a:	e025      	b.n	80041d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fe fdb0 	bl	8002cf0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <HAL_I2C_IsDeviceReady+0x13a>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	22a0      	movs	r2, #160	@ 0xa0
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80041e2:	d005      	beq.n	80041f0 <HAL_I2C_IsDeviceReady+0x188>
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <HAL_I2C_IsDeviceReady+0x188>
 80041ea:	7dbb      	ldrb	r3, [r7, #22]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0cd      	beq.n	800418c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d129      	bne.n	800425a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004214:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2319      	movs	r3, #25
 8004232:	2201      	movs	r2, #1
 8004234:	4921      	ldr	r1, [pc, #132]	@ (80042bc <HAL_I2C_IsDeviceReady+0x254>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8c6 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e036      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e02c      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004268:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004272:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2319      	movs	r3, #25
 800427a:	2201      	movs	r2, #1
 800427c:	490f      	ldr	r1, [pc, #60]	@ (80042bc <HAL_I2C_IsDeviceReady+0x254>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f8a2 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e012      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	3301      	adds	r3, #1
 8004292:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	f4ff af32 	bcc.w	8004102 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	00100002 	.word	0x00100002
 80042c0:	ffff0000 	.word	0xffff0000

080042c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	460b      	mov	r3, r1
 80042d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d006      	beq.n	80042ee <I2C_MasterRequestWrite+0x2a>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d003      	beq.n	80042ee <I2C_MasterRequestWrite+0x2a>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042ec:	d108      	bne.n	8004300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e00b      	b.n	8004318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004304:	2b12      	cmp	r3, #18
 8004306:	d107      	bne.n	8004318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f84f 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433e:	d103      	bne.n	8004348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e035      	b.n	80043b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004354:	d108      	bne.n	8004368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004356:	897b      	ldrh	r3, [r7, #10]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004364:	611a      	str	r2, [r3, #16]
 8004366:	e01b      	b.n	80043a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004368:	897b      	ldrh	r3, [r7, #10]
 800436a:	11db      	asrs	r3, r3, #7
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0306 	and.w	r3, r3, #6
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f063 030f 	orn	r3, r3, #15
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	490e      	ldr	r1, [pc, #56]	@ (80043c0 <I2C_MasterRequestWrite+0xfc>)
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f898 	bl	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e010      	b.n	80043b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	4907      	ldr	r1, [pc, #28]	@ (80043c4 <I2C_MasterRequestWrite+0x100>)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f888 	bl	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	00010008 	.word	0x00010008
 80043c4:	00010002 	.word	0x00010002

080043c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d8:	e048      	b.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043e0:	d044      	beq.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fe fc85 	bl	8002cf0 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d139      	bne.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10d      	bne.n	800441e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	43da      	mvns	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	e00c      	b.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	43da      	mvns	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d116      	bne.n	800446c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e023      	b.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10d      	bne.n	8004492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	e00c      	b.n	80044ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d093      	beq.n	80043da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ca:	e071      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044da:	d123      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e067      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800452a:	d041      	beq.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452c:	f7fe fbe0 	bl	8002cf0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d136      	bne.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10c      	bne.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	43da      	mvns	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4013      	ands	r3, r2
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf14      	ite	ne
 800455e:	2301      	movne	r3, #1
 8004560:	2300      	moveq	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e00b      	b.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e021      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10c      	bne.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e00b      	b.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f47f af6d 	bne.w	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004608:	e034      	b.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f886 	bl	800471c <I2C_IsAcknowledgeFailed>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e034      	b.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004620:	d028      	beq.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fe fb65 	bl	8002cf0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11d      	bne.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d016      	beq.n	8004674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e007      	b.n	8004684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d1c3      	bne.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004698:	e034      	b.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f83e 	bl	800471c <I2C_IsAcknowledgeFailed>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e034      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046b0:	d028      	beq.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fe fb1d 	bl	8002cf0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11d      	bne.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d016      	beq.n	8004704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e007      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d1c3      	bne.n	800469a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004732:	d11b      	bne.n	800476c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800473c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	f043 0204 	orr.w	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0cc      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b68      	ldr	r3, [pc, #416]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d90c      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b65      	ldr	r3, [pc, #404]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b63      	ldr	r3, [pc, #396]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b8      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d0:	4b59      	ldr	r3, [pc, #356]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a58      	ldr	r2, [pc, #352]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e8:	4b53      	ldr	r3, [pc, #332]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a52      	ldr	r2, [pc, #328]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b50      	ldr	r3, [pc, #320]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	494d      	ldr	r1, [pc, #308]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d044      	beq.n	800489c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b47      	ldr	r3, [pc, #284]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d119      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e07f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d003      	beq.n	800483a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	2b03      	cmp	r3, #3
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b3f      	ldr	r3, [pc, #252]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e067      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485a:	4b37      	ldr	r3, [pc, #220]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0203 	bic.w	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4934      	ldr	r1, [pc, #208]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800486c:	f7fe fa40 	bl	8002cf0 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	e00a      	b.n	800488a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004874:	f7fe fa3c 	bl	8002cf0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e04f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	4b2b      	ldr	r3, [pc, #172]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 020c 	and.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	429a      	cmp	r2, r3
 800489a:	d1eb      	bne.n	8004874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489c:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d20c      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b22      	ldr	r3, [pc, #136]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b20      	ldr	r3, [pc, #128]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e032      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4916      	ldr	r1, [pc, #88]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ee:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	490e      	ldr	r1, [pc, #56]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004902:	f000 f887 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	490a      	ldr	r1, [pc, #40]	@ (800493c <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	5ccb      	ldrb	r3, [r1, r3]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a09      	ldr	r2, [pc, #36]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491e:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd fd0a 	bl	800233c <HAL_InitTick>

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023c00 	.word	0x40023c00
 8004938:	40023800 	.word	0x40023800
 800493c:	0800d6dc 	.word	0x0800d6dc
 8004940:	20000024 	.word	0x20000024
 8004944:	20000028 	.word	0x20000028

08004948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	@ (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000024 	.word	0x20000024

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	0800d6ec 	.word	0x0800d6ec

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800498c:	f7ff ffdc 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	0b5b      	lsrs	r3, r3, #13
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	@ (80049ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	0800d6ec 	.word	0x0800d6ec

080049b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	220f      	movs	r2, #15
 80049be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049c0:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <HAL_RCC_GetClockConfig+0x5c>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0203 	and.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <HAL_RCC_GetClockConfig+0x5c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049d8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a0c <HAL_RCC_GetClockConfig+0x5c>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049e4:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <HAL_RCC_GetClockConfig+0x5c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049f2:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_RCC_GetClockConfig+0x60>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40023c00 	.word	0x40023c00

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b0ae      	sub	sp, #184	@ 0xb8
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3a:	4bcb      	ldr	r3, [pc, #812]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	f200 8206 	bhi.w	8004e54 <HAL_RCC_GetSysClockFreq+0x440>
 8004a48:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004e55 	.word	0x08004e55
 8004a58:	08004e55 	.word	0x08004e55
 8004a5c:	08004e55 	.word	0x08004e55
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004e55 	.word	0x08004e55
 8004a68:	08004e55 	.word	0x08004e55
 8004a6c:	08004e55 	.word	0x08004e55
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004e55 	.word	0x08004e55
 8004a78:	08004e55 	.word	0x08004e55
 8004a7c:	08004e55 	.word	0x08004e55
 8004a80:	08004c85 	.word	0x08004c85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4bb9      	ldr	r3, [pc, #740]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004a8a:	e1e7      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8c:	4bb8      	ldr	r3, [pc, #736]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a92:	e1e3      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a94:	4bb4      	ldr	r3, [pc, #720]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa0:	4bb1      	ldr	r3, [pc, #708]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d071      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4bae      	ldr	r3, [pc, #696]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ab8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	0159      	lsls	r1, r3, #5
 8004ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae4:	0150      	lsls	r0, r2, #5
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4621      	mov	r1, r4
 8004aec:	1a51      	subs	r1, r2, r1
 8004aee:	6439      	str	r1, [r7, #64]	@ 0x40
 8004af0:	4629      	mov	r1, r5
 8004af2:	eb63 0301 	sbc.w	r3, r3, r1
 8004af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b04:	4649      	mov	r1, r9
 8004b06:	018b      	lsls	r3, r1, #6
 8004b08:	4641      	mov	r1, r8
 8004b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b0e:	4641      	mov	r1, r8
 8004b10:	018a      	lsls	r2, r1, #6
 8004b12:	4641      	mov	r1, r8
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b18:	4649      	mov	r1, r9
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4641      	mov	r1, r8
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4622      	mov	r2, r4
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b46:	462b      	mov	r3, r5
 8004b48:	460a      	mov	r2, r1
 8004b4a:	eb42 0303 	adc.w	r3, r2, r3
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	024b      	lsls	r3, r1, #9
 8004b60:	4621      	mov	r1, r4
 8004b62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b66:	4621      	mov	r1, r4
 8004b68:	024a      	lsls	r2, r1, #9
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b80:	f7fb ff8c 	bl	8000a9c <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b8e:	e067      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b75      	ldr	r3, [pc, #468]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004baa:	2300      	movs	r3, #0
 8004bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	0159      	lsls	r1, r3, #5
 8004bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc4:	0150      	lsls	r0, r2, #5
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4621      	mov	r1, r4
 8004bcc:	1a51      	subs	r1, r2, r1
 8004bce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004be4:	4649      	mov	r1, r9
 8004be6:	018b      	lsls	r3, r1, #6
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bee:	4641      	mov	r1, r8
 8004bf0:	018a      	lsls	r2, r1, #6
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c12:	4692      	mov	sl, r2
 8004c14:	469b      	mov	fp, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	eb1a 0303 	adds.w	r3, sl, r3
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	462b      	mov	r3, r5
 8004c20:	eb4b 0303 	adc.w	r3, fp, r3
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c32:	4629      	mov	r1, r5
 8004c34:	028b      	lsls	r3, r1, #10
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	028a      	lsls	r2, r1, #10
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c48:	2200      	movs	r2, #0
 8004c4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c52:	f7fb ff23 	bl	8000a9c <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c60:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c82:	e0eb      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c84:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c90:	4b35      	ldr	r3, [pc, #212]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d06b      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9c:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cb8:	4622      	mov	r2, r4
 8004cba:	462b      	mov	r3, r5
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	0159      	lsls	r1, r3, #5
 8004cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cca:	0150      	lsls	r0, r2, #5
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	1a51      	subs	r1, r2, r1
 8004cd4:	61b9      	str	r1, [r7, #24]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cea:	4659      	mov	r1, fp
 8004cec:	018b      	lsls	r3, r1, #6
 8004cee:	4651      	mov	r1, sl
 8004cf0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	018a      	lsls	r2, r1, #6
 8004cf8:	4651      	mov	r1, sl
 8004cfa:	ebb2 0801 	subs.w	r8, r2, r1
 8004cfe:	4659      	mov	r1, fp
 8004d00:	eb63 0901 	sbc.w	r9, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d18:	4690      	mov	r8, r2
 8004d1a:	4699      	mov	r9, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	eb18 0303 	adds.w	r3, r8, r3
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	462b      	mov	r3, r5
 8004d26:	eb49 0303 	adc.w	r3, r9, r3
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d38:	4629      	mov	r1, r5
 8004d3a:	024b      	lsls	r3, r1, #9
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d42:	4621      	mov	r1, r4
 8004d44:	024a      	lsls	r2, r1, #9
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d4e:	2200      	movs	r2, #0
 8004d50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d58:	f7fb fea0 	bl	8000a9c <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d66:	e065      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x420>
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d74:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4611      	mov	r1, r2
 8004d80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d84:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d86:	2300      	movs	r3, #0
 8004d88:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d8e:	4642      	mov	r2, r8
 8004d90:	464b      	mov	r3, r9
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	0159      	lsls	r1, r3, #5
 8004d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da0:	0150      	lsls	r0, r2, #5
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4641      	mov	r1, r8
 8004da8:	1a51      	subs	r1, r2, r1
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	4649      	mov	r1, r9
 8004dae:	eb63 0301 	sbc.w	r3, r3, r1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	018b      	lsls	r3, r1, #6
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dca:	4651      	mov	r1, sl
 8004dcc:	018a      	lsls	r2, r1, #6
 8004dce:	4651      	mov	r1, sl
 8004dd0:	1a54      	subs	r4, r2, r1
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	eb63 0501 	sbc.w	r5, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	00eb      	lsls	r3, r5, #3
 8004de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de6:	00e2      	lsls	r2, r4, #3
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	18e3      	adds	r3, r4, r3
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	464b      	mov	r3, r9
 8004df4:	eb45 0303 	adc.w	r3, r5, r3
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e06:	4629      	mov	r1, r5
 8004e08:	028b      	lsls	r3, r1, #10
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e10:	4621      	mov	r1, r4
 8004e12:	028a      	lsls	r2, r1, #10
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e26:	f7fb fe39 	bl	8000a9c <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4613      	mov	r3, r2
 8004e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e34:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	0f1b      	lsrs	r3, r3, #28
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	37b8      	adds	r7, #184	@ 0xb8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e28d      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8083 	beq.w	8004f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e94:	4b94      	ldr	r3, [pc, #592]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d019      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ea0:	4b91      	ldr	r3, [pc, #580]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004eac:	4b8e      	ldr	r3, [pc, #568]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b8b      	ldr	r3, [pc, #556]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b88      	ldr	r3, [pc, #544]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b84      	ldr	r3, [pc, #528]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x124>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e25a      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x90>
 8004ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7b      	ldr	r2, [pc, #492]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xcc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0xb4>
 8004f0e:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a75      	ldr	r2, [pc, #468]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b73      	ldr	r3, [pc, #460]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a72      	ldr	r2, [pc, #456]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xcc>
 8004f28:	4b6f      	ldr	r3, [pc, #444]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b6c      	ldr	r3, [pc, #432]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6b      	ldr	r2, [pc, #428]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd fed2 	bl	8002cf0 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd fece 	bl	8002cf0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e21f      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xdc>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fd febe 	bl	8002cf0 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd feba 	bl	8002cf0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e20b      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b57      	ldr	r3, [pc, #348]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x104>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d06f      	beq.n	8005086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fa6:	4b50      	ldr	r3, [pc, #320]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d105      	bne.n	8004fca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b47      	ldr	r3, [pc, #284]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b41      	ldr	r3, [pc, #260]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x186>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1d3      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4937      	ldr	r1, [pc, #220]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b34      	ldr	r3, [pc, #208]	@ (80050ec <HAL_RCC_OscConfig+0x278>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fd fe67 	bl	8002cf0 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fd fe63 	bl	8002cf0 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1b4      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b28      	ldr	r3, [pc, #160]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4925      	ldr	r1, [pc, #148]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <HAL_RCC_OscConfig+0x278>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fd fe46 	bl	8002cf0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fd fe42 	bl	8002cf0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e193      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d036      	beq.n	8005100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <HAL_RCC_OscConfig+0x27c>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd fe26 	bl	8002cf0 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fd fe22 	bl	8002cf0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e173      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x234>
 80050c6:	e01b      	b.n	8005100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_RCC_OscConfig+0x27c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7fd fe0f 	bl	8002cf0 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e00e      	b.n	80050f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fd fe0b 	bl	8002cf0 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d907      	bls.n	80050f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e15c      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
 80050e8:	40023800 	.word	0x40023800
 80050ec:	42470000 	.word	0x42470000
 80050f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ea      	bne.n	80050d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8097 	beq.w	800523c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005112:	4b83      	ldr	r3, [pc, #524]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	4a7e      	ldr	r2, [pc, #504]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512c:	6413      	str	r3, [r2, #64]	@ 0x40
 800512e:	4b7c      	ldr	r3, [pc, #496]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513e:	4b79      	ldr	r3, [pc, #484]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d118      	bne.n	800517c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514a:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a75      	ldr	r2, [pc, #468]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005156:	f7fd fdcb 	bl	8002cf0 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7fd fdc7 	bl	8002cf0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e118      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b6c      	ldr	r3, [pc, #432]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x31e>
 8005184:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005188:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x358>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x340>
 800519a:	4b61      	ldr	r3, [pc, #388]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	4a60      	ldr	r2, [pc, #384]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0x358>
 80051b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	4a59      	ldr	r2, [pc, #356]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c0:	4b57      	ldr	r3, [pc, #348]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	4a56      	ldr	r2, [pc, #344]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051c6:	f023 0304 	bic.w	r3, r3, #4
 80051ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fd fd8c 	bl	8002cf0 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fd fd88 	bl	8002cf0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0d7      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <HAL_RCC_OscConfig+0x368>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fd fd76 	bl	8002cf0 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fd fd72 	bl	8002cf0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0c1      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521e:	4b40      	ldr	r3, [pc, #256]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ee      	bne.n	8005208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80ad 	beq.w	80053a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005246:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d060      	beq.n	8005314 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d145      	bne.n	80052e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b33      	ldr	r3, [pc, #204]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd fd46 	bl	8002cf0 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005268:	f7fd fd42 	bl	8002cf0 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e093      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	491b      	ldr	r1, [pc, #108]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fd fd17 	bl	8002cf0 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fd fd13 	bl	8002cf0 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e064      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x452>
 80052e4:	e05c      	b.n	80053a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd fd00 	bl	8002cf0 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fd fcfc 	bl	8002cf0 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e04d      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x480>
 8005312:	e045      	b.n	80053a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e040      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
 8005320:	40023800 	.word	0x40023800
 8005324:	40007000 	.word	0x40007000
 8005328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_RCC_OscConfig+0x538>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d030      	beq.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d129      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d122      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005364:	4293      	cmp	r3, r2
 8005366:	d119      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	3b01      	subs	r3, #1
 8005376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d10f      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800

080053b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e041      	b.n	8005446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fd fa6c 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 feb0 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d001      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e04e      	b.n	8005506 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a23      	ldr	r2, [pc, #140]	@ (8005514 <HAL_TIM_Base_Start_IT+0xc4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d022      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005492:	d01d      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	@ (8005518 <HAL_TIM_Base_Start_IT+0xc8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	@ (800551c <HAL_TIM_Base_Start_IT+0xcc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005520 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <HAL_TIM_Base_Start_IT+0xd4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	@ (8005528 <HAL_TIM_Base_Start_IT+0xd8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x80>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a18      	ldr	r2, [pc, #96]	@ (800552c <HAL_TIM_Base_Start_IT+0xdc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d010      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	e007      	b.n	8005504 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40010400 	.word	0x40010400
 8005528:	40014000 	.word	0x40014000
 800552c:	40001800 	.word	0x40001800

08005530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e041      	b.n	80055c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f839 	bl	80055ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 fdf0 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start+0x24>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e022      	b.n	800564e <HAL_TIM_PWM_Start+0x6a>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d109      	bne.n	8005622 <HAL_TIM_PWM_Start+0x3e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e015      	b.n	800564e <HAL_TIM_PWM_Start+0x6a>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d109      	bne.n	800563c <HAL_TIM_PWM_Start+0x58>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e008      	b.n	800564e <HAL_TIM_PWM_Start+0x6a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	bf14      	ite	ne
 8005648:	2301      	movne	r3, #1
 800564a:	2300      	moveq	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07c      	b.n	8005750 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_TIM_PWM_Start+0x82>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005664:	e013      	b.n	800568e <HAL_TIM_PWM_Start+0xaa>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start+0x92>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005674:	e00b      	b.n	800568e <HAL_TIM_PWM_Start+0xaa>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0xa2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005684:	e003      	b.n	800568e <HAL_TIM_PWM_Start+0xaa>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2201      	movs	r2, #1
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f001 f97c 	bl	8006994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005758 <HAL_TIM_PWM_Start+0x174>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_PWM_Start+0xcc>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2c      	ldr	r2, [pc, #176]	@ (800575c <HAL_TIM_PWM_Start+0x178>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d101      	bne.n	80056b4 <HAL_TIM_PWM_Start+0xd0>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <HAL_TIM_PWM_Start+0xd2>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a22      	ldr	r2, [pc, #136]	@ (8005758 <HAL_TIM_PWM_Start+0x174>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d022      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056dc:	d01d      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005760 <HAL_TIM_PWM_Start+0x17c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005764 <HAL_TIM_PWM_Start+0x180>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005768 <HAL_TIM_PWM_Start+0x184>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a16      	ldr	r2, [pc, #88]	@ (800575c <HAL_TIM_PWM_Start+0x178>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a18      	ldr	r2, [pc, #96]	@ (800576c <HAL_TIM_PWM_Start+0x188>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIM_PWM_Start+0x136>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a16      	ldr	r2, [pc, #88]	@ (8005770 <HAL_TIM_PWM_Start+0x18c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d111      	bne.n	800573e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d010      	beq.n	800574e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	e007      	b.n	800574e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800

08005774 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e041      	b.n	800580a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd f8c0 	bl	8002920 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fcce 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <HAL_TIM_IC_Start_IT+0x1e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e013      	b.n	800585a <HAL_TIM_IC_Start_IT+0x46>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d104      	bne.n	8005842 <HAL_TIM_IC_Start_IT+0x2e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e00b      	b.n	800585a <HAL_TIM_IC_Start_IT+0x46>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d104      	bne.n	8005852 <HAL_TIM_IC_Start_IT+0x3e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e003      	b.n	800585a <HAL_TIM_IC_Start_IT+0x46>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005858:	b2db      	uxtb	r3, r3
 800585a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_TIM_IC_Start_IT+0x58>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e013      	b.n	8005894 <HAL_TIM_IC_Start_IT+0x80>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d104      	bne.n	800587c <HAL_TIM_IC_Start_IT+0x68>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e00b      	b.n	8005894 <HAL_TIM_IC_Start_IT+0x80>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b08      	cmp	r3, #8
 8005880:	d104      	bne.n	800588c <HAL_TIM_IC_Start_IT+0x78>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e003      	b.n	8005894 <HAL_TIM_IC_Start_IT+0x80>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005892:	b2db      	uxtb	r3, r3
 8005894:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d102      	bne.n	80058a2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800589c:	7b7b      	ldrb	r3, [r7, #13]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d001      	beq.n	80058a6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0cc      	b.n	8005a40 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_IC_Start_IT+0xa2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058b4:	e013      	b.n	80058de <HAL_TIM_IC_Start_IT+0xca>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_IC_Start_IT+0xb2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c4:	e00b      	b.n	80058de <HAL_TIM_IC_Start_IT+0xca>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_IC_Start_IT+0xc2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d4:	e003      	b.n	80058de <HAL_TIM_IC_Start_IT+0xca>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_IC_Start_IT+0xda>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ec:	e013      	b.n	8005916 <HAL_TIM_IC_Start_IT+0x102>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_IC_Start_IT+0xea>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058fc:	e00b      	b.n	8005916 <HAL_TIM_IC_Start_IT+0x102>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d104      	bne.n	800590e <HAL_TIM_IC_Start_IT+0xfa>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800590c:	e003      	b.n	8005916 <HAL_TIM_IC_Start_IT+0x102>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d841      	bhi.n	80059a0 <HAL_TIM_IC_Start_IT+0x18c>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <HAL_TIM_IC_Start_IT+0x110>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005959 	.word	0x08005959
 8005928:	080059a1 	.word	0x080059a1
 800592c:	080059a1 	.word	0x080059a1
 8005930:	080059a1 	.word	0x080059a1
 8005934:	0800596b 	.word	0x0800596b
 8005938:	080059a1 	.word	0x080059a1
 800593c:	080059a1 	.word	0x080059a1
 8005940:	080059a1 	.word	0x080059a1
 8005944:	0800597d 	.word	0x0800597d
 8005948:	080059a1 	.word	0x080059a1
 800594c:	080059a1 	.word	0x080059a1
 8005950:	080059a1 	.word	0x080059a1
 8005954:	0800598f 	.word	0x0800598f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0202 	orr.w	r2, r2, #2
 8005966:	60da      	str	r2, [r3, #12]
      break;
 8005968:	e01d      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0204 	orr.w	r2, r2, #4
 8005978:	60da      	str	r2, [r3, #12]
      break;
 800597a:	e014      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	60da      	str	r2, [r3, #12]
      break;
 800598c:	e00b      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0210 	orr.w	r2, r2, #16
 800599c:	60da      	str	r2, [r3, #12]
      break;
 800599e:	e002      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      break;
 80059a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d148      	bne.n	8005a3e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ffed 	bl	8006994 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a22      	ldr	r2, [pc, #136]	@ (8005a48 <HAL_TIM_IC_Start_IT+0x234>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059cc:	d01d      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a4c <HAL_TIM_IC_Start_IT+0x238>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a50 <HAL_TIM_IC_Start_IT+0x23c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a54 <HAL_TIM_IC_Start_IT+0x240>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <HAL_TIM_IC_Start_IT+0x244>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a18      	ldr	r2, [pc, #96]	@ (8005a5c <HAL_TIM_IC_Start_IT+0x248>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_IC_Start_IT+0x1f6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a16      	ldr	r2, [pc, #88]	@ (8005a60 <HAL_TIM_IC_Start_IT+0x24c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d010      	beq.n	8005a3e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	e007      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40001800 	.word	0x40001800

08005a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d020      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01b      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0202 	mvn.w	r2, #2
 8005a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fc f876 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fb2e 	bl	8006118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fb35 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d020      	beq.n	8005b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01b      	beq.n	8005b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0204 	mvn.w	r2, #4
 8005ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc f850 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb08 	bl	8006118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb0f 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d020      	beq.n	8005b60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01b      	beq.n	8005b60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0208 	mvn.w	r2, #8
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2204      	movs	r2, #4
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc f82a 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fae2 	bl	8006118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fae9 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d020      	beq.n	8005bac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0210 	mvn.w	r2, #16
 8005b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2208      	movs	r2, #8
 8005b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fc f804 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fabc 	bl	8006118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fac3 	bl	800612c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0201 	mvn.w	r2, #1
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb fd9c 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ffce 	bl	8006b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa94 	bl	8006140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00c      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0220 	mvn.w	r2, #32
 8005c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 ffa0 	bl	8006b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e088      	b.n	8005d74 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c80:	f000 fcc4 	bl	800660c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 020c 	bic.w	r2, r2, #12
 8005c92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6999      	ldr	r1, [r3, #24]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	619a      	str	r2, [r3, #24]
 8005ca6:	e060      	b.n	8005d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d11c      	bne.n	8005ce8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005cbe:	f000 fd48 	bl	8006752 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6999      	ldr	r1, [r3, #24]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	021a      	lsls	r2, r3, #8
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	619a      	str	r2, [r3, #24]
 8005ce6:	e040      	b.n	8005d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d11b      	bne.n	8005d26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005cfe:	f000 fd95 	bl	800682c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 020c 	bic.w	r2, r2, #12
 8005d10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	61da      	str	r2, [r3, #28]
 8005d24:	e021      	b.n	8005d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	d11c      	bne.n	8005d66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d3c:	f000 fdb2 	bl	80068a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69d9      	ldr	r1, [r3, #28]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	61da      	str	r2, [r3, #28]
 8005d64:	e001      	b.n	8005d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0ae      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	f200 809f 	bhi.w	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005daa:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005ee9 	.word	0x08005ee9
 8005db8:	08005ee9 	.word	0x08005ee9
 8005dbc:	08005ee9 	.word	0x08005ee9
 8005dc0:	08005e25 	.word	0x08005e25
 8005dc4:	08005ee9 	.word	0x08005ee9
 8005dc8:	08005ee9 	.word	0x08005ee9
 8005dcc:	08005ee9 	.word	0x08005ee9
 8005dd0:	08005e67 	.word	0x08005e67
 8005dd4:	08005ee9 	.word	0x08005ee9
 8005dd8:	08005ee9 	.word	0x08005ee9
 8005ddc:	08005ee9 	.word	0x08005ee9
 8005de0:	08005ea7 	.word	0x08005ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fa5e 	bl	80062ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0208 	orr.w	r2, r2, #8
 8005dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0204 	bic.w	r2, r2, #4
 8005e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	619a      	str	r2, [r3, #24]
      break;
 8005e22:	e064      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 faae 	bl	800638c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6999      	ldr	r1, [r3, #24]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	619a      	str	r2, [r3, #24]
      break;
 8005e64:	e043      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fb03 	bl	8006478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0208 	orr.w	r2, r2, #8
 8005e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0204 	bic.w	r2, r2, #4
 8005e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69d9      	ldr	r1, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]
      break;
 8005ea4:	e023      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fb57 	bl	8006560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69d9      	ldr	r1, [r3, #28]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	021a      	lsls	r2, r3, #8
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	61da      	str	r2, [r3, #28]
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIM_ConfigClockSource+0x1c>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e0b4      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x186>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f54:	d03e      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f5a:	f200 8087 	bhi.w	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f62:	f000 8086 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x172>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6a:	d87f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b70      	cmp	r3, #112	@ 0x70
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f70:	2b70      	cmp	r3, #112	@ 0x70
 8005f72:	d87b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b60      	cmp	r3, #96	@ 0x60
 8005f76:	d050      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x11a>
 8005f78:	2b60      	cmp	r3, #96	@ 0x60
 8005f7a:	d877      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b50      	cmp	r3, #80	@ 0x50
 8005f7e:	d03c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xfa>
 8005f80:	2b50      	cmp	r3, #80	@ 0x50
 8005f82:	d873      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	d058      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x13a>
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d86f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b30      	cmp	r3, #48	@ 0x30
 8005f8e:	d064      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b30      	cmp	r3, #48	@ 0x30
 8005f92:	d86b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d060      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d867      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d05a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	e062      	b.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	f000 fccd 	bl	8006954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	609a      	str	r2, [r3, #8]
      break;
 8005fd2:	e04f      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	f000 fcb6 	bl	8006954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]
      break;
 8005ff8:	e03c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fb74 	bl	80066f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2150      	movs	r1, #80	@ 0x50
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fc83 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8006018:	e02c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fbd0 	bl	80067cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2160      	movs	r1, #96	@ 0x60
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fc73 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8006038:	e01c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fb54 	bl	80066f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	@ 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fc63 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 8006058:	e00c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 fc5a 	bl	800691e <TIM_ITRx_SetConfig>
      break;
 800606a:	e003      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      break;
 8006070:	e000      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d831      	bhi.n	8006108 <HAL_TIM_ReadCapturedValue+0x78>
 80060a4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060e1 	.word	0x080060e1
 80060b0:	08006109 	.word	0x08006109
 80060b4:	08006109 	.word	0x08006109
 80060b8:	08006109 	.word	0x08006109
 80060bc:	080060eb 	.word	0x080060eb
 80060c0:	08006109 	.word	0x08006109
 80060c4:	08006109 	.word	0x08006109
 80060c8:	08006109 	.word	0x08006109
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	08006109 	.word	0x08006109
 80060d4:	08006109 	.word	0x08006109
 80060d8:	08006109 	.word	0x08006109
 80060dc:	080060ff 	.word	0x080060ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e6:	60fb      	str	r3, [r7, #12]

      break;
 80060e8:	e00f      	b.n	800610a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	60fb      	str	r3, [r7, #12]

      break;
 80060f2:	e00a      	b.n	800610a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fa:	60fb      	str	r3, [r7, #12]

      break;
 80060fc:	e005      	b.n	800610a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	60fb      	str	r3, [r7, #12]

      break;
 8006106:	e000      	b.n	800610a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006108:	bf00      	nop
  }

  return tmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a46      	ldr	r2, [pc, #280]	@ (8006280 <TIM_Base_SetConfig+0x12c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006172:	d00f      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a43      	ldr	r2, [pc, #268]	@ (8006284 <TIM_Base_SetConfig+0x130>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00b      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a42      	ldr	r2, [pc, #264]	@ (8006288 <TIM_Base_SetConfig+0x134>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a41      	ldr	r2, [pc, #260]	@ (800628c <TIM_Base_SetConfig+0x138>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a40      	ldr	r2, [pc, #256]	@ (8006290 <TIM_Base_SetConfig+0x13c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d108      	bne.n	80061a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a35      	ldr	r2, [pc, #212]	@ (8006280 <TIM_Base_SetConfig+0x12c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d02b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d027      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a32      	ldr	r2, [pc, #200]	@ (8006284 <TIM_Base_SetConfig+0x130>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d023      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a31      	ldr	r2, [pc, #196]	@ (8006288 <TIM_Base_SetConfig+0x134>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01f      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a30      	ldr	r2, [pc, #192]	@ (800628c <TIM_Base_SetConfig+0x138>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006290 <TIM_Base_SetConfig+0x13c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d017      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006294 <TIM_Base_SetConfig+0x140>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006298 <TIM_Base_SetConfig+0x144>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2c      	ldr	r2, [pc, #176]	@ (800629c <TIM_Base_SetConfig+0x148>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2b      	ldr	r2, [pc, #172]	@ (80062a0 <TIM_Base_SetConfig+0x14c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	@ (80062a4 <TIM_Base_SetConfig+0x150>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a29      	ldr	r2, [pc, #164]	@ (80062a8 <TIM_Base_SetConfig+0x154>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <TIM_Base_SetConfig+0x12c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0xf8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a12      	ldr	r2, [pc, #72]	@ (8006290 <TIM_Base_SetConfig+0x13c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d103      	bne.n	8006254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d105      	bne.n	8006272 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f023 0201 	bic.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	611a      	str	r2, [r3, #16]
  }
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40001800 	.word	0x40001800
 80062a4:	40001c00 	.word	0x40001c00
 80062a8:	40002000 	.word	0x40002000

080062ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f023 0201 	bic.w	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0302 	bic.w	r3, r3, #2
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a20      	ldr	r2, [pc, #128]	@ (8006384 <TIM_OC1_SetConfig+0xd8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_OC1_SetConfig+0x64>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1f      	ldr	r2, [pc, #124]	@ (8006388 <TIM_OC1_SetConfig+0xdc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10c      	bne.n	800632a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f023 0308 	bic.w	r3, r3, #8
 8006316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 0304 	bic.w	r3, r3, #4
 8006328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a15      	ldr	r2, [pc, #84]	@ (8006384 <TIM_OC1_SetConfig+0xd8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_OC1_SetConfig+0x8e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a14      	ldr	r2, [pc, #80]	@ (8006388 <TIM_OC1_SetConfig+0xdc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d111      	bne.n	800635e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0320 	bic.w	r3, r3, #32
 80063d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a22      	ldr	r2, [pc, #136]	@ (8006470 <TIM_OC2_SetConfig+0xe4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC2_SetConfig+0x68>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a21      	ldr	r2, [pc, #132]	@ (8006474 <TIM_OC2_SetConfig+0xe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10d      	bne.n	8006410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <TIM_OC2_SetConfig+0xe4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC2_SetConfig+0x94>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a16      	ldr	r2, [pc, #88]	@ (8006474 <TIM_OC2_SetConfig+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d113      	bne.n	8006448 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400

08006478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a21      	ldr	r2, [pc, #132]	@ (8006558 <TIM_OC3_SetConfig+0xe0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x66>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a20      	ldr	r2, [pc, #128]	@ (800655c <TIM_OC3_SetConfig+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a16      	ldr	r2, [pc, #88]	@ (8006558 <TIM_OC3_SetConfig+0xe0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC3_SetConfig+0x92>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a15      	ldr	r2, [pc, #84]	@ (800655c <TIM_OC3_SetConfig+0xe4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d113      	bne.n	8006532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40010000 	.word	0x40010000
 800655c:	40010400 	.word	0x40010400

08006560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	031b      	lsls	r3, r3, #12
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a12      	ldr	r2, [pc, #72]	@ (8006604 <TIM_OC4_SetConfig+0xa4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC4_SetConfig+0x68>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <TIM_OC4_SetConfig+0xa8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d109      	bne.n	80065dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	019b      	lsls	r3, r3, #6
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400

0800660c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f023 0201 	bic.w	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a28      	ldr	r2, [pc, #160]	@ (80066d8 <TIM_TI1_SetConfig+0xcc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01b      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006640:	d017      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a25      	ldr	r2, [pc, #148]	@ (80066dc <TIM_TI1_SetConfig+0xd0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4a24      	ldr	r2, [pc, #144]	@ (80066e0 <TIM_TI1_SetConfig+0xd4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a23      	ldr	r2, [pc, #140]	@ (80066e4 <TIM_TI1_SetConfig+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a22      	ldr	r2, [pc, #136]	@ (80066e8 <TIM_TI1_SetConfig+0xdc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a21      	ldr	r2, [pc, #132]	@ (80066ec <TIM_TI1_SetConfig+0xe0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_TI1_SetConfig+0x66>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4a20      	ldr	r2, [pc, #128]	@ (80066f0 <TIM_TI1_SetConfig+0xe4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d101      	bne.n	8006676 <TIM_TI1_SetConfig+0x6a>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <TIM_TI1_SetConfig+0x6c>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e003      	b.n	8006696 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800669c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f023 030a 	bic.w	r3, r3, #10
 80066b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 030a 	and.w	r3, r3, #10
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40001800 	.word	0x40001800

080066f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0201 	bic.w	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 030a 	bic.w	r3, r3, #10
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006752:	b480      	push	{r7}
 8006754:	b087      	sub	sp, #28
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0210 	bic.w	r2, r3, #16
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	031b      	lsls	r3, r3, #12
 8006796:	b29b      	uxth	r3, r3
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0210 	bic.w	r2, r3, #16
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	031b      	lsls	r3, r3, #12
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006808:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f023 0303 	bic.w	r3, r3, #3
 8006858:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	b2db      	uxtb	r3, r3
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800687c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	031b      	lsls	r3, r3, #12
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80068f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	031b      	lsls	r3, r3, #12
 80068fc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	f043 0307 	orr.w	r3, r3, #7
 8006940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	609a      	str	r2, [r3, #8]
}
 8006948:	bf00      	nop
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800696e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	431a      	orrs	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4313      	orrs	r3, r2
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	609a      	str	r2, [r3, #8]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2201      	movs	r2, #1
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e05a      	b.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a21      	ldr	r2, [pc, #132]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a44:	d01d      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d018      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00e      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d009      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a17      	ldr	r2, [pc, #92]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10c      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40000c00 	.word	0x40000c00
 8006acc:	40010400 	.word	0x40010400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40001800 	.word	0x40001800

08006ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e03d      	b.n	8006b70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e042      	b.n	8006c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fb ffac 	bl	8002b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2224      	movs	r2, #36	@ 0x24
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fdff 	bl	80077ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695a      	ldr	r2, [r3, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	@ 0x28
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	4613      	mov	r3, r2
 8006c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d175      	bne.n	8006d50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_UART_Transmit+0x2c>
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e06e      	b.n	8006d52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2221      	movs	r2, #33	@ 0x21
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c82:	f7fc f835 	bl	8002cf0 <HAL_GetTick>
 8006c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9c:	d108      	bne.n	8006cb0 <HAL_UART_Transmit+0x6c>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e003      	b.n	8006cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cb8:	e02e      	b.n	8006d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2180      	movs	r1, #128	@ 0x80
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fb9b 	bl	8007400 <UART_WaitOnFlagUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e03a      	b.n	8006d52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	3302      	adds	r3, #2
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e007      	b.n	8006d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	781a      	ldrb	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3301      	adds	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1cb      	bne.n	8006cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2140      	movs	r1, #64	@ 0x40
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fb67 	bl	8007400 <UART_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e006      	b.n	8006d52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e000      	b.n	8006d52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d50:	2302      	movs	r3, #2
  }
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b08a      	sub	sp, #40	@ 0x28
 8006d5e:	af02      	add	r7, sp, #8
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	f040 8081 	bne.w	8006e7e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <HAL_UART_Receive+0x2e>
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e079      	b.n	8006e80 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2222      	movs	r2, #34	@ 0x22
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da0:	f7fb ffa6 	bl	8002cf0 <HAL_GetTick>
 8006da4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dba:	d108      	bne.n	8006dce <HAL_UART_Receive+0x74>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	e003      	b.n	8006dd6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006dd6:	e047      	b.n	8006e68 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2200      	movs	r2, #0
 8006de0:	2120      	movs	r1, #32
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fb0c 	bl	8007400 <UART_WaitOnFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e042      	b.n	8006e80 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10c      	bne.n	8006e1a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3302      	adds	r3, #2
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e01f      	b.n	8006e5a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e22:	d007      	beq.n	8006e34 <HAL_UART_Receive+0xda>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <HAL_UART_Receive+0xe8>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d106      	bne.n	8006e42 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e008      	b.n	8006e54 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	3301      	adds	r3, #1
 8006e58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1b2      	bne.n	8006dd8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10f      	bne.n	8006eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <HAL_UART_IRQHandler+0x66>
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fbc2 	bl	8007670 <UART_Receive_IT>
      return;
 8006eec:	e25b      	b.n	80073a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80de 	beq.w	80070b4 <HAL_UART_IRQHandler+0x22c>
 8006ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80d1 	beq.w	80070b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <HAL_UART_IRQHandler+0xae>
 8006f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2e:	f043 0201 	orr.w	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <HAL_UART_IRQHandler+0xd2>
 8006f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	f043 0202 	orr.w	r2, r3, #2
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	f043 0204 	orr.w	r2, r3, #4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d011      	beq.n	8006fae <HAL_UART_IRQHandler+0x126>
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d105      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	f043 0208 	orr.w	r2, r3, #8
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 81f2 	beq.w	800739c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x14e>
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb4d 	bl	8007670 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b40      	cmp	r3, #64	@ 0x40
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <HAL_UART_IRQHandler+0x17a>
 8006ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d04f      	beq.n	80070a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa55 	bl	80074b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007012:	2b40      	cmp	r3, #64	@ 0x40
 8007014:	d141      	bne.n	800709a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800702c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007042:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800704e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800705a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1d9      	bne.n	8007016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d013      	beq.n	8007092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706e:	4a7e      	ldr	r2, [pc, #504]	@ (8007268 <HAL_UART_IRQHandler+0x3e0>)
 8007070:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007076:	4618      	mov	r0, r3
 8007078:	f7fc fbcc 	bl	8003814 <HAL_DMA_Abort_IT>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	e00e      	b.n	80070b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f99e 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007098:	e00a      	b.n	80070b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f99a 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a0:	e006      	b.n	80070b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f996 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070ae:	e175      	b.n	800739c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b0:	bf00      	nop
    return;
 80070b2:	e173      	b.n	800739c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	f040 814f 	bne.w	800735c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 8148 	beq.w	800735c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8141 	beq.w	800735c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070da:	2300      	movs	r3, #0
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60bb      	str	r3, [r7, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fa:	2b40      	cmp	r3, #64	@ 0x40
 80070fc:	f040 80b6 	bne.w	800726c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800710c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8145 	beq.w	80073a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800711a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800711e:	429a      	cmp	r2, r3
 8007120:	f080 813e 	bcs.w	80073a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800712a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007136:	f000 8088 	beq.w	800724a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	330c      	adds	r3, #12
 8007140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007166:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800716a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800717e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1d9      	bne.n	800713a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3314      	adds	r3, #20
 80071a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e1      	bne.n	8007186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3314      	adds	r3, #20
 80071e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e3      	bne.n	80071c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800721a:	f023 0310 	bic.w	r3, r3, #16
 800721e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800722c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800722e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800723a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e3      	bne.n	8007208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc fa75 	bl	8003734 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007258:	b29b      	uxth	r3, r3
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	b29b      	uxth	r3, r3
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8c1 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007266:	e09b      	b.n	80073a0 <HAL_UART_IRQHandler+0x518>
 8007268:	08007579 	.word	0x08007579
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007274:	b29b      	uxth	r3, r3
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 808e 	beq.w	80073a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8089 	beq.w	80073a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80072b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e3      	bne.n	8007292 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3314      	adds	r3, #20
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	623b      	str	r3, [r7, #32]
   return(result);
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3314      	adds	r3, #20
 80072ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e3      	bne.n	80072ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0310 	bic.w	r3, r3, #16
 8007326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e3      	bne.n	8007310 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800734e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f847 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800735a:	e023      	b.n	80073a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <HAL_UART_IRQHandler+0x4f4>
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800736c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f913 	bl	80075a0 <UART_Transmit_IT>
    return;
 800737a:	e014      	b.n	80073a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <HAL_UART_IRQHandler+0x51e>
 8007388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f953 	bl	8007640 <UART_EndTransmit_IT>
    return;
 800739a:	e004      	b.n	80073a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800739c:	bf00      	nop
 800739e:	e002      	b.n	80073a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073a0:	bf00      	nop
 80073a2:	e000      	b.n	80073a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073a4:	bf00      	nop
  }
}
 80073a6:	37e8      	adds	r7, #232	@ 0xe8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007410:	e03b      	b.n	800748a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007418:	d037      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fb fc69 	bl	8002cf0 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <UART_WaitOnFlagUntilTimeout+0x30>
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e03a      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b80      	cmp	r3, #128	@ 0x80
 8007446:	d020      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b40      	cmp	r3, #64	@ 0x40
 800744c:	d01d      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b08      	cmp	r3, #8
 800745a:	d116      	bne.n	800748a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800745c:	2300      	movs	r3, #0
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f81d 	bl	80074b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2208      	movs	r2, #8
 800747c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e00f      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4013      	ands	r3, r2
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	bf0c      	ite	eq
 800749a:	2301      	moveq	r3, #1
 800749c:	2300      	movne	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d0b4      	beq.n	8007412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b095      	sub	sp, #84	@ 0x54
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074da:	643a      	str	r2, [r7, #64]	@ 0x40
 80074dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3314      	adds	r3, #20
 80074f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3314      	adds	r3, #20
 800750c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800750e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e5      	bne.n	80074ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007526:	2b01      	cmp	r3, #1
 8007528:	d119      	bne.n	800755e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	60bb      	str	r3, [r7, #8]
   return(result);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f023 0310 	bic.w	r3, r3, #16
 8007540:	647b      	str	r3, [r7, #68]	@ 0x44
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800754a:	61ba      	str	r2, [r7, #24]
 800754c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6979      	ldr	r1, [r7, #20]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	613b      	str	r3, [r7, #16]
   return(result);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800756c:	bf00      	nop
 800756e:	3754      	adds	r7, #84	@ 0x54
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff ff1e 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b21      	cmp	r3, #33	@ 0x21
 80075b2:	d13e      	bne.n	8007632 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075bc:	d114      	bne.n	80075e8 <UART_Transmit_IT+0x48>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d110      	bne.n	80075e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	1c9a      	adds	r2, r3, #2
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]
 80075e6:	e008      	b.n	80075fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	1c59      	adds	r1, r3, #1
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6211      	str	r1, [r2, #32]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29b      	uxth	r3, r3
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4619      	mov	r1, r3
 8007608:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10f      	bne.n	800762e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800761c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800762c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e000      	b.n	8007634 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007632:	2302      	movs	r3, #2
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007656:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff fea3 	bl	80073ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08c      	sub	sp, #48	@ 0x30
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b22      	cmp	r3, #34	@ 0x22
 8007682:	f040 80ae 	bne.w	80077e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800768e:	d117      	bne.n	80076c0 <UART_Receive_IT+0x50>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d113      	bne.n	80076c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007698:	2300      	movs	r3, #0
 800769a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	1c9a      	adds	r2, r3, #2
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80076be:	e026      	b.n	800770e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d2:	d007      	beq.n	80076e4 <UART_Receive_IT+0x74>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <UART_Receive_IT+0x82>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e008      	b.n	8007704 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007702:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29b      	uxth	r3, r3
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4619      	mov	r1, r3
 800771c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800771e:	2b00      	cmp	r3, #0
 8007720:	d15d      	bne.n	80077de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0220 	bic.w	r2, r2, #32
 8007730:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007764:	2b01      	cmp	r3, #1
 8007766:	d135      	bne.n	80077d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	613b      	str	r3, [r7, #16]
   return(result);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800778e:	623a      	str	r2, [r7, #32]
 8007790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	69f9      	ldr	r1, [r7, #28]
 8007794:	6a3a      	ldr	r2, [r7, #32]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	61bb      	str	r3, [r7, #24]
   return(result);
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d10a      	bne.n	80077c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff fe0b 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
 80077d2:	e002      	b.n	80077da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fdf3 	bl	80073c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e002      	b.n	80077e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	e000      	b.n	80077e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
  }
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3730      	adds	r7, #48	@ 0x30
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f0:	b0c0      	sub	sp, #256	@ 0x100
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007808:	68d9      	ldr	r1, [r3, #12]
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	ea40 0301 	orr.w	r3, r0, r1
 8007814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	431a      	orrs	r2, r3
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	431a      	orrs	r2, r3
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007844:	f021 010c 	bic.w	r1, r1, #12
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007852:	430b      	orrs	r3, r1
 8007854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007866:	6999      	ldr	r1, [r3, #24]
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	ea40 0301 	orr.w	r3, r0, r1
 8007872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b8f      	ldr	r3, [pc, #572]	@ (8007ab8 <UART_SetConfig+0x2cc>)
 800787c:	429a      	cmp	r2, r3
 800787e:	d005      	beq.n	800788c <UART_SetConfig+0xa0>
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4b8d      	ldr	r3, [pc, #564]	@ (8007abc <UART_SetConfig+0x2d0>)
 8007888:	429a      	cmp	r2, r3
 800788a:	d104      	bne.n	8007896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800788c:	f7fd f87c 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8007890:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007894:	e003      	b.n	800789e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007896:	f7fd f863 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 800789a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800789e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a8:	f040 810c 	bne.w	8007ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078be:	4622      	mov	r2, r4
 80078c0:	462b      	mov	r3, r5
 80078c2:	1891      	adds	r1, r2, r2
 80078c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078c6:	415b      	adcs	r3, r3
 80078c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078ce:	4621      	mov	r1, r4
 80078d0:	eb12 0801 	adds.w	r8, r2, r1
 80078d4:	4629      	mov	r1, r5
 80078d6:	eb43 0901 	adc.w	r9, r3, r1
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078ee:	4690      	mov	r8, r2
 80078f0:	4699      	mov	r9, r3
 80078f2:	4623      	mov	r3, r4
 80078f4:	eb18 0303 	adds.w	r3, r8, r3
 80078f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078fc:	462b      	mov	r3, r5
 80078fe:	eb49 0303 	adc.w	r3, r9, r3
 8007902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007912:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800791a:	460b      	mov	r3, r1
 800791c:	18db      	adds	r3, r3, r3
 800791e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007920:	4613      	mov	r3, r2
 8007922:	eb42 0303 	adc.w	r3, r2, r3
 8007926:	657b      	str	r3, [r7, #84]	@ 0x54
 8007928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800792c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007930:	f7f9 f8b4 	bl	8000a9c <__aeabi_uldivmod>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4b61      	ldr	r3, [pc, #388]	@ (8007ac0 <UART_SetConfig+0x2d4>)
 800793a:	fba3 2302 	umull	r2, r3, r3, r2
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	011c      	lsls	r4, r3, #4
 8007942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800794c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	1891      	adds	r1, r2, r2
 800795a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800795c:	415b      	adcs	r3, r3
 800795e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007964:	4641      	mov	r1, r8
 8007966:	eb12 0a01 	adds.w	sl, r2, r1
 800796a:	4649      	mov	r1, r9
 800796c:	eb43 0b01 	adc.w	fp, r3, r1
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800797c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007984:	4692      	mov	sl, r2
 8007986:	469b      	mov	fp, r3
 8007988:	4643      	mov	r3, r8
 800798a:	eb1a 0303 	adds.w	r3, sl, r3
 800798e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007992:	464b      	mov	r3, r9
 8007994:	eb4b 0303 	adc.w	r3, fp, r3
 8007998:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079b0:	460b      	mov	r3, r1
 80079b2:	18db      	adds	r3, r3, r3
 80079b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b6:	4613      	mov	r3, r2
 80079b8:	eb42 0303 	adc.w	r3, r2, r3
 80079bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079c6:	f7f9 f869 	bl	8000a9c <__aeabi_uldivmod>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4611      	mov	r1, r2
 80079d0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ac0 <UART_SetConfig+0x2d4>)
 80079d2:	fba3 2301 	umull	r2, r3, r3, r1
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	2264      	movs	r2, #100	@ 0x64
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	1acb      	subs	r3, r1, r3
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80079e6:	4b36      	ldr	r3, [pc, #216]	@ (8007ac0 <UART_SetConfig+0x2d4>)
 80079e8:	fba3 2302 	umull	r2, r3, r3, r2
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80079f4:	441c      	add	r4, r3
 80079f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a08:	4642      	mov	r2, r8
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	1891      	adds	r1, r2, r2
 8007a0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a10:	415b      	adcs	r3, r3
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a18:	4641      	mov	r1, r8
 8007a1a:	1851      	adds	r1, r2, r1
 8007a1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a1e:	4649      	mov	r1, r9
 8007a20:	414b      	adcs	r3, r1
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a30:	4659      	mov	r1, fp
 8007a32:	00cb      	lsls	r3, r1, #3
 8007a34:	4651      	mov	r1, sl
 8007a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	00ca      	lsls	r2, r1, #3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	4642      	mov	r2, r8
 8007a46:	189b      	adds	r3, r3, r2
 8007a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	460a      	mov	r2, r1
 8007a50:	eb42 0303 	adc.w	r3, r2, r3
 8007a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	18db      	adds	r3, r3, r3
 8007a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a72:	4613      	mov	r3, r2
 8007a74:	eb42 0303 	adc.w	r3, r2, r3
 8007a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a82:	f7f9 f80b 	bl	8000a9c <__aeabi_uldivmod>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <UART_SetConfig+0x2d4>)
 8007a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	2164      	movs	r1, #100	@ 0x64
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	3332      	adds	r3, #50	@ 0x32
 8007a9e:	4a08      	ldr	r2, [pc, #32]	@ (8007ac0 <UART_SetConfig+0x2d4>)
 8007aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	f003 0207 	and.w	r2, r3, #7
 8007aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4422      	add	r2, r4
 8007ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ab4:	e106      	b.n	8007cc4 <UART_SetConfig+0x4d8>
 8007ab6:	bf00      	nop
 8007ab8:	40011000 	.word	0x40011000
 8007abc:	40011400 	.word	0x40011400
 8007ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ace:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	464b      	mov	r3, r9
 8007ada:	1891      	adds	r1, r2, r2
 8007adc:	6239      	str	r1, [r7, #32]
 8007ade:	415b      	adcs	r3, r3
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ae6:	4641      	mov	r1, r8
 8007ae8:	1854      	adds	r4, r2, r1
 8007aea:	4649      	mov	r1, r9
 8007aec:	eb43 0501 	adc.w	r5, r3, r1
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	00eb      	lsls	r3, r5, #3
 8007afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007afe:	00e2      	lsls	r2, r4, #3
 8007b00:	4614      	mov	r4, r2
 8007b02:	461d      	mov	r5, r3
 8007b04:	4643      	mov	r3, r8
 8007b06:	18e3      	adds	r3, r4, r3
 8007b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	eb45 0303 	adc.w	r3, r5, r3
 8007b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b32:	4629      	mov	r1, r5
 8007b34:	008b      	lsls	r3, r1, #2
 8007b36:	4621      	mov	r1, r4
 8007b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	008a      	lsls	r2, r1, #2
 8007b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b44:	f7f8 ffaa 	bl	8000a9c <__aeabi_uldivmod>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4b60      	ldr	r3, [pc, #384]	@ (8007cd0 <UART_SetConfig+0x4e4>)
 8007b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b52:	095b      	lsrs	r3, r3, #5
 8007b54:	011c      	lsls	r4, r3, #4
 8007b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b68:	4642      	mov	r2, r8
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	1891      	adds	r1, r2, r2
 8007b6e:	61b9      	str	r1, [r7, #24]
 8007b70:	415b      	adcs	r3, r3
 8007b72:	61fb      	str	r3, [r7, #28]
 8007b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b78:	4641      	mov	r1, r8
 8007b7a:	1851      	adds	r1, r2, r1
 8007b7c:	6139      	str	r1, [r7, #16]
 8007b7e:	4649      	mov	r1, r9
 8007b80:	414b      	adcs	r3, r1
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b90:	4659      	mov	r1, fp
 8007b92:	00cb      	lsls	r3, r1, #3
 8007b94:	4651      	mov	r1, sl
 8007b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b9a:	4651      	mov	r1, sl
 8007b9c:	00ca      	lsls	r2, r1, #3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	189b      	adds	r3, r3, r2
 8007ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bac:	464b      	mov	r3, r9
 8007bae:	460a      	mov	r2, r1
 8007bb0:	eb42 0303 	adc.w	r3, r2, r3
 8007bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	008b      	lsls	r3, r1, #2
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bda:	4641      	mov	r1, r8
 8007bdc:	008a      	lsls	r2, r1, #2
 8007bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007be2:	f7f8 ff5b 	bl	8000a9c <__aeabi_uldivmod>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	4b38      	ldr	r3, [pc, #224]	@ (8007cd0 <UART_SetConfig+0x4e4>)
 8007bee:	fba3 2301 	umull	r2, r3, r3, r1
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	2264      	movs	r2, #100	@ 0x64
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
 8007bfa:	1acb      	subs	r3, r1, r3
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	3332      	adds	r3, #50	@ 0x32
 8007c00:	4a33      	ldr	r2, [pc, #204]	@ (8007cd0 <UART_SetConfig+0x4e4>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c0c:	441c      	add	r4, r3
 8007c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c12:	2200      	movs	r2, #0
 8007c14:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c16:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	1891      	adds	r1, r2, r2
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	415b      	adcs	r3, r3
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	1851      	adds	r1, r2, r1
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	4649      	mov	r1, r9
 8007c34:	414b      	adcs	r3, r1
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c44:	4659      	mov	r1, fp
 8007c46:	00cb      	lsls	r3, r1, #3
 8007c48:	4651      	mov	r1, sl
 8007c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c4e:	4651      	mov	r1, sl
 8007c50:	00ca      	lsls	r2, r1, #3
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	4642      	mov	r2, r8
 8007c5a:	189b      	adds	r3, r3, r2
 8007c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c5e:	464b      	mov	r3, r9
 8007c60:	460a      	mov	r2, r1
 8007c62:	eb42 0303 	adc.w	r3, r2, r3
 8007c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c72:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c80:	4649      	mov	r1, r9
 8007c82:	008b      	lsls	r3, r1, #2
 8007c84:	4641      	mov	r1, r8
 8007c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	008a      	lsls	r2, r1, #2
 8007c8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c92:	f7f8 ff03 	bl	8000a9c <__aeabi_uldivmod>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd0 <UART_SetConfig+0x4e4>)
 8007c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	2164      	movs	r1, #100	@ 0x64
 8007ca4:	fb01 f303 	mul.w	r3, r1, r3
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	3332      	adds	r3, #50	@ 0x32
 8007cae:	4a08      	ldr	r2, [pc, #32]	@ (8007cd0 <UART_SetConfig+0x4e4>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	f003 020f 	and.w	r2, r3, #15
 8007cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4422      	add	r2, r4
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cd0:	51eb851f 	.word	0x51eb851f

08007cd4 <__NVIC_SetPriority>:
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6039      	str	r1, [r7, #0]
 8007cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db0a      	blt.n	8007cfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	490c      	ldr	r1, [pc, #48]	@ (8007d20 <__NVIC_SetPriority+0x4c>)
 8007cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf2:	0112      	lsls	r2, r2, #4
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007cfc:	e00a      	b.n	8007d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4908      	ldr	r1, [pc, #32]	@ (8007d24 <__NVIC_SetPriority+0x50>)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	3b04      	subs	r3, #4
 8007d0c:	0112      	lsls	r2, r2, #4
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	440b      	add	r3, r1
 8007d12:	761a      	strb	r2, [r3, #24]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	e000e100 	.word	0xe000e100
 8007d24:	e000ed00 	.word	0xe000ed00

08007d28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d2c:	4b05      	ldr	r3, [pc, #20]	@ (8007d44 <SysTick_Handler+0x1c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d30:	f002 f852 	bl	8009dd8 <xTaskGetSchedulerState>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d001      	beq.n	8007d3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d3a:	f002 ff4d 	bl	800abd8 <xPortSysTickHandler>
  }
}
 8007d3e:	bf00      	nop
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	e000e010 	.word	0xe000e010

08007d48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	f06f 0004 	mvn.w	r0, #4
 8007d52:	f7ff ffbf 	bl	8007cd4 <__NVIC_SetPriority>
#endif
}
 8007d56:	bf00      	nop
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d62:	f3ef 8305 	mrs	r3, IPSR
 8007d66:	603b      	str	r3, [r7, #0]
  return(result);
 8007d68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d6e:	f06f 0305 	mvn.w	r3, #5
 8007d72:	607b      	str	r3, [r7, #4]
 8007d74:	e00c      	b.n	8007d90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d76:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <osKernelInitialize+0x44>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d7e:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <osKernelInitialize+0x44>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	e002      	b.n	8007d90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d90:	687b      	ldr	r3, [r7, #4]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000754 	.word	0x20000754

08007da4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007daa:	f3ef 8305 	mrs	r3, IPSR
 8007dae:	603b      	str	r3, [r7, #0]
  return(result);
 8007db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007db6:	f06f 0305 	mvn.w	r3, #5
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e010      	b.n	8007de0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8007dec <osKernelStart+0x48>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d109      	bne.n	8007dda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dc6:	f7ff ffbf 	bl	8007d48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007dca:	4b08      	ldr	r3, [pc, #32]	@ (8007dec <osKernelStart+0x48>)
 8007dcc:	2202      	movs	r2, #2
 8007dce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007dd0:	f001 fba4 	bl	800951c <vTaskStartScheduler>
      stat = osOK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	607b      	str	r3, [r7, #4]
 8007dd8:	e002      	b.n	8007de0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007de0:	687b      	ldr	r3, [r7, #4]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20000754 	.word	0x20000754

08007df0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08e      	sub	sp, #56	@ 0x38
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e00:	f3ef 8305 	mrs	r3, IPSR
 8007e04:	617b      	str	r3, [r7, #20]
  return(result);
 8007e06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d17e      	bne.n	8007f0a <osThreadNew+0x11a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d07b      	beq.n	8007f0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e12:	2380      	movs	r3, #128	@ 0x80
 8007e14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e16:	2318      	movs	r3, #24
 8007e18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d045      	beq.n	8007eb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <osThreadNew+0x48>
        name = attr->name;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <osThreadNew+0x6e>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b38      	cmp	r3, #56	@ 0x38
 8007e50:	d805      	bhi.n	8007e5e <osThreadNew+0x6e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <osThreadNew+0x72>
        return (NULL);
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e054      	b.n	8007f0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <osThreadNew+0xa8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007e80:	d90a      	bls.n	8007e98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d006      	beq.n	8007e98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <osThreadNew+0xa8>
        mem = 1;
 8007e92:	2301      	movs	r3, #1
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e010      	b.n	8007eba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <osThreadNew+0xca>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <osThreadNew+0xca>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <osThreadNew+0xca>
          mem = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	e001      	b.n	8007eba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d110      	bne.n	8007ee2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ec8:	9202      	str	r2, [sp, #8]
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	6a3a      	ldr	r2, [r7, #32]
 8007ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f001 f944 	bl	8009164 <xTaskCreateStatic>
 8007edc:	4603      	mov	r3, r0
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	e013      	b.n	8007f0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d110      	bne.n	8007f0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	f107 0310 	add.w	r3, r7, #16
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 f992 	bl	8009224 <xTaskCreate>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d001      	beq.n	8007f0a <osThreadNew+0x11a>
            hTask = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f0a:	693b      	ldr	r3, [r7, #16]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3728      	adds	r7, #40	@ 0x28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1c:	f3ef 8305 	mrs	r3, IPSR
 8007f20:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <osDelay+0x1c>
    stat = osErrorISR;
 8007f28:	f06f 0305 	mvn.w	r3, #5
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e007      	b.n	8007f40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fab8 	bl	80094b0 <vTaskDelay>
    }
  }

  return (stat);
 8007f40:	68fb      	ldr	r3, [r7, #12]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f56:	f3ef 8305 	mrs	r3, IPSR
 8007f5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f5c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d174      	bne.n	800804c <osMutexNew+0x102>
    if (attr != NULL) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	e001      	b.n	8007f74 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <osMutexNew+0x3a>
      rmtx = 1U;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	e001      	b.n	8007f88 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d15c      	bne.n	800804c <osMutexNew+0x102>
      mem = -1;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f96:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d015      	beq.n	8007fca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d006      	beq.n	8007fb4 <osMutexNew+0x6a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fac:	d902      	bls.n	8007fb4 <osMutexNew+0x6a>
          mem = 1;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	e00c      	b.n	8007fce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <osMutexNew+0x84>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <osMutexNew+0x84>
            mem = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	e001      	b.n	8007fce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d112      	bne.n	8007ffa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	2004      	movs	r0, #4
 8007fe2:	f000 fb20 	bl	8008626 <xQueueCreateMutexStatic>
 8007fe6:	61f8      	str	r0, [r7, #28]
 8007fe8:	e016      	b.n	8008018 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	f000 fb18 	bl	8008626 <xQueueCreateMutexStatic>
 8007ff6:	61f8      	str	r0, [r7, #28]
 8007ff8:	e00e      	b.n	8008018 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008006:	2004      	movs	r0, #4
 8008008:	f000 faf5 	bl	80085f6 <xQueueCreateMutex>
 800800c:	61f8      	str	r0, [r7, #28]
 800800e:	e003      	b.n	8008018 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008010:	2001      	movs	r0, #1
 8008012:	f000 faf0 	bl	80085f6 <xQueueCreateMutex>
 8008016:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <osMutexNew+0xee>
        if (attr != NULL) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <osMutexNew+0xe2>
          name = attr->name;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e001      	b.n	8008030 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008030:	68f9      	ldr	r1, [r7, #12]
 8008032:	69f8      	ldr	r0, [r7, #28]
 8008034:	f001 f838 	bl	80090a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d006      	beq.n	800804c <osMutexNew+0x102>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800804c:	69fb      	ldr	r3, [r7, #28]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008074:	f3ef 8305 	mrs	r3, IPSR
 8008078:	60bb      	str	r3, [r7, #8]
  return(result);
 800807a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008080:	f06f 0305 	mvn.w	r3, #5
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e02c      	b.n	80080e2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800808e:	f06f 0303 	mvn.w	r3, #3
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	e025      	b.n	80080e2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d011      	beq.n	80080c0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6938      	ldr	r0, [r7, #16]
 80080a0:	f000 fb11 	bl	80086c6 <xQueueTakeMutexRecursive>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d01b      	beq.n	80080e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80080b0:	f06f 0301 	mvn.w	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e014      	b.n	80080e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080b8:	f06f 0302 	mvn.w	r3, #2
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e010      	b.n	80080e2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6938      	ldr	r0, [r7, #16]
 80080c4:	f000 fdb8 	bl	8008c38 <xQueueSemaphoreTake>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d009      	beq.n	80080e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80080d4:	f06f 0301 	mvn.w	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e002      	b.n	80080e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080dc:	f06f 0302 	mvn.w	r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80080e2:	697b      	ldr	r3, [r7, #20]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f023 0301 	bic.w	r3, r3, #1
 80080fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008108:	f3ef 8305 	mrs	r3, IPSR
 800810c:	60bb      	str	r3, [r7, #8]
  return(result);
 800810e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <osMutexRelease+0x30>
    stat = osErrorISR;
 8008114:	f06f 0305 	mvn.w	r3, #5
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e01f      	b.n	800815c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d103      	bne.n	800812a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008122:	f06f 0303 	mvn.w	r3, #3
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e018      	b.n	800815c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008130:	6938      	ldr	r0, [r7, #16]
 8008132:	f000 fa93 	bl	800865c <xQueueGiveMutexRecursive>
 8008136:	4603      	mov	r3, r0
 8008138:	2b01      	cmp	r3, #1
 800813a:	d00f      	beq.n	800815c <osMutexRelease+0x70>
        stat = osErrorResource;
 800813c:	f06f 0302 	mvn.w	r3, #2
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e00b      	b.n	800815c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008144:	2300      	movs	r3, #0
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	6938      	ldr	r0, [r7, #16]
 800814c:	f000 faf2 	bl	8008734 <xQueueGenericSend>
 8008150:	4603      	mov	r3, r0
 8008152:	2b01      	cmp	r3, #1
 8008154:	d002      	beq.n	800815c <osMutexRelease+0x70>
        stat = osErrorResource;
 8008156:	f06f 0302 	mvn.w	r3, #2
 800815a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800815c:	697b      	ldr	r3, [r7, #20]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a07      	ldr	r2, [pc, #28]	@ (8008194 <vApplicationGetIdleTaskMemory+0x2c>)
 8008178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4a06      	ldr	r2, [pc, #24]	@ (8008198 <vApplicationGetIdleTaskMemory+0x30>)
 800817e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2280      	movs	r2, #128	@ 0x80
 8008184:	601a      	str	r2, [r3, #0]
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000758 	.word	0x20000758
 8008198:	200007b4 	.word	0x200007b4

0800819c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a07      	ldr	r2, [pc, #28]	@ (80081c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80081ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4a06      	ldr	r2, [pc, #24]	@ (80081cc <vApplicationGetTimerTaskMemory+0x30>)
 80081b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081ba:	601a      	str	r2, [r3, #0]
}
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	200009b4 	.word	0x200009b4
 80081cc:	20000a10 	.word	0x20000a10

080081d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f103 0208 	add.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f103 0208 	add.w	r2, r3, #8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f103 0208 	add.w	r2, r3, #8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008288:	d103      	bne.n	8008292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e00c      	b.n	80082ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3308      	adds	r3, #8
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	e002      	b.n	80082a0 <vListInsert+0x2e>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d2f6      	bcs.n	800829a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
}
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6892      	ldr	r2, [r2, #8]
 80082fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6852      	ldr	r2, [r2, #4]
 8008304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d103      	bne.n	8008318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	1e5a      	subs	r2, r3, #1
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10b      	bne.n	8008364 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008364:	f002 fba8 	bl	800aab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008370:	68f9      	ldr	r1, [r7, #12]
 8008372:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	441a      	add	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008394:	3b01      	subs	r3, #1
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800839a:	fb01 f303 	mul.w	r3, r1, r3
 800839e:	441a      	add	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	22ff      	movs	r2, #255	@ 0xff
 80083a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	22ff      	movs	r2, #255	@ 0xff
 80083b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d114      	bne.n	80083e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01a      	beq.n	80083f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fb36 	bl	8009a38 <xTaskRemoveFromEventList>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d012      	beq.n	80083f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <xQueueGenericReset+0xd0>)
 80083d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	e009      	b.n	80083f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3310      	adds	r3, #16
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fef1 	bl	80081d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3324      	adds	r3, #36	@ 0x24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff feec 	bl	80081d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083f8:	f002 fb90 	bl	800ab1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083fc:	2301      	movs	r3, #1
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08e      	sub	sp, #56	@ 0x38
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10b      	bne.n	8008438 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	e7fd      	b.n	8008452 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <xQueueGenericCreateStatic+0x56>
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <xQueueGenericCreateStatic+0x5a>
 8008462:	2301      	movs	r3, #1
 8008464:	e000      	b.n	8008468 <xQueueGenericCreateStatic+0x5c>
 8008466:	2300      	movs	r3, #0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10b      	bne.n	8008484 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	623b      	str	r3, [r7, #32]
}
 800847e:	bf00      	nop
 8008480:	bf00      	nop
 8008482:	e7fd      	b.n	8008480 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <xQueueGenericCreateStatic+0x84>
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <xQueueGenericCreateStatic+0x88>
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <xQueueGenericCreateStatic+0x8a>
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10b      	bne.n	80084b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	61fb      	str	r3, [r7, #28]
}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	e7fd      	b.n	80084ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084b2:	2350      	movs	r3, #80	@ 0x50
 80084b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b50      	cmp	r3, #80	@ 0x50
 80084ba:	d00b      	beq.n	80084d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	61bb      	str	r3, [r7, #24]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00d      	beq.n	80084fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4613      	mov	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f840 	bl	800857c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084fe:	4618      	mov	r0, r3
 8008500:	3730      	adds	r7, #48	@ 0x30
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008506:	b580      	push	{r7, lr}
 8008508:	b08a      	sub	sp, #40	@ 0x28
 800850a:	af02      	add	r7, sp, #8
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	4613      	mov	r3, r2
 8008512:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <xQueueGenericCreate+0x2c>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	613b      	str	r3, [r7, #16]
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	e7fd      	b.n	800852e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	3350      	adds	r3, #80	@ 0x50
 8008540:	4618      	mov	r0, r3
 8008542:	f002 fbdb 	bl	800acfc <pvPortMalloc>
 8008546:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d011      	beq.n	8008572 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	3350      	adds	r3, #80	@ 0x50
 8008556:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008560:	79fa      	ldrb	r2, [r7, #7]
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f805 	bl	800857c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008572:	69bb      	ldr	r3, [r7, #24]
	}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d103      	bne.n	8008598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	e002      	b.n	800859e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085aa:	2101      	movs	r1, #1
 80085ac:	69b8      	ldr	r0, [r7, #24]
 80085ae:	f7ff fec3 	bl	8008338 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00e      	beq.n	80085ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085e2:	2300      	movs	r3, #0
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f8a3 	bl	8008734 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4603      	mov	r3, r0
 80085fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008600:	2301      	movs	r3, #1
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	2300      	movs	r3, #0
 8008606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	461a      	mov	r2, r3
 800860c:	6939      	ldr	r1, [r7, #16]
 800860e:	6978      	ldr	r0, [r7, #20]
 8008610:	f7ff ff79 	bl	8008506 <xQueueGenericCreate>
 8008614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff ffd3 	bl	80085c2 <prvInitialiseMutex>

		return xNewQueue;
 800861c:	68fb      	ldr	r3, [r7, #12]
	}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008626:	b580      	push	{r7, lr}
 8008628:	b088      	sub	sp, #32
 800862a:	af02      	add	r7, sp, #8
 800862c:	4603      	mov	r3, r0
 800862e:	6039      	str	r1, [r7, #0]
 8008630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	2300      	movs	r3, #0
 8008638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2200      	movs	r2, #0
 8008642:	6939      	ldr	r1, [r7, #16]
 8008644:	6978      	ldr	r0, [r7, #20]
 8008646:	f7ff fee1 	bl	800840c <xQueueGenericCreateStatic>
 800864a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff ffb8 	bl	80085c2 <prvInitialiseMutex>

		return xNewQueue;
 8008652:	68fb      	ldr	r3, [r7, #12]
	}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800865c:	b590      	push	{r4, r7, lr}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	60fb      	str	r3, [r7, #12]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	689c      	ldr	r4, [r3, #8]
 800868a:	f001 fb95 	bl	8009db8 <xTaskGetCurrentTaskHandle>
 800868e:	4603      	mov	r3, r0
 8008690:	429c      	cmp	r4, r3
 8008692:	d111      	bne.n	80086b8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	1e5a      	subs	r2, r3, #1
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80086a6:	2300      	movs	r3, #0
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	6938      	ldr	r0, [r7, #16]
 80086ae:	f000 f841 	bl	8008734 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80086b2:	2301      	movs	r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	e001      	b.n	80086bc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80086bc:	697b      	ldr	r3, [r7, #20]
	}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd90      	pop	{r4, r7, pc}

080086c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80086c6:	b590      	push	{r4, r7, lr}
 80086c8:	b087      	sub	sp, #28
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60fb      	str	r3, [r7, #12]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	689c      	ldr	r4, [r3, #8]
 80086f6:	f001 fb5f 	bl	8009db8 <xTaskGetCurrentTaskHandle>
 80086fa:	4603      	mov	r3, r0
 80086fc:	429c      	cmp	r4, r3
 80086fe:	d107      	bne.n	8008710 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800870a:	2301      	movs	r3, #1
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	e00c      	b.n	800872a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6938      	ldr	r0, [r7, #16]
 8008714:	f000 fa90 	bl	8008c38 <xQueueSemaphoreTake>
 8008718:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800872a:	697b      	ldr	r3, [r7, #20]
	}
 800872c:	4618      	mov	r0, r3
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	bd90      	pop	{r4, r7, pc}

08008734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08e      	sub	sp, #56	@ 0x38
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10b      	bne.n	8008768 <xQueueGenericSend+0x34>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <xQueueGenericSend+0x42>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueGenericSend+0x46>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericSend+0x48>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10b      	bne.n	8008798 <xQueueGenericSend+0x64>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	e7fd      	b.n	8008794 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d103      	bne.n	80087a6 <xQueueGenericSend+0x72>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <xQueueGenericSend+0x76>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <xQueueGenericSend+0x78>
 80087aa:	2300      	movs	r3, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <xQueueGenericSend+0x94>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	623b      	str	r3, [r7, #32]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087c8:	f001 fb06 	bl	8009dd8 <xTaskGetSchedulerState>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <xQueueGenericSend+0xa4>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <xQueueGenericSend+0xa8>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <xQueueGenericSend+0xaa>
 80087dc:	2300      	movs	r3, #0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <xQueueGenericSend+0xc6>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	61fb      	str	r3, [r7, #28]
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087fa:	f002 f95d 	bl	800aab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <xQueueGenericSend+0xdc>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d129      	bne.n	8008864 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008816:	f000 fb37 	bl	8008e88 <prvCopyDataToQueue>
 800881a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d010      	beq.n	8008846 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	3324      	adds	r3, #36	@ 0x24
 8008828:	4618      	mov	r0, r3
 800882a:	f001 f905 	bl	8009a38 <xTaskRemoveFromEventList>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d013      	beq.n	800885c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008834:	4b3f      	ldr	r3, [pc, #252]	@ (8008934 <xQueueGenericSend+0x200>)
 8008836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	e00a      	b.n	800885c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d007      	beq.n	800885c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800884c:	4b39      	ldr	r3, [pc, #228]	@ (8008934 <xQueueGenericSend+0x200>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800885c:	f002 f95e 	bl	800ab1c <vPortExitCritical>
				return pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	e063      	b.n	800892c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800886a:	f002 f957 	bl	800ab1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800886e:	2300      	movs	r3, #0
 8008870:	e05c      	b.n	800892c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008878:	f107 0314 	add.w	r3, r7, #20
 800887c:	4618      	mov	r0, r3
 800887e:	f001 f93f 	bl	8009b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008882:	2301      	movs	r3, #1
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008886:	f002 f949 	bl	800ab1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800888a:	f000 feaf 	bl	80095ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800888e:	f002 f913 	bl	800aab8 <vPortEnterCritical>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008898:	b25b      	sxtb	r3, r3
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800889e:	d103      	bne.n	80088a8 <xQueueGenericSend+0x174>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ae:	b25b      	sxtb	r3, r3
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088b4:	d103      	bne.n	80088be <xQueueGenericSend+0x18a>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088be:	f002 f92d 	bl	800ab1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088c2:	1d3a      	adds	r2, r7, #4
 80088c4:	f107 0314 	add.w	r3, r7, #20
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f92e 	bl	8009b2c <xTaskCheckForTimeOut>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d124      	bne.n	8008920 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088d8:	f000 fbce 	bl	8009078 <prvIsQueueFull>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d018      	beq.n	8008914 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	3310      	adds	r3, #16
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 f852 	bl	8009994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088f2:	f000 fb59 	bl	8008fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088f6:	f000 fe87 	bl	8009608 <xTaskResumeAll>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f47f af7c 	bne.w	80087fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008902:	4b0c      	ldr	r3, [pc, #48]	@ (8008934 <xQueueGenericSend+0x200>)
 8008904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	e772      	b.n	80087fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008916:	f000 fb47 	bl	8008fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800891a:	f000 fe75 	bl	8009608 <xTaskResumeAll>
 800891e:	e76c      	b.n	80087fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008922:	f000 fb41 	bl	8008fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008926:	f000 fe6f 	bl	8009608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800892a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800892c:	4618      	mov	r0, r3
 800892e:	3738      	adds	r7, #56	@ 0x38
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	e000ed04 	.word	0xe000ed04

08008938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b090      	sub	sp, #64	@ 0x40
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800894a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10b      	bne.n	8008968 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	e7fd      	b.n	8008964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <xQueueGenericSendFromISR+0x3e>
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xQueueGenericSendFromISR+0x42>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericSendFromISR+0x44>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d103      	bne.n	80089a6 <xQueueGenericSendFromISR+0x6e>
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <xQueueGenericSendFromISR+0x72>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <xQueueGenericSendFromISR+0x74>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	623b      	str	r3, [r7, #32]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089c8:	f002 f956 	bl	800ac78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089cc:	f3ef 8211 	mrs	r2, BASEPRI
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	61fa      	str	r2, [r7, #28]
 80089e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d302      	bcc.n	80089fa <xQueueGenericSendFromISR+0xc2>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d12f      	bne.n	8008a5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a10:	f000 fa3a 	bl	8008e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a1c:	d112      	bne.n	8008a44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d016      	beq.n	8008a54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	3324      	adds	r3, #36	@ 0x24
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 f804 	bl	8009a38 <xTaskRemoveFromEventList>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00e      	beq.n	8008a54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	e007      	b.n	8008a54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a48:	3301      	adds	r3, #1
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	b25a      	sxtb	r2, r3
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a54:	2301      	movs	r3, #1
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a58:	e001      	b.n	8008a5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3740      	adds	r7, #64	@ 0x40
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08c      	sub	sp, #48	@ 0x30
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10b      	bne.n	8008aa6 <xQueueReceive+0x32>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	623b      	str	r3, [r7, #32]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <xQueueReceive+0x40>
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <xQueueReceive+0x44>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <xQueueReceive+0x46>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10b      	bne.n	8008ad6 <xQueueReceive+0x62>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	61fb      	str	r3, [r7, #28]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ad6:	f001 f97f 	bl	8009dd8 <xTaskGetSchedulerState>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <xQueueReceive+0x72>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <xQueueReceive+0x76>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueReceive+0x78>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10b      	bne.n	8008b08 <xQueueReceive+0x94>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	61bb      	str	r3, [r7, #24]
}
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	e7fd      	b.n	8008b04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b08:	f001 ffd6 	bl	800aab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01f      	beq.n	8008b58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b1c:	f000 fa1e 	bl	8008f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	1e5a      	subs	r2, r3, #1
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00f      	beq.n	8008b50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b32:	3310      	adds	r3, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 ff7f 	bl	8009a38 <xTaskRemoveFromEventList>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b40:	4b3c      	ldr	r3, [pc, #240]	@ (8008c34 <xQueueReceive+0x1c0>)
 8008b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b50:	f001 ffe4 	bl	800ab1c <vPortExitCritical>
				return pdPASS;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e069      	b.n	8008c2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d103      	bne.n	8008b66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b5e:	f001 ffdd 	bl	800ab1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b62:	2300      	movs	r3, #0
 8008b64:	e062      	b.n	8008c2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b6c:	f107 0310 	add.w	r3, r7, #16
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 ffc5 	bl	8009b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b7a:	f001 ffcf 	bl	800ab1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b7e:	f000 fd35 	bl	80095ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b82:	f001 ff99 	bl	800aab8 <vPortEnterCritical>
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b92:	d103      	bne.n	8008b9c <xQueueReceive+0x128>
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ba2:	b25b      	sxtb	r3, r3
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ba8:	d103      	bne.n	8008bb2 <xQueueReceive+0x13e>
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bb2:	f001 ffb3 	bl	800ab1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bb6:	1d3a      	adds	r2, r7, #4
 8008bb8:	f107 0310 	add.w	r3, r7, #16
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 ffb4 	bl	8009b2c <xTaskCheckForTimeOut>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d123      	bne.n	8008c12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bcc:	f000 fa3e 	bl	800904c <prvIsQueueEmpty>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d017      	beq.n	8008c06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd8:	3324      	adds	r3, #36	@ 0x24
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fed8 	bl	8009994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be6:	f000 f9df 	bl	8008fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bea:	f000 fd0d 	bl	8009608 <xTaskResumeAll>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d189      	bne.n	8008b08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8008c34 <xQueueReceive+0x1c0>)
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	e780      	b.n	8008b08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c08:	f000 f9ce 	bl	8008fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c0c:	f000 fcfc 	bl	8009608 <xTaskResumeAll>
 8008c10:	e77a      	b.n	8008b08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c14:	f000 f9c8 	bl	8008fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c18:	f000 fcf6 	bl	8009608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c1e:	f000 fa15 	bl	800904c <prvIsQueueEmpty>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f43f af6f 	beq.w	8008b08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3730      	adds	r7, #48	@ 0x30
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	@ 0x38
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10b      	bne.n	8008c6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	623b      	str	r3, [r7, #32]
}
 8008c66:	bf00      	nop
 8008c68:	bf00      	nop
 8008c6a:	e7fd      	b.n	8008c68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	61fb      	str	r3, [r7, #28]
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c8c:	f001 f8a4 	bl	8009dd8 <xTaskGetSchedulerState>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <xQueueSemaphoreTake+0x64>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <xQueueSemaphoreTake+0x68>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <xQueueSemaphoreTake+0x6a>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	61bb      	str	r3, [r7, #24]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cbe:	f001 fefb 	bl	800aab8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d024      	beq.n	8008d18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	1e5a      	subs	r2, r3, #1
 8008cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cde:	f001 f9f5 	bl	800a0cc <pvTaskIncrementMutexHeldCount>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00f      	beq.n	8008d10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fe9f 	bl	8009a38 <xTaskRemoveFromEventList>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d00:	4b54      	ldr	r3, [pc, #336]	@ (8008e54 <xQueueSemaphoreTake+0x21c>)
 8008d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d10:	f001 ff04 	bl	800ab1c <vPortExitCritical>
				return pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e098      	b.n	8008e4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d112      	bne.n	8008d44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	617b      	str	r3, [r7, #20]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d3c:	f001 feee 	bl	800ab1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e082      	b.n	8008e4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d4a:	f107 030c 	add.w	r3, r7, #12
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fed6 	bl	8009b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d58:	f001 fee0 	bl	800ab1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d5c:	f000 fc46 	bl	80095ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d60:	f001 feaa 	bl	800aab8 <vPortEnterCritical>
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d70:	d103      	bne.n	8008d7a <xQueueSemaphoreTake+0x142>
 8008d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d80:	b25b      	sxtb	r3, r3
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d86:	d103      	bne.n	8008d90 <xQueueSemaphoreTake+0x158>
 8008d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d90:	f001 fec4 	bl	800ab1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d94:	463a      	mov	r2, r7
 8008d96:	f107 030c 	add.w	r3, r7, #12
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fec5 	bl	8009b2c <xTaskCheckForTimeOut>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d132      	bne.n	8008e0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008da8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008daa:	f000 f94f 	bl	800904c <prvIsQueueEmpty>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d026      	beq.n	8008e02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d109      	bne.n	8008dd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008dbc:	f001 fe7c 	bl	800aab8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f001 f825 	bl	8009e14 <xTaskPriorityInherit>
 8008dca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008dcc:	f001 fea6 	bl	800ab1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd2:	3324      	adds	r3, #36	@ 0x24
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fddb 	bl	8009994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008de0:	f000 f8e2 	bl	8008fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008de4:	f000 fc10 	bl	8009608 <xTaskResumeAll>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f47f af67 	bne.w	8008cbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008df0:	4b18      	ldr	r3, [pc, #96]	@ (8008e54 <xQueueSemaphoreTake+0x21c>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	e75d      	b.n	8008cbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e04:	f000 f8d0 	bl	8008fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e08:	f000 fbfe 	bl	8009608 <xTaskResumeAll>
 8008e0c:	e757      	b.n	8008cbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e10:	f000 f8ca 	bl	8008fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e14:	f000 fbf8 	bl	8009608 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e1a:	f000 f917 	bl	800904c <prvIsQueueEmpty>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f43f af4c 	beq.w	8008cbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00d      	beq.n	8008e48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e2c:	f001 fe44 	bl	800aab8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e32:	f000 f811 	bl	8008e58 <prvGetDisinheritPriorityAfterTimeout>
 8008e36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f001 f8c0 	bl	8009fc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e44:	f001 fe6a 	bl	800ab1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3738      	adds	r7, #56	@ 0x38
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d006      	beq.n	8008e76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e001      	b.n	8008e7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10d      	bne.n	8008ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d14d      	bne.n	8008f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 f816 	bl	8009ee4 <xTaskPriorityDisinherit>
 8008eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	e043      	b.n	8008f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d119      	bne.n	8008efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6858      	ldr	r0, [r3, #4]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	f002 fa9d 	bl	800b412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d32b      	bcc.n	8008f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	e026      	b.n	8008f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68d8      	ldr	r0, [r3, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	461a      	mov	r2, r3
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	f002 fa83 	bl	800b412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	425b      	negs	r3, r3
 8008f16:	441a      	add	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d207      	bcs.n	8008f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	425b      	negs	r3, r3
 8008f32:	441a      	add	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d105      	bne.n	8008f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f52:	697b      	ldr	r3, [r7, #20]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f76:	441a      	add	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d303      	bcc.n	8008f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68d9      	ldr	r1, [r3, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6838      	ldr	r0, [r7, #0]
 8008f9c:	f002 fa39 	bl	800b412 <memcpy>
	}
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fb0:	f001 fd82 	bl	800aab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fbc:	e011      	b.n	8008fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d012      	beq.n	8008fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3324      	adds	r3, #36	@ 0x24
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fd34 	bl	8009a38 <xTaskRemoveFromEventList>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fd6:	f000 fe0d 	bl	8009bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dce9      	bgt.n	8008fbe <prvUnlockQueue+0x16>
 8008fea:	e000      	b.n	8008fee <prvUnlockQueue+0x46>
					break;
 8008fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	22ff      	movs	r2, #255	@ 0xff
 8008ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ff6:	f001 fd91 	bl	800ab1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ffa:	f001 fd5d 	bl	800aab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009006:	e011      	b.n	800902c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d012      	beq.n	8009036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3310      	adds	r3, #16
 8009014:	4618      	mov	r0, r3
 8009016:	f000 fd0f 	bl	8009a38 <xTaskRemoveFromEventList>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009020:	f000 fde8 	bl	8009bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	3b01      	subs	r3, #1
 8009028:	b2db      	uxtb	r3, r3
 800902a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009030:	2b00      	cmp	r3, #0
 8009032:	dce9      	bgt.n	8009008 <prvUnlockQueue+0x60>
 8009034:	e000      	b.n	8009038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	22ff      	movs	r2, #255	@ 0xff
 800903c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009040:	f001 fd6c 	bl	800ab1c <vPortExitCritical>
}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009054:	f001 fd30 	bl	800aab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e001      	b.n	800906a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800906a:	f001 fd57 	bl	800ab1c <vPortExitCritical>

	return xReturn;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009080:	f001 fd1a 	bl	800aab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908c:	429a      	cmp	r2, r3
 800908e:	d102      	bne.n	8009096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009090:	2301      	movs	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e001      	b.n	800909a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800909a:	f001 fd3f 	bl	800ab1c <vPortExitCritical>

	return xReturn;
 800909e:	68fb      	ldr	r3, [r7, #12]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	e014      	b.n	80090e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090b8:	4a0f      	ldr	r2, [pc, #60]	@ (80090f8 <vQueueAddToRegistry+0x50>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10b      	bne.n	80090dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090c4:	490c      	ldr	r1, [pc, #48]	@ (80090f8 <vQueueAddToRegistry+0x50>)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090ce:	4a0a      	ldr	r2, [pc, #40]	@ (80090f8 <vQueueAddToRegistry+0x50>)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4413      	add	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090da:	e006      	b.n	80090ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b07      	cmp	r3, #7
 80090e6:	d9e7      	bls.n	80090b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000e10 	.word	0x20000e10

080090fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800910c:	f001 fcd4 	bl	800aab8 <vPortEnterCritical>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009116:	b25b      	sxtb	r3, r3
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800911c:	d103      	bne.n	8009126 <vQueueWaitForMessageRestricted+0x2a>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009132:	d103      	bne.n	800913c <vQueueWaitForMessageRestricted+0x40>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800913c:	f001 fcee 	bl	800ab1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3324      	adds	r3, #36	@ 0x24
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fc45 	bl	80099e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	f7ff ff26 	bl	8008fa8 <prvUnlockQueue>
	}
 800915c:	bf00      	nop
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	@ 0x38
 8009168:	af04      	add	r7, sp, #16
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	623b      	str	r3, [r7, #32]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	61fb      	str	r3, [r7, #28]
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	e7fd      	b.n	80091aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091ae:	235c      	movs	r3, #92	@ 0x5c
 80091b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80091b6:	d00b      	beq.n	80091d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	61bb      	str	r3, [r7, #24]
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01e      	beq.n	8009216 <xTaskCreateStatic+0xb2>
 80091d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01b      	beq.n	8009216 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091f0:	2300      	movs	r3, #0
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	f107 0314 	add.w	r3, r7, #20
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f850 	bl	80092ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800920e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009210:	f000 f8de 	bl	80093d0 <prvAddNewTaskToReadyList>
 8009214:	e001      	b.n	800921a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800921a:	697b      	ldr	r3, [r7, #20]
	}
 800921c:	4618      	mov	r0, r3
 800921e:	3728      	adds	r7, #40	@ 0x28
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08c      	sub	sp, #48	@ 0x30
 8009228:	af04      	add	r7, sp, #16
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fd5f 	bl	800acfc <pvPortMalloc>
 800923e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00e      	beq.n	8009264 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009246:	205c      	movs	r0, #92	@ 0x5c
 8009248:	f001 fd58 	bl	800acfc <pvPortMalloc>
 800924c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	631a      	str	r2, [r3, #48]	@ 0x30
 800925a:	e005      	b.n	8009268 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800925c:	6978      	ldr	r0, [r7, #20]
 800925e:	f001 fe1b 	bl	800ae98 <vPortFree>
 8009262:	e001      	b.n	8009268 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d017      	beq.n	800929e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	2300      	movs	r3, #0
 800927a:	9303      	str	r3, [sp, #12]
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	9302      	str	r3, [sp, #8]
 8009280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f80e 	bl	80092ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009292:	69f8      	ldr	r0, [r7, #28]
 8009294:	f000 f89c 	bl	80093d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009298:	2301      	movs	r3, #1
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	e002      	b.n	80092a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800929e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092a4:	69bb      	ldr	r3, [r7, #24]
	}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b088      	sub	sp, #32
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	461a      	mov	r2, r3
 80092c6:	21a5      	movs	r1, #165	@ 0xa5
 80092c8:	f002 f86e 	bl	800b3a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092d6:	3b01      	subs	r3, #1
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f023 0307 	bic.w	r3, r3, #7
 80092e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	617b      	str	r3, [r7, #20]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01f      	beq.n	800934e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	e012      	b.n	800933a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	7819      	ldrb	r1, [r3, #0]
 800931c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	3334      	adds	r3, #52	@ 0x34
 8009324:	460a      	mov	r2, r1
 8009326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3301      	adds	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	2b0f      	cmp	r3, #15
 800933e:	d9e9      	bls.n	8009314 <prvInitialiseNewTask+0x66>
 8009340:	e000      	b.n	8009344 <prvInitialiseNewTask+0x96>
			{
				break;
 8009342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800934c:	e003      	b.n	8009356 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	2b37      	cmp	r3, #55	@ 0x37
 800935a:	d901      	bls.n	8009360 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800935c:	2337      	movs	r3, #55	@ 0x37
 800935e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009364:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800936a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	2200      	movs	r2, #0
 8009370:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	3304      	adds	r3, #4
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe ff4a 	bl	8008210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	3318      	adds	r3, #24
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe ff45 	bl	8008210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800938c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800939a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	68f9      	ldr	r1, [r7, #12]
 80093ae:	69b8      	ldr	r0, [r7, #24]
 80093b0:	f001 fa4e 	bl	800a850 <pxPortInitialiseStack>
 80093b4:	4602      	mov	r2, r0
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093c6:	bf00      	nop
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093d8:	f001 fb6e 	bl	800aab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093dc:	4b2d      	ldr	r3, [pc, #180]	@ (8009494 <prvAddNewTaskToReadyList+0xc4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009494 <prvAddNewTaskToReadyList+0xc4>)
 80093e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009498 <prvAddNewTaskToReadyList+0xc8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009498 <prvAddNewTaskToReadyList+0xc8>)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093f4:	4b27      	ldr	r3, [pc, #156]	@ (8009494 <prvAddNewTaskToReadyList+0xc4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d110      	bne.n	800941e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093fc:	f000 fc1e 	bl	8009c3c <prvInitialiseTaskLists>
 8009400:	e00d      	b.n	800941e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009402:	4b26      	ldr	r3, [pc, #152]	@ (800949c <prvAddNewTaskToReadyList+0xcc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800940a:	4b23      	ldr	r3, [pc, #140]	@ (8009498 <prvAddNewTaskToReadyList+0xc8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	429a      	cmp	r2, r3
 8009416:	d802      	bhi.n	800941e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009418:	4a1f      	ldr	r2, [pc, #124]	@ (8009498 <prvAddNewTaskToReadyList+0xc8>)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800941e:	4b20      	ldr	r3, [pc, #128]	@ (80094a0 <prvAddNewTaskToReadyList+0xd0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	4a1e      	ldr	r2, [pc, #120]	@ (80094a0 <prvAddNewTaskToReadyList+0xd0>)
 8009426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009428:	4b1d      	ldr	r3, [pc, #116]	@ (80094a0 <prvAddNewTaskToReadyList+0xd0>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009434:	4b1b      	ldr	r3, [pc, #108]	@ (80094a4 <prvAddNewTaskToReadyList+0xd4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d903      	bls.n	8009444 <prvAddNewTaskToReadyList+0x74>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	4a18      	ldr	r2, [pc, #96]	@ (80094a4 <prvAddNewTaskToReadyList+0xd4>)
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009448:	4613      	mov	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <prvAddNewTaskToReadyList+0xd8>)
 8009452:	441a      	add	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3304      	adds	r3, #4
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f7fe fee5 	bl	800822a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009460:	f001 fb5c 	bl	800ab1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009464:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <prvAddNewTaskToReadyList+0xcc>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00e      	beq.n	800948a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <prvAddNewTaskToReadyList+0xc8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009476:	429a      	cmp	r2, r3
 8009478:	d207      	bcs.n	800948a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800947a:	4b0c      	ldr	r3, [pc, #48]	@ (80094ac <prvAddNewTaskToReadyList+0xdc>)
 800947c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20001324 	.word	0x20001324
 8009498:	20000e50 	.word	0x20000e50
 800949c:	20001330 	.word	0x20001330
 80094a0:	20001340 	.word	0x20001340
 80094a4:	2000132c 	.word	0x2000132c
 80094a8:	20000e54 	.word	0x20000e54
 80094ac:	e000ed04 	.word	0xe000ed04

080094b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d018      	beq.n	80094f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094c2:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <vTaskDelay+0x64>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <vTaskDelay+0x32>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	60bb      	str	r3, [r7, #8]
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	e7fd      	b.n	80094de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094e2:	f000 f883 	bl	80095ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094e6:	2100      	movs	r1, #0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fe03 	bl	800a0f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094ee:	f000 f88b 	bl	8009608 <xTaskResumeAll>
 80094f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d107      	bne.n	800950a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094fa:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <vTaskDelay+0x68>)
 80094fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	2000134c 	.word	0x2000134c
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	@ 0x28
 8009520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800952a:	463a      	mov	r2, r7
 800952c:	1d39      	adds	r1, r7, #4
 800952e:	f107 0308 	add.w	r3, r7, #8
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fe18 	bl	8008168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	9202      	str	r2, [sp, #8]
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	2300      	movs	r3, #0
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	2300      	movs	r3, #0
 8009548:	460a      	mov	r2, r1
 800954a:	4922      	ldr	r1, [pc, #136]	@ (80095d4 <vTaskStartScheduler+0xb8>)
 800954c:	4822      	ldr	r0, [pc, #136]	@ (80095d8 <vTaskStartScheduler+0xbc>)
 800954e:	f7ff fe09 	bl	8009164 <xTaskCreateStatic>
 8009552:	4603      	mov	r3, r0
 8009554:	4a21      	ldr	r2, [pc, #132]	@ (80095dc <vTaskStartScheduler+0xc0>)
 8009556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009558:	4b20      	ldr	r3, [pc, #128]	@ (80095dc <vTaskStartScheduler+0xc0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009560:	2301      	movs	r3, #1
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e001      	b.n	800956a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d102      	bne.n	8009576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009570:	f000 fe14 	bl	800a19c <xTimerCreateTimerTask>
 8009574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d116      	bne.n	80095aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	613b      	str	r3, [r7, #16]
}
 800958e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009590:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <vTaskStartScheduler+0xc4>)
 8009592:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009596:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009598:	4b12      	ldr	r3, [pc, #72]	@ (80095e4 <vTaskStartScheduler+0xc8>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800959e:	4b12      	ldr	r3, [pc, #72]	@ (80095e8 <vTaskStartScheduler+0xcc>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095a4:	f001 f9e4 	bl	800a970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095a8:	e00f      	b.n	80095ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095b0:	d10b      	bne.n	80095ca <vTaskStartScheduler+0xae>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60fb      	str	r3, [r7, #12]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <vTaskStartScheduler+0xaa>
}
 80095ca:	bf00      	nop
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	0800c7cc 	.word	0x0800c7cc
 80095d8:	08009c0d 	.word	0x08009c0d
 80095dc:	20001348 	.word	0x20001348
 80095e0:	20001344 	.word	0x20001344
 80095e4:	20001330 	.word	0x20001330
 80095e8:	20001328 	.word	0x20001328

080095ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095f0:	4b04      	ldr	r3, [pc, #16]	@ (8009604 <vTaskSuspendAll+0x18>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	4a03      	ldr	r2, [pc, #12]	@ (8009604 <vTaskSuspendAll+0x18>)
 80095f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095fa:	bf00      	nop
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	2000134c 	.word	0x2000134c

08009608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009612:	2300      	movs	r3, #0
 8009614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009616:	4b42      	ldr	r3, [pc, #264]	@ (8009720 <xTaskResumeAll+0x118>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10b      	bne.n	8009636 <xTaskResumeAll+0x2e>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	603b      	str	r3, [r7, #0]
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	e7fd      	b.n	8009632 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009636:	f001 fa3f 	bl	800aab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800963a:	4b39      	ldr	r3, [pc, #228]	@ (8009720 <xTaskResumeAll+0x118>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3b01      	subs	r3, #1
 8009640:	4a37      	ldr	r2, [pc, #220]	@ (8009720 <xTaskResumeAll+0x118>)
 8009642:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009644:	4b36      	ldr	r3, [pc, #216]	@ (8009720 <xTaskResumeAll+0x118>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d162      	bne.n	8009712 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800964c:	4b35      	ldr	r3, [pc, #212]	@ (8009724 <xTaskResumeAll+0x11c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d05e      	beq.n	8009712 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009654:	e02f      	b.n	80096b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009656:	4b34      	ldr	r3, [pc, #208]	@ (8009728 <xTaskResumeAll+0x120>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3318      	adds	r3, #24
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fe3e 	bl	80082e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3304      	adds	r3, #4
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fe39 	bl	80082e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009676:	4b2d      	ldr	r3, [pc, #180]	@ (800972c <xTaskResumeAll+0x124>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d903      	bls.n	8009686 <xTaskResumeAll+0x7e>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009682:	4a2a      	ldr	r2, [pc, #168]	@ (800972c <xTaskResumeAll+0x124>)
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4a27      	ldr	r2, [pc, #156]	@ (8009730 <xTaskResumeAll+0x128>)
 8009694:	441a      	add	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3304      	adds	r3, #4
 800969a:	4619      	mov	r1, r3
 800969c:	4610      	mov	r0, r2
 800969e:	f7fe fdc4 	bl	800822a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a6:	4b23      	ldr	r3, [pc, #140]	@ (8009734 <xTaskResumeAll+0x12c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d302      	bcc.n	80096b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096b0:	4b21      	ldr	r3, [pc, #132]	@ (8009738 <xTaskResumeAll+0x130>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009728 <xTaskResumeAll+0x120>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1cb      	bne.n	8009656 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096c4:	f000 fb58 	bl	8009d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096c8:	4b1c      	ldr	r3, [pc, #112]	@ (800973c <xTaskResumeAll+0x134>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d010      	beq.n	80096f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096d4:	f000 f846 	bl	8009764 <xTaskIncrementTick>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096de:	4b16      	ldr	r3, [pc, #88]	@ (8009738 <xTaskResumeAll+0x130>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f1      	bne.n	80096d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80096f0:	4b12      	ldr	r3, [pc, #72]	@ (800973c <xTaskResumeAll+0x134>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096f6:	4b10      	ldr	r3, [pc, #64]	@ (8009738 <xTaskResumeAll+0x130>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096fe:	2301      	movs	r3, #1
 8009700:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009702:	4b0f      	ldr	r3, [pc, #60]	@ (8009740 <xTaskResumeAll+0x138>)
 8009704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009712:	f001 fa03 	bl	800ab1c <vPortExitCritical>

	return xAlreadyYielded;
 8009716:	68bb      	ldr	r3, [r7, #8]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	2000134c 	.word	0x2000134c
 8009724:	20001324 	.word	0x20001324
 8009728:	200012e4 	.word	0x200012e4
 800972c:	2000132c 	.word	0x2000132c
 8009730:	20000e54 	.word	0x20000e54
 8009734:	20000e50 	.word	0x20000e50
 8009738:	20001338 	.word	0x20001338
 800973c:	20001334 	.word	0x20001334
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800974a:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <xTaskGetTickCount+0x1c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009750:	687b      	ldr	r3, [r7, #4]
}
 8009752:	4618      	mov	r0, r3
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20001328 	.word	0x20001328

08009764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800976e:	4b4f      	ldr	r3, [pc, #316]	@ (80098ac <xTaskIncrementTick+0x148>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f040 8090 	bne.w	8009898 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009778:	4b4d      	ldr	r3, [pc, #308]	@ (80098b0 <xTaskIncrementTick+0x14c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009780:	4a4b      	ldr	r2, [pc, #300]	@ (80098b0 <xTaskIncrementTick+0x14c>)
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d121      	bne.n	80097d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800978c:	4b49      	ldr	r3, [pc, #292]	@ (80098b4 <xTaskIncrementTick+0x150>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00b      	beq.n	80097ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	603b      	str	r3, [r7, #0]
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	e7fd      	b.n	80097aa <xTaskIncrementTick+0x46>
 80097ae:	4b41      	ldr	r3, [pc, #260]	@ (80098b4 <xTaskIncrementTick+0x150>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	4b40      	ldr	r3, [pc, #256]	@ (80098b8 <xTaskIncrementTick+0x154>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a3e      	ldr	r2, [pc, #248]	@ (80098b4 <xTaskIncrementTick+0x150>)
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	4a3e      	ldr	r2, [pc, #248]	@ (80098b8 <xTaskIncrementTick+0x154>)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	4b3e      	ldr	r3, [pc, #248]	@ (80098bc <xTaskIncrementTick+0x158>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3301      	adds	r3, #1
 80097c8:	4a3c      	ldr	r2, [pc, #240]	@ (80098bc <xTaskIncrementTick+0x158>)
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	f000 fad4 	bl	8009d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097d0:	4b3b      	ldr	r3, [pc, #236]	@ (80098c0 <xTaskIncrementTick+0x15c>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d349      	bcc.n	800986e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097da:	4b36      	ldr	r3, [pc, #216]	@ (80098b4 <xTaskIncrementTick+0x150>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d104      	bne.n	80097ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097e4:	4b36      	ldr	r3, [pc, #216]	@ (80098c0 <xTaskIncrementTick+0x15c>)
 80097e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097ea:	601a      	str	r2, [r3, #0]
					break;
 80097ec:	e03f      	b.n	800986e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ee:	4b31      	ldr	r3, [pc, #196]	@ (80098b4 <xTaskIncrementTick+0x150>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d203      	bcs.n	800980e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009806:	4a2e      	ldr	r2, [pc, #184]	@ (80098c0 <xTaskIncrementTick+0x15c>)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800980c:	e02f      	b.n	800986e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	3304      	adds	r3, #4
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fd66 	bl	80082e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981c:	2b00      	cmp	r3, #0
 800981e:	d004      	beq.n	800982a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3318      	adds	r3, #24
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fd5d 	bl	80082e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800982e:	4b25      	ldr	r3, [pc, #148]	@ (80098c4 <xTaskIncrementTick+0x160>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	429a      	cmp	r2, r3
 8009834:	d903      	bls.n	800983e <xTaskIncrementTick+0xda>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983a:	4a22      	ldr	r2, [pc, #136]	@ (80098c4 <xTaskIncrementTick+0x160>)
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4a1f      	ldr	r2, [pc, #124]	@ (80098c8 <xTaskIncrementTick+0x164>)
 800984c:	441a      	add	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	3304      	adds	r3, #4
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7fe fce8 	bl	800822a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985e:	4b1b      	ldr	r3, [pc, #108]	@ (80098cc <xTaskIncrementTick+0x168>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	429a      	cmp	r2, r3
 8009866:	d3b8      	bcc.n	80097da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800986c:	e7b5      	b.n	80097da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800986e:	4b17      	ldr	r3, [pc, #92]	@ (80098cc <xTaskIncrementTick+0x168>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009874:	4914      	ldr	r1, [pc, #80]	@ (80098c8 <xTaskIncrementTick+0x164>)
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d901      	bls.n	800988a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009886:	2301      	movs	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800988a:	4b11      	ldr	r3, [pc, #68]	@ (80098d0 <xTaskIncrementTick+0x16c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009892:	2301      	movs	r3, #1
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	e004      	b.n	80098a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009898:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <xTaskIncrementTick+0x170>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	4a0d      	ldr	r2, [pc, #52]	@ (80098d4 <xTaskIncrementTick+0x170>)
 80098a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098a2:	697b      	ldr	r3, [r7, #20]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	2000134c 	.word	0x2000134c
 80098b0:	20001328 	.word	0x20001328
 80098b4:	200012dc 	.word	0x200012dc
 80098b8:	200012e0 	.word	0x200012e0
 80098bc:	2000133c 	.word	0x2000133c
 80098c0:	20001344 	.word	0x20001344
 80098c4:	2000132c 	.word	0x2000132c
 80098c8:	20000e54 	.word	0x20000e54
 80098cc:	20000e50 	.word	0x20000e50
 80098d0:	20001338 	.word	0x20001338
 80098d4:	20001334 	.word	0x20001334

080098d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098de:	4b28      	ldr	r3, [pc, #160]	@ (8009980 <vTaskSwitchContext+0xa8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098e6:	4b27      	ldr	r3, [pc, #156]	@ (8009984 <vTaskSwitchContext+0xac>)
 80098e8:	2201      	movs	r2, #1
 80098ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098ec:	e042      	b.n	8009974 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80098ee:	4b25      	ldr	r3, [pc, #148]	@ (8009984 <vTaskSwitchContext+0xac>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f4:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <vTaskSwitchContext+0xb0>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e011      	b.n	8009920 <vTaskSwitchContext+0x48>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10b      	bne.n	800991a <vTaskSwitchContext+0x42>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	607b      	str	r3, [r7, #4]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <vTaskSwitchContext+0x3e>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b01      	subs	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	491a      	ldr	r1, [pc, #104]	@ (800998c <vTaskSwitchContext+0xb4>)
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0e3      	beq.n	80098fc <vTaskSwitchContext+0x24>
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4a13      	ldr	r2, [pc, #76]	@ (800998c <vTaskSwitchContext+0xb4>)
 8009940:	4413      	add	r3, r2
 8009942:	60bb      	str	r3, [r7, #8]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	605a      	str	r2, [r3, #4]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	3308      	adds	r3, #8
 8009956:	429a      	cmp	r2, r3
 8009958:	d104      	bne.n	8009964 <vTaskSwitchContext+0x8c>
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	605a      	str	r2, [r3, #4]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	4a09      	ldr	r2, [pc, #36]	@ (8009990 <vTaskSwitchContext+0xb8>)
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	4a06      	ldr	r2, [pc, #24]	@ (8009988 <vTaskSwitchContext+0xb0>)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6013      	str	r3, [r2, #0]
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	2000134c 	.word	0x2000134c
 8009984:	20001338 	.word	0x20001338
 8009988:	2000132c 	.word	0x2000132c
 800998c:	20000e54 	.word	0x20000e54
 8009990:	20000e50 	.word	0x20000e50

08009994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10b      	bne.n	80099bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	60fb      	str	r3, [r7, #12]
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	e7fd      	b.n	80099b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099bc:	4b07      	ldr	r3, [pc, #28]	@ (80099dc <vTaskPlaceOnEventList+0x48>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3318      	adds	r3, #24
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fe fc54 	bl	8008272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ca:	2101      	movs	r1, #1
 80099cc:	6838      	ldr	r0, [r7, #0]
 80099ce:	f000 fb91 	bl	800a0f4 <prvAddCurrentTaskToDelayedList>
}
 80099d2:	bf00      	nop
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20000e50 	.word	0x20000e50

080099e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10b      	bne.n	8009a0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	617b      	str	r3, [r7, #20]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a34 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3318      	adds	r3, #24
 8009a10:	4619      	mov	r1, r3
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7fe fc09 	bl	800822a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a24:	6879      	ldr	r1, [r7, #4]
 8009a26:	68b8      	ldr	r0, [r7, #8]
 8009a28:	f000 fb64 	bl	800a0f4 <prvAddCurrentTaskToDelayedList>
	}
 8009a2c:	bf00      	nop
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000e50 	.word	0x20000e50

08009a38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10b      	bne.n	8009a66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60fb      	str	r3, [r7, #12]
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	e7fd      	b.n	8009a62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3318      	adds	r3, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fc3a 	bl	80082e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae8 <xTaskRemoveFromEventList+0xb0>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11d      	bne.n	8009ab4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fc31 	bl	80082e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a86:	4b19      	ldr	r3, [pc, #100]	@ (8009aec <xTaskRemoveFromEventList+0xb4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d903      	bls.n	8009a96 <xTaskRemoveFromEventList+0x5e>
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a92:	4a16      	ldr	r2, [pc, #88]	@ (8009aec <xTaskRemoveFromEventList+0xb4>)
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4a13      	ldr	r2, [pc, #76]	@ (8009af0 <xTaskRemoveFromEventList+0xb8>)
 8009aa4:	441a      	add	r2, r3
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f7fe fbbc 	bl	800822a <vListInsertEnd>
 8009ab2:	e005      	b.n	8009ac0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3318      	adds	r3, #24
 8009ab8:	4619      	mov	r1, r3
 8009aba:	480e      	ldr	r0, [pc, #56]	@ (8009af4 <xTaskRemoveFromEventList+0xbc>)
 8009abc:	f7fe fbb5 	bl	800822a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8009af8 <xTaskRemoveFromEventList+0xc0>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d905      	bls.n	8009ada <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <xTaskRemoveFromEventList+0xc4>)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e001      	b.n	8009ade <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ade:	697b      	ldr	r3, [r7, #20]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	2000134c 	.word	0x2000134c
 8009aec:	2000132c 	.word	0x2000132c
 8009af0:	20000e54 	.word	0x20000e54
 8009af4:	200012e4 	.word	0x200012e4
 8009af8:	20000e50 	.word	0x20000e50
 8009afc:	20001338 	.word	0x20001338

08009b00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b08:	4b06      	ldr	r3, [pc, #24]	@ (8009b24 <vTaskInternalSetTimeOutState+0x24>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b10:	4b05      	ldr	r3, [pc, #20]	@ (8009b28 <vTaskInternalSetTimeOutState+0x28>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	605a      	str	r2, [r3, #4]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	2000133c 	.word	0x2000133c
 8009b28:	20001328 	.word	0x20001328

08009b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10b      	bne.n	8009b54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	613b      	str	r3, [r7, #16]
}
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	e7fd      	b.n	8009b50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10b      	bne.n	8009b72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	60fb      	str	r3, [r7, #12]
}
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	e7fd      	b.n	8009b6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b72:	f000 ffa1 	bl	800aab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b76:	4b1d      	ldr	r3, [pc, #116]	@ (8009bec <xTaskCheckForTimeOut+0xc0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b8e:	d102      	bne.n	8009b96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b90:	2300      	movs	r3, #0
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	e023      	b.n	8009bde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <xTaskCheckForTimeOut+0xc4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d007      	beq.n	8009bb2 <xTaskCheckForTimeOut+0x86>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d302      	bcc.n	8009bb2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bac:	2301      	movs	r3, #1
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	e015      	b.n	8009bde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d20b      	bcs.n	8009bd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	1ad2      	subs	r2, r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff ff99 	bl	8009b00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	e004      	b.n	8009bde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bde:	f000 ff9d 	bl	800ab1c <vPortExitCritical>

	return xReturn;
 8009be2:	69fb      	ldr	r3, [r7, #28]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3720      	adds	r7, #32
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20001328 	.word	0x20001328
 8009bf0:	2000133c 	.word	0x2000133c

08009bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bf8:	4b03      	ldr	r3, [pc, #12]	@ (8009c08 <vTaskMissedYield+0x14>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20001338 	.word	0x20001338

08009c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c14:	f000 f852 	bl	8009cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c18:	4b06      	ldr	r3, [pc, #24]	@ (8009c34 <prvIdleTask+0x28>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d9f9      	bls.n	8009c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c20:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <prvIdleTask+0x2c>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c30:	e7f0      	b.n	8009c14 <prvIdleTask+0x8>
 8009c32:	bf00      	nop
 8009c34:	20000e54 	.word	0x20000e54
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c42:	2300      	movs	r3, #0
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	e00c      	b.n	8009c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4a12      	ldr	r2, [pc, #72]	@ (8009c9c <prvInitialiseTaskLists+0x60>)
 8009c54:	4413      	add	r3, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe faba 	bl	80081d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b37      	cmp	r3, #55	@ 0x37
 8009c66:	d9ef      	bls.n	8009c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c68:	480d      	ldr	r0, [pc, #52]	@ (8009ca0 <prvInitialiseTaskLists+0x64>)
 8009c6a:	f7fe fab1 	bl	80081d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c6e:	480d      	ldr	r0, [pc, #52]	@ (8009ca4 <prvInitialiseTaskLists+0x68>)
 8009c70:	f7fe faae 	bl	80081d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c74:	480c      	ldr	r0, [pc, #48]	@ (8009ca8 <prvInitialiseTaskLists+0x6c>)
 8009c76:	f7fe faab 	bl	80081d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c7a:	480c      	ldr	r0, [pc, #48]	@ (8009cac <prvInitialiseTaskLists+0x70>)
 8009c7c:	f7fe faa8 	bl	80081d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c80:	480b      	ldr	r0, [pc, #44]	@ (8009cb0 <prvInitialiseTaskLists+0x74>)
 8009c82:	f7fe faa5 	bl	80081d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <prvInitialiseTaskLists+0x78>)
 8009c88:	4a05      	ldr	r2, [pc, #20]	@ (8009ca0 <prvInitialiseTaskLists+0x64>)
 8009c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <prvInitialiseTaskLists+0x7c>)
 8009c8e:	4a05      	ldr	r2, [pc, #20]	@ (8009ca4 <prvInitialiseTaskLists+0x68>)
 8009c90:	601a      	str	r2, [r3, #0]
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000e54 	.word	0x20000e54
 8009ca0:	200012b4 	.word	0x200012b4
 8009ca4:	200012c8 	.word	0x200012c8
 8009ca8:	200012e4 	.word	0x200012e4
 8009cac:	200012f8 	.word	0x200012f8
 8009cb0:	20001310 	.word	0x20001310
 8009cb4:	200012dc 	.word	0x200012dc
 8009cb8:	200012e0 	.word	0x200012e0

08009cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cc2:	e019      	b.n	8009cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cc4:	f000 fef8 	bl	800aab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc8:	4b10      	ldr	r3, [pc, #64]	@ (8009d0c <prvCheckTasksWaitingTermination+0x50>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe fb05 	bl	80082e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cda:	4b0d      	ldr	r3, [pc, #52]	@ (8009d10 <prvCheckTasksWaitingTermination+0x54>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8009d10 <prvCheckTasksWaitingTermination+0x54>)
 8009ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <prvCheckTasksWaitingTermination+0x58>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4a0a      	ldr	r2, [pc, #40]	@ (8009d14 <prvCheckTasksWaitingTermination+0x58>)
 8009cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cee:	f000 ff15 	bl	800ab1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f810 	bl	8009d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf8:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <prvCheckTasksWaitingTermination+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e1      	bne.n	8009cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200012f8 	.word	0x200012f8
 8009d10:	20001324 	.word	0x20001324
 8009d14:	2000130c 	.word	0x2000130c

08009d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d108      	bne.n	8009d3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 f8b2 	bl	800ae98 <vPortFree>
				vPortFree( pxTCB );
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 f8af 	bl	800ae98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d3a:	e019      	b.n	8009d70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d103      	bne.n	8009d4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 f8a6 	bl	800ae98 <vPortFree>
	}
 8009d4c:	e010      	b.n	8009d70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d00b      	beq.n	8009d70 <prvDeleteTCB+0x58>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	60fb      	str	r3, [r7, #12]
}
 8009d6a:	bf00      	nop
 8009d6c:	bf00      	nop
 8009d6e:	e7fd      	b.n	8009d6c <prvDeleteTCB+0x54>
	}
 8009d70:	bf00      	nop
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009db0 <prvResetNextTaskUnblockTime+0x38>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d88:	4b0a      	ldr	r3, [pc, #40]	@ (8009db4 <prvResetNextTaskUnblockTime+0x3c>)
 8009d8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d90:	e008      	b.n	8009da4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d92:	4b07      	ldr	r3, [pc, #28]	@ (8009db0 <prvResetNextTaskUnblockTime+0x38>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a04      	ldr	r2, [pc, #16]	@ (8009db4 <prvResetNextTaskUnblockTime+0x3c>)
 8009da2:	6013      	str	r3, [r2, #0]
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	200012dc 	.word	0x200012dc
 8009db4:	20001344 	.word	0x20001344

08009db8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009dbe:	4b05      	ldr	r3, [pc, #20]	@ (8009dd4 <xTaskGetCurrentTaskHandle+0x1c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009dc4:	687b      	ldr	r3, [r7, #4]
	}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20000e50 	.word	0x20000e50

08009dd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dde:	4b0b      	ldr	r3, [pc, #44]	@ (8009e0c <xTaskGetSchedulerState+0x34>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009de6:	2301      	movs	r3, #1
 8009de8:	607b      	str	r3, [r7, #4]
 8009dea:	e008      	b.n	8009dfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dec:	4b08      	ldr	r3, [pc, #32]	@ (8009e10 <xTaskGetSchedulerState+0x38>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009df4:	2302      	movs	r3, #2
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	e001      	b.n	8009dfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dfe:	687b      	ldr	r3, [r7, #4]
	}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20001330 	.word	0x20001330
 8009e10:	2000134c 	.word	0x2000134c

08009e14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d051      	beq.n	8009ece <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8009ed8 <xTaskPriorityInherit+0xc4>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d241      	bcs.n	8009ebc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	db06      	blt.n	8009e4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e40:	4b25      	ldr	r3, [pc, #148]	@ (8009ed8 <xTaskPriorityInherit+0xc4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6959      	ldr	r1, [r3, #20]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009edc <xTaskPriorityInherit+0xc8>)
 8009e60:	4413      	add	r3, r2
 8009e62:	4299      	cmp	r1, r3
 8009e64:	d122      	bne.n	8009eac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fa3a 	bl	80082e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e70:	4b19      	ldr	r3, [pc, #100]	@ (8009ed8 <xTaskPriorityInherit+0xc4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7e:	4b18      	ldr	r3, [pc, #96]	@ (8009ee0 <xTaskPriorityInherit+0xcc>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d903      	bls.n	8009e8e <xTaskPriorityInherit+0x7a>
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <xTaskPriorityInherit+0xcc>)
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4a10      	ldr	r2, [pc, #64]	@ (8009edc <xTaskPriorityInherit+0xc8>)
 8009e9c:	441a      	add	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f7fe f9c0 	bl	800822a <vListInsertEnd>
 8009eaa:	e004      	b.n	8009eb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009eac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed8 <xTaskPriorityInherit+0xc4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e008      	b.n	8009ece <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ec0:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <xTaskPriorityInherit+0xc4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d201      	bcs.n	8009ece <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ece:	68fb      	ldr	r3, [r7, #12]
	}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000e50 	.word	0x20000e50
 8009edc:	20000e54 	.word	0x20000e54
 8009ee0:	2000132c 	.word	0x2000132c

08009ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d058      	beq.n	8009fac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009efa:	4b2f      	ldr	r3, [pc, #188]	@ (8009fb8 <xTaskPriorityDisinherit+0xd4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d00b      	beq.n	8009f1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	60fb      	str	r3, [r7, #12]
}
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
 8009f1a:	e7fd      	b.n	8009f18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10b      	bne.n	8009f3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	60bb      	str	r3, [r7, #8]
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f40:	1e5a      	subs	r2, r3, #1
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d02c      	beq.n	8009fac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d128      	bne.n	8009fac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe f9c0 	bl	80082e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009fbc <xTaskPriorityDisinherit+0xd8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d903      	bls.n	8009f8c <xTaskPriorityDisinherit+0xa8>
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f88:	4a0c      	ldr	r2, [pc, #48]	@ (8009fbc <xTaskPriorityDisinherit+0xd8>)
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4a09      	ldr	r2, [pc, #36]	@ (8009fc0 <xTaskPriorityDisinherit+0xdc>)
 8009f9a:	441a      	add	r2, r3
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f7fe f941 	bl	800822a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fac:	697b      	ldr	r3, [r7, #20]
	}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000e50 	.word	0x20000e50
 8009fbc:	2000132c 	.word	0x2000132c
 8009fc0:	20000e54 	.word	0x20000e54

08009fc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d06c      	beq.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10b      	bne.n	8009ffc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	60fb      	str	r3, [r7, #12]
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	e7fd      	b.n	8009ff8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d902      	bls.n	800a00c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	e002      	b.n	800a012 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a010:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d04c      	beq.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	429a      	cmp	r2, r3
 800a024:	d147      	bne.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a026:	4b26      	ldr	r3, [pc, #152]	@ (800a0c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d10b      	bne.n	800a048 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60bb      	str	r3, [r7, #8]
}
 800a042:	bf00      	nop
 800a044:	bf00      	nop
 800a046:	e7fd      	b.n	800a044 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	69fa      	ldr	r2, [r7, #28]
 800a052:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	db04      	blt.n	800a066 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	6959      	ldr	r1, [r3, #20]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	4613      	mov	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4a13      	ldr	r2, [pc, #76]	@ (800a0c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a076:	4413      	add	r3, r2
 800a078:	4299      	cmp	r1, r3
 800a07a:	d11c      	bne.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe f92f 	bl	80082e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08a:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d903      	bls.n	800a09a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a096:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4a07      	ldr	r2, [pc, #28]	@ (800a0c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0a8:	441a      	add	r2, r3
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe f8ba 	bl	800822a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0b6:	bf00      	nop
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000e50 	.word	0x20000e50
 800a0c4:	20000e54 	.word	0x20000e54
 800a0c8:	2000132c 	.word	0x2000132c

0800a0cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0d0:	4b07      	ldr	r3, [pc, #28]	@ (800a0f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0de:	3201      	adds	r2, #1
 800a0e0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a0e2:	4b03      	ldr	r3, [pc, #12]	@ (800a0f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
	}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	20000e50 	.word	0x20000e50

0800a0f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0fe:	4b21      	ldr	r3, [pc, #132]	@ (800a184 <prvAddCurrentTaskToDelayedList+0x90>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a104:	4b20      	ldr	r3, [pc, #128]	@ (800a188 <prvAddCurrentTaskToDelayedList+0x94>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3304      	adds	r3, #4
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe f8ea 	bl	80082e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a116:	d10a      	bne.n	800a12e <prvAddCurrentTaskToDelayedList+0x3a>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d007      	beq.n	800a12e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a11e:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <prvAddCurrentTaskToDelayedList+0x94>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4819      	ldr	r0, [pc, #100]	@ (800a18c <prvAddCurrentTaskToDelayedList+0x98>)
 800a128:	f7fe f87f 	bl	800822a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a12c:	e026      	b.n	800a17c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4413      	add	r3, r2
 800a134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a136:	4b14      	ldr	r3, [pc, #80]	@ (800a188 <prvAddCurrentTaskToDelayedList+0x94>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	429a      	cmp	r2, r3
 800a144:	d209      	bcs.n	800a15a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a146:	4b12      	ldr	r3, [pc, #72]	@ (800a190 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b0f      	ldr	r3, [pc, #60]	@ (800a188 <prvAddCurrentTaskToDelayedList+0x94>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3304      	adds	r3, #4
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f7fe f88d 	bl	8008272 <vListInsert>
}
 800a158:	e010      	b.n	800a17c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a15a:	4b0e      	ldr	r3, [pc, #56]	@ (800a194 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	4b0a      	ldr	r3, [pc, #40]	@ (800a188 <prvAddCurrentTaskToDelayedList+0x94>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3304      	adds	r3, #4
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f7fe f883 	bl	8008272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a16c:	4b0a      	ldr	r3, [pc, #40]	@ (800a198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	429a      	cmp	r2, r3
 800a174:	d202      	bcs.n	800a17c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a176:	4a08      	ldr	r2, [pc, #32]	@ (800a198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	6013      	str	r3, [r2, #0]
}
 800a17c:	bf00      	nop
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20001328 	.word	0x20001328
 800a188:	20000e50 	.word	0x20000e50
 800a18c:	20001310 	.word	0x20001310
 800a190:	200012e0 	.word	0x200012e0
 800a194:	200012dc 	.word	0x200012dc
 800a198:	20001344 	.word	0x20001344

0800a19c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08a      	sub	sp, #40	@ 0x28
 800a1a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1a6:	f000 fb13 	bl	800a7d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a220 <xTimerCreateTimerTask+0x84>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d021      	beq.n	800a1f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1ba:	1d3a      	adds	r2, r7, #4
 800a1bc:	f107 0108 	add.w	r1, r7, #8
 800a1c0:	f107 030c 	add.w	r3, r7, #12
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fd ffe9 	bl	800819c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	9202      	str	r2, [sp, #8]
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	460a      	mov	r2, r1
 800a1dc:	4911      	ldr	r1, [pc, #68]	@ (800a224 <xTimerCreateTimerTask+0x88>)
 800a1de:	4812      	ldr	r0, [pc, #72]	@ (800a228 <xTimerCreateTimerTask+0x8c>)
 800a1e0:	f7fe ffc0 	bl	8009164 <xTaskCreateStatic>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4a11      	ldr	r2, [pc, #68]	@ (800a22c <xTimerCreateTimerTask+0x90>)
 800a1e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1ea:	4b10      	ldr	r3, [pc, #64]	@ (800a22c <xTimerCreateTimerTask+0x90>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10b      	bne.n	800a214 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	613b      	str	r3, [r7, #16]
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	e7fd      	b.n	800a210 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a214:	697b      	ldr	r3, [r7, #20]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001380 	.word	0x20001380
 800a224:	0800c7d4 	.word	0x0800c7d4
 800a228:	0800a369 	.word	0x0800a369
 800a22c:	20001384 	.word	0x20001384

0800a230 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	@ 0x28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a23e:	2300      	movs	r3, #0
 800a240:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10b      	bne.n	800a260 <xTimerGenericCommand+0x30>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	623b      	str	r3, [r7, #32]
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	e7fd      	b.n	800a25c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a260:	4b19      	ldr	r3, [pc, #100]	@ (800a2c8 <xTimerGenericCommand+0x98>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d02a      	beq.n	800a2be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b05      	cmp	r3, #5
 800a278:	dc18      	bgt.n	800a2ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a27a:	f7ff fdad 	bl	8009dd8 <xTaskGetSchedulerState>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b02      	cmp	r3, #2
 800a282:	d109      	bne.n	800a298 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a284:	4b10      	ldr	r3, [pc, #64]	@ (800a2c8 <xTimerGenericCommand+0x98>)
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	f107 0110 	add.w	r1, r7, #16
 800a28c:	2300      	movs	r3, #0
 800a28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a290:	f7fe fa50 	bl	8008734 <xQueueGenericSend>
 800a294:	6278      	str	r0, [r7, #36]	@ 0x24
 800a296:	e012      	b.n	800a2be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a298:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c8 <xTimerGenericCommand+0x98>)
 800a29a:	6818      	ldr	r0, [r3, #0]
 800a29c:	f107 0110 	add.w	r1, r7, #16
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7fe fa46 	bl	8008734 <xQueueGenericSend>
 800a2a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2aa:	e008      	b.n	800a2be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2ac:	4b06      	ldr	r3, [pc, #24]	@ (800a2c8 <xTimerGenericCommand+0x98>)
 800a2ae:	6818      	ldr	r0, [r3, #0]
 800a2b0:	f107 0110 	add.w	r1, r7, #16
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	f7fe fb3e 	bl	8008938 <xQueueGenericSendFromISR>
 800a2bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3728      	adds	r7, #40	@ 0x28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	20001380 	.word	0x20001380

0800a2cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d6:	4b23      	ldr	r3, [pc, #140]	@ (800a364 <prvProcessExpiredTimer+0x98>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fd fffd 	bl	80082e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d023      	beq.n	800a340 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	18d1      	adds	r1, r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	6978      	ldr	r0, [r7, #20]
 800a306:	f000 f8d5 	bl	800a4b4 <prvInsertTimerInActiveList>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d020      	beq.n	800a352 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a310:	2300      	movs	r3, #0
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2300      	movs	r3, #0
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	2100      	movs	r1, #0
 800a31a:	6978      	ldr	r0, [r7, #20]
 800a31c:	f7ff ff88 	bl	800a230 <xTimerGenericCommand>
 800a320:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d114      	bne.n	800a352 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	e7fd      	b.n	800a33c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a346:	f023 0301 	bic.w	r3, r3, #1
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	4798      	blx	r3
}
 800a35a:	bf00      	nop
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20001378 	.word	0x20001378

0800a368 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a370:	f107 0308 	add.w	r3, r7, #8
 800a374:	4618      	mov	r0, r3
 800a376:	f000 f859 	bl	800a42c <prvGetNextExpireTime>
 800a37a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4619      	mov	r1, r3
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f805 	bl	800a390 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a386:	f000 f8d7 	bl	800a538 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a38a:	bf00      	nop
 800a38c:	e7f0      	b.n	800a370 <prvTimerTask+0x8>
	...

0800a390 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a39a:	f7ff f927 	bl	80095ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 f866 	bl	800a474 <prvSampleTimeNow>
 800a3a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d130      	bne.n	800a412 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <prvProcessTimerOrBlockTask+0x3c>
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d806      	bhi.n	800a3cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3be:	f7ff f923 	bl	8009608 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3c2:	68f9      	ldr	r1, [r7, #12]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ff81 	bl	800a2cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3ca:	e024      	b.n	800a416 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3d2:	4b13      	ldr	r3, [pc, #76]	@ (800a420 <prvProcessTimerOrBlockTask+0x90>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <prvProcessTimerOrBlockTask+0x50>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e000      	b.n	800a3e2 <prvProcessTimerOrBlockTask+0x52>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a424 <prvProcessTimerOrBlockTask+0x94>)
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f7fe fe83 	bl	80090fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3f6:	f7ff f907 	bl	8009608 <xTaskResumeAll>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a400:	4b09      	ldr	r3, [pc, #36]	@ (800a428 <prvProcessTimerOrBlockTask+0x98>)
 800a402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
}
 800a410:	e001      	b.n	800a416 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a412:	f7ff f8f9 	bl	8009608 <xTaskResumeAll>
}
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	2000137c 	.word	0x2000137c
 800a424:	20001380 	.word	0x20001380
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a434:	4b0e      	ldr	r3, [pc, #56]	@ (800a470 <prvGetNextExpireTime+0x44>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <prvGetNextExpireTime+0x16>
 800a43e:	2201      	movs	r2, #1
 800a440:	e000      	b.n	800a444 <prvGetNextExpireTime+0x18>
 800a442:	2200      	movs	r2, #0
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d105      	bne.n	800a45c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a450:	4b07      	ldr	r3, [pc, #28]	@ (800a470 <prvGetNextExpireTime+0x44>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]
 800a45a:	e001      	b.n	800a460 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a460:	68fb      	ldr	r3, [r7, #12]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20001378 	.word	0x20001378

0800a474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a47c:	f7ff f962 	bl	8009744 <xTaskGetTickCount>
 800a480:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a482:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b0 <prvSampleTimeNow+0x3c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d205      	bcs.n	800a498 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a48c:	f000 f93a 	bl	800a704 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e002      	b.n	800a49e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a49e:	4a04      	ldr	r2, [pc, #16]	@ (800a4b0 <prvSampleTimeNow+0x3c>)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20001388 	.word	0x20001388

0800a4b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d812      	bhi.n	800a500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d302      	bcc.n	800a4ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e01b      	b.n	800a526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4ee:	4b10      	ldr	r3, [pc, #64]	@ (800a530 <prvInsertTimerInActiveList+0x7c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fd feba 	bl	8008272 <vListInsert>
 800a4fe:	e012      	b.n	800a526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d206      	bcs.n	800a516 <prvInsertTimerInActiveList+0x62>
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d302      	bcc.n	800a516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a510:	2301      	movs	r3, #1
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	e007      	b.n	800a526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a516:	4b07      	ldr	r3, [pc, #28]	@ (800a534 <prvInsertTimerInActiveList+0x80>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3304      	adds	r3, #4
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f7fd fea6 	bl	8008272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a526:	697b      	ldr	r3, [r7, #20]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2000137c 	.word	0x2000137c
 800a534:	20001378 	.word	0x20001378

0800a538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08e      	sub	sp, #56	@ 0x38
 800a53c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a53e:	e0ce      	b.n	800a6de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	da19      	bge.n	800a57a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a546:	1d3b      	adds	r3, r7, #4
 800a548:	3304      	adds	r3, #4
 800a54a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10b      	bne.n	800a56a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	61fb      	str	r3, [r7, #28]
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	e7fd      	b.n	800a566 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a570:	6850      	ldr	r0, [r2, #4]
 800a572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a574:	6892      	ldr	r2, [r2, #8]
 800a576:	4611      	mov	r1, r2
 800a578:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f2c0 80ae 	blt.w	800a6de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d004      	beq.n	800a598 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	3304      	adds	r3, #4
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd fea6 	bl	80082e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a598:	463b      	mov	r3, r7
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff ff6a 	bl	800a474 <prvSampleTimeNow>
 800a5a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b09      	cmp	r3, #9
 800a5a6:	f200 8097 	bhi.w	800a6d8 <prvProcessReceivedCommands+0x1a0>
 800a5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b0 <prvProcessReceivedCommands+0x78>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a5d9 	.word	0x0800a5d9
 800a5b4:	0800a5d9 	.word	0x0800a5d9
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a64f 	.word	0x0800a64f
 800a5c0:	0800a663 	.word	0x0800a663
 800a5c4:	0800a6af 	.word	0x0800a6af
 800a5c8:	0800a5d9 	.word	0x0800a5d9
 800a5cc:	0800a5d9 	.word	0x0800a5d9
 800a5d0:	0800a64f 	.word	0x0800a64f
 800a5d4:	0800a663 	.word	0x0800a663
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	18d1      	adds	r1, r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f8:	f7ff ff5c 	bl	800a4b4 <prvInsertTimerInActiveList>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d06c      	beq.n	800a6dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d061      	beq.n	800a6dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	441a      	add	r2, r3
 800a620:	2300      	movs	r3, #0
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	2300      	movs	r3, #0
 800a626:	2100      	movs	r1, #0
 800a628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a62a:	f7ff fe01 	bl	800a230 <xTimerGenericCommand>
 800a62e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d152      	bne.n	800a6dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	61bb      	str	r3, [r7, #24]
}
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a660:	e03d      	b.n	800a6de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a668:	f043 0301 	orr.w	r3, r3, #1
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a670:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a678:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10b      	bne.n	800a69a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	617b      	str	r3, [r7, #20]
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop
 800a698:	e7fd      	b.n	800a696 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	18d1      	adds	r1, r2, r3
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a8:	f7ff ff04 	bl	800a4b4 <prvInsertTimerInActiveList>
					break;
 800a6ac:	e017      	b.n	800a6de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a6bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6be:	f000 fbeb 	bl	800ae98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6c2:	e00c      	b.n	800a6de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6ca:	f023 0301 	bic.w	r3, r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6d6:	e002      	b.n	800a6de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a6d8:	bf00      	nop
 800a6da:	e000      	b.n	800a6de <prvProcessReceivedCommands+0x1a6>
					break;
 800a6dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6de:	4b08      	ldr	r3, [pc, #32]	@ (800a700 <prvProcessReceivedCommands+0x1c8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	1d39      	adds	r1, r7, #4
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe f9c4 	bl	8008a74 <xQueueReceive>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f47f af26 	bne.w	800a540 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	3730      	adds	r7, #48	@ 0x30
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20001380 	.word	0x20001380

0800a704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a70a:	e049      	b.n	800a7a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a70c:	4b2e      	ldr	r3, [pc, #184]	@ (800a7c8 <prvSwitchTimerLists+0xc4>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a716:	4b2c      	ldr	r3, [pc, #176]	@ (800a7c8 <prvSwitchTimerLists+0xc4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3304      	adds	r3, #4
 800a724:	4618      	mov	r0, r3
 800a726:	f7fd fddd 	bl	80082e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02f      	beq.n	800a7a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	4413      	add	r3, r2
 800a748:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d90e      	bls.n	800a770 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a75e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7c8 <prvSwitchTimerLists+0xc4>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3304      	adds	r3, #4
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f7fd fd82 	bl	8008272 <vListInsert>
 800a76e:	e017      	b.n	800a7a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a770:	2300      	movs	r3, #0
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	2300      	movs	r3, #0
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	2100      	movs	r1, #0
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7ff fd58 	bl	800a230 <xTimerGenericCommand>
 800a780:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	603b      	str	r3, [r7, #0]
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	e7fd      	b.n	800a79c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a0:	4b09      	ldr	r3, [pc, #36]	@ (800a7c8 <prvSwitchTimerLists+0xc4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1b0      	bne.n	800a70c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7aa:	4b07      	ldr	r3, [pc, #28]	@ (800a7c8 <prvSwitchTimerLists+0xc4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7b0:	4b06      	ldr	r3, [pc, #24]	@ (800a7cc <prvSwitchTimerLists+0xc8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a04      	ldr	r2, [pc, #16]	@ (800a7c8 <prvSwitchTimerLists+0xc4>)
 800a7b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7b8:	4a04      	ldr	r2, [pc, #16]	@ (800a7cc <prvSwitchTimerLists+0xc8>)
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	6013      	str	r3, [r2, #0]
}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20001378 	.word	0x20001378
 800a7cc:	2000137c 	.word	0x2000137c

0800a7d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7d6:	f000 f96f 	bl	800aab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7da:	4b15      	ldr	r3, [pc, #84]	@ (800a830 <prvCheckForValidListAndQueue+0x60>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d120      	bne.n	800a824 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7e2:	4814      	ldr	r0, [pc, #80]	@ (800a834 <prvCheckForValidListAndQueue+0x64>)
 800a7e4:	f7fd fcf4 	bl	80081d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7e8:	4813      	ldr	r0, [pc, #76]	@ (800a838 <prvCheckForValidListAndQueue+0x68>)
 800a7ea:	f7fd fcf1 	bl	80081d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7ee:	4b13      	ldr	r3, [pc, #76]	@ (800a83c <prvCheckForValidListAndQueue+0x6c>)
 800a7f0:	4a10      	ldr	r2, [pc, #64]	@ (800a834 <prvCheckForValidListAndQueue+0x64>)
 800a7f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7f4:	4b12      	ldr	r3, [pc, #72]	@ (800a840 <prvCheckForValidListAndQueue+0x70>)
 800a7f6:	4a10      	ldr	r2, [pc, #64]	@ (800a838 <prvCheckForValidListAndQueue+0x68>)
 800a7f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	4b11      	ldr	r3, [pc, #68]	@ (800a844 <prvCheckForValidListAndQueue+0x74>)
 800a800:	4a11      	ldr	r2, [pc, #68]	@ (800a848 <prvCheckForValidListAndQueue+0x78>)
 800a802:	2110      	movs	r1, #16
 800a804:	200a      	movs	r0, #10
 800a806:	f7fd fe01 	bl	800840c <xQueueGenericCreateStatic>
 800a80a:	4603      	mov	r3, r0
 800a80c:	4a08      	ldr	r2, [pc, #32]	@ (800a830 <prvCheckForValidListAndQueue+0x60>)
 800a80e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a810:	4b07      	ldr	r3, [pc, #28]	@ (800a830 <prvCheckForValidListAndQueue+0x60>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d005      	beq.n	800a824 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a818:	4b05      	ldr	r3, [pc, #20]	@ (800a830 <prvCheckForValidListAndQueue+0x60>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	490b      	ldr	r1, [pc, #44]	@ (800a84c <prvCheckForValidListAndQueue+0x7c>)
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fc42 	bl	80090a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a824:	f000 f97a 	bl	800ab1c <vPortExitCritical>
}
 800a828:	bf00      	nop
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20001380 	.word	0x20001380
 800a834:	20001350 	.word	0x20001350
 800a838:	20001364 	.word	0x20001364
 800a83c:	20001378 	.word	0x20001378
 800a840:	2000137c 	.word	0x2000137c
 800a844:	2000142c 	.word	0x2000142c
 800a848:	2000138c 	.word	0x2000138c
 800a84c:	0800c7dc 	.word	0x0800c7dc

0800a850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3b04      	subs	r3, #4
 800a860:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3b04      	subs	r3, #4
 800a86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f023 0201 	bic.w	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3b04      	subs	r3, #4
 800a87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a880:	4a0c      	ldr	r2, [pc, #48]	@ (800a8b4 <pxPortInitialiseStack+0x64>)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3b14      	subs	r3, #20
 800a88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3b04      	subs	r3, #4
 800a896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f06f 0202 	mvn.w	r2, #2
 800a89e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3b20      	subs	r3, #32
 800a8a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	0800a8b9 	.word	0x0800a8b9

0800a8b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8c2:	4b13      	ldr	r3, [pc, #76]	@ (800a910 <prvTaskExitError+0x58>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8ca:	d00b      	beq.n	800a8e4 <prvTaskExitError+0x2c>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	60fb      	str	r3, [r7, #12]
}
 800a8de:	bf00      	nop
 800a8e0:	bf00      	nop
 800a8e2:	e7fd      	b.n	800a8e0 <prvTaskExitError+0x28>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	60bb      	str	r3, [r7, #8]
}
 800a8f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8f8:	bf00      	nop
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0fc      	beq.n	800a8fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a900:	bf00      	nop
 800a902:	bf00      	nop
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	20000030 	.word	0x20000030
	...

0800a920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a920:	4b07      	ldr	r3, [pc, #28]	@ (800a940 <pxCurrentTCBConst2>)
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	6808      	ldr	r0, [r1, #0]
 800a926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	f380 8809 	msr	PSP, r0
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8811 	msr	BASEPRI, r0
 800a93a:	4770      	bx	lr
 800a93c:	f3af 8000 	nop.w

0800a940 <pxCurrentTCBConst2>:
 800a940:	20000e50 	.word	0x20000e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop

0800a948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a948:	4808      	ldr	r0, [pc, #32]	@ (800a96c <prvPortStartFirstTask+0x24>)
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	6800      	ldr	r0, [r0, #0]
 800a94e:	f380 8808 	msr	MSP, r0
 800a952:	f04f 0000 	mov.w	r0, #0
 800a956:	f380 8814 	msr	CONTROL, r0
 800a95a:	b662      	cpsie	i
 800a95c:	b661      	cpsie	f
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	df00      	svc	0
 800a968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a96a:	bf00      	nop
 800a96c:	e000ed08 	.word	0xe000ed08

0800a970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a976:	4b47      	ldr	r3, [pc, #284]	@ (800aa94 <xPortStartScheduler+0x124>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a47      	ldr	r2, [pc, #284]	@ (800aa98 <xPortStartScheduler+0x128>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d10b      	bne.n	800a998 <xPortStartScheduler+0x28>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	613b      	str	r3, [r7, #16]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a998:	4b3e      	ldr	r3, [pc, #248]	@ (800aa94 <xPortStartScheduler+0x124>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa9c <xPortStartScheduler+0x12c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d10b      	bne.n	800a9ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	60fb      	str	r3, [r7, #12]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9ba:	4b39      	ldr	r3, [pc, #228]	@ (800aaa0 <xPortStartScheduler+0x130>)
 800a9bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	22ff      	movs	r2, #255	@ 0xff
 800a9ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	4b31      	ldr	r3, [pc, #196]	@ (800aaa4 <xPortStartScheduler+0x134>)
 800a9e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9e2:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e8:	e009      	b.n	800a9fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	4a2d      	ldr	r2, [pc, #180]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800a9f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9fe:	78fb      	ldrb	r3, [r7, #3]
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa06:	2b80      	cmp	r3, #128	@ 0x80
 800aa08:	d0ef      	beq.n	800a9ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa0a:	4b27      	ldr	r3, [pc, #156]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f1c3 0307 	rsb	r3, r3, #7
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d00b      	beq.n	800aa2e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	60bb      	str	r3, [r7, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	e7fd      	b.n	800aa2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa38:	4b1b      	ldr	r3, [pc, #108]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa40:	4a19      	ldr	r2, [pc, #100]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa4c:	4b17      	ldr	r3, [pc, #92]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a16      	ldr	r2, [pc, #88]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa58:	4b14      	ldr	r3, [pc, #80]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a13      	ldr	r2, [pc, #76]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa64:	f000 f8da 	bl	800ac1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa68:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <xPortStartScheduler+0x140>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa6e:	f000 f8f9 	bl	800ac64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa72:	4b10      	ldr	r3, [pc, #64]	@ (800aab4 <xPortStartScheduler+0x144>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a0f      	ldr	r2, [pc, #60]	@ (800aab4 <xPortStartScheduler+0x144>)
 800aa78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa7e:	f7ff ff63 	bl	800a948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa82:	f7fe ff29 	bl	80098d8 <vTaskSwitchContext>
	prvTaskExitError();
 800aa86:	f7ff ff17 	bl	800a8b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	e000ed00 	.word	0xe000ed00
 800aa98:	410fc271 	.word	0x410fc271
 800aa9c:	410fc270 	.word	0x410fc270
 800aaa0:	e000e400 	.word	0xe000e400
 800aaa4:	2000147c 	.word	0x2000147c
 800aaa8:	20001480 	.word	0x20001480
 800aaac:	e000ed20 	.word	0xe000ed20
 800aab0:	20000030 	.word	0x20000030
 800aab4:	e000ef34 	.word	0xe000ef34

0800aab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aad2:	4b10      	ldr	r3, [pc, #64]	@ (800ab14 <vPortEnterCritical+0x5c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab14 <vPortEnterCritical+0x5c>)
 800aada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aadc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <vPortEnterCritical+0x5c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d110      	bne.n	800ab06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aae4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab18 <vPortEnterCritical+0x60>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00b      	beq.n	800ab06 <vPortEnterCritical+0x4e>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	603b      	str	r3, [r7, #0]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <vPortEnterCritical+0x4a>
	}
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20000030 	.word	0x20000030
 800ab18:	e000ed04 	.word	0xe000ed04

0800ab1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab22:	4b12      	ldr	r3, [pc, #72]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10b      	bne.n	800ab42 <vPortExitCritical+0x26>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	607b      	str	r3, [r7, #4]
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	e7fd      	b.n	800ab3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab42:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	4a08      	ldr	r2, [pc, #32]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d105      	bne.n	800ab60 <vPortExitCritical+0x44>
 800ab54:	2300      	movs	r3, #0
 800ab56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f383 8811 	msr	BASEPRI, r3
}
 800ab5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	20000030 	.word	0x20000030

0800ab70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab70:	f3ef 8009 	mrs	r0, PSP
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4b15      	ldr	r3, [pc, #84]	@ (800abd0 <pxCurrentTCBConst>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f01e 0f10 	tst.w	lr, #16
 800ab80:	bf08      	it	eq
 800ab82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab94:	f380 8811 	msr	BASEPRI, r0
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f7fe fe9a 	bl	80098d8 <vTaskSwitchContext>
 800aba4:	f04f 0000 	mov.w	r0, #0
 800aba8:	f380 8811 	msr	BASEPRI, r0
 800abac:	bc09      	pop	{r0, r3}
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	6808      	ldr	r0, [r1, #0]
 800abb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb6:	f01e 0f10 	tst.w	lr, #16
 800abba:	bf08      	it	eq
 800abbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abc0:	f380 8809 	msr	PSP, r0
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w

0800abd0 <pxCurrentTCBConst>:
 800abd0:	20000e50 	.word	0x20000e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop

0800abd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abf2:	f7fe fdb7 	bl	8009764 <xTaskIncrementTick>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abfc:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <xPortSysTickHandler+0x40>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	2300      	movs	r3, #0
 800ac06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f383 8811 	msr	BASEPRI, r3
}
 800ac0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac20:	4b0b      	ldr	r3, [pc, #44]	@ (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac26:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <vPortSetupTimerInterrupt+0x38>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <vPortSetupTimerInterrupt+0x3c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a0a      	ldr	r2, [pc, #40]	@ (800ac5c <vPortSetupTimerInterrupt+0x40>)
 800ac32:	fba2 2303 	umull	r2, r3, r2, r3
 800ac36:	099b      	lsrs	r3, r3, #6
 800ac38:	4a09      	ldr	r2, [pc, #36]	@ (800ac60 <vPortSetupTimerInterrupt+0x44>)
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac3e:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac40:	2207      	movs	r2, #7
 800ac42:	601a      	str	r2, [r3, #0]
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	e000e010 	.word	0xe000e010
 800ac54:	e000e018 	.word	0xe000e018
 800ac58:	20000024 	.word	0x20000024
 800ac5c:	10624dd3 	.word	0x10624dd3
 800ac60:	e000e014 	.word	0xe000e014

0800ac64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac74 <vPortEnableVFP+0x10>
 800ac68:	6801      	ldr	r1, [r0, #0]
 800ac6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac6e:	6001      	str	r1, [r0, #0]
 800ac70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac72:	bf00      	nop
 800ac74:	e000ed88 	.word	0xe000ed88

0800ac78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac7e:	f3ef 8305 	mrs	r3, IPSR
 800ac82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d915      	bls.n	800acb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac8a:	4a18      	ldr	r2, [pc, #96]	@ (800acec <vPortValidateInterruptPriority+0x74>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac94:	4b16      	ldr	r3, [pc, #88]	@ (800acf0 <vPortValidateInterruptPriority+0x78>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	7afa      	ldrb	r2, [r7, #11]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d20b      	bcs.n	800acb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acb6:	4b0f      	ldr	r3, [pc, #60]	@ (800acf4 <vPortValidateInterruptPriority+0x7c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acbe:	4b0e      	ldr	r3, [pc, #56]	@ (800acf8 <vPortValidateInterruptPriority+0x80>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d90b      	bls.n	800acde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	603b      	str	r3, [r7, #0]
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	e7fd      	b.n	800acda <vPortValidateInterruptPriority+0x62>
	}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	e000e3f0 	.word	0xe000e3f0
 800acf0:	2000147c 	.word	0x2000147c
 800acf4:	e000ed0c 	.word	0xe000ed0c
 800acf8:	20001480 	.word	0x20001480

0800acfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08a      	sub	sp, #40	@ 0x28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad08:	f7fe fc70 	bl	80095ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae80 <pvPortMalloc+0x184>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad14:	f000 f924 	bl	800af60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad18:	4b5a      	ldr	r3, [pc, #360]	@ (800ae84 <pvPortMalloc+0x188>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4013      	ands	r3, r2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 8095 	bne.w	800ae50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01e      	beq.n	800ad6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4413      	add	r3, r2
 800ad32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d015      	beq.n	800ad6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f023 0307 	bic.w	r3, r3, #7
 800ad44:	3308      	adds	r3, #8
 800ad46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <pvPortMalloc+0x6e>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	617b      	str	r3, [r7, #20]
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	e7fd      	b.n	800ad66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d06f      	beq.n	800ae50 <pvPortMalloc+0x154>
 800ad70:	4b45      	ldr	r3, [pc, #276]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d86a      	bhi.n	800ae50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad7a:	4b44      	ldr	r3, [pc, #272]	@ (800ae8c <pvPortMalloc+0x190>)
 800ad7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad7e:	4b43      	ldr	r3, [pc, #268]	@ (800ae8c <pvPortMalloc+0x190>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad84:	e004      	b.n	800ad90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d903      	bls.n	800ada2 <pvPortMalloc+0xa6>
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f1      	bne.n	800ad86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ada2:	4b37      	ldr	r3, [pc, #220]	@ (800ae80 <pvPortMalloc+0x184>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d051      	beq.n	800ae50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2208      	movs	r2, #8
 800adb2:	4413      	add	r3, r2
 800adb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	1ad2      	subs	r2, r2, r3
 800adc6:	2308      	movs	r3, #8
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	429a      	cmp	r2, r3
 800adcc:	d920      	bls.n	800ae10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4413      	add	r3, r2
 800add4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00b      	beq.n	800adf8 <pvPortMalloc+0xfc>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	613b      	str	r3, [r7, #16]
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	e7fd      	b.n	800adf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae0a:	69b8      	ldr	r0, [r7, #24]
 800ae0c:	f000 f90a 	bl	800b024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae10:	4b1d      	ldr	r3, [pc, #116]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	4b1b      	ldr	r3, [pc, #108]	@ (800ae90 <pvPortMalloc+0x194>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d203      	bcs.n	800ae32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae2a:	4b17      	ldr	r3, [pc, #92]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a18      	ldr	r2, [pc, #96]	@ (800ae90 <pvPortMalloc+0x194>)
 800ae30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <pvPortMalloc+0x188>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae46:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <pvPortMalloc+0x198>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	4a11      	ldr	r2, [pc, #68]	@ (800ae94 <pvPortMalloc+0x198>)
 800ae4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae50:	f7fe fbda 	bl	8009608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00b      	beq.n	800ae76 <pvPortMalloc+0x17a>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	60fb      	str	r3, [r7, #12]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <pvPortMalloc+0x176>
	return pvReturn;
 800ae76:	69fb      	ldr	r3, [r7, #28]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3728      	adds	r7, #40	@ 0x28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	2000508c 	.word	0x2000508c
 800ae84:	200050a0 	.word	0x200050a0
 800ae88:	20005090 	.word	0x20005090
 800ae8c:	20005084 	.word	0x20005084
 800ae90:	20005094 	.word	0x20005094
 800ae94:	20005098 	.word	0x20005098

0800ae98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d04f      	beq.n	800af4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeaa:	2308      	movs	r3, #8
 800aeac:	425b      	negs	r3, r3
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	4b25      	ldr	r3, [pc, #148]	@ (800af54 <vPortFree+0xbc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4013      	ands	r3, r2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10b      	bne.n	800aede <vPortFree+0x46>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	60fb      	str	r3, [r7, #12]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <vPortFree+0x66>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60bb      	str	r3, [r7, #8]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	4b14      	ldr	r3, [pc, #80]	@ (800af54 <vPortFree+0xbc>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4013      	ands	r3, r2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01e      	beq.n	800af4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11a      	bne.n	800af4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	4b0e      	ldr	r3, [pc, #56]	@ (800af54 <vPortFree+0xbc>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	43db      	mvns	r3, r3
 800af1e:	401a      	ands	r2, r3
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af24:	f7fe fb62 	bl	80095ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	4b0a      	ldr	r3, [pc, #40]	@ (800af58 <vPortFree+0xc0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4413      	add	r3, r2
 800af32:	4a09      	ldr	r2, [pc, #36]	@ (800af58 <vPortFree+0xc0>)
 800af34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af36:	6938      	ldr	r0, [r7, #16]
 800af38:	f000 f874 	bl	800b024 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af3c:	4b07      	ldr	r3, [pc, #28]	@ (800af5c <vPortFree+0xc4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	4a06      	ldr	r2, [pc, #24]	@ (800af5c <vPortFree+0xc4>)
 800af44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af46:	f7fe fb5f 	bl	8009608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af4a:	bf00      	nop
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	200050a0 	.word	0x200050a0
 800af58:	20005090 	.word	0x20005090
 800af5c:	2000509c 	.word	0x2000509c

0800af60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af6c:	4b27      	ldr	r3, [pc, #156]	@ (800b00c <prvHeapInit+0xac>)
 800af6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00c      	beq.n	800af94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3307      	adds	r3, #7
 800af7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f023 0307 	bic.w	r3, r3, #7
 800af86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	4a1f      	ldr	r2, [pc, #124]	@ (800b00c <prvHeapInit+0xac>)
 800af90:	4413      	add	r3, r2
 800af92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af98:	4a1d      	ldr	r2, [pc, #116]	@ (800b010 <prvHeapInit+0xb0>)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af9e:	4b1c      	ldr	r3, [pc, #112]	@ (800b010 <prvHeapInit+0xb0>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	4413      	add	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afac:	2208      	movs	r2, #8
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1a9b      	subs	r3, r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4a15      	ldr	r2, [pc, #84]	@ (800b014 <prvHeapInit+0xb4>)
 800afc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afc2:	4b14      	ldr	r3, [pc, #80]	@ (800b014 <prvHeapInit+0xb4>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afca:	4b12      	ldr	r3, [pc, #72]	@ (800b014 <prvHeapInit+0xb4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	1ad2      	subs	r2, r2, r3
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afe0:	4b0c      	ldr	r3, [pc, #48]	@ (800b014 <prvHeapInit+0xb4>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4a0a      	ldr	r2, [pc, #40]	@ (800b018 <prvHeapInit+0xb8>)
 800afee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	4a09      	ldr	r2, [pc, #36]	@ (800b01c <prvHeapInit+0xbc>)
 800aff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aff8:	4b09      	ldr	r3, [pc, #36]	@ (800b020 <prvHeapInit+0xc0>)
 800affa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800affe:	601a      	str	r2, [r3, #0]
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	20001484 	.word	0x20001484
 800b010:	20005084 	.word	0x20005084
 800b014:	2000508c 	.word	0x2000508c
 800b018:	20005094 	.word	0x20005094
 800b01c:	20005090 	.word	0x20005090
 800b020:	200050a0 	.word	0x200050a0

0800b024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b02c:	4b28      	ldr	r3, [pc, #160]	@ (800b0d0 <prvInsertBlockIntoFreeList+0xac>)
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e002      	b.n	800b038 <prvInsertBlockIntoFreeList+0x14>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d8f7      	bhi.n	800b032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	4413      	add	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d108      	bne.n	800b066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	441a      	add	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	441a      	add	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d118      	bne.n	800b0ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	4b15      	ldr	r3, [pc, #84]	@ (800b0d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	429a      	cmp	r2, r3
 800b084:	d00d      	beq.n	800b0a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	441a      	add	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e008      	b.n	800b0b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	e003      	b.n	800b0b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d002      	beq.n	800b0c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0c2:	bf00      	nop
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20005084 	.word	0x20005084
 800b0d4:	2000508c 	.word	0x2000508c

0800b0d8 <siprintf>:
 800b0d8:	b40e      	push	{r1, r2, r3}
 800b0da:	b500      	push	{lr}
 800b0dc:	b09c      	sub	sp, #112	@ 0x70
 800b0de:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0e0:	9002      	str	r0, [sp, #8]
 800b0e2:	9006      	str	r0, [sp, #24]
 800b0e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0e8:	4809      	ldr	r0, [pc, #36]	@ (800b110 <siprintf+0x38>)
 800b0ea:	9107      	str	r1, [sp, #28]
 800b0ec:	9104      	str	r1, [sp, #16]
 800b0ee:	4909      	ldr	r1, [pc, #36]	@ (800b114 <siprintf+0x3c>)
 800b0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f4:	9105      	str	r1, [sp, #20]
 800b0f6:	6800      	ldr	r0, [r0, #0]
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	a902      	add	r1, sp, #8
 800b0fc:	f000 f9f2 	bl	800b4e4 <_svfiprintf_r>
 800b100:	9b02      	ldr	r3, [sp, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	b01c      	add	sp, #112	@ 0x70
 800b108:	f85d eb04 	ldr.w	lr, [sp], #4
 800b10c:	b003      	add	sp, #12
 800b10e:	4770      	bx	lr
 800b110:	20000040 	.word	0x20000040
 800b114:	ffff0208 	.word	0xffff0208

0800b118 <std>:
 800b118:	2300      	movs	r3, #0
 800b11a:	b510      	push	{r4, lr}
 800b11c:	4604      	mov	r4, r0
 800b11e:	e9c0 3300 	strd	r3, r3, [r0]
 800b122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b126:	6083      	str	r3, [r0, #8]
 800b128:	8181      	strh	r1, [r0, #12]
 800b12a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b12c:	81c2      	strh	r2, [r0, #14]
 800b12e:	6183      	str	r3, [r0, #24]
 800b130:	4619      	mov	r1, r3
 800b132:	2208      	movs	r2, #8
 800b134:	305c      	adds	r0, #92	@ 0x5c
 800b136:	f000 f937 	bl	800b3a8 <memset>
 800b13a:	4b0d      	ldr	r3, [pc, #52]	@ (800b170 <std+0x58>)
 800b13c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b13e:	4b0d      	ldr	r3, [pc, #52]	@ (800b174 <std+0x5c>)
 800b140:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b142:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <std+0x60>)
 800b144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <std+0x64>)
 800b148:	6323      	str	r3, [r4, #48]	@ 0x30
 800b14a:	4b0d      	ldr	r3, [pc, #52]	@ (800b180 <std+0x68>)
 800b14c:	6224      	str	r4, [r4, #32]
 800b14e:	429c      	cmp	r4, r3
 800b150:	d006      	beq.n	800b160 <std+0x48>
 800b152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b156:	4294      	cmp	r4, r2
 800b158:	d002      	beq.n	800b160 <std+0x48>
 800b15a:	33d0      	adds	r3, #208	@ 0xd0
 800b15c:	429c      	cmp	r4, r3
 800b15e:	d105      	bne.n	800b16c <std+0x54>
 800b160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	f000 b950 	b.w	800b40c <__retarget_lock_init_recursive>
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	bf00      	nop
 800b170:	0800bf31 	.word	0x0800bf31
 800b174:	0800bf53 	.word	0x0800bf53
 800b178:	0800bf8b 	.word	0x0800bf8b
 800b17c:	0800bfaf 	.word	0x0800bfaf
 800b180:	200050a4 	.word	0x200050a4

0800b184 <stdio_exit_handler>:
 800b184:	4a02      	ldr	r2, [pc, #8]	@ (800b190 <stdio_exit_handler+0xc>)
 800b186:	4903      	ldr	r1, [pc, #12]	@ (800b194 <stdio_exit_handler+0x10>)
 800b188:	4803      	ldr	r0, [pc, #12]	@ (800b198 <stdio_exit_handler+0x14>)
 800b18a:	f000 b869 	b.w	800b260 <_fwalk_sglue>
 800b18e:	bf00      	nop
 800b190:	20000034 	.word	0x20000034
 800b194:	0800bec9 	.word	0x0800bec9
 800b198:	20000044 	.word	0x20000044

0800b19c <cleanup_stdio>:
 800b19c:	6841      	ldr	r1, [r0, #4]
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <cleanup_stdio+0x34>)
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	d001      	beq.n	800b1ac <cleanup_stdio+0x10>
 800b1a8:	f000 fe8e 	bl	800bec8 <_fflush_r>
 800b1ac:	68a1      	ldr	r1, [r4, #8]
 800b1ae:	4b09      	ldr	r3, [pc, #36]	@ (800b1d4 <cleanup_stdio+0x38>)
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	d002      	beq.n	800b1ba <cleanup_stdio+0x1e>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fe87 	bl	800bec8 <_fflush_r>
 800b1ba:	68e1      	ldr	r1, [r4, #12]
 800b1bc:	4b06      	ldr	r3, [pc, #24]	@ (800b1d8 <cleanup_stdio+0x3c>)
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	d004      	beq.n	800b1cc <cleanup_stdio+0x30>
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c8:	f000 be7e 	b.w	800bec8 <_fflush_r>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200050a4 	.word	0x200050a4
 800b1d4:	2000510c 	.word	0x2000510c
 800b1d8:	20005174 	.word	0x20005174

0800b1dc <global_stdio_init.part.0>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4b0b      	ldr	r3, [pc, #44]	@ (800b20c <global_stdio_init.part.0+0x30>)
 800b1e0:	4c0b      	ldr	r4, [pc, #44]	@ (800b210 <global_stdio_init.part.0+0x34>)
 800b1e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b214 <global_stdio_init.part.0+0x38>)
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2104      	movs	r1, #4
 800b1ec:	f7ff ff94 	bl	800b118 <std>
 800b1f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	2109      	movs	r1, #9
 800b1f8:	f7ff ff8e 	bl	800b118 <std>
 800b1fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b200:	2202      	movs	r2, #2
 800b202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b206:	2112      	movs	r1, #18
 800b208:	f7ff bf86 	b.w	800b118 <std>
 800b20c:	200051dc 	.word	0x200051dc
 800b210:	200050a4 	.word	0x200050a4
 800b214:	0800b185 	.word	0x0800b185

0800b218 <__sfp_lock_acquire>:
 800b218:	4801      	ldr	r0, [pc, #4]	@ (800b220 <__sfp_lock_acquire+0x8>)
 800b21a:	f000 b8f8 	b.w	800b40e <__retarget_lock_acquire_recursive>
 800b21e:	bf00      	nop
 800b220:	200051e1 	.word	0x200051e1

0800b224 <__sfp_lock_release>:
 800b224:	4801      	ldr	r0, [pc, #4]	@ (800b22c <__sfp_lock_release+0x8>)
 800b226:	f000 b8f3 	b.w	800b410 <__retarget_lock_release_recursive>
 800b22a:	bf00      	nop
 800b22c:	200051e1 	.word	0x200051e1

0800b230 <__sinit>:
 800b230:	b510      	push	{r4, lr}
 800b232:	4604      	mov	r4, r0
 800b234:	f7ff fff0 	bl	800b218 <__sfp_lock_acquire>
 800b238:	6a23      	ldr	r3, [r4, #32]
 800b23a:	b11b      	cbz	r3, 800b244 <__sinit+0x14>
 800b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b240:	f7ff bff0 	b.w	800b224 <__sfp_lock_release>
 800b244:	4b04      	ldr	r3, [pc, #16]	@ (800b258 <__sinit+0x28>)
 800b246:	6223      	str	r3, [r4, #32]
 800b248:	4b04      	ldr	r3, [pc, #16]	@ (800b25c <__sinit+0x2c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f5      	bne.n	800b23c <__sinit+0xc>
 800b250:	f7ff ffc4 	bl	800b1dc <global_stdio_init.part.0>
 800b254:	e7f2      	b.n	800b23c <__sinit+0xc>
 800b256:	bf00      	nop
 800b258:	0800b19d 	.word	0x0800b19d
 800b25c:	200051dc 	.word	0x200051dc

0800b260 <_fwalk_sglue>:
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b264:	4607      	mov	r7, r0
 800b266:	4688      	mov	r8, r1
 800b268:	4614      	mov	r4, r2
 800b26a:	2600      	movs	r6, #0
 800b26c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b270:	f1b9 0901 	subs.w	r9, r9, #1
 800b274:	d505      	bpl.n	800b282 <_fwalk_sglue+0x22>
 800b276:	6824      	ldr	r4, [r4, #0]
 800b278:	2c00      	cmp	r4, #0
 800b27a:	d1f7      	bne.n	800b26c <_fwalk_sglue+0xc>
 800b27c:	4630      	mov	r0, r6
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	89ab      	ldrh	r3, [r5, #12]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d907      	bls.n	800b298 <_fwalk_sglue+0x38>
 800b288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b28c:	3301      	adds	r3, #1
 800b28e:	d003      	beq.n	800b298 <_fwalk_sglue+0x38>
 800b290:	4629      	mov	r1, r5
 800b292:	4638      	mov	r0, r7
 800b294:	47c0      	blx	r8
 800b296:	4306      	orrs	r6, r0
 800b298:	3568      	adds	r5, #104	@ 0x68
 800b29a:	e7e9      	b.n	800b270 <_fwalk_sglue+0x10>

0800b29c <iprintf>:
 800b29c:	b40f      	push	{r0, r1, r2, r3}
 800b29e:	b507      	push	{r0, r1, r2, lr}
 800b2a0:	4906      	ldr	r1, [pc, #24]	@ (800b2bc <iprintf+0x20>)
 800b2a2:	ab04      	add	r3, sp, #16
 800b2a4:	6808      	ldr	r0, [r1, #0]
 800b2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2aa:	6881      	ldr	r1, [r0, #8]
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	f000 fa3f 	bl	800b730 <_vfiprintf_r>
 800b2b2:	b003      	add	sp, #12
 800b2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2b8:	b004      	add	sp, #16
 800b2ba:	4770      	bx	lr
 800b2bc:	20000040 	.word	0x20000040

0800b2c0 <_puts_r>:
 800b2c0:	6a03      	ldr	r3, [r0, #32]
 800b2c2:	b570      	push	{r4, r5, r6, lr}
 800b2c4:	6884      	ldr	r4, [r0, #8]
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	460e      	mov	r6, r1
 800b2ca:	b90b      	cbnz	r3, 800b2d0 <_puts_r+0x10>
 800b2cc:	f7ff ffb0 	bl	800b230 <__sinit>
 800b2d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2d2:	07db      	lsls	r3, r3, #31
 800b2d4:	d405      	bmi.n	800b2e2 <_puts_r+0x22>
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	0598      	lsls	r0, r3, #22
 800b2da:	d402      	bmi.n	800b2e2 <_puts_r+0x22>
 800b2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2de:	f000 f896 	bl	800b40e <__retarget_lock_acquire_recursive>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	0719      	lsls	r1, r3, #28
 800b2e6:	d502      	bpl.n	800b2ee <_puts_r+0x2e>
 800b2e8:	6923      	ldr	r3, [r4, #16]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d135      	bne.n	800b35a <_puts_r+0x9a>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 fecd 	bl	800c090 <__swsetup_r>
 800b2f6:	b380      	cbz	r0, 800b35a <_puts_r+0x9a>
 800b2f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b2fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2fe:	07da      	lsls	r2, r3, #31
 800b300:	d405      	bmi.n	800b30e <_puts_r+0x4e>
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	059b      	lsls	r3, r3, #22
 800b306:	d402      	bmi.n	800b30e <_puts_r+0x4e>
 800b308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b30a:	f000 f881 	bl	800b410 <__retarget_lock_release_recursive>
 800b30e:	4628      	mov	r0, r5
 800b310:	bd70      	pop	{r4, r5, r6, pc}
 800b312:	2b00      	cmp	r3, #0
 800b314:	da04      	bge.n	800b320 <_puts_r+0x60>
 800b316:	69a2      	ldr	r2, [r4, #24]
 800b318:	429a      	cmp	r2, r3
 800b31a:	dc17      	bgt.n	800b34c <_puts_r+0x8c>
 800b31c:	290a      	cmp	r1, #10
 800b31e:	d015      	beq.n	800b34c <_puts_r+0x8c>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	6022      	str	r2, [r4, #0]
 800b326:	7019      	strb	r1, [r3, #0]
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b32e:	3b01      	subs	r3, #1
 800b330:	60a3      	str	r3, [r4, #8]
 800b332:	2900      	cmp	r1, #0
 800b334:	d1ed      	bne.n	800b312 <_puts_r+0x52>
 800b336:	2b00      	cmp	r3, #0
 800b338:	da11      	bge.n	800b35e <_puts_r+0x9e>
 800b33a:	4622      	mov	r2, r4
 800b33c:	210a      	movs	r1, #10
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 fe67 	bl	800c012 <__swbuf_r>
 800b344:	3001      	adds	r0, #1
 800b346:	d0d7      	beq.n	800b2f8 <_puts_r+0x38>
 800b348:	250a      	movs	r5, #10
 800b34a:	e7d7      	b.n	800b2fc <_puts_r+0x3c>
 800b34c:	4622      	mov	r2, r4
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 fe5f 	bl	800c012 <__swbuf_r>
 800b354:	3001      	adds	r0, #1
 800b356:	d1e7      	bne.n	800b328 <_puts_r+0x68>
 800b358:	e7ce      	b.n	800b2f8 <_puts_r+0x38>
 800b35a:	3e01      	subs	r6, #1
 800b35c:	e7e4      	b.n	800b328 <_puts_r+0x68>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	6022      	str	r2, [r4, #0]
 800b364:	220a      	movs	r2, #10
 800b366:	701a      	strb	r2, [r3, #0]
 800b368:	e7ee      	b.n	800b348 <_puts_r+0x88>
	...

0800b36c <puts>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	@ (800b378 <puts+0xc>)
 800b36e:	4601      	mov	r1, r0
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	f7ff bfa5 	b.w	800b2c0 <_puts_r>
 800b376:	bf00      	nop
 800b378:	20000040 	.word	0x20000040

0800b37c <strstr>:
 800b37c:	780a      	ldrb	r2, [r1, #0]
 800b37e:	b570      	push	{r4, r5, r6, lr}
 800b380:	b96a      	cbnz	r2, 800b39e <strstr+0x22>
 800b382:	bd70      	pop	{r4, r5, r6, pc}
 800b384:	429a      	cmp	r2, r3
 800b386:	d109      	bne.n	800b39c <strstr+0x20>
 800b388:	460c      	mov	r4, r1
 800b38a:	4605      	mov	r5, r0
 800b38c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0f6      	beq.n	800b382 <strstr+0x6>
 800b394:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b398:	429e      	cmp	r6, r3
 800b39a:	d0f7      	beq.n	800b38c <strstr+0x10>
 800b39c:	3001      	adds	r0, #1
 800b39e:	7803      	ldrb	r3, [r0, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1ef      	bne.n	800b384 <strstr+0x8>
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	e7ec      	b.n	800b382 <strstr+0x6>

0800b3a8 <memset>:
 800b3a8:	4402      	add	r2, r0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d100      	bne.n	800b3b2 <memset+0xa>
 800b3b0:	4770      	bx	lr
 800b3b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3b6:	e7f9      	b.n	800b3ac <memset+0x4>

0800b3b8 <__errno>:
 800b3b8:	4b01      	ldr	r3, [pc, #4]	@ (800b3c0 <__errno+0x8>)
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	20000040 	.word	0x20000040

0800b3c4 <__libc_init_array>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4d0d      	ldr	r5, [pc, #52]	@ (800b3fc <__libc_init_array+0x38>)
 800b3c8:	4c0d      	ldr	r4, [pc, #52]	@ (800b400 <__libc_init_array+0x3c>)
 800b3ca:	1b64      	subs	r4, r4, r5
 800b3cc:	10a4      	asrs	r4, r4, #2
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	42a6      	cmp	r6, r4
 800b3d2:	d109      	bne.n	800b3e8 <__libc_init_array+0x24>
 800b3d4:	4d0b      	ldr	r5, [pc, #44]	@ (800b404 <__libc_init_array+0x40>)
 800b3d6:	4c0c      	ldr	r4, [pc, #48]	@ (800b408 <__libc_init_array+0x44>)
 800b3d8:	f000 fff6 	bl	800c3c8 <_init>
 800b3dc:	1b64      	subs	r4, r4, r5
 800b3de:	10a4      	asrs	r4, r4, #2
 800b3e0:	2600      	movs	r6, #0
 800b3e2:	42a6      	cmp	r6, r4
 800b3e4:	d105      	bne.n	800b3f2 <__libc_init_array+0x2e>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ec:	4798      	blx	r3
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7ee      	b.n	800b3d0 <__libc_init_array+0xc>
 800b3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f6:	4798      	blx	r3
 800b3f8:	3601      	adds	r6, #1
 800b3fa:	e7f2      	b.n	800b3e2 <__libc_init_array+0x1e>
 800b3fc:	0800d730 	.word	0x0800d730
 800b400:	0800d730 	.word	0x0800d730
 800b404:	0800d730 	.word	0x0800d730
 800b408:	0800d734 	.word	0x0800d734

0800b40c <__retarget_lock_init_recursive>:
 800b40c:	4770      	bx	lr

0800b40e <__retarget_lock_acquire_recursive>:
 800b40e:	4770      	bx	lr

0800b410 <__retarget_lock_release_recursive>:
 800b410:	4770      	bx	lr

0800b412 <memcpy>:
 800b412:	440a      	add	r2, r1
 800b414:	4291      	cmp	r1, r2
 800b416:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b41a:	d100      	bne.n	800b41e <memcpy+0xc>
 800b41c:	4770      	bx	lr
 800b41e:	b510      	push	{r4, lr}
 800b420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b428:	4291      	cmp	r1, r2
 800b42a:	d1f9      	bne.n	800b420 <memcpy+0xe>
 800b42c:	bd10      	pop	{r4, pc}

0800b42e <__ssputs_r>:
 800b42e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b432:	688e      	ldr	r6, [r1, #8]
 800b434:	461f      	mov	r7, r3
 800b436:	42be      	cmp	r6, r7
 800b438:	680b      	ldr	r3, [r1, #0]
 800b43a:	4682      	mov	sl, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	4690      	mov	r8, r2
 800b440:	d82d      	bhi.n	800b49e <__ssputs_r+0x70>
 800b442:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b446:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b44a:	d026      	beq.n	800b49a <__ssputs_r+0x6c>
 800b44c:	6965      	ldr	r5, [r4, #20]
 800b44e:	6909      	ldr	r1, [r1, #16]
 800b450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b454:	eba3 0901 	sub.w	r9, r3, r1
 800b458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b45c:	1c7b      	adds	r3, r7, #1
 800b45e:	444b      	add	r3, r9
 800b460:	106d      	asrs	r5, r5, #1
 800b462:	429d      	cmp	r5, r3
 800b464:	bf38      	it	cc
 800b466:	461d      	movcc	r5, r3
 800b468:	0553      	lsls	r3, r2, #21
 800b46a:	d527      	bpl.n	800b4bc <__ssputs_r+0x8e>
 800b46c:	4629      	mov	r1, r5
 800b46e:	f000 fa99 	bl	800b9a4 <_malloc_r>
 800b472:	4606      	mov	r6, r0
 800b474:	b360      	cbz	r0, 800b4d0 <__ssputs_r+0xa2>
 800b476:	6921      	ldr	r1, [r4, #16]
 800b478:	464a      	mov	r2, r9
 800b47a:	f7ff ffca 	bl	800b412 <memcpy>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b488:	81a3      	strh	r3, [r4, #12]
 800b48a:	6126      	str	r6, [r4, #16]
 800b48c:	6165      	str	r5, [r4, #20]
 800b48e:	444e      	add	r6, r9
 800b490:	eba5 0509 	sub.w	r5, r5, r9
 800b494:	6026      	str	r6, [r4, #0]
 800b496:	60a5      	str	r5, [r4, #8]
 800b498:	463e      	mov	r6, r7
 800b49a:	42be      	cmp	r6, r7
 800b49c:	d900      	bls.n	800b4a0 <__ssputs_r+0x72>
 800b49e:	463e      	mov	r6, r7
 800b4a0:	6820      	ldr	r0, [r4, #0]
 800b4a2:	4632      	mov	r2, r6
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	f000 feab 	bl	800c200 <memmove>
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	1b9b      	subs	r3, r3, r6
 800b4ae:	60a3      	str	r3, [r4, #8]
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	4433      	add	r3, r6
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4bc:	462a      	mov	r2, r5
 800b4be:	f000 fd7a 	bl	800bfb6 <_realloc_r>
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d1e0      	bne.n	800b48a <__ssputs_r+0x5c>
 800b4c8:	6921      	ldr	r1, [r4, #16]
 800b4ca:	4650      	mov	r0, sl
 800b4cc:	f000 ff2a 	bl	800c324 <_free_r>
 800b4d0:	230c      	movs	r3, #12
 800b4d2:	f8ca 3000 	str.w	r3, [sl]
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4e2:	e7e9      	b.n	800b4b8 <__ssputs_r+0x8a>

0800b4e4 <_svfiprintf_r>:
 800b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	4698      	mov	r8, r3
 800b4ea:	898b      	ldrh	r3, [r1, #12]
 800b4ec:	061b      	lsls	r3, r3, #24
 800b4ee:	b09d      	sub	sp, #116	@ 0x74
 800b4f0:	4607      	mov	r7, r0
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	4614      	mov	r4, r2
 800b4f6:	d510      	bpl.n	800b51a <_svfiprintf_r+0x36>
 800b4f8:	690b      	ldr	r3, [r1, #16]
 800b4fa:	b973      	cbnz	r3, 800b51a <_svfiprintf_r+0x36>
 800b4fc:	2140      	movs	r1, #64	@ 0x40
 800b4fe:	f000 fa51 	bl	800b9a4 <_malloc_r>
 800b502:	6028      	str	r0, [r5, #0]
 800b504:	6128      	str	r0, [r5, #16]
 800b506:	b930      	cbnz	r0, 800b516 <_svfiprintf_r+0x32>
 800b508:	230c      	movs	r3, #12
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b510:	b01d      	add	sp, #116	@ 0x74
 800b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b516:	2340      	movs	r3, #64	@ 0x40
 800b518:	616b      	str	r3, [r5, #20]
 800b51a:	2300      	movs	r3, #0
 800b51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b51e:	2320      	movs	r3, #32
 800b520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b524:	f8cd 800c 	str.w	r8, [sp, #12]
 800b528:	2330      	movs	r3, #48	@ 0x30
 800b52a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6c8 <_svfiprintf_r+0x1e4>
 800b52e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b532:	f04f 0901 	mov.w	r9, #1
 800b536:	4623      	mov	r3, r4
 800b538:	469a      	mov	sl, r3
 800b53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b53e:	b10a      	cbz	r2, 800b544 <_svfiprintf_r+0x60>
 800b540:	2a25      	cmp	r2, #37	@ 0x25
 800b542:	d1f9      	bne.n	800b538 <_svfiprintf_r+0x54>
 800b544:	ebba 0b04 	subs.w	fp, sl, r4
 800b548:	d00b      	beq.n	800b562 <_svfiprintf_r+0x7e>
 800b54a:	465b      	mov	r3, fp
 800b54c:	4622      	mov	r2, r4
 800b54e:	4629      	mov	r1, r5
 800b550:	4638      	mov	r0, r7
 800b552:	f7ff ff6c 	bl	800b42e <__ssputs_r>
 800b556:	3001      	adds	r0, #1
 800b558:	f000 80a7 	beq.w	800b6aa <_svfiprintf_r+0x1c6>
 800b55c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b55e:	445a      	add	r2, fp
 800b560:	9209      	str	r2, [sp, #36]	@ 0x24
 800b562:	f89a 3000 	ldrb.w	r3, [sl]
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 809f 	beq.w	800b6aa <_svfiprintf_r+0x1c6>
 800b56c:	2300      	movs	r3, #0
 800b56e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b576:	f10a 0a01 	add.w	sl, sl, #1
 800b57a:	9304      	str	r3, [sp, #16]
 800b57c:	9307      	str	r3, [sp, #28]
 800b57e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b582:	931a      	str	r3, [sp, #104]	@ 0x68
 800b584:	4654      	mov	r4, sl
 800b586:	2205      	movs	r2, #5
 800b588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58c:	484e      	ldr	r0, [pc, #312]	@ (800b6c8 <_svfiprintf_r+0x1e4>)
 800b58e:	f7f4 fe47 	bl	8000220 <memchr>
 800b592:	9a04      	ldr	r2, [sp, #16]
 800b594:	b9d8      	cbnz	r0, 800b5ce <_svfiprintf_r+0xea>
 800b596:	06d0      	lsls	r0, r2, #27
 800b598:	bf44      	itt	mi
 800b59a:	2320      	movmi	r3, #32
 800b59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5a0:	0711      	lsls	r1, r2, #28
 800b5a2:	bf44      	itt	mi
 800b5a4:	232b      	movmi	r3, #43	@ 0x2b
 800b5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b0:	d015      	beq.n	800b5de <_svfiprintf_r+0xfa>
 800b5b2:	9a07      	ldr	r2, [sp, #28]
 800b5b4:	4654      	mov	r4, sl
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	f04f 0c0a 	mov.w	ip, #10
 800b5bc:	4621      	mov	r1, r4
 800b5be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5c2:	3b30      	subs	r3, #48	@ 0x30
 800b5c4:	2b09      	cmp	r3, #9
 800b5c6:	d94b      	bls.n	800b660 <_svfiprintf_r+0x17c>
 800b5c8:	b1b0      	cbz	r0, 800b5f8 <_svfiprintf_r+0x114>
 800b5ca:	9207      	str	r2, [sp, #28]
 800b5cc:	e014      	b.n	800b5f8 <_svfiprintf_r+0x114>
 800b5ce:	eba0 0308 	sub.w	r3, r0, r8
 800b5d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	46a2      	mov	sl, r4
 800b5dc:	e7d2      	b.n	800b584 <_svfiprintf_r+0xa0>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	1d19      	adds	r1, r3, #4
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	9103      	str	r1, [sp, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfbb      	ittet	lt
 800b5ea:	425b      	neglt	r3, r3
 800b5ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b5f0:	9307      	strge	r3, [sp, #28]
 800b5f2:	9307      	strlt	r3, [sp, #28]
 800b5f4:	bfb8      	it	lt
 800b5f6:	9204      	strlt	r2, [sp, #16]
 800b5f8:	7823      	ldrb	r3, [r4, #0]
 800b5fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5fc:	d10a      	bne.n	800b614 <_svfiprintf_r+0x130>
 800b5fe:	7863      	ldrb	r3, [r4, #1]
 800b600:	2b2a      	cmp	r3, #42	@ 0x2a
 800b602:	d132      	bne.n	800b66a <_svfiprintf_r+0x186>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	1d1a      	adds	r2, r3, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	9203      	str	r2, [sp, #12]
 800b60c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b610:	3402      	adds	r4, #2
 800b612:	9305      	str	r3, [sp, #20]
 800b614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6d8 <_svfiprintf_r+0x1f4>
 800b618:	7821      	ldrb	r1, [r4, #0]
 800b61a:	2203      	movs	r2, #3
 800b61c:	4650      	mov	r0, sl
 800b61e:	f7f4 fdff 	bl	8000220 <memchr>
 800b622:	b138      	cbz	r0, 800b634 <_svfiprintf_r+0x150>
 800b624:	9b04      	ldr	r3, [sp, #16]
 800b626:	eba0 000a 	sub.w	r0, r0, sl
 800b62a:	2240      	movs	r2, #64	@ 0x40
 800b62c:	4082      	lsls	r2, r0
 800b62e:	4313      	orrs	r3, r2
 800b630:	3401      	adds	r4, #1
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b638:	4824      	ldr	r0, [pc, #144]	@ (800b6cc <_svfiprintf_r+0x1e8>)
 800b63a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b63e:	2206      	movs	r2, #6
 800b640:	f7f4 fdee 	bl	8000220 <memchr>
 800b644:	2800      	cmp	r0, #0
 800b646:	d036      	beq.n	800b6b6 <_svfiprintf_r+0x1d2>
 800b648:	4b21      	ldr	r3, [pc, #132]	@ (800b6d0 <_svfiprintf_r+0x1ec>)
 800b64a:	bb1b      	cbnz	r3, 800b694 <_svfiprintf_r+0x1b0>
 800b64c:	9b03      	ldr	r3, [sp, #12]
 800b64e:	3307      	adds	r3, #7
 800b650:	f023 0307 	bic.w	r3, r3, #7
 800b654:	3308      	adds	r3, #8
 800b656:	9303      	str	r3, [sp, #12]
 800b658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b65a:	4433      	add	r3, r6
 800b65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b65e:	e76a      	b.n	800b536 <_svfiprintf_r+0x52>
 800b660:	fb0c 3202 	mla	r2, ip, r2, r3
 800b664:	460c      	mov	r4, r1
 800b666:	2001      	movs	r0, #1
 800b668:	e7a8      	b.n	800b5bc <_svfiprintf_r+0xd8>
 800b66a:	2300      	movs	r3, #0
 800b66c:	3401      	adds	r4, #1
 800b66e:	9305      	str	r3, [sp, #20]
 800b670:	4619      	mov	r1, r3
 800b672:	f04f 0c0a 	mov.w	ip, #10
 800b676:	4620      	mov	r0, r4
 800b678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b67c:	3a30      	subs	r2, #48	@ 0x30
 800b67e:	2a09      	cmp	r2, #9
 800b680:	d903      	bls.n	800b68a <_svfiprintf_r+0x1a6>
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0c6      	beq.n	800b614 <_svfiprintf_r+0x130>
 800b686:	9105      	str	r1, [sp, #20]
 800b688:	e7c4      	b.n	800b614 <_svfiprintf_r+0x130>
 800b68a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b68e:	4604      	mov	r4, r0
 800b690:	2301      	movs	r3, #1
 800b692:	e7f0      	b.n	800b676 <_svfiprintf_r+0x192>
 800b694:	ab03      	add	r3, sp, #12
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	462a      	mov	r2, r5
 800b69a:	4b0e      	ldr	r3, [pc, #56]	@ (800b6d4 <_svfiprintf_r+0x1f0>)
 800b69c:	a904      	add	r1, sp, #16
 800b69e:	4638      	mov	r0, r7
 800b6a0:	f3af 8000 	nop.w
 800b6a4:	1c42      	adds	r2, r0, #1
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	d1d6      	bne.n	800b658 <_svfiprintf_r+0x174>
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	065b      	lsls	r3, r3, #25
 800b6ae:	f53f af2d 	bmi.w	800b50c <_svfiprintf_r+0x28>
 800b6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6b4:	e72c      	b.n	800b510 <_svfiprintf_r+0x2c>
 800b6b6:	ab03      	add	r3, sp, #12
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	462a      	mov	r2, r5
 800b6bc:	4b05      	ldr	r3, [pc, #20]	@ (800b6d4 <_svfiprintf_r+0x1f0>)
 800b6be:	a904      	add	r1, sp, #16
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f000 fa5d 	bl	800bb80 <_printf_i>
 800b6c6:	e7ed      	b.n	800b6a4 <_svfiprintf_r+0x1c0>
 800b6c8:	0800d6f4 	.word	0x0800d6f4
 800b6cc:	0800d6fe 	.word	0x0800d6fe
 800b6d0:	00000000 	.word	0x00000000
 800b6d4:	0800b42f 	.word	0x0800b42f
 800b6d8:	0800d6fa 	.word	0x0800d6fa

0800b6dc <__sfputc_r>:
 800b6dc:	6893      	ldr	r3, [r2, #8]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	b410      	push	{r4}
 800b6e4:	6093      	str	r3, [r2, #8]
 800b6e6:	da08      	bge.n	800b6fa <__sfputc_r+0x1e>
 800b6e8:	6994      	ldr	r4, [r2, #24]
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	db01      	blt.n	800b6f2 <__sfputc_r+0x16>
 800b6ee:	290a      	cmp	r1, #10
 800b6f0:	d103      	bne.n	800b6fa <__sfputc_r+0x1e>
 800b6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f6:	f000 bc8c 	b.w	800c012 <__swbuf_r>
 800b6fa:	6813      	ldr	r3, [r2, #0]
 800b6fc:	1c58      	adds	r0, r3, #1
 800b6fe:	6010      	str	r0, [r2, #0]
 800b700:	7019      	strb	r1, [r3, #0]
 800b702:	4608      	mov	r0, r1
 800b704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <__sfputs_r>:
 800b70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	4614      	mov	r4, r2
 800b712:	18d5      	adds	r5, r2, r3
 800b714:	42ac      	cmp	r4, r5
 800b716:	d101      	bne.n	800b71c <__sfputs_r+0x12>
 800b718:	2000      	movs	r0, #0
 800b71a:	e007      	b.n	800b72c <__sfputs_r+0x22>
 800b71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b720:	463a      	mov	r2, r7
 800b722:	4630      	mov	r0, r6
 800b724:	f7ff ffda 	bl	800b6dc <__sfputc_r>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d1f3      	bne.n	800b714 <__sfputs_r+0xa>
 800b72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b730 <_vfiprintf_r>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	460d      	mov	r5, r1
 800b736:	b09d      	sub	sp, #116	@ 0x74
 800b738:	4614      	mov	r4, r2
 800b73a:	4698      	mov	r8, r3
 800b73c:	4606      	mov	r6, r0
 800b73e:	b118      	cbz	r0, 800b748 <_vfiprintf_r+0x18>
 800b740:	6a03      	ldr	r3, [r0, #32]
 800b742:	b90b      	cbnz	r3, 800b748 <_vfiprintf_r+0x18>
 800b744:	f7ff fd74 	bl	800b230 <__sinit>
 800b748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b74a:	07d9      	lsls	r1, r3, #31
 800b74c:	d405      	bmi.n	800b75a <_vfiprintf_r+0x2a>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	059a      	lsls	r2, r3, #22
 800b752:	d402      	bmi.n	800b75a <_vfiprintf_r+0x2a>
 800b754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b756:	f7ff fe5a 	bl	800b40e <__retarget_lock_acquire_recursive>
 800b75a:	89ab      	ldrh	r3, [r5, #12]
 800b75c:	071b      	lsls	r3, r3, #28
 800b75e:	d501      	bpl.n	800b764 <_vfiprintf_r+0x34>
 800b760:	692b      	ldr	r3, [r5, #16]
 800b762:	b99b      	cbnz	r3, 800b78c <_vfiprintf_r+0x5c>
 800b764:	4629      	mov	r1, r5
 800b766:	4630      	mov	r0, r6
 800b768:	f000 fc92 	bl	800c090 <__swsetup_r>
 800b76c:	b170      	cbz	r0, 800b78c <_vfiprintf_r+0x5c>
 800b76e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b770:	07dc      	lsls	r4, r3, #31
 800b772:	d504      	bpl.n	800b77e <_vfiprintf_r+0x4e>
 800b774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b778:	b01d      	add	sp, #116	@ 0x74
 800b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	0598      	lsls	r0, r3, #22
 800b782:	d4f7      	bmi.n	800b774 <_vfiprintf_r+0x44>
 800b784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b786:	f7ff fe43 	bl	800b410 <__retarget_lock_release_recursive>
 800b78a:	e7f3      	b.n	800b774 <_vfiprintf_r+0x44>
 800b78c:	2300      	movs	r3, #0
 800b78e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b790:	2320      	movs	r3, #32
 800b792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b796:	f8cd 800c 	str.w	r8, [sp, #12]
 800b79a:	2330      	movs	r3, #48	@ 0x30
 800b79c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b94c <_vfiprintf_r+0x21c>
 800b7a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7a4:	f04f 0901 	mov.w	r9, #1
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	469a      	mov	sl, r3
 800b7ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b0:	b10a      	cbz	r2, 800b7b6 <_vfiprintf_r+0x86>
 800b7b2:	2a25      	cmp	r2, #37	@ 0x25
 800b7b4:	d1f9      	bne.n	800b7aa <_vfiprintf_r+0x7a>
 800b7b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ba:	d00b      	beq.n	800b7d4 <_vfiprintf_r+0xa4>
 800b7bc:	465b      	mov	r3, fp
 800b7be:	4622      	mov	r2, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ffa1 	bl	800b70a <__sfputs_r>
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	f000 80a7 	beq.w	800b91c <_vfiprintf_r+0x1ec>
 800b7ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7d0:	445a      	add	r2, fp
 800b7d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 809f 	beq.w	800b91c <_vfiprintf_r+0x1ec>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7e8:	f10a 0a01 	add.w	sl, sl, #1
 800b7ec:	9304      	str	r3, [sp, #16]
 800b7ee:	9307      	str	r3, [sp, #28]
 800b7f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7f6:	4654      	mov	r4, sl
 800b7f8:	2205      	movs	r2, #5
 800b7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fe:	4853      	ldr	r0, [pc, #332]	@ (800b94c <_vfiprintf_r+0x21c>)
 800b800:	f7f4 fd0e 	bl	8000220 <memchr>
 800b804:	9a04      	ldr	r2, [sp, #16]
 800b806:	b9d8      	cbnz	r0, 800b840 <_vfiprintf_r+0x110>
 800b808:	06d1      	lsls	r1, r2, #27
 800b80a:	bf44      	itt	mi
 800b80c:	2320      	movmi	r3, #32
 800b80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b812:	0713      	lsls	r3, r2, #28
 800b814:	bf44      	itt	mi
 800b816:	232b      	movmi	r3, #43	@ 0x2b
 800b818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b81c:	f89a 3000 	ldrb.w	r3, [sl]
 800b820:	2b2a      	cmp	r3, #42	@ 0x2a
 800b822:	d015      	beq.n	800b850 <_vfiprintf_r+0x120>
 800b824:	9a07      	ldr	r2, [sp, #28]
 800b826:	4654      	mov	r4, sl
 800b828:	2000      	movs	r0, #0
 800b82a:	f04f 0c0a 	mov.w	ip, #10
 800b82e:	4621      	mov	r1, r4
 800b830:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b834:	3b30      	subs	r3, #48	@ 0x30
 800b836:	2b09      	cmp	r3, #9
 800b838:	d94b      	bls.n	800b8d2 <_vfiprintf_r+0x1a2>
 800b83a:	b1b0      	cbz	r0, 800b86a <_vfiprintf_r+0x13a>
 800b83c:	9207      	str	r2, [sp, #28]
 800b83e:	e014      	b.n	800b86a <_vfiprintf_r+0x13a>
 800b840:	eba0 0308 	sub.w	r3, r0, r8
 800b844:	fa09 f303 	lsl.w	r3, r9, r3
 800b848:	4313      	orrs	r3, r2
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	46a2      	mov	sl, r4
 800b84e:	e7d2      	b.n	800b7f6 <_vfiprintf_r+0xc6>
 800b850:	9b03      	ldr	r3, [sp, #12]
 800b852:	1d19      	adds	r1, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	9103      	str	r1, [sp, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfbb      	ittet	lt
 800b85c:	425b      	neglt	r3, r3
 800b85e:	f042 0202 	orrlt.w	r2, r2, #2
 800b862:	9307      	strge	r3, [sp, #28]
 800b864:	9307      	strlt	r3, [sp, #28]
 800b866:	bfb8      	it	lt
 800b868:	9204      	strlt	r2, [sp, #16]
 800b86a:	7823      	ldrb	r3, [r4, #0]
 800b86c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b86e:	d10a      	bne.n	800b886 <_vfiprintf_r+0x156>
 800b870:	7863      	ldrb	r3, [r4, #1]
 800b872:	2b2a      	cmp	r3, #42	@ 0x2a
 800b874:	d132      	bne.n	800b8dc <_vfiprintf_r+0x1ac>
 800b876:	9b03      	ldr	r3, [sp, #12]
 800b878:	1d1a      	adds	r2, r3, #4
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	9203      	str	r2, [sp, #12]
 800b87e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b882:	3402      	adds	r4, #2
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b95c <_vfiprintf_r+0x22c>
 800b88a:	7821      	ldrb	r1, [r4, #0]
 800b88c:	2203      	movs	r2, #3
 800b88e:	4650      	mov	r0, sl
 800b890:	f7f4 fcc6 	bl	8000220 <memchr>
 800b894:	b138      	cbz	r0, 800b8a6 <_vfiprintf_r+0x176>
 800b896:	9b04      	ldr	r3, [sp, #16]
 800b898:	eba0 000a 	sub.w	r0, r0, sl
 800b89c:	2240      	movs	r2, #64	@ 0x40
 800b89e:	4082      	lsls	r2, r0
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	3401      	adds	r4, #1
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8aa:	4829      	ldr	r0, [pc, #164]	@ (800b950 <_vfiprintf_r+0x220>)
 800b8ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8b0:	2206      	movs	r2, #6
 800b8b2:	f7f4 fcb5 	bl	8000220 <memchr>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d03f      	beq.n	800b93a <_vfiprintf_r+0x20a>
 800b8ba:	4b26      	ldr	r3, [pc, #152]	@ (800b954 <_vfiprintf_r+0x224>)
 800b8bc:	bb1b      	cbnz	r3, 800b906 <_vfiprintf_r+0x1d6>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	3307      	adds	r3, #7
 800b8c2:	f023 0307 	bic.w	r3, r3, #7
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	9303      	str	r3, [sp, #12]
 800b8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8cc:	443b      	add	r3, r7
 800b8ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d0:	e76a      	b.n	800b7a8 <_vfiprintf_r+0x78>
 800b8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	2001      	movs	r0, #1
 800b8da:	e7a8      	b.n	800b82e <_vfiprintf_r+0xfe>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	3401      	adds	r4, #1
 800b8e0:	9305      	str	r3, [sp, #20]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f04f 0c0a 	mov.w	ip, #10
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ee:	3a30      	subs	r2, #48	@ 0x30
 800b8f0:	2a09      	cmp	r2, #9
 800b8f2:	d903      	bls.n	800b8fc <_vfiprintf_r+0x1cc>
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0c6      	beq.n	800b886 <_vfiprintf_r+0x156>
 800b8f8:	9105      	str	r1, [sp, #20]
 800b8fa:	e7c4      	b.n	800b886 <_vfiprintf_r+0x156>
 800b8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b900:	4604      	mov	r4, r0
 800b902:	2301      	movs	r3, #1
 800b904:	e7f0      	b.n	800b8e8 <_vfiprintf_r+0x1b8>
 800b906:	ab03      	add	r3, sp, #12
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	462a      	mov	r2, r5
 800b90c:	4b12      	ldr	r3, [pc, #72]	@ (800b958 <_vfiprintf_r+0x228>)
 800b90e:	a904      	add	r1, sp, #16
 800b910:	4630      	mov	r0, r6
 800b912:	f3af 8000 	nop.w
 800b916:	4607      	mov	r7, r0
 800b918:	1c78      	adds	r0, r7, #1
 800b91a:	d1d6      	bne.n	800b8ca <_vfiprintf_r+0x19a>
 800b91c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b91e:	07d9      	lsls	r1, r3, #31
 800b920:	d405      	bmi.n	800b92e <_vfiprintf_r+0x1fe>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d402      	bmi.n	800b92e <_vfiprintf_r+0x1fe>
 800b928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b92a:	f7ff fd71 	bl	800b410 <__retarget_lock_release_recursive>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	065b      	lsls	r3, r3, #25
 800b932:	f53f af1f 	bmi.w	800b774 <_vfiprintf_r+0x44>
 800b936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b938:	e71e      	b.n	800b778 <_vfiprintf_r+0x48>
 800b93a:	ab03      	add	r3, sp, #12
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	462a      	mov	r2, r5
 800b940:	4b05      	ldr	r3, [pc, #20]	@ (800b958 <_vfiprintf_r+0x228>)
 800b942:	a904      	add	r1, sp, #16
 800b944:	4630      	mov	r0, r6
 800b946:	f000 f91b 	bl	800bb80 <_printf_i>
 800b94a:	e7e4      	b.n	800b916 <_vfiprintf_r+0x1e6>
 800b94c:	0800d6f4 	.word	0x0800d6f4
 800b950:	0800d6fe 	.word	0x0800d6fe
 800b954:	00000000 	.word	0x00000000
 800b958:	0800b70b 	.word	0x0800b70b
 800b95c:	0800d6fa 	.word	0x0800d6fa

0800b960 <sbrk_aligned>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	4e0f      	ldr	r6, [pc, #60]	@ (800b9a0 <sbrk_aligned+0x40>)
 800b964:	460c      	mov	r4, r1
 800b966:	6831      	ldr	r1, [r6, #0]
 800b968:	4605      	mov	r5, r0
 800b96a:	b911      	cbnz	r1, 800b972 <sbrk_aligned+0x12>
 800b96c:	f000 fcb8 	bl	800c2e0 <_sbrk_r>
 800b970:	6030      	str	r0, [r6, #0]
 800b972:	4621      	mov	r1, r4
 800b974:	4628      	mov	r0, r5
 800b976:	f000 fcb3 	bl	800c2e0 <_sbrk_r>
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	d103      	bne.n	800b986 <sbrk_aligned+0x26>
 800b97e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b982:	4620      	mov	r0, r4
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	1cc4      	adds	r4, r0, #3
 800b988:	f024 0403 	bic.w	r4, r4, #3
 800b98c:	42a0      	cmp	r0, r4
 800b98e:	d0f8      	beq.n	800b982 <sbrk_aligned+0x22>
 800b990:	1a21      	subs	r1, r4, r0
 800b992:	4628      	mov	r0, r5
 800b994:	f000 fca4 	bl	800c2e0 <_sbrk_r>
 800b998:	3001      	adds	r0, #1
 800b99a:	d1f2      	bne.n	800b982 <sbrk_aligned+0x22>
 800b99c:	e7ef      	b.n	800b97e <sbrk_aligned+0x1e>
 800b99e:	bf00      	nop
 800b9a0:	200051e4 	.word	0x200051e4

0800b9a4 <_malloc_r>:
 800b9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a8:	1ccd      	adds	r5, r1, #3
 800b9aa:	f025 0503 	bic.w	r5, r5, #3
 800b9ae:	3508      	adds	r5, #8
 800b9b0:	2d0c      	cmp	r5, #12
 800b9b2:	bf38      	it	cc
 800b9b4:	250c      	movcc	r5, #12
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	db01      	blt.n	800b9c0 <_malloc_r+0x1c>
 800b9bc:	42a9      	cmp	r1, r5
 800b9be:	d904      	bls.n	800b9ca <_malloc_r+0x26>
 800b9c0:	230c      	movs	r3, #12
 800b9c2:	6033      	str	r3, [r6, #0]
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800baa0 <_malloc_r+0xfc>
 800b9ce:	f000 faa3 	bl	800bf18 <__malloc_lock>
 800b9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9d6:	461c      	mov	r4, r3
 800b9d8:	bb44      	cbnz	r4, 800ba2c <_malloc_r+0x88>
 800b9da:	4629      	mov	r1, r5
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7ff ffbf 	bl	800b960 <sbrk_aligned>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	d158      	bne.n	800ba9a <_malloc_r+0xf6>
 800b9e8:	f8d8 4000 	ldr.w	r4, [r8]
 800b9ec:	4627      	mov	r7, r4
 800b9ee:	2f00      	cmp	r7, #0
 800b9f0:	d143      	bne.n	800ba7a <_malloc_r+0xd6>
 800b9f2:	2c00      	cmp	r4, #0
 800b9f4:	d04b      	beq.n	800ba8e <_malloc_r+0xea>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	eb04 0903 	add.w	r9, r4, r3
 800ba00:	f000 fc6e 	bl	800c2e0 <_sbrk_r>
 800ba04:	4581      	cmp	r9, r0
 800ba06:	d142      	bne.n	800ba8e <_malloc_r+0xea>
 800ba08:	6821      	ldr	r1, [r4, #0]
 800ba0a:	1a6d      	subs	r5, r5, r1
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7ff ffa6 	bl	800b960 <sbrk_aligned>
 800ba14:	3001      	adds	r0, #1
 800ba16:	d03a      	beq.n	800ba8e <_malloc_r+0xea>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	442b      	add	r3, r5
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	bb62      	cbnz	r2, 800ba80 <_malloc_r+0xdc>
 800ba26:	f8c8 7000 	str.w	r7, [r8]
 800ba2a:	e00f      	b.n	800ba4c <_malloc_r+0xa8>
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	1b52      	subs	r2, r2, r5
 800ba30:	d420      	bmi.n	800ba74 <_malloc_r+0xd0>
 800ba32:	2a0b      	cmp	r2, #11
 800ba34:	d917      	bls.n	800ba66 <_malloc_r+0xc2>
 800ba36:	1961      	adds	r1, r4, r5
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	6025      	str	r5, [r4, #0]
 800ba3c:	bf18      	it	ne
 800ba3e:	6059      	strne	r1, [r3, #4]
 800ba40:	6863      	ldr	r3, [r4, #4]
 800ba42:	bf08      	it	eq
 800ba44:	f8c8 1000 	streq.w	r1, [r8]
 800ba48:	5162      	str	r2, [r4, r5]
 800ba4a:	604b      	str	r3, [r1, #4]
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f000 fa69 	bl	800bf24 <__malloc_unlock>
 800ba52:	f104 000b 	add.w	r0, r4, #11
 800ba56:	1d23      	adds	r3, r4, #4
 800ba58:	f020 0007 	bic.w	r0, r0, #7
 800ba5c:	1ac2      	subs	r2, r0, r3
 800ba5e:	bf1c      	itt	ne
 800ba60:	1a1b      	subne	r3, r3, r0
 800ba62:	50a3      	strne	r3, [r4, r2]
 800ba64:	e7af      	b.n	800b9c6 <_malloc_r+0x22>
 800ba66:	6862      	ldr	r2, [r4, #4]
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	bf0c      	ite	eq
 800ba6c:	f8c8 2000 	streq.w	r2, [r8]
 800ba70:	605a      	strne	r2, [r3, #4]
 800ba72:	e7eb      	b.n	800ba4c <_malloc_r+0xa8>
 800ba74:	4623      	mov	r3, r4
 800ba76:	6864      	ldr	r4, [r4, #4]
 800ba78:	e7ae      	b.n	800b9d8 <_malloc_r+0x34>
 800ba7a:	463c      	mov	r4, r7
 800ba7c:	687f      	ldr	r7, [r7, #4]
 800ba7e:	e7b6      	b.n	800b9ee <_malloc_r+0x4a>
 800ba80:	461a      	mov	r2, r3
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d1fb      	bne.n	800ba80 <_malloc_r+0xdc>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	6053      	str	r3, [r2, #4]
 800ba8c:	e7de      	b.n	800ba4c <_malloc_r+0xa8>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	6033      	str	r3, [r6, #0]
 800ba92:	4630      	mov	r0, r6
 800ba94:	f000 fa46 	bl	800bf24 <__malloc_unlock>
 800ba98:	e794      	b.n	800b9c4 <_malloc_r+0x20>
 800ba9a:	6005      	str	r5, [r0, #0]
 800ba9c:	e7d6      	b.n	800ba4c <_malloc_r+0xa8>
 800ba9e:	bf00      	nop
 800baa0:	200051e8 	.word	0x200051e8

0800baa4 <_printf_common>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	4616      	mov	r6, r2
 800baaa:	4698      	mov	r8, r3
 800baac:	688a      	ldr	r2, [r1, #8]
 800baae:	690b      	ldr	r3, [r1, #16]
 800bab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	bfb8      	it	lt
 800bab8:	4613      	movlt	r3, r2
 800baba:	6033      	str	r3, [r6, #0]
 800babc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bac0:	4607      	mov	r7, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	b10a      	cbz	r2, 800baca <_printf_common+0x26>
 800bac6:	3301      	adds	r3, #1
 800bac8:	6033      	str	r3, [r6, #0]
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	0699      	lsls	r1, r3, #26
 800bace:	bf42      	ittt	mi
 800bad0:	6833      	ldrmi	r3, [r6, #0]
 800bad2:	3302      	addmi	r3, #2
 800bad4:	6033      	strmi	r3, [r6, #0]
 800bad6:	6825      	ldr	r5, [r4, #0]
 800bad8:	f015 0506 	ands.w	r5, r5, #6
 800badc:	d106      	bne.n	800baec <_printf_common+0x48>
 800bade:	f104 0a19 	add.w	sl, r4, #25
 800bae2:	68e3      	ldr	r3, [r4, #12]
 800bae4:	6832      	ldr	r2, [r6, #0]
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	42ab      	cmp	r3, r5
 800baea:	dc26      	bgt.n	800bb3a <_printf_common+0x96>
 800baec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800baf0:	6822      	ldr	r2, [r4, #0]
 800baf2:	3b00      	subs	r3, #0
 800baf4:	bf18      	it	ne
 800baf6:	2301      	movne	r3, #1
 800baf8:	0692      	lsls	r2, r2, #26
 800bafa:	d42b      	bmi.n	800bb54 <_printf_common+0xb0>
 800bafc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb00:	4641      	mov	r1, r8
 800bb02:	4638      	mov	r0, r7
 800bb04:	47c8      	blx	r9
 800bb06:	3001      	adds	r0, #1
 800bb08:	d01e      	beq.n	800bb48 <_printf_common+0xa4>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	6922      	ldr	r2, [r4, #16]
 800bb0e:	f003 0306 	and.w	r3, r3, #6
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	bf02      	ittt	eq
 800bb16:	68e5      	ldreq	r5, [r4, #12]
 800bb18:	6833      	ldreq	r3, [r6, #0]
 800bb1a:	1aed      	subeq	r5, r5, r3
 800bb1c:	68a3      	ldr	r3, [r4, #8]
 800bb1e:	bf0c      	ite	eq
 800bb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb24:	2500      	movne	r5, #0
 800bb26:	4293      	cmp	r3, r2
 800bb28:	bfc4      	itt	gt
 800bb2a:	1a9b      	subgt	r3, r3, r2
 800bb2c:	18ed      	addgt	r5, r5, r3
 800bb2e:	2600      	movs	r6, #0
 800bb30:	341a      	adds	r4, #26
 800bb32:	42b5      	cmp	r5, r6
 800bb34:	d11a      	bne.n	800bb6c <_printf_common+0xc8>
 800bb36:	2000      	movs	r0, #0
 800bb38:	e008      	b.n	800bb4c <_printf_common+0xa8>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	4641      	mov	r1, r8
 800bb40:	4638      	mov	r0, r7
 800bb42:	47c8      	blx	r9
 800bb44:	3001      	adds	r0, #1
 800bb46:	d103      	bne.n	800bb50 <_printf_common+0xac>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb50:	3501      	adds	r5, #1
 800bb52:	e7c6      	b.n	800bae2 <_printf_common+0x3e>
 800bb54:	18e1      	adds	r1, r4, r3
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	2030      	movs	r0, #48	@ 0x30
 800bb5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb5e:	4422      	add	r2, r4
 800bb60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb68:	3302      	adds	r3, #2
 800bb6a:	e7c7      	b.n	800bafc <_printf_common+0x58>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	4622      	mov	r2, r4
 800bb70:	4641      	mov	r1, r8
 800bb72:	4638      	mov	r0, r7
 800bb74:	47c8      	blx	r9
 800bb76:	3001      	adds	r0, #1
 800bb78:	d0e6      	beq.n	800bb48 <_printf_common+0xa4>
 800bb7a:	3601      	adds	r6, #1
 800bb7c:	e7d9      	b.n	800bb32 <_printf_common+0x8e>
	...

0800bb80 <_printf_i>:
 800bb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb84:	7e0f      	ldrb	r7, [r1, #24]
 800bb86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb88:	2f78      	cmp	r7, #120	@ 0x78
 800bb8a:	4691      	mov	r9, r2
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	460c      	mov	r4, r1
 800bb90:	469a      	mov	sl, r3
 800bb92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb96:	d807      	bhi.n	800bba8 <_printf_i+0x28>
 800bb98:	2f62      	cmp	r7, #98	@ 0x62
 800bb9a:	d80a      	bhi.n	800bbb2 <_printf_i+0x32>
 800bb9c:	2f00      	cmp	r7, #0
 800bb9e:	f000 80d2 	beq.w	800bd46 <_printf_i+0x1c6>
 800bba2:	2f58      	cmp	r7, #88	@ 0x58
 800bba4:	f000 80b9 	beq.w	800bd1a <_printf_i+0x19a>
 800bba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbb0:	e03a      	b.n	800bc28 <_printf_i+0xa8>
 800bbb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbb6:	2b15      	cmp	r3, #21
 800bbb8:	d8f6      	bhi.n	800bba8 <_printf_i+0x28>
 800bbba:	a101      	add	r1, pc, #4	@ (adr r1, 800bbc0 <_printf_i+0x40>)
 800bbbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbc0:	0800bc19 	.word	0x0800bc19
 800bbc4:	0800bc2d 	.word	0x0800bc2d
 800bbc8:	0800bba9 	.word	0x0800bba9
 800bbcc:	0800bba9 	.word	0x0800bba9
 800bbd0:	0800bba9 	.word	0x0800bba9
 800bbd4:	0800bba9 	.word	0x0800bba9
 800bbd8:	0800bc2d 	.word	0x0800bc2d
 800bbdc:	0800bba9 	.word	0x0800bba9
 800bbe0:	0800bba9 	.word	0x0800bba9
 800bbe4:	0800bba9 	.word	0x0800bba9
 800bbe8:	0800bba9 	.word	0x0800bba9
 800bbec:	0800bd2d 	.word	0x0800bd2d
 800bbf0:	0800bc57 	.word	0x0800bc57
 800bbf4:	0800bce7 	.word	0x0800bce7
 800bbf8:	0800bba9 	.word	0x0800bba9
 800bbfc:	0800bba9 	.word	0x0800bba9
 800bc00:	0800bd4f 	.word	0x0800bd4f
 800bc04:	0800bba9 	.word	0x0800bba9
 800bc08:	0800bc57 	.word	0x0800bc57
 800bc0c:	0800bba9 	.word	0x0800bba9
 800bc10:	0800bba9 	.word	0x0800bba9
 800bc14:	0800bcef 	.word	0x0800bcef
 800bc18:	6833      	ldr	r3, [r6, #0]
 800bc1a:	1d1a      	adds	r2, r3, #4
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6032      	str	r2, [r6, #0]
 800bc20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e09d      	b.n	800bd68 <_printf_i+0x1e8>
 800bc2c:	6833      	ldr	r3, [r6, #0]
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	1d19      	adds	r1, r3, #4
 800bc32:	6031      	str	r1, [r6, #0]
 800bc34:	0606      	lsls	r6, r0, #24
 800bc36:	d501      	bpl.n	800bc3c <_printf_i+0xbc>
 800bc38:	681d      	ldr	r5, [r3, #0]
 800bc3a:	e003      	b.n	800bc44 <_printf_i+0xc4>
 800bc3c:	0645      	lsls	r5, r0, #25
 800bc3e:	d5fb      	bpl.n	800bc38 <_printf_i+0xb8>
 800bc40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	da03      	bge.n	800bc50 <_printf_i+0xd0>
 800bc48:	232d      	movs	r3, #45	@ 0x2d
 800bc4a:	426d      	negs	r5, r5
 800bc4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc50:	4859      	ldr	r0, [pc, #356]	@ (800bdb8 <_printf_i+0x238>)
 800bc52:	230a      	movs	r3, #10
 800bc54:	e011      	b.n	800bc7a <_printf_i+0xfa>
 800bc56:	6821      	ldr	r1, [r4, #0]
 800bc58:	6833      	ldr	r3, [r6, #0]
 800bc5a:	0608      	lsls	r0, r1, #24
 800bc5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc60:	d402      	bmi.n	800bc68 <_printf_i+0xe8>
 800bc62:	0649      	lsls	r1, r1, #25
 800bc64:	bf48      	it	mi
 800bc66:	b2ad      	uxthmi	r5, r5
 800bc68:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc6a:	4853      	ldr	r0, [pc, #332]	@ (800bdb8 <_printf_i+0x238>)
 800bc6c:	6033      	str	r3, [r6, #0]
 800bc6e:	bf14      	ite	ne
 800bc70:	230a      	movne	r3, #10
 800bc72:	2308      	moveq	r3, #8
 800bc74:	2100      	movs	r1, #0
 800bc76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc7a:	6866      	ldr	r6, [r4, #4]
 800bc7c:	60a6      	str	r6, [r4, #8]
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	bfa2      	ittt	ge
 800bc82:	6821      	ldrge	r1, [r4, #0]
 800bc84:	f021 0104 	bicge.w	r1, r1, #4
 800bc88:	6021      	strge	r1, [r4, #0]
 800bc8a:	b90d      	cbnz	r5, 800bc90 <_printf_i+0x110>
 800bc8c:	2e00      	cmp	r6, #0
 800bc8e:	d04b      	beq.n	800bd28 <_printf_i+0x1a8>
 800bc90:	4616      	mov	r6, r2
 800bc92:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc96:	fb03 5711 	mls	r7, r3, r1, r5
 800bc9a:	5dc7      	ldrb	r7, [r0, r7]
 800bc9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bca0:	462f      	mov	r7, r5
 800bca2:	42bb      	cmp	r3, r7
 800bca4:	460d      	mov	r5, r1
 800bca6:	d9f4      	bls.n	800bc92 <_printf_i+0x112>
 800bca8:	2b08      	cmp	r3, #8
 800bcaa:	d10b      	bne.n	800bcc4 <_printf_i+0x144>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	07df      	lsls	r7, r3, #31
 800bcb0:	d508      	bpl.n	800bcc4 <_printf_i+0x144>
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	6861      	ldr	r1, [r4, #4]
 800bcb6:	4299      	cmp	r1, r3
 800bcb8:	bfde      	ittt	le
 800bcba:	2330      	movle	r3, #48	@ 0x30
 800bcbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcc0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bcc4:	1b92      	subs	r2, r2, r6
 800bcc6:	6122      	str	r2, [r4, #16]
 800bcc8:	f8cd a000 	str.w	sl, [sp]
 800bccc:	464b      	mov	r3, r9
 800bcce:	aa03      	add	r2, sp, #12
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	f7ff fee6 	bl	800baa4 <_printf_common>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d14a      	bne.n	800bd72 <_printf_i+0x1f2>
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bce0:	b004      	add	sp, #16
 800bce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	f043 0320 	orr.w	r3, r3, #32
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	4833      	ldr	r0, [pc, #204]	@ (800bdbc <_printf_i+0x23c>)
 800bcf0:	2778      	movs	r7, #120	@ 0x78
 800bcf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	6831      	ldr	r1, [r6, #0]
 800bcfa:	061f      	lsls	r7, r3, #24
 800bcfc:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd00:	d402      	bmi.n	800bd08 <_printf_i+0x188>
 800bd02:	065f      	lsls	r7, r3, #25
 800bd04:	bf48      	it	mi
 800bd06:	b2ad      	uxthmi	r5, r5
 800bd08:	6031      	str	r1, [r6, #0]
 800bd0a:	07d9      	lsls	r1, r3, #31
 800bd0c:	bf44      	itt	mi
 800bd0e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd12:	6023      	strmi	r3, [r4, #0]
 800bd14:	b11d      	cbz	r5, 800bd1e <_printf_i+0x19e>
 800bd16:	2310      	movs	r3, #16
 800bd18:	e7ac      	b.n	800bc74 <_printf_i+0xf4>
 800bd1a:	4827      	ldr	r0, [pc, #156]	@ (800bdb8 <_printf_i+0x238>)
 800bd1c:	e7e9      	b.n	800bcf2 <_printf_i+0x172>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	f023 0320 	bic.w	r3, r3, #32
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	e7f6      	b.n	800bd16 <_printf_i+0x196>
 800bd28:	4616      	mov	r6, r2
 800bd2a:	e7bd      	b.n	800bca8 <_printf_i+0x128>
 800bd2c:	6833      	ldr	r3, [r6, #0]
 800bd2e:	6825      	ldr	r5, [r4, #0]
 800bd30:	6961      	ldr	r1, [r4, #20]
 800bd32:	1d18      	adds	r0, r3, #4
 800bd34:	6030      	str	r0, [r6, #0]
 800bd36:	062e      	lsls	r6, r5, #24
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	d501      	bpl.n	800bd40 <_printf_i+0x1c0>
 800bd3c:	6019      	str	r1, [r3, #0]
 800bd3e:	e002      	b.n	800bd46 <_printf_i+0x1c6>
 800bd40:	0668      	lsls	r0, r5, #25
 800bd42:	d5fb      	bpl.n	800bd3c <_printf_i+0x1bc>
 800bd44:	8019      	strh	r1, [r3, #0]
 800bd46:	2300      	movs	r3, #0
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	4616      	mov	r6, r2
 800bd4c:	e7bc      	b.n	800bcc8 <_printf_i+0x148>
 800bd4e:	6833      	ldr	r3, [r6, #0]
 800bd50:	1d1a      	adds	r2, r3, #4
 800bd52:	6032      	str	r2, [r6, #0]
 800bd54:	681e      	ldr	r6, [r3, #0]
 800bd56:	6862      	ldr	r2, [r4, #4]
 800bd58:	2100      	movs	r1, #0
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7f4 fa60 	bl	8000220 <memchr>
 800bd60:	b108      	cbz	r0, 800bd66 <_printf_i+0x1e6>
 800bd62:	1b80      	subs	r0, r0, r6
 800bd64:	6060      	str	r0, [r4, #4]
 800bd66:	6863      	ldr	r3, [r4, #4]
 800bd68:	6123      	str	r3, [r4, #16]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd70:	e7aa      	b.n	800bcc8 <_printf_i+0x148>
 800bd72:	6923      	ldr	r3, [r4, #16]
 800bd74:	4632      	mov	r2, r6
 800bd76:	4649      	mov	r1, r9
 800bd78:	4640      	mov	r0, r8
 800bd7a:	47d0      	blx	sl
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	d0ad      	beq.n	800bcdc <_printf_i+0x15c>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	079b      	lsls	r3, r3, #30
 800bd84:	d413      	bmi.n	800bdae <_printf_i+0x22e>
 800bd86:	68e0      	ldr	r0, [r4, #12]
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	4298      	cmp	r0, r3
 800bd8c:	bfb8      	it	lt
 800bd8e:	4618      	movlt	r0, r3
 800bd90:	e7a6      	b.n	800bce0 <_printf_i+0x160>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4632      	mov	r2, r6
 800bd96:	4649      	mov	r1, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	47d0      	blx	sl
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d09d      	beq.n	800bcdc <_printf_i+0x15c>
 800bda0:	3501      	adds	r5, #1
 800bda2:	68e3      	ldr	r3, [r4, #12]
 800bda4:	9903      	ldr	r1, [sp, #12]
 800bda6:	1a5b      	subs	r3, r3, r1
 800bda8:	42ab      	cmp	r3, r5
 800bdaa:	dcf2      	bgt.n	800bd92 <_printf_i+0x212>
 800bdac:	e7eb      	b.n	800bd86 <_printf_i+0x206>
 800bdae:	2500      	movs	r5, #0
 800bdb0:	f104 0619 	add.w	r6, r4, #25
 800bdb4:	e7f5      	b.n	800bda2 <_printf_i+0x222>
 800bdb6:	bf00      	nop
 800bdb8:	0800d705 	.word	0x0800d705
 800bdbc:	0800d716 	.word	0x0800d716

0800bdc0 <__sflush_r>:
 800bdc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	0716      	lsls	r6, r2, #28
 800bdca:	4605      	mov	r5, r0
 800bdcc:	460c      	mov	r4, r1
 800bdce:	d454      	bmi.n	800be7a <__sflush_r+0xba>
 800bdd0:	684b      	ldr	r3, [r1, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	dc02      	bgt.n	800bddc <__sflush_r+0x1c>
 800bdd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dd48      	ble.n	800be6e <__sflush_r+0xae>
 800bddc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdde:	2e00      	cmp	r6, #0
 800bde0:	d045      	beq.n	800be6e <__sflush_r+0xae>
 800bde2:	2300      	movs	r3, #0
 800bde4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bde8:	682f      	ldr	r7, [r5, #0]
 800bdea:	6a21      	ldr	r1, [r4, #32]
 800bdec:	602b      	str	r3, [r5, #0]
 800bdee:	d030      	beq.n	800be52 <__sflush_r+0x92>
 800bdf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	0759      	lsls	r1, r3, #29
 800bdf6:	d505      	bpl.n	800be04 <__sflush_r+0x44>
 800bdf8:	6863      	ldr	r3, [r4, #4]
 800bdfa:	1ad2      	subs	r2, r2, r3
 800bdfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdfe:	b10b      	cbz	r3, 800be04 <__sflush_r+0x44>
 800be00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be02:	1ad2      	subs	r2, r2, r3
 800be04:	2300      	movs	r3, #0
 800be06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be08:	6a21      	ldr	r1, [r4, #32]
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b0      	blx	r6
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	d106      	bne.n	800be22 <__sflush_r+0x62>
 800be14:	6829      	ldr	r1, [r5, #0]
 800be16:	291d      	cmp	r1, #29
 800be18:	d82b      	bhi.n	800be72 <__sflush_r+0xb2>
 800be1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bec4 <__sflush_r+0x104>)
 800be1c:	410a      	asrs	r2, r1
 800be1e:	07d6      	lsls	r6, r2, #31
 800be20:	d427      	bmi.n	800be72 <__sflush_r+0xb2>
 800be22:	2200      	movs	r2, #0
 800be24:	6062      	str	r2, [r4, #4]
 800be26:	04d9      	lsls	r1, r3, #19
 800be28:	6922      	ldr	r2, [r4, #16]
 800be2a:	6022      	str	r2, [r4, #0]
 800be2c:	d504      	bpl.n	800be38 <__sflush_r+0x78>
 800be2e:	1c42      	adds	r2, r0, #1
 800be30:	d101      	bne.n	800be36 <__sflush_r+0x76>
 800be32:	682b      	ldr	r3, [r5, #0]
 800be34:	b903      	cbnz	r3, 800be38 <__sflush_r+0x78>
 800be36:	6560      	str	r0, [r4, #84]	@ 0x54
 800be38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be3a:	602f      	str	r7, [r5, #0]
 800be3c:	b1b9      	cbz	r1, 800be6e <__sflush_r+0xae>
 800be3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be42:	4299      	cmp	r1, r3
 800be44:	d002      	beq.n	800be4c <__sflush_r+0x8c>
 800be46:	4628      	mov	r0, r5
 800be48:	f000 fa6c 	bl	800c324 <_free_r>
 800be4c:	2300      	movs	r3, #0
 800be4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be50:	e00d      	b.n	800be6e <__sflush_r+0xae>
 800be52:	2301      	movs	r3, #1
 800be54:	4628      	mov	r0, r5
 800be56:	47b0      	blx	r6
 800be58:	4602      	mov	r2, r0
 800be5a:	1c50      	adds	r0, r2, #1
 800be5c:	d1c9      	bne.n	800bdf2 <__sflush_r+0x32>
 800be5e:	682b      	ldr	r3, [r5, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0c6      	beq.n	800bdf2 <__sflush_r+0x32>
 800be64:	2b1d      	cmp	r3, #29
 800be66:	d001      	beq.n	800be6c <__sflush_r+0xac>
 800be68:	2b16      	cmp	r3, #22
 800be6a:	d11e      	bne.n	800beaa <__sflush_r+0xea>
 800be6c:	602f      	str	r7, [r5, #0]
 800be6e:	2000      	movs	r0, #0
 800be70:	e022      	b.n	800beb8 <__sflush_r+0xf8>
 800be72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be76:	b21b      	sxth	r3, r3
 800be78:	e01b      	b.n	800beb2 <__sflush_r+0xf2>
 800be7a:	690f      	ldr	r7, [r1, #16]
 800be7c:	2f00      	cmp	r7, #0
 800be7e:	d0f6      	beq.n	800be6e <__sflush_r+0xae>
 800be80:	0793      	lsls	r3, r2, #30
 800be82:	680e      	ldr	r6, [r1, #0]
 800be84:	bf08      	it	eq
 800be86:	694b      	ldreq	r3, [r1, #20]
 800be88:	600f      	str	r7, [r1, #0]
 800be8a:	bf18      	it	ne
 800be8c:	2300      	movne	r3, #0
 800be8e:	eba6 0807 	sub.w	r8, r6, r7
 800be92:	608b      	str	r3, [r1, #8]
 800be94:	f1b8 0f00 	cmp.w	r8, #0
 800be98:	dde9      	ble.n	800be6e <__sflush_r+0xae>
 800be9a:	6a21      	ldr	r1, [r4, #32]
 800be9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be9e:	4643      	mov	r3, r8
 800bea0:	463a      	mov	r2, r7
 800bea2:	4628      	mov	r0, r5
 800bea4:	47b0      	blx	r6
 800bea6:	2800      	cmp	r0, #0
 800bea8:	dc08      	bgt.n	800bebc <__sflush_r+0xfc>
 800beaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb2:	81a3      	strh	r3, [r4, #12]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebc:	4407      	add	r7, r0
 800bebe:	eba8 0800 	sub.w	r8, r8, r0
 800bec2:	e7e7      	b.n	800be94 <__sflush_r+0xd4>
 800bec4:	dfbffffe 	.word	0xdfbffffe

0800bec8 <_fflush_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	690b      	ldr	r3, [r1, #16]
 800becc:	4605      	mov	r5, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	b913      	cbnz	r3, 800bed8 <_fflush_r+0x10>
 800bed2:	2500      	movs	r5, #0
 800bed4:	4628      	mov	r0, r5
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	b118      	cbz	r0, 800bee2 <_fflush_r+0x1a>
 800beda:	6a03      	ldr	r3, [r0, #32]
 800bedc:	b90b      	cbnz	r3, 800bee2 <_fflush_r+0x1a>
 800bede:	f7ff f9a7 	bl	800b230 <__sinit>
 800bee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0f3      	beq.n	800bed2 <_fflush_r+0xa>
 800beea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800beec:	07d0      	lsls	r0, r2, #31
 800beee:	d404      	bmi.n	800befa <_fflush_r+0x32>
 800bef0:	0599      	lsls	r1, r3, #22
 800bef2:	d402      	bmi.n	800befa <_fflush_r+0x32>
 800bef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bef6:	f7ff fa8a 	bl	800b40e <__retarget_lock_acquire_recursive>
 800befa:	4628      	mov	r0, r5
 800befc:	4621      	mov	r1, r4
 800befe:	f7ff ff5f 	bl	800bdc0 <__sflush_r>
 800bf02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf04:	07da      	lsls	r2, r3, #31
 800bf06:	4605      	mov	r5, r0
 800bf08:	d4e4      	bmi.n	800bed4 <_fflush_r+0xc>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	059b      	lsls	r3, r3, #22
 800bf0e:	d4e1      	bmi.n	800bed4 <_fflush_r+0xc>
 800bf10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf12:	f7ff fa7d 	bl	800b410 <__retarget_lock_release_recursive>
 800bf16:	e7dd      	b.n	800bed4 <_fflush_r+0xc>

0800bf18 <__malloc_lock>:
 800bf18:	4801      	ldr	r0, [pc, #4]	@ (800bf20 <__malloc_lock+0x8>)
 800bf1a:	f7ff ba78 	b.w	800b40e <__retarget_lock_acquire_recursive>
 800bf1e:	bf00      	nop
 800bf20:	200051e0 	.word	0x200051e0

0800bf24 <__malloc_unlock>:
 800bf24:	4801      	ldr	r0, [pc, #4]	@ (800bf2c <__malloc_unlock+0x8>)
 800bf26:	f7ff ba73 	b.w	800b410 <__retarget_lock_release_recursive>
 800bf2a:	bf00      	nop
 800bf2c:	200051e0 	.word	0x200051e0

0800bf30 <__sread>:
 800bf30:	b510      	push	{r4, lr}
 800bf32:	460c      	mov	r4, r1
 800bf34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf38:	f000 f9c0 	bl	800c2bc <_read_r>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	bfab      	itete	ge
 800bf40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf42:	89a3      	ldrhlt	r3, [r4, #12]
 800bf44:	181b      	addge	r3, r3, r0
 800bf46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf4a:	bfac      	ite	ge
 800bf4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf4e:	81a3      	strhlt	r3, [r4, #12]
 800bf50:	bd10      	pop	{r4, pc}

0800bf52 <__swrite>:
 800bf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf56:	461f      	mov	r7, r3
 800bf58:	898b      	ldrh	r3, [r1, #12]
 800bf5a:	05db      	lsls	r3, r3, #23
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	460c      	mov	r4, r1
 800bf60:	4616      	mov	r6, r2
 800bf62:	d505      	bpl.n	800bf70 <__swrite+0x1e>
 800bf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf68:	2302      	movs	r3, #2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f000 f994 	bl	800c298 <_lseek_r>
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	4632      	mov	r2, r6
 800bf7e:	463b      	mov	r3, r7
 800bf80:	4628      	mov	r0, r5
 800bf82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf86:	f000 b9bb 	b.w	800c300 <_write_r>

0800bf8a <__sseek>:
 800bf8a:	b510      	push	{r4, lr}
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf92:	f000 f981 	bl	800c298 <_lseek_r>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	bf15      	itete	ne
 800bf9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bfa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bfa6:	81a3      	strheq	r3, [r4, #12]
 800bfa8:	bf18      	it	ne
 800bfaa:	81a3      	strhne	r3, [r4, #12]
 800bfac:	bd10      	pop	{r4, pc}

0800bfae <__sclose>:
 800bfae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb2:	f000 b93f 	b.w	800c234 <_close_r>

0800bfb6 <_realloc_r>:
 800bfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4615      	mov	r5, r2
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	b921      	cbnz	r1, 800bfcc <_realloc_r+0x16>
 800bfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	f7ff bcec 	b.w	800b9a4 <_malloc_r>
 800bfcc:	b92a      	cbnz	r2, 800bfda <_realloc_r+0x24>
 800bfce:	f000 f9a9 	bl	800c324 <_free_r>
 800bfd2:	2400      	movs	r4, #0
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfda:	f000 f9ed 	bl	800c3b8 <_malloc_usable_size_r>
 800bfde:	4285      	cmp	r5, r0
 800bfe0:	4606      	mov	r6, r0
 800bfe2:	d802      	bhi.n	800bfea <_realloc_r+0x34>
 800bfe4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bfe8:	d8f4      	bhi.n	800bfd4 <_realloc_r+0x1e>
 800bfea:	4629      	mov	r1, r5
 800bfec:	4640      	mov	r0, r8
 800bfee:	f7ff fcd9 	bl	800b9a4 <_malloc_r>
 800bff2:	4607      	mov	r7, r0
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d0ec      	beq.n	800bfd2 <_realloc_r+0x1c>
 800bff8:	42b5      	cmp	r5, r6
 800bffa:	462a      	mov	r2, r5
 800bffc:	4621      	mov	r1, r4
 800bffe:	bf28      	it	cs
 800c000:	4632      	movcs	r2, r6
 800c002:	f7ff fa06 	bl	800b412 <memcpy>
 800c006:	4621      	mov	r1, r4
 800c008:	4640      	mov	r0, r8
 800c00a:	f000 f98b 	bl	800c324 <_free_r>
 800c00e:	463c      	mov	r4, r7
 800c010:	e7e0      	b.n	800bfd4 <_realloc_r+0x1e>

0800c012 <__swbuf_r>:
 800c012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c014:	460e      	mov	r6, r1
 800c016:	4614      	mov	r4, r2
 800c018:	4605      	mov	r5, r0
 800c01a:	b118      	cbz	r0, 800c024 <__swbuf_r+0x12>
 800c01c:	6a03      	ldr	r3, [r0, #32]
 800c01e:	b90b      	cbnz	r3, 800c024 <__swbuf_r+0x12>
 800c020:	f7ff f906 	bl	800b230 <__sinit>
 800c024:	69a3      	ldr	r3, [r4, #24]
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	071a      	lsls	r2, r3, #28
 800c02c:	d501      	bpl.n	800c032 <__swbuf_r+0x20>
 800c02e:	6923      	ldr	r3, [r4, #16]
 800c030:	b943      	cbnz	r3, 800c044 <__swbuf_r+0x32>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f82b 	bl	800c090 <__swsetup_r>
 800c03a:	b118      	cbz	r0, 800c044 <__swbuf_r+0x32>
 800c03c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c040:	4638      	mov	r0, r7
 800c042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	6922      	ldr	r2, [r4, #16]
 800c048:	1a98      	subs	r0, r3, r2
 800c04a:	6963      	ldr	r3, [r4, #20]
 800c04c:	b2f6      	uxtb	r6, r6
 800c04e:	4283      	cmp	r3, r0
 800c050:	4637      	mov	r7, r6
 800c052:	dc05      	bgt.n	800c060 <__swbuf_r+0x4e>
 800c054:	4621      	mov	r1, r4
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff ff36 	bl	800bec8 <_fflush_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d1ed      	bne.n	800c03c <__swbuf_r+0x2a>
 800c060:	68a3      	ldr	r3, [r4, #8]
 800c062:	3b01      	subs	r3, #1
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	6022      	str	r2, [r4, #0]
 800c06c:	701e      	strb	r6, [r3, #0]
 800c06e:	6962      	ldr	r2, [r4, #20]
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	429a      	cmp	r2, r3
 800c074:	d004      	beq.n	800c080 <__swbuf_r+0x6e>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	07db      	lsls	r3, r3, #31
 800c07a:	d5e1      	bpl.n	800c040 <__swbuf_r+0x2e>
 800c07c:	2e0a      	cmp	r6, #10
 800c07e:	d1df      	bne.n	800c040 <__swbuf_r+0x2e>
 800c080:	4621      	mov	r1, r4
 800c082:	4628      	mov	r0, r5
 800c084:	f7ff ff20 	bl	800bec8 <_fflush_r>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d0d9      	beq.n	800c040 <__swbuf_r+0x2e>
 800c08c:	e7d6      	b.n	800c03c <__swbuf_r+0x2a>
	...

0800c090 <__swsetup_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4b29      	ldr	r3, [pc, #164]	@ (800c138 <__swsetup_r+0xa8>)
 800c094:	4605      	mov	r5, r0
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	460c      	mov	r4, r1
 800c09a:	b118      	cbz	r0, 800c0a4 <__swsetup_r+0x14>
 800c09c:	6a03      	ldr	r3, [r0, #32]
 800c09e:	b90b      	cbnz	r3, 800c0a4 <__swsetup_r+0x14>
 800c0a0:	f7ff f8c6 	bl	800b230 <__sinit>
 800c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a8:	0719      	lsls	r1, r3, #28
 800c0aa:	d422      	bmi.n	800c0f2 <__swsetup_r+0x62>
 800c0ac:	06da      	lsls	r2, r3, #27
 800c0ae:	d407      	bmi.n	800c0c0 <__swsetup_r+0x30>
 800c0b0:	2209      	movs	r2, #9
 800c0b2:	602a      	str	r2, [r5, #0]
 800c0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0be:	e033      	b.n	800c128 <__swsetup_r+0x98>
 800c0c0:	0758      	lsls	r0, r3, #29
 800c0c2:	d512      	bpl.n	800c0ea <__swsetup_r+0x5a>
 800c0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0c6:	b141      	cbz	r1, 800c0da <__swsetup_r+0x4a>
 800c0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	d002      	beq.n	800c0d6 <__swsetup_r+0x46>
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f000 f927 	bl	800c324 <_free_r>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	6063      	str	r3, [r4, #4]
 800c0e6:	6923      	ldr	r3, [r4, #16]
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f043 0308 	orr.w	r3, r3, #8
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	b94b      	cbnz	r3, 800c10a <__swsetup_r+0x7a>
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c100:	d003      	beq.n	800c10a <__swsetup_r+0x7a>
 800c102:	4621      	mov	r1, r4
 800c104:	4628      	mov	r0, r5
 800c106:	f000 f83f 	bl	800c188 <__smakebuf_r>
 800c10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c10e:	f013 0201 	ands.w	r2, r3, #1
 800c112:	d00a      	beq.n	800c12a <__swsetup_r+0x9a>
 800c114:	2200      	movs	r2, #0
 800c116:	60a2      	str	r2, [r4, #8]
 800c118:	6962      	ldr	r2, [r4, #20]
 800c11a:	4252      	negs	r2, r2
 800c11c:	61a2      	str	r2, [r4, #24]
 800c11e:	6922      	ldr	r2, [r4, #16]
 800c120:	b942      	cbnz	r2, 800c134 <__swsetup_r+0xa4>
 800c122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c126:	d1c5      	bne.n	800c0b4 <__swsetup_r+0x24>
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	0799      	lsls	r1, r3, #30
 800c12c:	bf58      	it	pl
 800c12e:	6962      	ldrpl	r2, [r4, #20]
 800c130:	60a2      	str	r2, [r4, #8]
 800c132:	e7f4      	b.n	800c11e <__swsetup_r+0x8e>
 800c134:	2000      	movs	r0, #0
 800c136:	e7f7      	b.n	800c128 <__swsetup_r+0x98>
 800c138:	20000040 	.word	0x20000040

0800c13c <__swhatbuf_r>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	460c      	mov	r4, r1
 800c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c144:	2900      	cmp	r1, #0
 800c146:	b096      	sub	sp, #88	@ 0x58
 800c148:	4615      	mov	r5, r2
 800c14a:	461e      	mov	r6, r3
 800c14c:	da0d      	bge.n	800c16a <__swhatbuf_r+0x2e>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c154:	f04f 0100 	mov.w	r1, #0
 800c158:	bf14      	ite	ne
 800c15a:	2340      	movne	r3, #64	@ 0x40
 800c15c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c160:	2000      	movs	r0, #0
 800c162:	6031      	str	r1, [r6, #0]
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	b016      	add	sp, #88	@ 0x58
 800c168:	bd70      	pop	{r4, r5, r6, pc}
 800c16a:	466a      	mov	r2, sp
 800c16c:	f000 f872 	bl	800c254 <_fstat_r>
 800c170:	2800      	cmp	r0, #0
 800c172:	dbec      	blt.n	800c14e <__swhatbuf_r+0x12>
 800c174:	9901      	ldr	r1, [sp, #4]
 800c176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c17a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c17e:	4259      	negs	r1, r3
 800c180:	4159      	adcs	r1, r3
 800c182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c186:	e7eb      	b.n	800c160 <__swhatbuf_r+0x24>

0800c188 <__smakebuf_r>:
 800c188:	898b      	ldrh	r3, [r1, #12]
 800c18a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c18c:	079d      	lsls	r5, r3, #30
 800c18e:	4606      	mov	r6, r0
 800c190:	460c      	mov	r4, r1
 800c192:	d507      	bpl.n	800c1a4 <__smakebuf_r+0x1c>
 800c194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	2301      	movs	r3, #1
 800c19e:	6163      	str	r3, [r4, #20]
 800c1a0:	b003      	add	sp, #12
 800c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a4:	ab01      	add	r3, sp, #4
 800c1a6:	466a      	mov	r2, sp
 800c1a8:	f7ff ffc8 	bl	800c13c <__swhatbuf_r>
 800c1ac:	9f00      	ldr	r7, [sp, #0]
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff fbf6 	bl	800b9a4 <_malloc_r>
 800c1b8:	b948      	cbnz	r0, 800c1ce <__smakebuf_r+0x46>
 800c1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1be:	059a      	lsls	r2, r3, #22
 800c1c0:	d4ee      	bmi.n	800c1a0 <__smakebuf_r+0x18>
 800c1c2:	f023 0303 	bic.w	r3, r3, #3
 800c1c6:	f043 0302 	orr.w	r3, r3, #2
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	e7e2      	b.n	800c194 <__smakebuf_r+0xc>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	6020      	str	r0, [r4, #0]
 800c1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	9b01      	ldr	r3, [sp, #4]
 800c1da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1de:	b15b      	cbz	r3, 800c1f8 <__smakebuf_r+0x70>
 800c1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f000 f847 	bl	800c278 <_isatty_r>
 800c1ea:	b128      	cbz	r0, 800c1f8 <__smakebuf_r+0x70>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	f043 0301 	orr.w	r3, r3, #1
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	431d      	orrs	r5, r3
 800c1fc:	81a5      	strh	r5, [r4, #12]
 800c1fe:	e7cf      	b.n	800c1a0 <__smakebuf_r+0x18>

0800c200 <memmove>:
 800c200:	4288      	cmp	r0, r1
 800c202:	b510      	push	{r4, lr}
 800c204:	eb01 0402 	add.w	r4, r1, r2
 800c208:	d902      	bls.n	800c210 <memmove+0x10>
 800c20a:	4284      	cmp	r4, r0
 800c20c:	4623      	mov	r3, r4
 800c20e:	d807      	bhi.n	800c220 <memmove+0x20>
 800c210:	1e43      	subs	r3, r0, #1
 800c212:	42a1      	cmp	r1, r4
 800c214:	d008      	beq.n	800c228 <memmove+0x28>
 800c216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c21e:	e7f8      	b.n	800c212 <memmove+0x12>
 800c220:	4402      	add	r2, r0
 800c222:	4601      	mov	r1, r0
 800c224:	428a      	cmp	r2, r1
 800c226:	d100      	bne.n	800c22a <memmove+0x2a>
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c232:	e7f7      	b.n	800c224 <memmove+0x24>

0800c234 <_close_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	@ (800c250 <_close_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f6 f94f 	bl	80024e2 <_close>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_close_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_close_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	200051ec 	.word	0x200051ec

0800c254 <_fstat_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	@ (800c274 <_fstat_r+0x20>)
 800c258:	2300      	movs	r3, #0
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	602b      	str	r3, [r5, #0]
 800c262:	f7f6 f94a 	bl	80024fa <_fstat>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d102      	bne.n	800c270 <_fstat_r+0x1c>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	b103      	cbz	r3, 800c270 <_fstat_r+0x1c>
 800c26e:	6023      	str	r3, [r4, #0]
 800c270:	bd38      	pop	{r3, r4, r5, pc}
 800c272:	bf00      	nop
 800c274:	200051ec 	.word	0x200051ec

0800c278 <_isatty_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d06      	ldr	r5, [pc, #24]	@ (800c294 <_isatty_r+0x1c>)
 800c27c:	2300      	movs	r3, #0
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	602b      	str	r3, [r5, #0]
 800c284:	f7f6 f949 	bl	800251a <_isatty>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_isatty_r+0x1a>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_isatty_r+0x1a>
 800c290:	6023      	str	r3, [r4, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	200051ec 	.word	0x200051ec

0800c298 <_lseek_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d07      	ldr	r5, [pc, #28]	@ (800c2b8 <_lseek_r+0x20>)
 800c29c:	4604      	mov	r4, r0
 800c29e:	4608      	mov	r0, r1
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	602a      	str	r2, [r5, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f7f6 f942 	bl	8002530 <_lseek>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d102      	bne.n	800c2b6 <_lseek_r+0x1e>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	b103      	cbz	r3, 800c2b6 <_lseek_r+0x1e>
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	200051ec 	.word	0x200051ec

0800c2bc <_read_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4d07      	ldr	r5, [pc, #28]	@ (800c2dc <_read_r+0x20>)
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	4608      	mov	r0, r1
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	602a      	str	r2, [r5, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f7f6 f8ec 	bl	80024a8 <_read>
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	d102      	bne.n	800c2da <_read_r+0x1e>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	b103      	cbz	r3, 800c2da <_read_r+0x1e>
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	200051ec 	.word	0x200051ec

0800c2e0 <_sbrk_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d06      	ldr	r5, [pc, #24]	@ (800c2fc <_sbrk_r+0x1c>)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	602b      	str	r3, [r5, #0]
 800c2ec:	f7f6 f92e 	bl	800254c <_sbrk>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d102      	bne.n	800c2fa <_sbrk_r+0x1a>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b103      	cbz	r3, 800c2fa <_sbrk_r+0x1a>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	200051ec 	.word	0x200051ec

0800c300 <_write_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d07      	ldr	r5, [pc, #28]	@ (800c320 <_write_r+0x20>)
 800c304:	4604      	mov	r4, r0
 800c306:	4608      	mov	r0, r1
 800c308:	4611      	mov	r1, r2
 800c30a:	2200      	movs	r2, #0
 800c30c:	602a      	str	r2, [r5, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	f7f5 fd0c 	bl	8001d2c <_write>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d102      	bne.n	800c31e <_write_r+0x1e>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	b103      	cbz	r3, 800c31e <_write_r+0x1e>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	bd38      	pop	{r3, r4, r5, pc}
 800c320:	200051ec 	.word	0x200051ec

0800c324 <_free_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4605      	mov	r5, r0
 800c328:	2900      	cmp	r1, #0
 800c32a:	d041      	beq.n	800c3b0 <_free_r+0x8c>
 800c32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c330:	1f0c      	subs	r4, r1, #4
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfb8      	it	lt
 800c336:	18e4      	addlt	r4, r4, r3
 800c338:	f7ff fdee 	bl	800bf18 <__malloc_lock>
 800c33c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3b4 <_free_r+0x90>)
 800c33e:	6813      	ldr	r3, [r2, #0]
 800c340:	b933      	cbnz	r3, 800c350 <_free_r+0x2c>
 800c342:	6063      	str	r3, [r4, #4]
 800c344:	6014      	str	r4, [r2, #0]
 800c346:	4628      	mov	r0, r5
 800c348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c34c:	f7ff bdea 	b.w	800bf24 <__malloc_unlock>
 800c350:	42a3      	cmp	r3, r4
 800c352:	d908      	bls.n	800c366 <_free_r+0x42>
 800c354:	6820      	ldr	r0, [r4, #0]
 800c356:	1821      	adds	r1, r4, r0
 800c358:	428b      	cmp	r3, r1
 800c35a:	bf01      	itttt	eq
 800c35c:	6819      	ldreq	r1, [r3, #0]
 800c35e:	685b      	ldreq	r3, [r3, #4]
 800c360:	1809      	addeq	r1, r1, r0
 800c362:	6021      	streq	r1, [r4, #0]
 800c364:	e7ed      	b.n	800c342 <_free_r+0x1e>
 800c366:	461a      	mov	r2, r3
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	b10b      	cbz	r3, 800c370 <_free_r+0x4c>
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	d9fa      	bls.n	800c366 <_free_r+0x42>
 800c370:	6811      	ldr	r1, [r2, #0]
 800c372:	1850      	adds	r0, r2, r1
 800c374:	42a0      	cmp	r0, r4
 800c376:	d10b      	bne.n	800c390 <_free_r+0x6c>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	4401      	add	r1, r0
 800c37c:	1850      	adds	r0, r2, r1
 800c37e:	4283      	cmp	r3, r0
 800c380:	6011      	str	r1, [r2, #0]
 800c382:	d1e0      	bne.n	800c346 <_free_r+0x22>
 800c384:	6818      	ldr	r0, [r3, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	6053      	str	r3, [r2, #4]
 800c38a:	4408      	add	r0, r1
 800c38c:	6010      	str	r0, [r2, #0]
 800c38e:	e7da      	b.n	800c346 <_free_r+0x22>
 800c390:	d902      	bls.n	800c398 <_free_r+0x74>
 800c392:	230c      	movs	r3, #12
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	e7d6      	b.n	800c346 <_free_r+0x22>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	1821      	adds	r1, r4, r0
 800c39c:	428b      	cmp	r3, r1
 800c39e:	bf04      	itt	eq
 800c3a0:	6819      	ldreq	r1, [r3, #0]
 800c3a2:	685b      	ldreq	r3, [r3, #4]
 800c3a4:	6063      	str	r3, [r4, #4]
 800c3a6:	bf04      	itt	eq
 800c3a8:	1809      	addeq	r1, r1, r0
 800c3aa:	6021      	streq	r1, [r4, #0]
 800c3ac:	6054      	str	r4, [r2, #4]
 800c3ae:	e7ca      	b.n	800c346 <_free_r+0x22>
 800c3b0:	bd38      	pop	{r3, r4, r5, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200051e8 	.word	0x200051e8

0800c3b8 <_malloc_usable_size_r>:
 800c3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3bc:	1f18      	subs	r0, r3, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfbc      	itt	lt
 800c3c2:	580b      	ldrlt	r3, [r1, r0]
 800c3c4:	18c0      	addlt	r0, r0, r3
 800c3c6:	4770      	bx	lr

0800c3c8 <_init>:
 800c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ca:	bf00      	nop
 800c3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ce:	bc08      	pop	{r3}
 800c3d0:	469e      	mov	lr, r3
 800c3d2:	4770      	bx	lr

0800c3d4 <_fini>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	bf00      	nop
 800c3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3da:	bc08      	pop	{r3}
 800c3dc:	469e      	mov	lr, r3
 800c3de:	4770      	bx	lr
