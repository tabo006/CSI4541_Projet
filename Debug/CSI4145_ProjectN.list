
CSI4145_ProjectN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008640  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  08008810  08008810  00009810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009730  08009730  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009730  08009730  0000a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009738  08009738  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009738  08009738  0000a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800973c  0800973c  0000a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009740  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005058  2000006c  080097ac  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050c4  080097ac  0000b0c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df52  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004616  00000000  00000000  00028fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0002d608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001439  00000000  00000000  0002f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002698d  00000000  00000000  00030439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206cf  00000000  00000000  00056dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaeb0  00000000  00000000  00077495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a8  00000000  00000000  00162388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00169530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087f8 	.word	0x080087f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080087f8 	.word	0x080087f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f001 f903 	bl	800180c <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f000 fb4c 	bl	8000ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000618:	2305      	movs	r3, #5
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f001 fad5 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f000 fb3c 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000088 	.word	0x20000088
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <HAL_ADC_MspInit+0x7c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d127      	bne.n	80006b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <HAL_ADC_MspInit+0x80>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <HAL_ADC_MspInit+0x80>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000674:	6453      	str	r3, [r2, #68]	@ 0x44
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <HAL_ADC_MspInit+0x80>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <HAL_ADC_MspInit+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <HAL_ADC_MspInit+0x80>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <HAL_ADC_MspInit+0x80>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <HAL_ADC_MspInit+0x84>)
 80006b2:	f001 fd9d 	bl	80021f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	@ 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40012000 	.word	0x40012000
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020000 	.word	0x40020000

080006cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d0:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <MX_FREERTOS_Init+0x18>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_FREERTOS_Init+0x1c>)
 80006d6:	f004 feb9 	bl	800544c <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a03      	ldr	r2, [pc, #12]	@ (80006ec <MX_FREERTOS_Init+0x20>)
 80006de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	080095e8 	.word	0x080095e8
 80006e8:	080006f1 	.word	0x080006f1
 80006ec:	200000d0 	.word	0x200000d0

080006f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f004 ff39 	bl	8005570 <osDelay>
 80006fe:	e7fb      	b.n	80006f8 <StartDefaultTask+0x8>

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a36      	ldr	r2, [pc, #216]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b34      	ldr	r3, [pc, #208]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a2f      	ldr	r2, [pc, #188]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a28      	ldr	r2, [pc, #160]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0xf8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	481c      	ldr	r0, [pc, #112]	@ (80007fc <MX_GPIO_Init+0xfc>)
 800078c:	f001 fedc 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Laser_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2103      	movs	r1, #3
 8000794:	481a      	ldr	r0, [pc, #104]	@ (8000800 <MX_GPIO_Init+0x100>)
 8000796:	f001 fed7 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4814      	ldr	r0, [pc, #80]	@ (8000804 <MX_GPIO_Init+0x104>)
 80007b2:	f001 fd1d 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b6:	2320      	movs	r3, #32
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0xfc>)
 80007ce:	f001 fd0f 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Laser_Pin;
 80007d2:	2303      	movs	r3, #3
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_GPIO_Init+0x100>)
 80007ea:	f001 fd01 	bl	80021f0 <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800

08000808 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	@ (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f001 fe99 	bl	800257c <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 fa2a 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000d4 	.word	0x200000d4
 800085c:	40005400 	.word	0x40005400
 8000860:	00061a80 	.word	0x00061a80

08000864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <HAL_I2C_MspInit+0x84>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12b      	bne.n	80008de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_I2C_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <HAL_I2C_MspInit+0x88>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_I2C_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a2:	23c0      	movs	r3, #192	@ 0xc0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a6:	2312      	movs	r3, #18
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b2:	2304      	movs	r3, #4
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <HAL_I2C_MspInit+0x8c>)
 80008be:	f001 fc97 	bl	80021f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_I2C_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_I2C_MspInit+0x88>)
 80008cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_I2C_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f000 ff22 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f87a 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f7ff fefe 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000904:	f000 fe80 	bl	8001608 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000908:	f7ff ff7e 	bl	8000808 <MX_I2C1_Init>
  MX_ADC1_Init();
 800090c:	f7ff fe48 	bl	80005a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000910:	f000 fdac 	bl	800146c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(); // Initialize OLED display
 8000914:	f000 f9ce 	bl	8000cb4 <SSD1306_Init>
  SSD1306_Clear(); // Clear the display
 8000918:	f000 fbef 	bl	80010fa <SSD1306_Clear>
  SSD1306_GotoXY(0, 10); // Set cursor position to (0, 0)
 800091c:	210a      	movs	r1, #10
 800091e:	2000      	movs	r0, #0
 8000920:	f000 fb32 	bl	8000f88 <SSD1306_GotoXY>
  SSD1306_Puts("Nope", &Font_11x18, 1); // Display simple message
 8000924:	2201      	movs	r2, #1
 8000926:	491f      	ldr	r1, [pc, #124]	@ (80009a4 <main+0xb0>)
 8000928:	481f      	ldr	r0, [pc, #124]	@ (80009a8 <main+0xb4>)
 800092a:	f000 fbc1 	bl	80010b0 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // Update the screen
 800092e:	f000 fa85 	bl	8000e3c <SSD1306_UpdateScreen>
  // test_Button();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000932:	f004 fd41 	bl	80053b8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000936:	f7ff fec9 	bl	80006cc <MX_FREERTOS_Init>

  TaskButtonHandle = osThreadNew(StartTaskButton, NULL, &TaskButton_attributes);
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <main+0xb8>)
 800093c:	2100      	movs	r1, #0
 800093e:	481c      	ldr	r0, [pc, #112]	@ (80009b0 <main+0xbc>)
 8000940:	f004 fd84 	bl	800544c <osThreadNew>
 8000944:	4603      	mov	r3, r0
 8000946:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <main+0xc0>)
 8000948:	6013      	str	r3, [r2, #0]
  TaskLDRHandle = osThreadNew(StartTaskLDR, NULL, &TaskLDR_attributes);
 800094a:	4a1b      	ldr	r2, [pc, #108]	@ (80009b8 <main+0xc4>)
 800094c:	2100      	movs	r1, #0
 800094e:	481b      	ldr	r0, [pc, #108]	@ (80009bc <main+0xc8>)
 8000950:	f004 fd7c 	bl	800544c <osThreadNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a1a      	ldr	r2, [pc, #104]	@ (80009c0 <main+0xcc>)
 8000958:	6013      	str	r3, [r2, #0]
  //laser
  TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 800095a:	4a1a      	ldr	r2, [pc, #104]	@ (80009c4 <main+0xd0>)
 800095c:	2100      	movs	r1, #0
 800095e:	481a      	ldr	r0, [pc, #104]	@ (80009c8 <main+0xd4>)
 8000960:	f004 fd74 	bl	800544c <osThreadNew>
 8000964:	4603      	mov	r3, r0
 8000966:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <main+0xd8>)
 8000968:	6013      	str	r3, [r2, #0]
  TaskLedHandle = osThreadNew(StartTaskLed, NULL, &TaskLed_attributes);
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <main+0xdc>)
 800096c:	2100      	movs	r1, #0
 800096e:	4819      	ldr	r0, [pc, #100]	@ (80009d4 <main+0xe0>)
 8000970:	f004 fd6c 	bl	800544c <osThreadNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <main+0xe4>)
 8000978:	6013      	str	r3, [r2, #0]
  TaskServoHandle = osThreadNew(StartTaskServo, NULL, &TaskServo_attributes);
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <main+0xe8>)
 800097c:	2100      	movs	r1, #0
 800097e:	4818      	ldr	r0, [pc, #96]	@ (80009e0 <main+0xec>)
 8000980:	f004 fd64 	bl	800544c <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <main+0xf0>)
 8000988:	6013      	str	r3, [r2, #0]
  TaskOLEDHandle = osThreadNew(StartTaskOLED, NULL, &TaskOLED_attributes);
 800098a:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <main+0xf4>)
 800098c:	2100      	movs	r1, #0
 800098e:	4817      	ldr	r0, [pc, #92]	@ (80009ec <main+0xf8>)
 8000990:	f004 fd5c 	bl	800544c <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <main+0xfc>)
 8000998:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 800099a:	f004 fd31 	bl	8005400 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0xaa>
 80009a2:	bf00      	nop
 80009a4:	20000000 	.word	0x20000000
 80009a8:	0800885c 	.word	0x0800885c
 80009ac:	0800960c 	.word	0x0800960c
 80009b0:	08000af5 	.word	0x08000af5
 80009b4:	2000012c 	.word	0x2000012c
 80009b8:	08009630 	.word	0x08009630
 80009bc:	08000b3d 	.word	0x08000b3d
 80009c0:	20000130 	.word	0x20000130
 80009c4:	08009654 	.word	0x08009654
 80009c8:	08000be5 	.word	0x08000be5
 80009cc:	20000134 	.word	0x20000134
 80009d0:	08009678 	.word	0x08009678
 80009d4:	08000c25 	.word	0x08000c25
 80009d8:	20000138 	.word	0x20000138
 80009dc:	0800969c 	.word	0x0800969c
 80009e0:	08000c51 	.word	0x08000c51
 80009e4:	2000013c 	.word	0x2000013c
 80009e8:	080096c0 	.word	0x080096c0
 80009ec:	08000b7d 	.word	0x08000b7d
 80009f0:	20000140 	.word	0x20000140

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f007 fa78 	bl	8007ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a40:	4a22      	ldr	r2, [pc, #136]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fec2 	bl	800380c <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a8e:	f000 f90b 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fb30 	bl	8003114 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aba:	f000 f8f5 	bl	8000ca8 <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	@ 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fe4f 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <StartTaskButton>:
void StartTaskButton(void *argument) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Check if PC13 button is pressed (Active LOW)
		if (HAL_GPIO_ReadPin(GPIOC, Stop_button_Pin) == GPIO_PIN_RESET) {
 8000afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <StartTaskButton+0x40>)
 8000b02:	f001 fd09 	bl	8002518 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f7      	bne.n	8000afc <StartTaskButton+0x8>
			HAL_Delay(50); // Debounce delay
 8000b0c:	2032      	movs	r0, #50	@ 0x32
 8000b0e:	f000 fe59 	bl	80017c4 <HAL_Delay>

			// Toggle LED (PA5)
			alarm_state = ALARM_OFF;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <StartTaskButton+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]

			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, Stop_button_Pin) == GPIO_PIN_RESET);
 8000b18:	bf00      	nop
 8000b1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <StartTaskButton+0x40>)
 8000b20:	f001 fcfa 	bl	8002518 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f7      	beq.n	8000b1a <StartTaskButton+0x26>
			HAL_Delay(50); // Prevent multiple triggers
 8000b2a:	2032      	movs	r0, #50	@ 0x32
 8000b2c:	f000 fe4a 	bl	80017c4 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, Stop_button_Pin) == GPIO_PIN_RESET) {
 8000b30:	e7e4      	b.n	8000afc <StartTaskButton+0x8>
 8000b32:	bf00      	nop
 8000b34:	40020800 	.word	0x40020800
 8000b38:	20000128 	.word	0x20000128

08000b3c <StartTaskLDR>:
		}
	}
}
/*Test LDR Sensor (PA0 - ADC1) */
void StartTaskLDR(void *argument) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		uint32_t adcValue;
		HAL_ADC_Start(&hadc1);
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <StartTaskLDR+0x38>)
 8000b46:	f000 fea5 	bl	8001894 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b4a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <StartTaskLDR+0x38>)
 8000b50:	f000 ffa5 	bl	8001a9e <HAL_ADC_PollForConversion>
		adcValue = HAL_ADC_GetValue(&hadc1);
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <StartTaskLDR+0x38>)
 8000b56:	f001 f82d 	bl	8001bb4 <HAL_ADC_GetValue>
 8000b5a:	60f8      	str	r0, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <StartTaskLDR+0x38>)
 8000b5e:	f000 ff6b 	bl	8001a38 <HAL_ADC_Stop>
		light_value = adcValue;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <StartTaskLDR+0x3c>)
 8000b66:	6013      	str	r3, [r2, #0]

		if (adcValue < 0) {  // Adjust threshold as needed
			alarm_state = ALARM_ON;  // Turn on LED if laser is broken
		}
		HAL_Delay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b6c:	f000 fe2a 	bl	80017c4 <HAL_Delay>
	{
 8000b70:	e7e8      	b.n	8000b44 <StartTaskLDR+0x8>
 8000b72:	bf00      	nop
 8000b74:	20000088 	.word	0x20000088
 8000b78:	20000008 	.word	0x20000008

08000b7c <StartTaskOLED>:
		}

}

void StartTaskOLED(void *argument) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

	 char buffer[10];
	    for(;;){
	        SSD1306_Clear();  // Clear the display
 8000b84:	f000 fab9 	bl	80010fa <SSD1306_Clear>
	        SSD1306_GotoXY(0, 10);  // Set cursor position
 8000b88:	210a      	movs	r1, #10
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f9fc 	bl	8000f88 <SSD1306_GotoXY>
	        SSD1306_Puts("LightValue", &Font_11x18, 1);  // Display "LightValue"
 8000b90:	2201      	movs	r2, #1
 8000b92:	4910      	ldr	r1, [pc, #64]	@ (8000bd4 <StartTaskOLED+0x58>)
 8000b94:	4810      	ldr	r0, [pc, #64]	@ (8000bd8 <StartTaskOLED+0x5c>)
 8000b96:	f000 fa8b 	bl	80010b0 <SSD1306_Puts>
	        SSD1306_UpdateScreen();  // Update the screen
 8000b9a:	f000 f94f 	bl	8000e3c <SSD1306_UpdateScreen>

	        SSD1306_GotoXY(0, 30);  // Set cursor for displaying the actual value
 8000b9e:	211e      	movs	r1, #30
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f9f1 	bl	8000f88 <SSD1306_GotoXY>
	        sprintf(buffer, "%d", light_value);  // Convert light_value to string
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <StartTaskOLED+0x60>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	490c      	ldr	r1, [pc, #48]	@ (8000be0 <StartTaskOLED+0x64>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f007 f981 	bl	8007eb8 <siprintf>
	        SSD1306_Puts(buffer, &Font_11x18, 1);  // Display the light value
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4905      	ldr	r1, [pc, #20]	@ (8000bd4 <StartTaskOLED+0x58>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fa76 	bl	80010b0 <SSD1306_Puts>
	        SSD1306_UpdateScreen();  // Update screen
 8000bc4:	f000 f93a 	bl	8000e3c <SSD1306_UpdateScreen>

	        osDelay(1000);  // Add delay to prevent flickering
 8000bc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bcc:	f004 fcd0 	bl	8005570 <osDelay>
	        SSD1306_Clear();  // Clear the display
 8000bd0:	bf00      	nop
 8000bd2:	e7d7      	b.n	8000b84 <StartTaskOLED+0x8>
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	08008864 	.word	0x08008864
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	08008870 	.word	0x08008870

08000be4 <StartTaskBuzzer>:
    HAL_Delay(2000);
    HAL_GPIO_WritePin(GPIOB, Laser_Pin, GPIO_PIN_RESET); // Laser OFF
    HAL_Delay(2000);
}
/* Test Buzzer (PB0 - GPIO Output) */
void StartTaskBuzzer(void *argument) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <StartTaskBuzzer+0x38>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d1fb      	bne.n	8000bec <StartTaskBuzzer+0x8>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);  // Buzzer ON
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <StartTaskBuzzer+0x3c>)
 8000bfa:	f001 fca5 	bl	8002548 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c02:	f000 fddf 	bl	80017c4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET); // Buzzer OFF
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <StartTaskBuzzer+0x3c>)
 8000c0c:	f001 fc9c 	bl	8002548 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000c10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c14:	f000 fdd6 	bl	80017c4 <HAL_Delay>
		if(alarm_state == ALARM_ON){
 8000c18:	e7e8      	b.n	8000bec <StartTaskBuzzer+0x8>
 8000c1a:	bf00      	nop
 8000c1c:	20000128 	.word	0x20000128
 8000c20:	40020400 	.word	0x40020400

08000c24 <StartTaskLed>:
		}
  // Buzzer ON
	}
}
void StartTaskLed(void *argument) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, alarm_state);  // LED ON
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <StartTaskLed+0x24>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	2120      	movs	r1, #32
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <StartTaskLed+0x28>)
 8000c38:	f001 fc86 	bl	8002548 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000c3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c40:	f000 fdc0 	bl	80017c4 <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, alarm_state);  // LED ON
 8000c44:	bf00      	nop
 8000c46:	e7f1      	b.n	8000c2c <StartTaskLed+0x8>
 8000c48:	20000128 	.word	0x20000128
 8000c4c:	40020000 	.word	0x40020000

08000c50 <StartTaskServo>:
	}
}
void StartTaskServo(void *argument) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(alarm_state == ALARM_ON){
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <StartTaskServo+0x50>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d1fb      	bne.n	8000c58 <StartTaskServo+0x8>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4810      	ldr	r0, [pc, #64]	@ (8000ca4 <StartTaskServo+0x54>)
 8000c64:	f003 f98a 	bl	8003f7c <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);  // Move to -90°
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <StartTaskServo+0x54>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c70:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(4000);
 8000c72:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c76:	f000 fda5 	bl	80017c4 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500); // Move to 0° (neutral)
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <StartTaskServo+0x54>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(4000);
 8000c84:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c88:	f000 fd9c 	bl	80017c4 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500); // Move to +90°
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <StartTaskServo+0x54>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c94:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(2000);
 8000c96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c9a:	f000 fd93 	bl	80017c4 <HAL_Delay>
		if(alarm_state == ALARM_ON){
 8000c9e:	e7db      	b.n	8000c58 <StartTaskServo+0x8>
 8000ca0:	20000128 	.word	0x20000128
 8000ca4:	20000598 	.word	0x20000598

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cba:	f000 fa27 	bl	800110c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000cbe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2178      	movs	r1, #120	@ 0x78
 8000cc6:	485b      	ldr	r0, [pc, #364]	@ (8000e34 <SSD1306_Init+0x180>)
 8000cc8:	f001 fe9a 	bl	8002a00 <HAL_I2C_IsDeviceReady>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e0a9      	b.n	8000e2a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000cd6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000cda:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cdc:	e002      	b.n	8000ce4 <SSD1306_Init+0x30>
		p--;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f9      	bne.n	8000cde <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cea:	22ae      	movs	r2, #174	@ 0xae
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	@ 0x78
 8000cf0:	f000 fa88 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	@ 0x78
 8000cfa:	f000 fa83 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cfe:	2210      	movs	r2, #16
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	@ 0x78
 8000d04:	f000 fa7e 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d08:	22b0      	movs	r2, #176	@ 0xb0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	@ 0x78
 8000d0e:	f000 fa79 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d12:	22c8      	movs	r2, #200	@ 0xc8
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	@ 0x78
 8000d18:	f000 fa74 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	@ 0x78
 8000d22:	f000 fa6f 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d26:	2210      	movs	r2, #16
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	@ 0x78
 8000d2c:	f000 fa6a 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d30:	2240      	movs	r2, #64	@ 0x40
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	@ 0x78
 8000d36:	f000 fa65 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d3a:	2281      	movs	r2, #129	@ 0x81
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	@ 0x78
 8000d40:	f000 fa60 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d44:	22ff      	movs	r2, #255	@ 0xff
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	@ 0x78
 8000d4a:	f000 fa5b 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d4e:	22a1      	movs	r2, #161	@ 0xa1
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	@ 0x78
 8000d54:	f000 fa56 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d58:	22a6      	movs	r2, #166	@ 0xa6
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	@ 0x78
 8000d5e:	f000 fa51 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d62:	22a8      	movs	r2, #168	@ 0xa8
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	@ 0x78
 8000d68:	f000 fa4c 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d6c:	223f      	movs	r2, #63	@ 0x3f
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	@ 0x78
 8000d72:	f000 fa47 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d76:	22a4      	movs	r2, #164	@ 0xa4
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	@ 0x78
 8000d7c:	f000 fa42 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d80:	22d3      	movs	r2, #211	@ 0xd3
 8000d82:	2100      	movs	r1, #0
 8000d84:	2078      	movs	r0, #120	@ 0x78
 8000d86:	f000 fa3d 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2078      	movs	r0, #120	@ 0x78
 8000d90:	f000 fa38 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d94:	22d5      	movs	r2, #213	@ 0xd5
 8000d96:	2100      	movs	r1, #0
 8000d98:	2078      	movs	r0, #120	@ 0x78
 8000d9a:	f000 fa33 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d9e:	22f0      	movs	r2, #240	@ 0xf0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2078      	movs	r0, #120	@ 0x78
 8000da4:	f000 fa2e 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000da8:	22d9      	movs	r2, #217	@ 0xd9
 8000daa:	2100      	movs	r1, #0
 8000dac:	2078      	movs	r0, #120	@ 0x78
 8000dae:	f000 fa29 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000db2:	2222      	movs	r2, #34	@ 0x22
 8000db4:	2100      	movs	r1, #0
 8000db6:	2078      	movs	r0, #120	@ 0x78
 8000db8:	f000 fa24 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000dbc:	22da      	movs	r2, #218	@ 0xda
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2078      	movs	r0, #120	@ 0x78
 8000dc2:	f000 fa1f 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000dc6:	2212      	movs	r2, #18
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2078      	movs	r0, #120	@ 0x78
 8000dcc:	f000 fa1a 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000dd0:	22db      	movs	r2, #219	@ 0xdb
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2078      	movs	r0, #120	@ 0x78
 8000dd6:	f000 fa15 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000dda:	2220      	movs	r2, #32
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2078      	movs	r0, #120	@ 0x78
 8000de0:	f000 fa10 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000de4:	228d      	movs	r2, #141	@ 0x8d
 8000de6:	2100      	movs	r1, #0
 8000de8:	2078      	movs	r0, #120	@ 0x78
 8000dea:	f000 fa0b 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000dee:	2214      	movs	r2, #20
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	@ 0x78
 8000df4:	f000 fa06 	bl	8001204 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000df8:	22af      	movs	r2, #175	@ 0xaf
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2078      	movs	r0, #120	@ 0x78
 8000dfe:	f000 fa01 	bl	8001204 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e02:	222e      	movs	r2, #46	@ 0x2e
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	@ 0x78
 8000e08:	f000 f9fc 	bl	8001204 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f843 	bl	8000e98 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e12:	f000 f813 	bl	8000e3c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <SSD1306_Init+0x184>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <SSD1306_Init+0x184>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <SSD1306_Init+0x184>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000d4 	.word	0x200000d4
 8000e38:	20000544 	.word	0x20000544

08000e3c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	e01d      	b.n	8000e84 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	3b50      	subs	r3, #80	@ 0x50
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	2078      	movs	r0, #120	@ 0x78
 8000e54:	f000 f9d6 	bl	8001204 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2078      	movs	r0, #120	@ 0x78
 8000e5e:	f000 f9d1 	bl	8001204 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e62:	2210      	movs	r2, #16
 8000e64:	2100      	movs	r1, #0
 8000e66:	2078      	movs	r0, #120	@ 0x78
 8000e68:	f000 f9cc 	bl	8001204 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	01db      	lsls	r3, r3, #7
 8000e70:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <SSD1306_UpdateScreen+0x58>)
 8000e72:	441a      	add	r2, r3
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	2140      	movs	r1, #64	@ 0x40
 8000e78:	2078      	movs	r0, #120	@ 0x78
 8000e7a:	f000 f95d 	bl	8001138 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	3301      	adds	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	d9de      	bls.n	8000e48 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000144 	.word	0x20000144

08000e98 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <SSD1306_Fill+0x14>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e000      	b.n	8000eae <SSD1306_Fill+0x16>
 8000eac:	23ff      	movs	r3, #255	@ 0xff
 8000eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <SSD1306_Fill+0x2c>)
 8000eb6:	f007 f81f 	bl	8007ef8 <memset>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000144 	.word	0x20000144

08000ec8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	70fb      	strb	r3, [r7, #3]
	if (
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ede:	d848      	bhi.n	8000f72 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ee4:	d845      	bhi.n	8000f72 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <SSD1306_DrawPixel+0xb8>)
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d11a      	bne.n	8000f38 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	08db      	lsrs	r3, r3, #3
 8000f08:	b298      	uxth	r0, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	01db      	lsls	r3, r3, #7
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <SSD1306_DrawPixel+0xbc>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b259      	sxtb	r1, r3
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	01db      	lsls	r3, r3, #7
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2c9      	uxtb	r1, r1
 8000f32:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <SSD1306_DrawPixel+0xbc>)
 8000f34:	54d1      	strb	r1, [r2, r3]
 8000f36:	e01d      	b.n	8000f74 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f38:	88fa      	ldrh	r2, [r7, #6]
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	b298      	uxth	r0, r3
 8000f40:	4603      	mov	r3, r0
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	4413      	add	r3, r2
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <SSD1306_DrawPixel+0xbc>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	2101      	movs	r1, #1
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	b259      	sxtb	r1, r3
 8000f62:	88fa      	ldrh	r2, [r7, #6]
 8000f64:	4603      	mov	r3, r0
 8000f66:	01db      	lsls	r3, r3, #7
 8000f68:	4413      	add	r3, r2
 8000f6a:	b2c9      	uxtb	r1, r1
 8000f6c:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SSD1306_DrawPixel+0xbc>)
 8000f6e:	54d1      	strb	r1, [r2, r3]
 8000f70:	e000      	b.n	8000f74 <SSD1306_DrawPixel+0xac>
		return;
 8000f72:	bf00      	nop
	}
}
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000544 	.word	0x20000544
 8000f84:	20000144 	.word	0x20000144

08000f88 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	80fb      	strh	r3, [r7, #6]
 8000f94:	4613      	mov	r3, r2
 8000f96:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f98:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SSD1306_GotoXY+0x28>)
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <SSD1306_GotoXY+0x28>)
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	8053      	strh	r3, [r2, #2]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	20000544 	.word	0x20000544

08000fb4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fc4:	4b39      	ldr	r3, [pc, #228]	@ (80010ac <SSD1306_Putc+0xf8>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
	if (
 8000fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fd2:	dc07      	bgt.n	8000fe4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000fd4:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <SSD1306_Putc+0xf8>)
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fe0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fe2:	dd01      	ble.n	8000fe8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e05d      	b.n	80010a4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e04b      	b.n	8001086 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	3b20      	subs	r3, #32
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	7849      	ldrb	r1, [r1, #1]
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	440b      	add	r3, r1
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e030      	b.n	8001074 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d010      	beq.n	8001044 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <SSD1306_Putc+0xf8>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4413      	add	r3, r2
 800102c:	b298      	uxth	r0, r3
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <SSD1306_Putc+0xf8>)
 8001030:	885a      	ldrh	r2, [r3, #2]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b29b      	uxth	r3, r3
 800103a:	79ba      	ldrb	r2, [r7, #6]
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff ff43 	bl	8000ec8 <SSD1306_DrawPixel>
 8001042:	e014      	b.n	800106e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <SSD1306_Putc+0xf8>)
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b298      	uxth	r0, r3
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <SSD1306_Putc+0xf8>)
 8001052:	885a      	ldrh	r2, [r3, #2]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b299      	uxth	r1, r3
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b00      	cmp	r3, #0
 8001060:	bf0c      	ite	eq
 8001062:	2301      	moveq	r3, #1
 8001064:	2300      	movne	r3, #0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	f7ff ff2d 	bl	8000ec8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	3301      	adds	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4293      	cmp	r3, r2
 800107e:	d3c8      	bcc.n	8001012 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	461a      	mov	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4293      	cmp	r3, r2
 8001090:	d3ad      	bcc.n	8000fee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <SSD1306_Putc+0xf8>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	4413      	add	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <SSD1306_Putc+0xf8>)
 80010a0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000544 	.word	0x20000544

080010b0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4613      	mov	r3, r2
 80010bc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80010be:	e012      	b.n	80010e6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff73 	bl	8000fb4 <SSD1306_Putc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d002      	beq.n	80010e0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	e008      	b.n	80010f2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1e8      	bne.n	80010c0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	781b      	ldrb	r3, [r3, #0]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff feca 	bl	8000e98 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001104:	f7ff fe9a 	bl	8000e3c <SSD1306_UpdateScreen>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <ssd1306_I2C_Init+0x28>)
 8001114:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001116:	e002      	b.n	800111e <ssd1306_I2C_Init+0x12>
		p--;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f9      	bne.n	8001118 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	0003d090 	.word	0x0003d090

08001138 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b0c7      	sub	sp, #284	@ 0x11c
 800113c:	af02      	add	r7, sp, #8
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001146:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800114a:	600a      	str	r2, [r1, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001152:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001156:	4622      	mov	r2, r4
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800115e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001162:	4602      	mov	r2, r0
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800116a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800116e:	460a      	mov	r2, r1
 8001170:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800117a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800117e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800118c:	e015      	b.n	80011ba <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800118e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001192:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001196:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	441a      	add	r2, r3
 800119e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011a2:	3301      	adds	r3, #1
 80011a4:	7811      	ldrb	r1, [r2, #0]
 80011a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011aa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80011ae:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011b0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011b4:	3301      	adds	r3, #1
 80011b6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011ba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011c4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80011c8:	8812      	ldrh	r2, [r2, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d8df      	bhi.n	800118e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011d2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b299      	uxth	r1, r3
 80011da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f107 020c 	add.w	r2, r7, #12
 80011ec:	200a      	movs	r0, #10
 80011ee:	9000      	str	r0, [sp, #0]
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <ssd1306_I2C_WriteMulti+0xc8>)
 80011f2:	f001 fb07 	bl	8002804 <HAL_I2C_Master_Transmit>
}
 80011f6:	bf00      	nop
 80011f8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	200000d4 	.word	0x200000d4

08001204 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	b299      	uxth	r1, r3
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	230a      	movs	r3, #10
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2302      	movs	r3, #2
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <ssd1306_I2C_Write+0x38>)
 800122e:	f001 fae9 	bl	8002804 <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000d4 	.word	0x200000d4

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_MspInit+0x54>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_MspInit+0x54>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_MspInit+0x54>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_MspInit+0x54>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_MspInit+0x54>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_MspInit+0x54>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	210f      	movs	r1, #15
 8001282:	f06f 0001 	mvn.w	r0, #1
 8001286:	f000 ff89 	bl	800219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	@ 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_InitTick+0xe4>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	4a32      	ldr	r2, [pc, #200]	@ (800137c <HAL_InitTick+0xe4>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b8:	4b30      	ldr	r3, [pc, #192]	@ (800137c <HAL_InitTick+0xe4>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012c4:	f107 0210 	add.w	r2, r7, #16
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f83a 	bl	8003348 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012de:	f002 f80b 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 80012e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80012e4:	e004      	b.n	80012f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012e6:	f002 f807 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 80012ea:	4603      	mov	r3, r0
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f2:	4a23      	ldr	r2, [pc, #140]	@ (8001380 <HAL_InitTick+0xe8>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	3b01      	subs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <HAL_InitTick+0xec>)
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <HAL_InitTick+0xf0>)
 8001302:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <HAL_InitTick+0xec>)
 8001306:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800130a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <HAL_InitTick+0xec>)
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <HAL_InitTick+0xec>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_InitTick+0xec>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <HAL_InitTick+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001324:	4817      	ldr	r0, [pc, #92]	@ (8001384 <HAL_InitTick+0xec>)
 8001326:	f002 fd0f 	bl	8003d48 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001330:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11b      	bne.n	8001370 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001338:	4812      	ldr	r0, [pc, #72]	@ (8001384 <HAL_InitTick+0xec>)
 800133a:	f002 fd55 	bl	8003de8 <HAL_TIM_Base_Start_IT>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001348:	2b00      	cmp	r3, #0
 800134a:	d111      	bne.n	8001370 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134c:	2036      	movs	r0, #54	@ 0x36
 800134e:	f000 ff41 	bl	80021d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d808      	bhi.n	800136a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2036      	movs	r0, #54	@ 0x36
 800135e:	f000 ff1d 	bl	800219c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_InitTick+0xf4>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e002      	b.n	8001370 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001370:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001374:	4618      	mov	r0, r3
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	431bde83 	.word	0x431bde83
 8001384:	2000054c 	.word	0x2000054c
 8001388:	40001000 	.word	0x40001000
 800138c:	20000010 	.word	0x20000010

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <TIM6_DAC_IRQHandler+0x10>)
 80013ce:	f002 fe9d 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000054c 	.word	0x2000054c

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f006 fd7c 	bl	8007f08 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	20000594 	.word	0x20000594
 8001444:	200050c8 	.word	0x200050c8

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	@ 0x38
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <MX_TIM2_Init+0xe8>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014a6:	2253      	movs	r2, #83	@ 0x53
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014b2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c4:	4823      	ldr	r0, [pc, #140]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014c6:	f002 fc3f 	bl	8003d48 <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014d0:	f7ff fbea 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014de:	4619      	mov	r1, r3
 80014e0:	481c      	ldr	r0, [pc, #112]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014e2:	f002 ffc5 	bl	8004470 <HAL_TIM_ConfigClockSource>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014ec:	f7ff fbdc 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f0:	4818      	ldr	r0, [pc, #96]	@ (8001554 <MX_TIM2_Init+0xe8>)
 80014f2:	f002 fce9 	bl	8003ec8 <HAL_TIM_PWM_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014fc:	f7ff fbd4 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4619      	mov	r1, r3
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <MX_TIM2_Init+0xe8>)
 8001510:	f003 fbba 	bl	8004c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800151a:	f7ff fbc5 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151e:	2360      	movs	r3, #96	@ 0x60
 8001520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001522:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	@ (8001554 <MX_TIM2_Init+0xe8>)
 8001538:	f002 fed8 	bl	80042ec <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001542:	f7ff fbb1 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001546:	4803      	ldr	r0, [pc, #12]	@ (8001554 <MX_TIM2_Init+0xe8>)
 8001548:	f000 f826 	bl	8001598 <HAL_TIM_MspPostInit>

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	@ 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000598 	.word	0x20000598

08001558 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001568:	d10d      	bne.n	8001586 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b8:	d11e      	bne.n	80015f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4804      	ldr	r0, [pc, #16]	@ (8001604 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	f000 fdfc 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <MX_USART2_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001640:	f003 fbb2 	bl	8004da8 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f7ff fb2d 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200005e0 	.word	0x200005e0
 8001658:	40004400 	.word	0x40004400

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_UART_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12b      	bne.n	80016d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016b6:	230c      	movs	r3, #12
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c6:	2307      	movs	r3, #7
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_UART_MspInit+0x8c>)
 80016d2:	f000 fd8d 	bl	80021f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016f0:	f7ff feaa 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	@ (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800171a:	f006 fbfb 	bl	8007f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff f8e9 	bl	80008f4 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001730:	08009740 	.word	0x08009740
  ldr r2, =_sbss
 8001734:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001738:	200050c4 	.word	0x200050c4

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 fd0c 	bl	8002186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fd92 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fd64 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000014 	.word	0x20000014
 80017a8:	20000628 	.word	0x20000628

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000628 	.word	0x20000628

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000014 	.word	0x20000014

0800180c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e033      	b.n	800188a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe ff0a 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fae8 	bl	8001e34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Start+0x1a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0b2      	b.n	8001a14 <HAL_ADC_Start+0x180>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d018      	beq.n	80018f6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d4:	4b52      	ldr	r3, [pc, #328]	@ (8001a20 <HAL_ADC_Start+0x18c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <HAL_ADC_Start+0x190>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9a      	lsrs	r2, r3, #18
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018e8:	e002      	b.n	80018f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f9      	bne.n	80018ea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d17a      	bne.n	80019fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001942:	d106      	bne.n	8001952 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001960:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_ADC_Start+0x194>)
 8001962:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800196c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b00      	cmp	r3, #0
 8001978:	d12a      	bne.n	80019d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2b      	ldr	r2, [pc, #172]	@ (8001a2c <HAL_ADC_Start+0x198>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d015      	beq.n	80019b0 <HAL_ADC_Start+0x11c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a29      	ldr	r2, [pc, #164]	@ (8001a30 <HAL_ADC_Start+0x19c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d105      	bne.n	800199a <HAL_ADC_Start+0x106>
 800198e:	4b26      	ldr	r3, [pc, #152]	@ (8001a28 <HAL_ADC_Start+0x194>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a25      	ldr	r2, [pc, #148]	@ (8001a34 <HAL_ADC_Start+0x1a0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d136      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_ADC_Start+0x194>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d130      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d129      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e020      	b.n	8001a12 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <HAL_ADC_Start+0x198>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11b      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d114      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	e00b      	b.n	8001a12 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	2000000c 	.word	0x2000000c
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012100 	.word	0x40012100
 8001a34:	40012200 	.word	0x40012200

08001a38 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Stop+0x16>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e021      	b.n	8001a92 <HAL_ADC_Stop+0x5a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aba:	d113      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aca:	d10b      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f043 0220 	orr.w	r2, r3, #32
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e063      	b.n	8001bac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae4:	f7ff fe62 	bl	80017ac <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aea:	e021      	b.n	8001b30 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001af2:	d01d      	beq.n	8001b30 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x6c>
 8001afa:	f7ff fe57 	bl	80017ac <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d212      	bcs.n	8001b30 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d00b      	beq.n	8001b30 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f043 0204 	orr.w	r2, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03d      	b.n	8001bac <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d1d6      	bne.n	8001aec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f06f 0212 	mvn.w	r2, #18
 8001b46:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d123      	bne.n	8001baa <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11f      	bne.n	8001baa <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d111      	bne.n	8001baa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e113      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x244>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d925      	bls.n	8001c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4403      	add	r3, r0
 8001c3a:	3b1e      	subs	r3, #30
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e022      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4403      	add	r3, r0
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d824      	bhi.n	8001ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cde:	e04c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	@ 0x23
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b23      	subs	r3, #35	@ 0x23
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d30:	e023      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	@ 0x41
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b41      	subs	r3, #65	@ 0x41
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <HAL_ADC_ConfigChannel+0x250>)
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <HAL_ADC_ConfigChannel+0x254>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10f      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d8>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_ADC_ConfigChannel+0x254>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d12b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <HAL_ADC_ConfigChannel+0x258>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b11      	cmp	r3, #17
 8001dc2:	d122      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <HAL_ADC_ConfigChannel+0x258>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_ADC_ConfigChannel+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <HAL_ADC_ConfigChannel+0x260>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9a      	lsrs	r2, r3, #18
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012300 	.word	0x40012300
 8001e24:	40012000 	.word	0x40012000
 8001e28:	10000012 	.word	0x10000012
 8001e2c:	2000000c 	.word	0x2000000c
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e3c:	4b79      	ldr	r3, [pc, #484]	@ (8002024 <ADC_Init+0x1f0>)
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	021a      	lsls	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	4a58      	ldr	r2, [pc, #352]	@ (8002028 <ADC_Init+0x1f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6899      	ldr	r1, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e00f      	b.n	8001f32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0202 	bic.w	r2, r2, #2
 8001f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7e1b      	ldrb	r3, [r3, #24]
 8001f4c:	005a      	lsls	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	035a      	lsls	r2, r3, #13
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e007      	b.n	8001fa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	051a      	lsls	r2, r3, #20
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fea:	025a      	lsls	r2, r3, #9
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	029a      	lsls	r2, r3, #10
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40012300 	.word	0x40012300
 8002028:	0f000001 	.word	0x0f000001

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4c 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ae:	f7ff ff61 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f7ff ffb1 	bl	8002120 <NVIC_EncodePriority>
 80021be:	4602      	mov	r2, r0
 80021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff80 	bl	80020cc <__NVIC_SetPriority>
}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff54 	bl	8002090 <__NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e165      	b.n	80024d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8154 	bne.w	80024d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	2b02      	cmp	r3, #2
 8002240:	d130      	bne.n	80022a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80ae 	beq.w	80024d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b5d      	ldr	r3, [pc, #372]	@ (80024f0 <HAL_GPIO_Init+0x300>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	4a5c      	ldr	r2, [pc, #368]	@ (80024f0 <HAL_GPIO_Init+0x300>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002384:	6453      	str	r3, [r2, #68]	@ 0x44
 8002386:	4b5a      	ldr	r3, [pc, #360]	@ (80024f0 <HAL_GPIO_Init+0x300>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002392:	4a58      	ldr	r2, [pc, #352]	@ (80024f4 <HAL_GPIO_Init+0x304>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	@ (80024f8 <HAL_GPIO_Init+0x308>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x21a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4e      	ldr	r2, [pc, #312]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x216>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002500 <HAL_GPIO_Init+0x310>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x212>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x20e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002508 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x20a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	@ (800250c <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x206>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x202>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00c      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00a      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023f6:	2305      	movs	r3, #5
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023fa:	2304      	movs	r3, #4
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x21c>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x21c>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x21c>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	@ (80024f4 <HAL_GPIO_Init+0x304>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242a:	4b3a      	ldr	r3, [pc, #232]	@ (8002514 <HAL_GPIO_Init+0x324>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244e:	4a31      	ldr	r2, [pc, #196]	@ (8002514 <HAL_GPIO_Init+0x324>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002454:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <HAL_GPIO_Init+0x324>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002478:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <HAL_GPIO_Init+0x324>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247e:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_GPIO_Init+0x324>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002514 <HAL_GPIO_Init+0x324>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <HAL_GPIO_Init+0x324>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024cc:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_GPIO_Init+0x324>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f ae96 	bls.w	800220c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	@ 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e12b      	b.n	80027e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe f95e 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	@ 0x24
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e0:	f000 fe8a 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a81      	ldr	r2, [pc, #516]	@ (80027f0 <HAL_I2C_Init+0x274>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d807      	bhi.n	8002600 <HAL_I2C_Init+0x84>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a80      	ldr	r2, [pc, #512]	@ (80027f4 <HAL_I2C_Init+0x278>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e006      	b.n	800260e <HAL_I2C_Init+0x92>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a7d      	ldr	r2, [pc, #500]	@ (80027f8 <HAL_I2C_Init+0x27c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	bf94      	ite	ls
 8002608:	2301      	movls	r3, #1
 800260a:	2300      	movhi	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0e7      	b.n	80027e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a78      	ldr	r2, [pc, #480]	@ (80027fc <HAL_I2C_Init+0x280>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9b      	lsrs	r3, r3, #18
 8002620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a6a      	ldr	r2, [pc, #424]	@ (80027f0 <HAL_I2C_Init+0x274>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d802      	bhi.n	8002650 <HAL_I2C_Init+0xd4>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	e009      	b.n	8002664 <HAL_I2C_Init+0xe8>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a69      	ldr	r2, [pc, #420]	@ (8002800 <HAL_I2C_Init+0x284>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002676:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	495c      	ldr	r1, [pc, #368]	@ (80027f0 <HAL_I2C_Init+0x274>)
 8002680:	428b      	cmp	r3, r1
 8002682:	d819      	bhi.n	80026b8 <HAL_I2C_Init+0x13c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e59      	subs	r1, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002698:	400b      	ands	r3, r1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_I2C_Init+0x138>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e59      	subs	r1, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	e051      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 80026b4:	2304      	movs	r3, #4
 80026b6:	e04f      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <HAL_I2C_Init+0x168>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e012      	b.n	800270a <HAL_I2C_Init+0x18e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1e58      	subs	r0, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	0099      	lsls	r1, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Init+0x196>
 800270e:	2301      	movs	r3, #1
 8002710:	e022      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10e      	bne.n	8002738 <HAL_I2C_Init+0x1bc>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e58      	subs	r0, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	440b      	add	r3, r1
 8002728:	fbb0 f3f3 	udiv	r3, r0, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002736:	e00f      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	0099      	lsls	r1, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	6809      	ldr	r1, [r1, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002786:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6911      	ldr	r1, [r2, #16]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68d2      	ldr	r2, [r2, #12]
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	000186a0 	.word	0x000186a0
 80027f4:	001e847f 	.word	0x001e847f
 80027f8:	003d08ff 	.word	0x003d08ff
 80027fc:	431bde83 	.word	0x431bde83
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	460b      	mov	r3, r1
 8002812:	817b      	strh	r3, [r7, #10]
 8002814:	4613      	mov	r3, r2
 8002816:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7fe ffc8 	bl	80017ac <HAL_GetTick>
 800281c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b20      	cmp	r3, #32
 8002828:	f040 80e0 	bne.w	80029ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2319      	movs	r3, #25
 8002832:	2201      	movs	r2, #1
 8002834:	4970      	ldr	r1, [pc, #448]	@ (80029f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fa92 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	e0d3      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x50>
 8002850:	2302      	movs	r3, #2
 8002852:	e0cc      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ea>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d007      	beq.n	800287a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002888:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2221      	movs	r2, #33	@ 0x21
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2210      	movs	r2, #16
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	893a      	ldrh	r2, [r7, #8]
 80028aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a50      	ldr	r2, [pc, #320]	@ (80029fc <HAL_I2C_Master_Transmit+0x1f8>)
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028bc:	8979      	ldrh	r1, [r7, #10]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f9ca 	bl	8002c5c <I2C_MasterRequestWrite>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e08d      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e8:	e066      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fb50 	bl	8002f94 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06b      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11b      	bne.n	800298c <HAL_I2C_Master_Transmit+0x188>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d017      	beq.n	800298c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	6a39      	ldr	r1, [r7, #32]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fb47 	bl	8003024 <I2C_WaitOnBTFFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d107      	bne.n	80029b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e01a      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d194      	bne.n	80028ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	00100002 	.word	0x00100002
 80029fc:	ffff0000 	.word	0xffff0000

08002a00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7fe fecc 	bl	80017ac <HAL_GetTick>
 8002a14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	f040 8111 	bne.w	8002c4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2319      	movs	r3, #25
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4988      	ldr	r1, [pc, #544]	@ (8002c54 <HAL_I2C_IsDeviceReady+0x254>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f994 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e104      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2C_IsDeviceReady+0x50>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e0fd      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d007      	beq.n	8002a76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2224      	movs	r2, #36	@ 0x24
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a70      	ldr	r2, [pc, #448]	@ (8002c58 <HAL_I2C_IsDeviceReady+0x258>)
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f952 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad0:	d103      	bne.n	8002ada <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0b6      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fe5d 	bl	80017ac <HAL_GetTick>
 8002af2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b22:	e025      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b24:	f7fe fe42 	bl	80017ac <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <HAL_I2C_IsDeviceReady+0x13a>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22a0      	movs	r2, #160	@ 0xa0
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b7a:	d005      	beq.n	8002b88 <HAL_I2C_IsDeviceReady+0x188>
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_I2C_IsDeviceReady+0x188>
 8002b82:	7dbb      	ldrb	r3, [r7, #22]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0cd      	beq.n	8002b24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d129      	bne.n	8002bf2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2319      	movs	r3, #25
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4921      	ldr	r1, [pc, #132]	@ (8002c54 <HAL_I2C_IsDeviceReady+0x254>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8c6 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e036      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e02c      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	490f      	ldr	r1, [pc, #60]	@ (8002c54 <HAL_I2C_IsDeviceReady+0x254>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8a2 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e012      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f4ff af32 	bcc.w	8002a9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	00100002 	.word	0x00100002
 8002c58:	ffff0000 	.word	0xffff0000

08002c5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d006      	beq.n	8002c86 <I2C_MasterRequestWrite+0x2a>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d003      	beq.n	8002c86 <I2C_MasterRequestWrite+0x2a>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c84:	d108      	bne.n	8002c98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e00b      	b.n	8002cb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	2b12      	cmp	r3, #18
 8002c9e:	d107      	bne.n	8002cb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f84f 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd6:	d103      	bne.n	8002ce0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e035      	b.n	8002d50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cec:	d108      	bne.n	8002d00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cfc:	611a      	str	r2, [r3, #16]
 8002cfe:	e01b      	b.n	8002d38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	11db      	asrs	r3, r3, #7
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f003 0306 	and.w	r3, r3, #6
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f063 030f 	orn	r3, r3, #15
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	490e      	ldr	r1, [pc, #56]	@ (8002d58 <I2C_MasterRequestWrite+0xfc>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f898 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e010      	b.n	8002d50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4907      	ldr	r1, [pc, #28]	@ (8002d5c <I2C_MasterRequestWrite+0x100>)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f888 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	00010008 	.word	0x00010008
 8002d5c:	00010002 	.word	0x00010002

08002d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d70:	e048      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d78:	d044      	beq.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fd17 	bl	80017ac <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d139      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10d      	bne.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	e00c      	b.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d116      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e023      	b.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10d      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	e00c      	b.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d093      	beq.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e62:	e071      	b.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e72:	d123      	bne.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0204 	orr.w	r2, r3, #4
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e067      	b.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec2:	d041      	beq.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	f7fe fc72 	bl	80017ac <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d136      	bne.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e00b      	b.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e021      	b.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10c      	bne.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e00b      	b.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f47f af6d 	bne.w	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa0:	e034      	b.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f886 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e034      	b.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fb8:	d028      	beq.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7fe fbf7 	bl	80017ac <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11d      	bne.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b80      	cmp	r3, #128	@ 0x80
 8002fdc:	d016      	beq.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003016:	2b80      	cmp	r3, #128	@ 0x80
 8003018:	d1c3      	bne.n	8002fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003030:	e034      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f83e 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e034      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003048:	d028      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fbaf 	bl	80017ac <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11d      	bne.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d016      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d1c3      	bne.n	8003032 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ca:	d11b      	bne.n	8003104 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cc      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b68      	ldr	r3, [pc, #416]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90c      	bls.n	8003150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b65      	ldr	r3, [pc, #404]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a58      	ldr	r2, [pc, #352]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a52      	ldr	r2, [pc, #328]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800318a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4934      	ldr	r1, [pc, #208]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe fad2 	bl	80017ac <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe face 	bl	80017ac <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e04f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b25      	ldr	r3, [pc, #148]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20c      	bcs.n	800325c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f887 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ffec 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023c00 	.word	0x40023c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	080096e4 	.word	0x080096e4
 80032d8:	2000000c 	.word	0x2000000c
 80032dc:	20000010 	.word	0x20000010

080032e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	2000000c 	.word	0x2000000c

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	080096f4 	.word	0x080096f4

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003324:	f7ff ffdc 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0b5b      	lsrs	r3, r3, #13
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	080096f4 	.word	0x080096f4

08003348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	220f      	movs	r2, #15
 8003356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003358:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <HAL_RCC_GetClockConfig+0x5c>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003364:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	08db      	lsrs	r3, r3, #3
 8003382:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_RCC_GetClockConfig+0x60>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 020f 	and.w	r2, r3, #15
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	601a      	str	r2, [r3, #0]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40023c00 	.word	0x40023c00

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b0ae      	sub	sp, #184	@ 0xb8
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d2:	4bcb      	ldr	r3, [pc, #812]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	f200 8206 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x440>
 80033e0:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	080037ed 	.word	0x080037ed
 80033f0:	080037ed 	.word	0x080037ed
 80033f4:	080037ed 	.word	0x080037ed
 80033f8:	08003425 	.word	0x08003425
 80033fc:	080037ed 	.word	0x080037ed
 8003400:	080037ed 	.word	0x080037ed
 8003404:	080037ed 	.word	0x080037ed
 8003408:	0800342d 	.word	0x0800342d
 800340c:	080037ed 	.word	0x080037ed
 8003410:	080037ed 	.word	0x080037ed
 8003414:	080037ed 	.word	0x080037ed
 8003418:	0800361d 	.word	0x0800361d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4bb9      	ldr	r3, [pc, #740]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x358>)
 800341e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003422:	e1e7      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4bb8      	ldr	r3, [pc, #736]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800342a:	e1e3      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4bb4      	ldr	r3, [pc, #720]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003438:	4bb1      	ldr	r3, [pc, #708]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d071      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003444:	4bae      	ldr	r3, [pc, #696]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003450:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800346a:	4622      	mov	r2, r4
 800346c:	462b      	mov	r3, r5
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347c:	0150      	lsls	r0, r2, #5
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4621      	mov	r1, r4
 8003484:	1a51      	subs	r1, r2, r1
 8003486:	6439      	str	r1, [r7, #64]	@ 0x40
 8003488:	4629      	mov	r1, r5
 800348a:	eb63 0301 	sbc.w	r3, r3, r1
 800348e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800349c:	4649      	mov	r1, r9
 800349e:	018b      	lsls	r3, r1, #6
 80034a0:	4641      	mov	r1, r8
 80034a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034a6:	4641      	mov	r1, r8
 80034a8:	018a      	lsls	r2, r1, #6
 80034aa:	4641      	mov	r1, r8
 80034ac:	1a51      	subs	r1, r2, r1
 80034ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034b0:	4649      	mov	r1, r9
 80034b2:	eb63 0301 	sbc.w	r3, r3, r1
 80034b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80034c4:	4649      	mov	r1, r9
 80034c6:	00cb      	lsls	r3, r1, #3
 80034c8:	4641      	mov	r1, r8
 80034ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ce:	4641      	mov	r1, r8
 80034d0:	00ca      	lsls	r2, r1, #3
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	4622      	mov	r2, r4
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034de:	462b      	mov	r3, r5
 80034e0:	460a      	mov	r2, r1
 80034e2:	eb42 0303 	adc.w	r3, r2, r3
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034f4:	4629      	mov	r1, r5
 80034f6:	024b      	lsls	r3, r1, #9
 80034f8:	4621      	mov	r1, r4
 80034fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034fe:	4621      	mov	r1, r4
 8003500:	024a      	lsls	r2, r1, #9
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003514:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003518:	f7fc feca 	bl	80002b0 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003526:	e067      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003534:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003542:	2300      	movs	r3, #0
 8003544:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003546:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800357c:	4649      	mov	r1, r9
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4641      	mov	r1, r8
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	4641      	mov	r1, r8
 800358c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003590:	4649      	mov	r1, r9
 8003592:	eb63 0b01 	sbc.w	fp, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035aa:	4692      	mov	sl, r2
 80035ac:	469b      	mov	fp, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb1a 0303 	adds.w	r3, sl, r3
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb4b 0303 	adc.w	r3, fp, r3
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035e0:	2200      	movs	r2, #0
 80035e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80035e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035ea:	f7fc fe61 	bl	80002b0 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4613      	mov	r3, r2
 80035f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800360a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800360e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800361a:	e0eb      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361c:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003628:	4b35      	ldr	r3, [pc, #212]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d06b      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003634:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	2200      	movs	r2, #0
 800363c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800363e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003646:	663b      	str	r3, [r7, #96]	@ 0x60
 8003648:	2300      	movs	r3, #0
 800364a:	667b      	str	r3, [r7, #100]	@ 0x64
 800364c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003650:	4622      	mov	r2, r4
 8003652:	462b      	mov	r3, r5
 8003654:	f04f 0000 	mov.w	r0, #0
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	0159      	lsls	r1, r3, #5
 800365e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003662:	0150      	lsls	r0, r2, #5
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4621      	mov	r1, r4
 800366a:	1a51      	subs	r1, r2, r1
 800366c:	61b9      	str	r1, [r7, #24]
 800366e:	4629      	mov	r1, r5
 8003670:	eb63 0301 	sbc.w	r3, r3, r1
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003682:	4659      	mov	r1, fp
 8003684:	018b      	lsls	r3, r1, #6
 8003686:	4651      	mov	r1, sl
 8003688:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368c:	4651      	mov	r1, sl
 800368e:	018a      	lsls	r2, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ebb2 0801 	subs.w	r8, r2, r1
 8003696:	4659      	mov	r1, fp
 8003698:	eb63 0901 	sbc.w	r9, r3, r1
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036b0:	4690      	mov	r8, r2
 80036b2:	4699      	mov	r9, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	eb18 0303 	adds.w	r3, r8, r3
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	462b      	mov	r3, r5
 80036be:	eb49 0303 	adc.w	r3, r9, r3
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036d0:	4629      	mov	r1, r5
 80036d2:	024b      	lsls	r3, r1, #9
 80036d4:	4621      	mov	r1, r4
 80036d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036da:	4621      	mov	r1, r4
 80036dc:	024a      	lsls	r2, r1, #9
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036e6:	2200      	movs	r2, #0
 80036e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036f0:	f7fc fdde 	bl	80002b0 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036fe:	e065      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x420>
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370c:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x458>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	2200      	movs	r2, #0
 8003714:	4618      	mov	r0, r3
 8003716:	4611      	mov	r1, r2
 8003718:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800371c:	653b      	str	r3, [r7, #80]	@ 0x50
 800371e:	2300      	movs	r3, #0
 8003720:	657b      	str	r3, [r7, #84]	@ 0x54
 8003722:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003726:	4642      	mov	r2, r8
 8003728:	464b      	mov	r3, r9
 800372a:	f04f 0000 	mov.w	r0, #0
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	0159      	lsls	r1, r3, #5
 8003734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003738:	0150      	lsls	r0, r2, #5
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4641      	mov	r1, r8
 8003740:	1a51      	subs	r1, r2, r1
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	4649      	mov	r1, r9
 8003746:	eb63 0301 	sbc.w	r3, r3, r1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003758:	4659      	mov	r1, fp
 800375a:	018b      	lsls	r3, r1, #6
 800375c:	4651      	mov	r1, sl
 800375e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003762:	4651      	mov	r1, sl
 8003764:	018a      	lsls	r2, r1, #6
 8003766:	4651      	mov	r1, sl
 8003768:	1a54      	subs	r4, r2, r1
 800376a:	4659      	mov	r1, fp
 800376c:	eb63 0501 	sbc.w	r5, r3, r1
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	464b      	mov	r3, r9
 800378c:	eb45 0303 	adc.w	r3, r5, r3
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037b4:	2200      	movs	r2, #0
 80037b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037be:	f7fc fd77 	bl	80002b0 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4613      	mov	r3, r2
 80037c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x458>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0f1b      	lsrs	r3, r3, #28
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80037da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ea:	e003      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x45c>)
 80037ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	37b8      	adds	r7, #184	@ 0xb8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400

0800380c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e28d      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8083 	beq.w	8003932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800382c:	4b94      	ldr	r3, [pc, #592]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b04      	cmp	r3, #4
 8003836:	d019      	beq.n	800386c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003838:	4b91      	ldr	r3, [pc, #580]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003840:	2b08      	cmp	r3, #8
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003844:	4b8e      	ldr	r3, [pc, #568]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003850:	d00c      	beq.n	800386c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b8b      	ldr	r3, [pc, #556]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386a:	d10b      	bne.n	8003884 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	4b84      	ldr	r3, [pc, #528]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05b      	beq.n	8003930 <HAL_RCC_OscConfig+0x124>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d157      	bne.n	8003930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e25a      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x90>
 800388e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7b      	ldr	r2, [pc, #492]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0xcc>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0xb4>
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b73      	ldr	r3, [pc, #460]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a72      	ldr	r2, [pc, #456]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xcc>
 80038c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd ff64 	bl	80017ac <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd ff60 	bl	80017ac <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e21f      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b61      	ldr	r3, [pc, #388]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0xdc>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd ff50 	bl	80017ac <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003910:	f7fd ff4c 	bl	80017ac <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	@ 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e20b      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x104>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06f      	beq.n	8003a1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800393e:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800394a:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003952:	2b08      	cmp	r3, #8
 8003954:	d105      	bne.n	8003962 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003956:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x186>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1d3      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4937      	ldr	r1, [pc, #220]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b34      	ldr	r3, [pc, #208]	@ (8003a84 <HAL_RCC_OscConfig+0x278>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fef9 	bl	80017ac <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fef5 	bl	80017ac <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1b4      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_RCC_OscConfig+0x278>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fed8 	bl	80017ac <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fd fed4 	bl	80017ac <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e193      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_OscConfig+0x27c>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd feb8 	bl	80017ac <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd feb4 	bl	80017ac <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e173      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x234>
 8003a5e:	e01b      	b.n	8003a98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_OscConfig+0x27c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fd fea1 	bl	80017ac <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fd fe9d 	bl	80017ac <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e15c      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470000 	.word	0x42470000
 8003a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b83      	ldr	r3, [pc, #524]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b79      	ldr	r3, [pc, #484]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fe5d 	bl	80017ac <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fd fe59 	bl	80017ac <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e118      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x31e>
 8003b1c:	4b66      	ldr	r3, [pc, #408]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a65      	ldr	r2, [pc, #404]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x358>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x340>
 8003b32:	4b61      	ldr	r3, [pc, #388]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a60      	ldr	r2, [pc, #384]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x358>
 8003b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a59      	ldr	r2, [pc, #356]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	4b57      	ldr	r3, [pc, #348]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a56      	ldr	r2, [pc, #344]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fe1e 	bl	80017ac <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fd fe1a 	bl	80017ac <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0d7      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ee      	beq.n	8003b74 <HAL_RCC_OscConfig+0x368>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fe08 	bl	80017ac <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fe04 	bl	80017ac <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0c1      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	4b40      	ldr	r3, [pc, #256]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80ad 	beq.w	8003d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bde:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d060      	beq.n	8003cac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d145      	bne.n	8003c7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b33      	ldr	r3, [pc, #204]	@ (8003cc0 <HAL_RCC_OscConfig+0x4b4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fdd8 	bl	80017ac <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd fdd4 	bl	80017ac <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e093      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	491b      	ldr	r1, [pc, #108]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_RCC_OscConfig+0x4b4>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fda9 	bl	80017ac <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fd fda5 	bl	80017ac <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e064      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x452>
 8003c7c:	e05c      	b.n	8003d38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <HAL_RCC_OscConfig+0x4b4>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd fd92 	bl	80017ac <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd fd8e 	bl	80017ac <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e04d      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x480>
 8003caa:	e045      	b.n	8003d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e040      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d44 <HAL_RCC_OscConfig+0x538>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d030      	beq.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d129      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d122      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d119      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d10f      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e041      	b.n	8003dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fbf2 	bl	8001558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 fc62 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d001      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e04e      	b.n	8003e9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a23      	ldr	r2, [pc, #140]	@ (8003eac <HAL_TIM_Base_Start_IT+0xc4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d022      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2a:	d01d      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d018      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	@ (8003ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d111      	bne.n	8003e8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d010      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	e007      	b.n	8003e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40010400 	.word	0x40010400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40001800 	.word	0x40001800

08003ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f839 	bl	8003f66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fba2 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_TIM_PWM_Start+0x24>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e022      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x6a>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d109      	bne.n	8003fba <HAL_TIM_PWM_Start+0x3e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	e015      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x6a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d109      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0x58>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e008      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x6a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e07c      	b.n	80040e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x82>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_PWM_Start+0xaa>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0x92>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400c:	e00b      	b.n	8004026 <HAL_TIM_PWM_Start+0xaa>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800401c:	e003      	b.n	8004026 <HAL_TIM_PWM_Start+0xaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fe04 	bl	8004c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2d      	ldr	r2, [pc, #180]	@ (80040f0 <HAL_TIM_PWM_Start+0x174>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_PWM_Start+0xcc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2c      	ldr	r2, [pc, #176]	@ (80040f4 <HAL_TIM_PWM_Start+0x178>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_TIM_PWM_Start+0xd0>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_TIM_PWM_Start+0xd2>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a22      	ldr	r2, [pc, #136]	@ (80040f0 <HAL_TIM_PWM_Start+0x174>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004074:	d01d      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <HAL_TIM_PWM_Start+0x17c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <HAL_TIM_PWM_Start+0x180>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <HAL_TIM_PWM_Start+0x184>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a16      	ldr	r2, [pc, #88]	@ (80040f4 <HAL_TIM_PWM_Start+0x178>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a18      	ldr	r2, [pc, #96]	@ (8004104 <HAL_TIM_PWM_Start+0x188>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_PWM_Start+0x136>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <HAL_TIM_PWM_Start+0x18c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d111      	bne.n	80040d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d010      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d4:	e007      	b.n	80040e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40014000 	.word	0x40014000
 8004108:	40001800 	.word	0x40001800

0800410c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d020      	beq.n	8004170 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01b      	beq.n	8004170 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0202 	mvn.w	r2, #2
 8004140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa5b 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa4d 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa5e 	bl	8004626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d020      	beq.n	80041bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01b      	beq.n	80041bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0204 	mvn.w	r2, #4
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa35 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa27 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa38 	bl	8004626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d020      	beq.n	8004208 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0208 	mvn.w	r2, #8
 80041d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2204      	movs	r2, #4
 80041de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa0f 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa01 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa12 	bl	8004626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d020      	beq.n	8004254 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01b      	beq.n	8004254 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0210 	mvn.w	r2, #16
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2208      	movs	r2, #8
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9e9 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9db 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f9ec 	bl	8004626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fc2c 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00c      	beq.n	800429c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fd7c 	bl	8004d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9bd 	bl	800463a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0220 	mvn.w	r2, #32
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fd4e 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004306:	2302      	movs	r3, #2
 8004308:	e0ae      	b.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	f200 809f 	bhi.w	8004458 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800431a:	a201      	add	r2, pc, #4	@ (adr r2, 8004320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004355 	.word	0x08004355
 8004324:	08004459 	.word	0x08004459
 8004328:	08004459 	.word	0x08004459
 800432c:	08004459 	.word	0x08004459
 8004330:	08004395 	.word	0x08004395
 8004334:	08004459 	.word	0x08004459
 8004338:	08004459 	.word	0x08004459
 800433c:	08004459 	.word	0x08004459
 8004340:	080043d7 	.word	0x080043d7
 8004344:	08004459 	.word	0x08004459
 8004348:	08004459 	.word	0x08004459
 800434c:	08004459 	.word	0x08004459
 8004350:	08004417 	.word	0x08004417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fa24 	bl	80047a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6999      	ldr	r1, [r3, #24]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	619a      	str	r2, [r3, #24]
      break;
 8004392:	e064      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fa74 	bl	8004888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
      break;
 80043d4:	e043      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fac9 	bl	8004974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0208 	orr.w	r2, r2, #8
 80043f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0204 	bic.w	r2, r2, #4
 8004400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	61da      	str	r2, [r3, #28]
      break;
 8004414:	e023      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fb1d 	bl	8004a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	021a      	lsls	r2, r3, #8
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	61da      	str	r2, [r3, #28]
      break;
 8004456:	e002      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
      break;
 800445c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIM_ConfigClockSource+0x1c>
 8004488:	2302      	movs	r3, #2
 800448a:	e0b4      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x186>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c4:	d03e      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xd4>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ca:	f200 8087 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	f000 8086 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x172>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044da:	d87f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b70      	cmp	r3, #112	@ 0x70
 80044de:	d01a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xa6>
 80044e0:	2b70      	cmp	r3, #112	@ 0x70
 80044e2:	d87b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b60      	cmp	r3, #96	@ 0x60
 80044e6:	d050      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x11a>
 80044e8:	2b60      	cmp	r3, #96	@ 0x60
 80044ea:	d877      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b50      	cmp	r3, #80	@ 0x50
 80044ee:	d03c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xfa>
 80044f0:	2b50      	cmp	r3, #80	@ 0x50
 80044f2:	d873      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d058      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x13a>
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d86f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b30      	cmp	r3, #48	@ 0x30
 80044fe:	d064      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	2b30      	cmp	r3, #48	@ 0x30
 8004502:	d86b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d060      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d867      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004510:	2b10      	cmp	r3, #16
 8004512:	d05a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004514:	e062      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004526:	f000 fb69 	bl	8004bfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e04f      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004554:	f000 fb52 	bl	8004bfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fac6 	bl	8004b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2150      	movs	r1, #80	@ 0x50
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb1f 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 8004588:	e02c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004596:	461a      	mov	r2, r3
 8004598:	f000 fae5 	bl	8004b66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2160      	movs	r1, #96	@ 0x60
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fb0f 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e01c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 faa6 	bl	8004b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	@ 0x40
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 faff 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e00c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 faf6 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045da:	e003      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a46      	ldr	r2, [pc, #280]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466e:	d00f      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a43      	ldr	r2, [pc, #268]	@ (8004780 <TIM_Base_SetConfig+0x130>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a42      	ldr	r2, [pc, #264]	@ (8004784 <TIM_Base_SetConfig+0x134>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a41      	ldr	r2, [pc, #260]	@ (8004788 <TIM_Base_SetConfig+0x138>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a40      	ldr	r2, [pc, #256]	@ (800478c <TIM_Base_SetConfig+0x13c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a35      	ldr	r2, [pc, #212]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02b      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d027      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a32      	ldr	r2, [pc, #200]	@ (8004780 <TIM_Base_SetConfig+0x130>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d023      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a31      	ldr	r2, [pc, #196]	@ (8004784 <TIM_Base_SetConfig+0x134>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a30      	ldr	r2, [pc, #192]	@ (8004788 <TIM_Base_SetConfig+0x138>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01b      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <TIM_Base_SetConfig+0x13c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d017      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004790 <TIM_Base_SetConfig+0x140>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <TIM_Base_SetConfig+0x144>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <TIM_Base_SetConfig+0x148>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2b      	ldr	r2, [pc, #172]	@ (800479c <TIM_Base_SetConfig+0x14c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	@ (80047a0 <TIM_Base_SetConfig+0x150>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a29      	ldr	r2, [pc, #164]	@ (80047a4 <TIM_Base_SetConfig+0x154>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a10      	ldr	r2, [pc, #64]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_Base_SetConfig+0xf8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a12      	ldr	r2, [pc, #72]	@ (800478c <TIM_Base_SetConfig+0x13c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]
  }
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	40001800 	.word	0x40001800
 80047a0:	40001c00 	.word	0x40001c00
 80047a4:	40002000 	.word	0x40002000

080047a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0201 	bic.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0302 	bic.w	r3, r3, #2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a20      	ldr	r2, [pc, #128]	@ (8004880 <TIM_OC1_SetConfig+0xd8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC1_SetConfig+0x64>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10c      	bne.n	8004826 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0308 	bic.w	r3, r3, #8
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a15      	ldr	r2, [pc, #84]	@ (8004880 <TIM_OC1_SetConfig+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC1_SetConfig+0x8e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 0210 	bic.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0320 	bic.w	r3, r3, #32
 80048d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a22      	ldr	r2, [pc, #136]	@ (800496c <TIM_OC2_SetConfig+0xe4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC2_SetConfig+0x68>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a21      	ldr	r2, [pc, #132]	@ (8004970 <TIM_OC2_SetConfig+0xe8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10d      	bne.n	800490c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800490a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a17      	ldr	r2, [pc, #92]	@ (800496c <TIM_OC2_SetConfig+0xe4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_OC2_SetConfig+0x94>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a16      	ldr	r2, [pc, #88]	@ (8004970 <TIM_OC2_SetConfig+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d113      	bne.n	8004944 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800492a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40010400 	.word	0x40010400

08004974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a21      	ldr	r2, [pc, #132]	@ (8004a54 <TIM_OC3_SetConfig+0xe0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC3_SetConfig+0x66>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	@ (8004a58 <TIM_OC3_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10d      	bne.n	80049f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <TIM_OC3_SetConfig+0xe0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC3_SetConfig+0x92>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <TIM_OC3_SetConfig+0xe4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d113      	bne.n	8004a2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400

08004a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	031b      	lsls	r3, r3, #12
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	@ (8004b00 <TIM_OC4_SetConfig+0xa4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC4_SetConfig+0x68>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <TIM_OC4_SetConfig+0xa8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d109      	bne.n	8004ad8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	019b      	lsls	r3, r3, #6
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010400 	.word	0x40010400

08004b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 030a 	bic.w	r3, r3, #10
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f023 0210 	bic.w	r2, r3, #16
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ba2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f043 0307 	orr.w	r3, r3, #7
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2201      	movs	r2, #1
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1a      	ldr	r2, [r3, #32]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e05a      	b.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d01d      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a18      	ldr	r2, [pc, #96]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a15      	ldr	r2, [pc, #84]	@ (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10c      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40010400 	.word	0x40010400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40001800 	.word	0x40001800

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e042      	b.n	8004e40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc fc44 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	@ 0x24
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f82b 	bl	8004e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e4c:	b0c0      	sub	sp, #256	@ 0x100
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	68d9      	ldr	r1, [r3, #12]
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	ea40 0301 	orr.w	r3, r0, r1
 8004e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ea0:	f021 010c 	bic.w	r1, r1, #12
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	6999      	ldr	r1, [r3, #24]
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	ea40 0301 	orr.w	r3, r0, r1
 8004ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8005114 <UART_SetConfig+0x2cc>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d005      	beq.n	8004ee8 <UART_SetConfig+0xa0>
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8005118 <UART_SetConfig+0x2d0>)
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d104      	bne.n	8004ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ee8:	f7fe fa1a 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8004eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ef0:	e003      	b.n	8004efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ef2:	f7fe fa01 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f04:	f040 810c 	bne.w	8005120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	462b      	mov	r3, r5
 8004f1e:	1891      	adds	r1, r2, r2
 8004f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f22:	415b      	adcs	r3, r3
 8004f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	eb12 0801 	adds.w	r8, r2, r1
 8004f30:	4629      	mov	r1, r5
 8004f32:	eb43 0901 	adc.w	r9, r3, r1
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4a:	4690      	mov	r8, r2
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	4623      	mov	r3, r4
 8004f50:	eb18 0303 	adds.w	r3, r8, r3
 8004f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f58:	462b      	mov	r3, r5
 8004f5a:	eb49 0303 	adc.w	r3, r9, r3
 8004f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f76:	460b      	mov	r3, r1
 8004f78:	18db      	adds	r3, r3, r3
 8004f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	eb42 0303 	adc.w	r3, r2, r3
 8004f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f8c:	f7fb f990 	bl	80002b0 <__aeabi_uldivmod>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4b61      	ldr	r3, [pc, #388]	@ (800511c <UART_SetConfig+0x2d4>)
 8004f96:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	011c      	lsls	r4, r3, #4
 8004f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	1891      	adds	r1, r2, r2
 8004fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fb8:	415b      	adcs	r3, r3
 8004fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe0:	4692      	mov	sl, r2
 8004fe2:	469b      	mov	fp, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800500c:	460b      	mov	r3, r1
 800500e:	18db      	adds	r3, r3, r3
 8005010:	643b      	str	r3, [r7, #64]	@ 0x40
 8005012:	4613      	mov	r3, r2
 8005014:	eb42 0303 	adc.w	r3, r2, r3
 8005018:	647b      	str	r3, [r7, #68]	@ 0x44
 800501a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800501e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005022:	f7fb f945 	bl	80002b0 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4611      	mov	r1, r2
 800502c:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <UART_SetConfig+0x2d4>)
 800502e:	fba3 2301 	umull	r2, r3, r3, r1
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2264      	movs	r2, #100	@ 0x64
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	1acb      	subs	r3, r1, r3
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005042:	4b36      	ldr	r3, [pc, #216]	@ (800511c <UART_SetConfig+0x2d4>)
 8005044:	fba3 2302 	umull	r2, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005050:	441c      	add	r4, r3
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800505c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	1891      	adds	r1, r2, r2
 800506a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800506c:	415b      	adcs	r3, r3
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005074:	4641      	mov	r1, r8
 8005076:	1851      	adds	r1, r2, r1
 8005078:	6339      	str	r1, [r7, #48]	@ 0x30
 800507a:	4649      	mov	r1, r9
 800507c:	414b      	adcs	r3, r1
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800508c:	4659      	mov	r1, fp
 800508e:	00cb      	lsls	r3, r1, #3
 8005090:	4651      	mov	r1, sl
 8005092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005096:	4651      	mov	r1, sl
 8005098:	00ca      	lsls	r2, r1, #3
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	4642      	mov	r2, r8
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050a8:	464b      	mov	r3, r9
 80050aa:	460a      	mov	r2, r1
 80050ac:	eb42 0303 	adc.w	r3, r2, r3
 80050b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050c8:	460b      	mov	r3, r1
 80050ca:	18db      	adds	r3, r3, r3
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ce:	4613      	mov	r3, r2
 80050d0:	eb42 0303 	adc.w	r3, r2, r3
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050de:	f7fb f8e7 	bl	80002b0 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <UART_SetConfig+0x2d4>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	@ 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	3332      	adds	r3, #50	@ 0x32
 80050fa:	4a08      	ldr	r2, [pc, #32]	@ (800511c <UART_SetConfig+0x2d4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 0207 	and.w	r2, r3, #7
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4422      	add	r2, r4
 800510e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005110:	e106      	b.n	8005320 <UART_SetConfig+0x4d8>
 8005112:	bf00      	nop
 8005114:	40011000 	.word	0x40011000
 8005118:	40011400 	.word	0x40011400
 800511c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800512a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800512e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005132:	4642      	mov	r2, r8
 8005134:	464b      	mov	r3, r9
 8005136:	1891      	adds	r1, r2, r2
 8005138:	6239      	str	r1, [r7, #32]
 800513a:	415b      	adcs	r3, r3
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
 800513e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005142:	4641      	mov	r1, r8
 8005144:	1854      	adds	r4, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb43 0501 	adc.w	r5, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	00eb      	lsls	r3, r5, #3
 8005156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800515a:	00e2      	lsls	r2, r4, #3
 800515c:	4614      	mov	r4, r2
 800515e:	461d      	mov	r5, r3
 8005160:	4643      	mov	r3, r8
 8005162:	18e3      	adds	r3, r4, r3
 8005164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005168:	464b      	mov	r3, r9
 800516a:	eb45 0303 	adc.w	r3, r5, r3
 800516e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800517e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800518e:	4629      	mov	r1, r5
 8005190:	008b      	lsls	r3, r1, #2
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005198:	4621      	mov	r1, r4
 800519a:	008a      	lsls	r2, r1, #2
 800519c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051a0:	f7fb f886 	bl	80002b0 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4b60      	ldr	r3, [pc, #384]	@ (800532c <UART_SetConfig+0x4e4>)
 80051aa:	fba3 2302 	umull	r2, r3, r3, r2
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	011c      	lsls	r4, r3, #4
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	61b9      	str	r1, [r7, #24]
 80051cc:	415b      	adcs	r3, r3
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d4:	4641      	mov	r1, r8
 80051d6:	1851      	adds	r1, r2, r1
 80051d8:	6139      	str	r1, [r7, #16]
 80051da:	4649      	mov	r1, r9
 80051dc:	414b      	adcs	r3, r1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ec:	4659      	mov	r1, fp
 80051ee:	00cb      	lsls	r3, r1, #3
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f6:	4651      	mov	r1, sl
 80051f8:	00ca      	lsls	r2, r1, #3
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	4642      	mov	r2, r8
 8005202:	189b      	adds	r3, r3, r2
 8005204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800521e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800522c:	4649      	mov	r1, r9
 800522e:	008b      	lsls	r3, r1, #2
 8005230:	4641      	mov	r1, r8
 8005232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005236:	4641      	mov	r1, r8
 8005238:	008a      	lsls	r2, r1, #2
 800523a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800523e:	f7fb f837 	bl	80002b0 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4611      	mov	r1, r2
 8005248:	4b38      	ldr	r3, [pc, #224]	@ (800532c <UART_SetConfig+0x4e4>)
 800524a:	fba3 2301 	umull	r2, r3, r3, r1
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2264      	movs	r2, #100	@ 0x64
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	1acb      	subs	r3, r1, r3
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	3332      	adds	r3, #50	@ 0x32
 800525c:	4a33      	ldr	r2, [pc, #204]	@ (800532c <UART_SetConfig+0x4e4>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005268:	441c      	add	r4, r3
 800526a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526e:	2200      	movs	r2, #0
 8005270:	673b      	str	r3, [r7, #112]	@ 0x70
 8005272:	677a      	str	r2, [r7, #116]	@ 0x74
 8005274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	415b      	adcs	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005288:	4641      	mov	r1, r8
 800528a:	1851      	adds	r1, r2, r1
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	4649      	mov	r1, r9
 8005290:	414b      	adcs	r3, r1
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a0:	4659      	mov	r1, fp
 80052a2:	00cb      	lsls	r3, r1, #3
 80052a4:	4651      	mov	r1, sl
 80052a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052aa:	4651      	mov	r1, sl
 80052ac:	00ca      	lsls	r2, r1, #3
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	4642      	mov	r2, r8
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ba:	464b      	mov	r3, r9
 80052bc:	460a      	mov	r2, r1
 80052be:	eb42 0303 	adc.w	r3, r2, r3
 80052c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052dc:	4649      	mov	r1, r9
 80052de:	008b      	lsls	r3, r1, #2
 80052e0:	4641      	mov	r1, r8
 80052e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e6:	4641      	mov	r1, r8
 80052e8:	008a      	lsls	r2, r1, #2
 80052ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052ee:	f7fa ffdf 	bl	80002b0 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <UART_SetConfig+0x4e4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	@ 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3332      	adds	r3, #50	@ 0x32
 800530a:	4a08      	ldr	r2, [pc, #32]	@ (800532c <UART_SetConfig+0x4e4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4422      	add	r2, r4
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005326:	46bd      	mov	sp, r7
 8005328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532c:	51eb851f 	.word	0x51eb851f

08005330 <__NVIC_SetPriority>:
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	6039      	str	r1, [r7, #0]
 800533a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db0a      	blt.n	800535a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	490c      	ldr	r1, [pc, #48]	@ (800537c <__NVIC_SetPriority+0x4c>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	440b      	add	r3, r1
 8005354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005358:	e00a      	b.n	8005370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4908      	ldr	r1, [pc, #32]	@ (8005380 <__NVIC_SetPriority+0x50>)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3b04      	subs	r3, #4
 8005368:	0112      	lsls	r2, r2, #4
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	440b      	add	r3, r1
 800536e:	761a      	strb	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000e100 	.word	0xe000e100
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <SysTick_Handler+0x1c>)
 800538a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800538c:	f001 fd18 	bl	8006dc0 <xTaskGetSchedulerState>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005396:	f002 fb0f 	bl	80079b8 <xPortSysTickHandler>
  }
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	e000e010 	.word	0xe000e010

080053a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053a8:	2100      	movs	r1, #0
 80053aa:	f06f 0004 	mvn.w	r0, #4
 80053ae:	f7ff ffbf 	bl	8005330 <__NVIC_SetPriority>
#endif
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053be:	f3ef 8305 	mrs	r3, IPSR
 80053c2:	603b      	str	r3, [r7, #0]
  return(result);
 80053c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053ca:	f06f 0305 	mvn.w	r3, #5
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	e00c      	b.n	80053ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <osKernelInitialize+0x44>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053da:	4b08      	ldr	r3, [pc, #32]	@ (80053fc <osKernelInitialize+0x44>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	e002      	b.n	80053ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053ec:	687b      	ldr	r3, [r7, #4]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	2000062c 	.word	0x2000062c

08005400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005406:	f3ef 8305 	mrs	r3, IPSR
 800540a:	603b      	str	r3, [r7, #0]
  return(result);
 800540c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005412:	f06f 0305 	mvn.w	r3, #5
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	e010      	b.n	800543c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <osKernelStart+0x48>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d109      	bne.n	8005436 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005422:	f7ff ffbf 	bl	80053a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005426:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <osKernelStart+0x48>)
 8005428:	2202      	movs	r2, #2
 800542a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800542c:	f001 f87a 	bl	8006524 <vTaskStartScheduler>
      stat = osOK;
 8005430:	2300      	movs	r3, #0
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	e002      	b.n	800543c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800543a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800543c:	687b      	ldr	r3, [r7, #4]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	2000062c 	.word	0x2000062c

0800544c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b08e      	sub	sp, #56	@ 0x38
 8005450:	af04      	add	r7, sp, #16
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800545c:	f3ef 8305 	mrs	r3, IPSR
 8005460:	617b      	str	r3, [r7, #20]
  return(result);
 8005462:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005464:	2b00      	cmp	r3, #0
 8005466:	d17e      	bne.n	8005566 <osThreadNew+0x11a>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d07b      	beq.n	8005566 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800546e:	2380      	movs	r3, #128	@ 0x80
 8005470:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005472:	2318      	movs	r3, #24
 8005474:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800547e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d045      	beq.n	8005512 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <osThreadNew+0x48>
        name = attr->name;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <osThreadNew+0x6e>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b38      	cmp	r3, #56	@ 0x38
 80054ac:	d805      	bhi.n	80054ba <osThreadNew+0x6e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <osThreadNew+0x72>
        return (NULL);
 80054ba:	2300      	movs	r3, #0
 80054bc:	e054      	b.n	8005568 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <osThreadNew+0xa8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b5b      	cmp	r3, #91	@ 0x5b
 80054dc:	d90a      	bls.n	80054f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d006      	beq.n	80054f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osThreadNew+0xa8>
        mem = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e010      	b.n	8005516 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10c      	bne.n	8005516 <osThreadNew+0xca>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d108      	bne.n	8005516 <osThreadNew+0xca>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <osThreadNew+0xca>
          mem = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	e001      	b.n	8005516 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d110      	bne.n	800553e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005524:	9202      	str	r2, [sp, #8]
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fe1a 	bl	800616c <xTaskCreateStatic>
 8005538:	4603      	mov	r3, r0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e013      	b.n	8005566 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	b29a      	uxth	r2, r3
 8005548:	f107 0310 	add.w	r3, r7, #16
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fe68 	bl	800622c <xTaskCreate>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <osThreadNew+0x11a>
            hTask = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005566:	693b      	ldr	r3, [r7, #16]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3728      	adds	r7, #40	@ 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005578:	f3ef 8305 	mrs	r3, IPSR
 800557c:	60bb      	str	r3, [r7, #8]
  return(result);
 800557e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <osDelay+0x1c>
    stat = osErrorISR;
 8005584:	f06f 0305 	mvn.w	r3, #5
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e007      	b.n	800559c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ff8e 	bl	80064b8 <vTaskDelay>
    }
  }

  return (stat);
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a07      	ldr	r2, [pc, #28]	@ (80055d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80055b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a06      	ldr	r2, [pc, #24]	@ (80055d8 <vApplicationGetIdleTaskMemory+0x30>)
 80055be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2280      	movs	r2, #128	@ 0x80
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000630 	.word	0x20000630
 80055d8:	2000068c 	.word	0x2000068c

080055dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a07      	ldr	r2, [pc, #28]	@ (8005608 <vApplicationGetTimerTaskMemory+0x2c>)
 80055ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a06      	ldr	r2, [pc, #24]	@ (800560c <vApplicationGetTimerTaskMemory+0x30>)
 80055f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	2000088c 	.word	0x2000088c
 800560c:	200008e8 	.word	0x200008e8

08005610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f103 0208 	add.w	r2, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f103 0208 	add.w	r2, r3, #8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 0208 	add.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c8:	d103      	bne.n	80056d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e00c      	b.n	80056ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3308      	adds	r3, #8
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e002      	b.n	80056e0 <vListInsert+0x2e>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d2f6      	bcs.n	80056da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6892      	ldr	r2, [r2, #8]
 800573a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6852      	ldr	r2, [r2, #4]
 8005744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d103      	bne.n	8005758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1e5a      	subs	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057a4:	f002 f878 	bl	8007898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b0:	68f9      	ldr	r1, [r7, #12]
 80057b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	441a      	add	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d4:	3b01      	subs	r3, #1
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	441a      	add	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	22ff      	movs	r2, #255	@ 0xff
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	22ff      	movs	r2, #255	@ 0xff
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d114      	bne.n	8005824 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01a      	beq.n	8005838 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3310      	adds	r3, #16
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f91a 	bl	8006a40 <xTaskRemoveFromEventList>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d012      	beq.n	8005838 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <xQueueGenericReset+0xd0>)
 8005814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	e009      	b.n	8005838 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fef1 	bl	8005610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3324      	adds	r3, #36	@ 0x24
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff feec 	bl	8005610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005838:	f002 f860 	bl	80078fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800583c:	2301      	movs	r3, #1
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	@ 0x38
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <xQueueGenericCreateStatic+0x56>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <xQueueGenericCreateStatic+0x5a>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <xQueueGenericCreateStatic+0x5c>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	623b      	str	r3, [r7, #32]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <xQueueGenericCreateStatic+0x84>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <xQueueGenericCreateStatic+0x88>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <xQueueGenericCreateStatic+0x8a>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	61fb      	str	r3, [r7, #28]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058f2:	2350      	movs	r3, #80	@ 0x50
 80058f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b50      	cmp	r3, #80	@ 0x50
 80058fa:	d00b      	beq.n	8005914 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	61bb      	str	r3, [r7, #24]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005914:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00d      	beq.n	800593c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005928:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f805 	bl	8005946 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3730      	adds	r7, #48	@ 0x30
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e002      	b.n	8005968 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005974:	2101      	movs	r1, #1
 8005976:	69b8      	ldr	r0, [r7, #24]
 8005978:	f7ff fefe 	bl	8005778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	@ 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <xQueueGenericSend+0x34>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <xQueueGenericSend+0x42>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueGenericSend+0x46>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueGenericSend+0x48>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <xQueueGenericSend+0x64>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSend+0x72>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <xQueueGenericSend+0x76>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <xQueueGenericSend+0x78>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <xQueueGenericSend+0x94>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	623b      	str	r3, [r7, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	e7fd      	b.n	8005a1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a20:	f001 f9ce 	bl	8006dc0 <xTaskGetSchedulerState>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <xQueueGenericSend+0xa4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <xQueueGenericSend+0xa8>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <xQueueGenericSend+0xaa>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <xQueueGenericSend+0xc6>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	61fb      	str	r3, [r7, #28]
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a52:	f001 ff21 	bl	8007898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <xQueueGenericSend+0xdc>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d129      	bne.n	8005abc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a6e:	f000 fa0f 	bl	8005e90 <prvCopyDataToQueue>
 8005a72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	3324      	adds	r3, #36	@ 0x24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 ffdd 	bl	8006a40 <xTaskRemoveFromEventList>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d013      	beq.n	8005ab4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	e00a      	b.n	8005ab4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005aa4:	4b39      	ldr	r3, [pc, #228]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ab4:	f001 ff22 	bl	80078fc <vPortExitCritical>
				return pdPASS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e063      	b.n	8005b84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ac2:	f001 ff1b 	bl	80078fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e05c      	b.n	8005b84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f817 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ade:	f001 ff0d 	bl	80078fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae2:	f000 fd87 	bl	80065f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae6:	f001 fed7 	bl	8007898 <vPortEnterCritical>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005af6:	d103      	bne.n	8005b00 <xQueueGenericSend+0x174>
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b06:	b25b      	sxtb	r3, r3
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSend+0x18a>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b16:	f001 fef1 	bl	80078fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b1a:	1d3a      	adds	r2, r7, #4
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f806 	bl	8006b34 <xTaskCheckForTimeOut>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d124      	bne.n	8005b78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b30:	f000 faa6 	bl	8006080 <prvIsQueueFull>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	3310      	adds	r3, #16
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ff2a 	bl	800699c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4a:	f000 fa31 	bl	8005fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b4e:	f000 fd5f 	bl	8006610 <xTaskResumeAll>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f47f af7c 	bne.w	8005a52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	e772      	b.n	8005a52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b6e:	f000 fa1f 	bl	8005fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b72:	f000 fd4d 	bl	8006610 <xTaskResumeAll>
 8005b76:	e76c      	b.n	8005a52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b7a:	f000 fa19 	bl	8005fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7e:	f000 fd47 	bl	8006610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3738      	adds	r7, #56	@ 0x38
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b090      	sub	sp, #64	@ 0x40
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSendFromISR+0x3e>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x42>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <xQueueGenericSendFromISR+0x44>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d103      	bne.n	8005bfe <xQueueGenericSendFromISR+0x6e>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <xQueueGenericSendFromISR+0x72>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueGenericSendFromISR+0x74>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c20:	f001 ff1a 	bl	8007a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c24:	f3ef 8211 	mrs	r2, BASEPRI
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61fa      	str	r2, [r7, #28]
 8005c3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d302      	bcc.n	8005c52 <xQueueGenericSendFromISR+0xc2>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d12f      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c68:	f000 f912 	bl	8005e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c74:	d112      	bne.n	8005c9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	3324      	adds	r3, #36	@ 0x24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fedc 	bl	8006a40 <xTaskRemoveFromEventList>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	b25a      	sxtb	r2, r3
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005cb0:	e001      	b.n	8005cb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3740      	adds	r7, #64	@ 0x40
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <xQueueReceive+0x32>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	623b      	str	r3, [r7, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x40>
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <xQueueReceive+0x44>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <xQueueReceive+0x46>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <xQueueReceive+0x62>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61fb      	str	r3, [r7, #28]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2e:	f001 f847 	bl	8006dc0 <xTaskGetSchedulerState>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <xQueueReceive+0x72>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <xQueueReceive+0x76>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueReceive+0x78>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xQueueReceive+0x94>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61bb      	str	r3, [r7, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d60:	f001 fd9a 	bl	8007898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01f      	beq.n	8005db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d74:	f000 f8f6 	bl	8005f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fe57 	bl	8006a40 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3c      	ldr	r3, [pc, #240]	@ (8005e8c <xQueueReceive+0x1c0>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da8:	f001 fda8 	bl	80078fc <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e069      	b.n	8005e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f001 fda1 	bl	80078fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e062      	b.n	8005e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fe9d 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f001 fd93 	bl	80078fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f000 fc0d 	bl	80065f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f001 fd5d 	bl	8007898 <vPortEnterCritical>
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dea:	d103      	bne.n	8005df4 <xQueueReceive+0x128>
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x13e>
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0a:	f001 fd77 	bl	80078fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fe8c 	bl	8006b34 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e24:	f000 f916 	bl	8006054 <prvIsQueueEmpty>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	3324      	adds	r3, #36	@ 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fdb0 	bl	800699c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 f8b7 	bl	8005fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f000 fbe5 	bl	8006610 <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d189      	bne.n	8005d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <xQueueReceive+0x1c0>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e780      	b.n	8005d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e60:	f000 f8a6 	bl	8005fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e64:	f000 fbd4 	bl	8006610 <xTaskResumeAll>
 8005e68:	e77a      	b.n	8005d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e6c:	f000 f8a0 	bl	8005fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e70:	f000 fbce 	bl	8006610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e76:	f000 f8ed 	bl	8006054 <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f43f af6f 	beq.w	8005d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3730      	adds	r7, #48	@ 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14d      	bne.n	8005f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ff9e 	bl	8006dfc <xTaskPriorityDisinherit>
 8005ec0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	e043      	b.n	8005f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d119      	bne.n	8005f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6858      	ldr	r0, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	f002 f840 	bl	8007f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d32b      	bcc.n	8005f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	e026      	b.n	8005f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68d8      	ldr	r0, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	f002 f826 	bl	8007f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d207      	bcs.n	8005f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	425b      	negs	r3, r3
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d105      	bne.n	8005f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d018      	beq.n	8005fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d303      	bcc.n	8005f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68d9      	ldr	r1, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6838      	ldr	r0, [r7, #0]
 8005fa4:	f001 ffdc 	bl	8007f60 <memcpy>
	}
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fb8:	f001 fc6e 	bl	8007898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc4:	e011      	b.n	8005fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3324      	adds	r3, #36	@ 0x24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fd34 	bl	8006a40 <xTaskRemoveFromEventList>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fde:	f000 fe0d 	bl	8006bfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dce9      	bgt.n	8005fc6 <prvUnlockQueue+0x16>
 8005ff2:	e000      	b.n	8005ff6 <prvUnlockQueue+0x46>
					break;
 8005ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	22ff      	movs	r2, #255	@ 0xff
 8005ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ffe:	f001 fc7d 	bl	80078fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006002:	f001 fc49 	bl	8007898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800600c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800600e:	e011      	b.n	8006034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d012      	beq.n	800603e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3310      	adds	r3, #16
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fd0f 	bl	8006a40 <xTaskRemoveFromEventList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006028:	f000 fde8 	bl	8006bfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	3b01      	subs	r3, #1
 8006030:	b2db      	uxtb	r3, r3
 8006032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006038:	2b00      	cmp	r3, #0
 800603a:	dce9      	bgt.n	8006010 <prvUnlockQueue+0x60>
 800603c:	e000      	b.n	8006040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800603e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	22ff      	movs	r2, #255	@ 0xff
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006048:	f001 fc58 	bl	80078fc <vPortExitCritical>
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800605c:	f001 fc1c 	bl	8007898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d102      	bne.n	800606e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e001      	b.n	8006072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006072:	f001 fc43 	bl	80078fc <vPortExitCritical>

	return xReturn;
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006088:	f001 fc06 	bl	8007898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	429a      	cmp	r2, r3
 8006096:	d102      	bne.n	800609e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e001      	b.n	80060a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060a2:	f001 fc2b 	bl	80078fc <vPortExitCritical>

	return xReturn;
 80060a6:	68fb      	ldr	r3, [r7, #12]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e014      	b.n	80060ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060c0:	4a0f      	ldr	r2, [pc, #60]	@ (8006100 <vQueueAddToRegistry+0x50>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060cc:	490c      	ldr	r1, [pc, #48]	@ (8006100 <vQueueAddToRegistry+0x50>)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006100 <vQueueAddToRegistry+0x50>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4413      	add	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060e2:	e006      	b.n	80060f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b07      	cmp	r3, #7
 80060ee:	d9e7      	bls.n	80060c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000ce8 	.word	0x20000ce8

08006104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006114:	f001 fbc0 	bl	8007898 <vPortEnterCritical>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800611e:	b25b      	sxtb	r3, r3
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006124:	d103      	bne.n	800612e <vQueueWaitForMessageRestricted+0x2a>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006134:	b25b      	sxtb	r3, r3
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800613a:	d103      	bne.n	8006144 <vQueueWaitForMessageRestricted+0x40>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006144:	f001 fbda 	bl	80078fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	3324      	adds	r3, #36	@ 0x24
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fc45 	bl	80069e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800615e:	6978      	ldr	r0, [r7, #20]
 8006160:	f7ff ff26 	bl	8005fb0 <prvUnlockQueue>
	}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	@ 0x38
 8006170:	af04      	add	r7, sp, #16
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800617a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	61fb      	str	r3, [r7, #28]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061b6:	235c      	movs	r3, #92	@ 0x5c
 80061b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80061be:	d00b      	beq.n	80061d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61bb      	str	r3, [r7, #24]
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01e      	beq.n	800621e <xTaskCreateStatic+0xb2>
 80061e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01b      	beq.n	800621e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061f8:	2300      	movs	r3, #0
 80061fa:	9303      	str	r3, [sp, #12]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	9302      	str	r3, [sp, #8]
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f850 	bl	80062b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006218:	f000 f8de 	bl	80063d8 <prvAddNewTaskToReadyList>
 800621c:	e001      	b.n	8006222 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006222:	697b      	ldr	r3, [r7, #20]
	}
 8006224:	4618      	mov	r0, r3
 8006226:	3728      	adds	r7, #40	@ 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	@ 0x30
 8006230:	af04      	add	r7, sp, #16
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4618      	mov	r0, r3
 8006242:	f001 fc4b 	bl	8007adc <pvPortMalloc>
 8006246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800624e:	205c      	movs	r0, #92	@ 0x5c
 8006250:	f001 fc44 	bl	8007adc <pvPortMalloc>
 8006254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	631a      	str	r2, [r3, #48]	@ 0x30
 8006262:	e005      	b.n	8006270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006264:	6978      	ldr	r0, [r7, #20]
 8006266:	f001 fd07 	bl	8007c78 <vPortFree>
 800626a:	e001      	b.n	8006270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d017      	beq.n	80062a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	2300      	movs	r3, #0
 8006282:	9303      	str	r3, [sp, #12]
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f80e 	bl	80062b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800629a:	69f8      	ldr	r0, [r7, #28]
 800629c:	f000 f89c 	bl	80063d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e002      	b.n	80062ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062ac:	69bb      	ldr	r3, [r7, #24]
	}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	461a      	mov	r2, r3
 80062ce:	21a5      	movs	r1, #165	@ 0xa5
 80062d0:	f001 fe12 	bl	8007ef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062de:	3b01      	subs	r3, #1
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	617b      	str	r3, [r7, #20]
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01f      	beq.n	8006356 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e012      	b.n	8006342 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	7819      	ldrb	r1, [r3, #0]
 8006324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	3334      	adds	r3, #52	@ 0x34
 800632c:	460a      	mov	r2, r1
 800632e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d9e9      	bls.n	800631c <prvInitialiseNewTask+0x66>
 8006348:	e000      	b.n	800634c <prvInitialiseNewTask+0x96>
			{
				break;
 800634a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006354:	e003      	b.n	800635e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	2b37      	cmp	r3, #55	@ 0x37
 8006362:	d901      	bls.n	8006368 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006364:	2337      	movs	r3, #55	@ 0x37
 8006366:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800636c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006372:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	2200      	movs	r2, #0
 8006378:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	3304      	adds	r3, #4
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff f966 	bl	8005650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	3318      	adds	r3, #24
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff f961 	bl	8005650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	2200      	movs	r2, #0
 80063a8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	68f9      	ldr	r1, [r7, #12]
 80063b6:	69b8      	ldr	r0, [r7, #24]
 80063b8:	f001 f93e 	bl	8007638 <pxPortInitialiseStack>
 80063bc:	4602      	mov	r2, r0
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ce:	bf00      	nop
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063e0:	f001 fa5a 	bl	8007898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063e4:	4b2d      	ldr	r3, [pc, #180]	@ (800649c <prvAddNewTaskToReadyList+0xc4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a2c      	ldr	r2, [pc, #176]	@ (800649c <prvAddNewTaskToReadyList+0xc4>)
 80063ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ee:	4b2c      	ldr	r3, [pc, #176]	@ (80064a0 <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063f6:	4a2a      	ldr	r2, [pc, #168]	@ (80064a0 <prvAddNewTaskToReadyList+0xc8>)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063fc:	4b27      	ldr	r3, [pc, #156]	@ (800649c <prvAddNewTaskToReadyList+0xc4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d110      	bne.n	8006426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006404:	f000 fc1e 	bl	8006c44 <prvInitialiseTaskLists>
 8006408:	e00d      	b.n	8006426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800640a:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <prvAddNewTaskToReadyList+0xcc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006412:	4b23      	ldr	r3, [pc, #140]	@ (80064a0 <prvAddNewTaskToReadyList+0xc8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	429a      	cmp	r2, r3
 800641e:	d802      	bhi.n	8006426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006420:	4a1f      	ldr	r2, [pc, #124]	@ (80064a0 <prvAddNewTaskToReadyList+0xc8>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006426:	4b20      	ldr	r3, [pc, #128]	@ (80064a8 <prvAddNewTaskToReadyList+0xd0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <prvAddNewTaskToReadyList+0xd0>)
 800642e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006430:	4b1d      	ldr	r3, [pc, #116]	@ (80064a8 <prvAddNewTaskToReadyList+0xd0>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <prvAddNewTaskToReadyList+0xd4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d903      	bls.n	800644c <prvAddNewTaskToReadyList+0x74>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	4a18      	ldr	r2, [pc, #96]	@ (80064ac <prvAddNewTaskToReadyList+0xd4>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4a15      	ldr	r2, [pc, #84]	@ (80064b0 <prvAddNewTaskToReadyList+0xd8>)
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f7ff f901 	bl	800566a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006468:	f001 fa48 	bl	80078fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <prvAddNewTaskToReadyList+0xcc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006474:	4b0a      	ldr	r3, [pc, #40]	@ (80064a0 <prvAddNewTaskToReadyList+0xc8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	429a      	cmp	r2, r3
 8006480:	d207      	bcs.n	8006492 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006482:	4b0c      	ldr	r3, [pc, #48]	@ (80064b4 <prvAddNewTaskToReadyList+0xdc>)
 8006484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200011fc 	.word	0x200011fc
 80064a0:	20000d28 	.word	0x20000d28
 80064a4:	20001208 	.word	0x20001208
 80064a8:	20001218 	.word	0x20001218
 80064ac:	20001204 	.word	0x20001204
 80064b0:	20000d2c 	.word	0x20000d2c
 80064b4:	e000ed04 	.word	0xe000ed04

080064b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ca:	4b14      	ldr	r3, [pc, #80]	@ (800651c <vTaskDelay+0x64>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <vTaskDelay+0x32>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064ea:	f000 f883 	bl	80065f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcf3 	bl	8006edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064f6:	f000 f88b 	bl	8006610 <xTaskResumeAll>
 80064fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006502:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <vTaskDelay+0x68>)
 8006504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20001224 	.word	0x20001224
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	@ 0x28
 8006528:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006532:	463a      	mov	r2, r7
 8006534:	1d39      	adds	r1, r7, #4
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff f834 	bl	80055a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	9202      	str	r2, [sp, #8]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	2300      	movs	r3, #0
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	460a      	mov	r2, r1
 8006552:	4922      	ldr	r1, [pc, #136]	@ (80065dc <vTaskStartScheduler+0xb8>)
 8006554:	4822      	ldr	r0, [pc, #136]	@ (80065e0 <vTaskStartScheduler+0xbc>)
 8006556:	f7ff fe09 	bl	800616c <xTaskCreateStatic>
 800655a:	4603      	mov	r3, r0
 800655c:	4a21      	ldr	r2, [pc, #132]	@ (80065e4 <vTaskStartScheduler+0xc0>)
 800655e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006560:	4b20      	ldr	r3, [pc, #128]	@ (80065e4 <vTaskStartScheduler+0xc0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e001      	b.n	8006572 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d102      	bne.n	800657e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006578:	f000 fd04 	bl	8006f84 <xTimerCreateTimerTask>
 800657c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d116      	bne.n	80065b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	613b      	str	r3, [r7, #16]
}
 8006596:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006598:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <vTaskStartScheduler+0xc4>)
 800659a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800659e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065a0:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <vTaskStartScheduler+0xc8>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065a6:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <vTaskStartScheduler+0xcc>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065ac:	f001 f8d0 	bl	8007750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065b0:	e00f      	b.n	80065d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065b8:	d10b      	bne.n	80065d2 <vTaskStartScheduler+0xae>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60fb      	str	r3, [r7, #12]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <vTaskStartScheduler+0xaa>
}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	08008874 	.word	0x08008874
 80065e0:	08006c15 	.word	0x08006c15
 80065e4:	20001220 	.word	0x20001220
 80065e8:	2000121c 	.word	0x2000121c
 80065ec:	20001208 	.word	0x20001208
 80065f0:	20001200 	.word	0x20001200

080065f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065f8:	4b04      	ldr	r3, [pc, #16]	@ (800660c <vTaskSuspendAll+0x18>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	4a03      	ldr	r2, [pc, #12]	@ (800660c <vTaskSuspendAll+0x18>)
 8006600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006602:	bf00      	nop
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20001224 	.word	0x20001224

08006610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800661e:	4b42      	ldr	r3, [pc, #264]	@ (8006728 <xTaskResumeAll+0x118>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xTaskResumeAll+0x2e>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	603b      	str	r3, [r7, #0]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800663e:	f001 f92b 	bl	8007898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006642:	4b39      	ldr	r3, [pc, #228]	@ (8006728 <xTaskResumeAll+0x118>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	4a37      	ldr	r2, [pc, #220]	@ (8006728 <xTaskResumeAll+0x118>)
 800664a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664c:	4b36      	ldr	r3, [pc, #216]	@ (8006728 <xTaskResumeAll+0x118>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d162      	bne.n	800671a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006654:	4b35      	ldr	r3, [pc, #212]	@ (800672c <xTaskResumeAll+0x11c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05e      	beq.n	800671a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665c:	e02f      	b.n	80066be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665e:	4b34      	ldr	r3, [pc, #208]	@ (8006730 <xTaskResumeAll+0x120>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3318      	adds	r3, #24
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff f85a 	bl	8005724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3304      	adds	r3, #4
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff f855 	bl	8005724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667e:	4b2d      	ldr	r3, [pc, #180]	@ (8006734 <xTaskResumeAll+0x124>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d903      	bls.n	800668e <xTaskResumeAll+0x7e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	4a2a      	ldr	r2, [pc, #168]	@ (8006734 <xTaskResumeAll+0x124>)
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4a27      	ldr	r2, [pc, #156]	@ (8006738 <xTaskResumeAll+0x128>)
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7fe ffe0 	bl	800566a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ae:	4b23      	ldr	r3, [pc, #140]	@ (800673c <xTaskResumeAll+0x12c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d302      	bcc.n	80066be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80066b8:	4b21      	ldr	r3, [pc, #132]	@ (8006740 <xTaskResumeAll+0x130>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066be:	4b1c      	ldr	r3, [pc, #112]	@ (8006730 <xTaskResumeAll+0x120>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1cb      	bne.n	800665e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066cc:	f000 fb58 	bl	8006d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <xTaskResumeAll+0x134>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066dc:	f000 f846 	bl	800676c <xTaskIncrementTick>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80066e6:	4b16      	ldr	r3, [pc, #88]	@ (8006740 <xTaskResumeAll+0x130>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f1      	bne.n	80066dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80066f8:	4b12      	ldr	r3, [pc, #72]	@ (8006744 <xTaskResumeAll+0x134>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066fe:	4b10      	ldr	r3, [pc, #64]	@ (8006740 <xTaskResumeAll+0x130>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800670a:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <xTaskResumeAll+0x138>)
 800670c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800671a:	f001 f8ef 	bl	80078fc <vPortExitCritical>

	return xAlreadyYielded;
 800671e:	68bb      	ldr	r3, [r7, #8]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20001224 	.word	0x20001224
 800672c:	200011fc 	.word	0x200011fc
 8006730:	200011bc 	.word	0x200011bc
 8006734:	20001204 	.word	0x20001204
 8006738:	20000d2c 	.word	0x20000d2c
 800673c:	20000d28 	.word	0x20000d28
 8006740:	20001210 	.word	0x20001210
 8006744:	2000120c 	.word	0x2000120c
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006752:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <xTaskGetTickCount+0x1c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006758:	687b      	ldr	r3, [r7, #4]
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20001200 	.word	0x20001200

0800676c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006776:	4b4f      	ldr	r3, [pc, #316]	@ (80068b4 <xTaskIncrementTick+0x148>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 8090 	bne.w	80068a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006780:	4b4d      	ldr	r3, [pc, #308]	@ (80068b8 <xTaskIncrementTick+0x14c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006788:	4a4b      	ldr	r2, [pc, #300]	@ (80068b8 <xTaskIncrementTick+0x14c>)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d121      	bne.n	80067d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006794:	4b49      	ldr	r3, [pc, #292]	@ (80068bc <xTaskIncrementTick+0x150>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	603b      	str	r3, [r7, #0]
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	e7fd      	b.n	80067b2 <xTaskIncrementTick+0x46>
 80067b6:	4b41      	ldr	r3, [pc, #260]	@ (80068bc <xTaskIncrementTick+0x150>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	4b40      	ldr	r3, [pc, #256]	@ (80068c0 <xTaskIncrementTick+0x154>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a3e      	ldr	r2, [pc, #248]	@ (80068bc <xTaskIncrementTick+0x150>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4a3e      	ldr	r2, [pc, #248]	@ (80068c0 <xTaskIncrementTick+0x154>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4b3e      	ldr	r3, [pc, #248]	@ (80068c4 <xTaskIncrementTick+0x158>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3301      	adds	r3, #1
 80067d0:	4a3c      	ldr	r2, [pc, #240]	@ (80068c4 <xTaskIncrementTick+0x158>)
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	f000 fad4 	bl	8006d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067d8:	4b3b      	ldr	r3, [pc, #236]	@ (80068c8 <xTaskIncrementTick+0x15c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d349      	bcc.n	8006876 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e2:	4b36      	ldr	r3, [pc, #216]	@ (80068bc <xTaskIncrementTick+0x150>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ec:	4b36      	ldr	r3, [pc, #216]	@ (80068c8 <xTaskIncrementTick+0x15c>)
 80067ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067f2:	601a      	str	r2, [r3, #0]
					break;
 80067f4:	e03f      	b.n	8006876 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f6:	4b31      	ldr	r3, [pc, #196]	@ (80068bc <xTaskIncrementTick+0x150>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d203      	bcs.n	8006816 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800680e:	4a2e      	ldr	r2, [pc, #184]	@ (80068c8 <xTaskIncrementTick+0x15c>)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006814:	e02f      	b.n	8006876 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3304      	adds	r3, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe ff82 	bl	8005724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3318      	adds	r3, #24
 800682c:	4618      	mov	r0, r3
 800682e:	f7fe ff79 	bl	8005724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006836:	4b25      	ldr	r3, [pc, #148]	@ (80068cc <xTaskIncrementTick+0x160>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d903      	bls.n	8006846 <xTaskIncrementTick+0xda>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	4a22      	ldr	r2, [pc, #136]	@ (80068cc <xTaskIncrementTick+0x160>)
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <xTaskIncrementTick+0x164>)
 8006854:	441a      	add	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3304      	adds	r3, #4
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7fe ff04 	bl	800566a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	4b1b      	ldr	r3, [pc, #108]	@ (80068d4 <xTaskIncrementTick+0x168>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	429a      	cmp	r2, r3
 800686e:	d3b8      	bcc.n	80067e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006874:	e7b5      	b.n	80067e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006876:	4b17      	ldr	r3, [pc, #92]	@ (80068d4 <xTaskIncrementTick+0x168>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687c:	4914      	ldr	r1, [pc, #80]	@ (80068d0 <xTaskIncrementTick+0x164>)
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d901      	bls.n	8006892 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006892:	4b11      	ldr	r3, [pc, #68]	@ (80068d8 <xTaskIncrementTick+0x16c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800689a:	2301      	movs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e004      	b.n	80068aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068a0:	4b0e      	ldr	r3, [pc, #56]	@ (80068dc <xTaskIncrementTick+0x170>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	4a0d      	ldr	r2, [pc, #52]	@ (80068dc <xTaskIncrementTick+0x170>)
 80068a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068aa:	697b      	ldr	r3, [r7, #20]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20001224 	.word	0x20001224
 80068b8:	20001200 	.word	0x20001200
 80068bc:	200011b4 	.word	0x200011b4
 80068c0:	200011b8 	.word	0x200011b8
 80068c4:	20001214 	.word	0x20001214
 80068c8:	2000121c 	.word	0x2000121c
 80068cc:	20001204 	.word	0x20001204
 80068d0:	20000d2c 	.word	0x20000d2c
 80068d4:	20000d28 	.word	0x20000d28
 80068d8:	20001210 	.word	0x20001210
 80068dc:	2000120c 	.word	0x2000120c

080068e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068e6:	4b28      	ldr	r3, [pc, #160]	@ (8006988 <vTaskSwitchContext+0xa8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ee:	4b27      	ldr	r3, [pc, #156]	@ (800698c <vTaskSwitchContext+0xac>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f4:	e042      	b.n	800697c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80068f6:	4b25      	ldr	r3, [pc, #148]	@ (800698c <vTaskSwitchContext+0xac>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fc:	4b24      	ldr	r3, [pc, #144]	@ (8006990 <vTaskSwitchContext+0xb0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e011      	b.n	8006928 <vTaskSwitchContext+0x48>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10b      	bne.n	8006922 <vTaskSwitchContext+0x42>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
 800691e:	bf00      	nop
 8006920:	e7fd      	b.n	800691e <vTaskSwitchContext+0x3e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3b01      	subs	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	491a      	ldr	r1, [pc, #104]	@ (8006994 <vTaskSwitchContext+0xb4>)
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0e3      	beq.n	8006904 <vTaskSwitchContext+0x24>
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a13      	ldr	r2, [pc, #76]	@ (8006994 <vTaskSwitchContext+0xb4>)
 8006948:	4413      	add	r3, r2
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3308      	adds	r3, #8
 800695e:	429a      	cmp	r2, r3
 8006960:	d104      	bne.n	800696c <vTaskSwitchContext+0x8c>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	605a      	str	r2, [r3, #4]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4a09      	ldr	r2, [pc, #36]	@ (8006998 <vTaskSwitchContext+0xb8>)
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	4a06      	ldr	r2, [pc, #24]	@ (8006990 <vTaskSwitchContext+0xb0>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20001224 	.word	0x20001224
 800698c:	20001210 	.word	0x20001210
 8006990:	20001204 	.word	0x20001204
 8006994:	20000d2c 	.word	0x20000d2c
 8006998:	20000d28 	.word	0x20000d28

0800699c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069c4:	4b07      	ldr	r3, [pc, #28]	@ (80069e4 <vTaskPlaceOnEventList+0x48>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3318      	adds	r3, #24
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fe fe70 	bl	80056b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069d2:	2101      	movs	r1, #1
 80069d4:	6838      	ldr	r0, [r7, #0]
 80069d6:	f000 fa81 	bl	8006edc <prvAddCurrentTaskToDelayedList>
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000d28 	.word	0x20000d28

080069e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	617b      	str	r3, [r7, #20]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3318      	adds	r3, #24
 8006a18:	4619      	mov	r1, r3
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7fe fe25 	bl	800566a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	f000 fa54 	bl	8006edc <prvAddCurrentTaskToDelayedList>
	}
 8006a34:	bf00      	nop
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000d28 	.word	0x20000d28

08006a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60fb      	str	r3, [r7, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3318      	adds	r3, #24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fe56 	bl	8005724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a78:	4b1d      	ldr	r3, [pc, #116]	@ (8006af0 <xTaskRemoveFromEventList+0xb0>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11d      	bne.n	8006abc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fe4d 	bl	8005724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8e:	4b19      	ldr	r3, [pc, #100]	@ (8006af4 <xTaskRemoveFromEventList+0xb4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d903      	bls.n	8006a9e <xTaskRemoveFromEventList+0x5e>
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	4a16      	ldr	r2, [pc, #88]	@ (8006af4 <xTaskRemoveFromEventList+0xb4>)
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4a13      	ldr	r2, [pc, #76]	@ (8006af8 <xTaskRemoveFromEventList+0xb8>)
 8006aac:	441a      	add	r2, r3
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7fe fdd8 	bl	800566a <vListInsertEnd>
 8006aba:	e005      	b.n	8006ac8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	3318      	adds	r3, #24
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	480e      	ldr	r0, [pc, #56]	@ (8006afc <xTaskRemoveFromEventList+0xbc>)
 8006ac4:	f7fe fdd1 	bl	800566a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006acc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <xTaskRemoveFromEventList+0xc0>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d905      	bls.n	8006ae2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ada:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <xTaskRemoveFromEventList+0xc4>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e001      	b.n	8006ae6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ae6:	697b      	ldr	r3, [r7, #20]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20001224 	.word	0x20001224
 8006af4:	20001204 	.word	0x20001204
 8006af8:	20000d2c 	.word	0x20000d2c
 8006afc:	200011bc 	.word	0x200011bc
 8006b00:	20000d28 	.word	0x20000d28
 8006b04:	20001210 	.word	0x20001210

08006b08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b10:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <vTaskInternalSetTimeOutState+0x24>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b18:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <vTaskInternalSetTimeOutState+0x28>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	605a      	str	r2, [r3, #4]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20001214 	.word	0x20001214
 8006b30:	20001200 	.word	0x20001200

08006b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	613b      	str	r3, [r7, #16]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60fb      	str	r3, [r7, #12]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b7a:	f000 fe8d 	bl	8007898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf4 <xTaskCheckForTimeOut+0xc0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b96:	d102      	bne.n	8006b9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	e023      	b.n	8006be6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b15      	ldr	r3, [pc, #84]	@ (8006bf8 <xTaskCheckForTimeOut+0xc4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d007      	beq.n	8006bba <xTaskCheckForTimeOut+0x86>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e015      	b.n	8006be6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d20b      	bcs.n	8006bdc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff99 	bl	8006b08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	e004      	b.n	8006be6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006be2:	2301      	movs	r3, #1
 8006be4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006be6:	f000 fe89 	bl	80078fc <vPortExitCritical>

	return xReturn;
 8006bea:	69fb      	ldr	r3, [r7, #28]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20001200 	.word	0x20001200
 8006bf8:	20001214 	.word	0x20001214

08006bfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c00:	4b03      	ldr	r3, [pc, #12]	@ (8006c10 <vTaskMissedYield+0x14>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20001210 	.word	0x20001210

08006c14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c1c:	f000 f852 	bl	8006cc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c20:	4b06      	ldr	r3, [pc, #24]	@ (8006c3c <prvIdleTask+0x28>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d9f9      	bls.n	8006c1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c28:	4b05      	ldr	r3, [pc, #20]	@ (8006c40 <prvIdleTask+0x2c>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c38:	e7f0      	b.n	8006c1c <prvIdleTask+0x8>
 8006c3a:	bf00      	nop
 8006c3c:	20000d2c 	.word	0x20000d2c
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	e00c      	b.n	8006c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4a12      	ldr	r2, [pc, #72]	@ (8006ca4 <prvInitialiseTaskLists+0x60>)
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fcd6 	bl	8005610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b37      	cmp	r3, #55	@ 0x37
 8006c6e:	d9ef      	bls.n	8006c50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c70:	480d      	ldr	r0, [pc, #52]	@ (8006ca8 <prvInitialiseTaskLists+0x64>)
 8006c72:	f7fe fccd 	bl	8005610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c76:	480d      	ldr	r0, [pc, #52]	@ (8006cac <prvInitialiseTaskLists+0x68>)
 8006c78:	f7fe fcca 	bl	8005610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c7c:	480c      	ldr	r0, [pc, #48]	@ (8006cb0 <prvInitialiseTaskLists+0x6c>)
 8006c7e:	f7fe fcc7 	bl	8005610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c82:	480c      	ldr	r0, [pc, #48]	@ (8006cb4 <prvInitialiseTaskLists+0x70>)
 8006c84:	f7fe fcc4 	bl	8005610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c88:	480b      	ldr	r0, [pc, #44]	@ (8006cb8 <prvInitialiseTaskLists+0x74>)
 8006c8a:	f7fe fcc1 	bl	8005610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <prvInitialiseTaskLists+0x78>)
 8006c90:	4a05      	ldr	r2, [pc, #20]	@ (8006ca8 <prvInitialiseTaskLists+0x64>)
 8006c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c94:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <prvInitialiseTaskLists+0x7c>)
 8006c96:	4a05      	ldr	r2, [pc, #20]	@ (8006cac <prvInitialiseTaskLists+0x68>)
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000d2c 	.word	0x20000d2c
 8006ca8:	2000118c 	.word	0x2000118c
 8006cac:	200011a0 	.word	0x200011a0
 8006cb0:	200011bc 	.word	0x200011bc
 8006cb4:	200011d0 	.word	0x200011d0
 8006cb8:	200011e8 	.word	0x200011e8
 8006cbc:	200011b4 	.word	0x200011b4
 8006cc0:	200011b8 	.word	0x200011b8

08006cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cca:	e019      	b.n	8006d00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ccc:	f000 fde4 	bl	8007898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd0:	4b10      	ldr	r3, [pc, #64]	@ (8006d14 <prvCheckTasksWaitingTermination+0x50>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe fd21 	bl	8005724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <prvCheckTasksWaitingTermination+0x54>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8006d18 <prvCheckTasksWaitingTermination+0x54>)
 8006cea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <prvCheckTasksWaitingTermination+0x58>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8006d1c <prvCheckTasksWaitingTermination+0x58>)
 8006cf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cf6:	f000 fe01 	bl	80078fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f810 	bl	8006d20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d00:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <prvCheckTasksWaitingTermination+0x58>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e1      	bne.n	8006ccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200011d0 	.word	0x200011d0
 8006d18:	200011fc 	.word	0x200011fc
 8006d1c:	200011e4 	.word	0x200011e4

08006d20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d108      	bne.n	8006d44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 ff9e 	bl	8007c78 <vPortFree>
				vPortFree( pxTCB );
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 ff9b 	bl	8007c78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d42:	e019      	b.n	8006d78 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d103      	bne.n	8006d56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 ff92 	bl	8007c78 <vPortFree>
	}
 8006d54:	e010      	b.n	8006d78 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d00b      	beq.n	8006d78 <prvDeleteTCB+0x58>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <prvDeleteTCB+0x54>
	}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d86:	4b0c      	ldr	r3, [pc, #48]	@ (8006db8 <prvResetNextTaskUnblockTime+0x38>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d90:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <prvResetNextTaskUnblockTime+0x3c>)
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d98:	e008      	b.n	8006dac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <prvResetNextTaskUnblockTime+0x38>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a04      	ldr	r2, [pc, #16]	@ (8006dbc <prvResetNextTaskUnblockTime+0x3c>)
 8006daa:	6013      	str	r3, [r2, #0]
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	200011b4 	.word	0x200011b4
 8006dbc:	2000121c 	.word	0x2000121c

08006dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <xTaskGetSchedulerState+0x34>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	e008      	b.n	8006de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd4:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <xTaskGetSchedulerState+0x38>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	e001      	b.n	8006de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006de6:	687b      	ldr	r3, [r7, #4]
	}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	20001208 	.word	0x20001208
 8006df8:	20001224 	.word	0x20001224

08006dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d058      	beq.n	8006ec4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e12:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed0 <xTaskPriorityDisinherit+0xd4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d00b      	beq.n	8006e34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10b      	bne.n	8006e54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60bb      	str	r3, [r7, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e58:	1e5a      	subs	r2, r3, #1
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d02c      	beq.n	8006ec4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d128      	bne.n	8006ec4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fc54 	bl	8005724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <xTaskPriorityDisinherit+0xd8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d903      	bls.n	8006ea4 <xTaskPriorityDisinherit+0xa8>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed4 <xTaskPriorityDisinherit+0xd8>)
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4a09      	ldr	r2, [pc, #36]	@ (8006ed8 <xTaskPriorityDisinherit+0xdc>)
 8006eb2:	441a      	add	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7fe fbd5 	bl	800566a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ec4:	697b      	ldr	r3, [r7, #20]
	}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000d28 	.word	0x20000d28
 8006ed4:	20001204 	.word	0x20001204
 8006ed8:	20000d2c 	.word	0x20000d2c

08006edc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ee6:	4b21      	ldr	r3, [pc, #132]	@ (8006f6c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eec:	4b20      	ldr	r3, [pc, #128]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fc16 	bl	8005724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006efe:	d10a      	bne.n	8006f16 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f06:	4b1a      	ldr	r3, [pc, #104]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4819      	ldr	r0, [pc, #100]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f10:	f7fe fbab 	bl	800566a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f14:	e026      	b.n	8006f64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f1e:	4b14      	ldr	r3, [pc, #80]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d209      	bcs.n	8006f42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2e:	4b12      	ldr	r3, [pc, #72]	@ (8006f78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7fe fbb9 	bl	80056b2 <vListInsert>
}
 8006f40:	e010      	b.n	8006f64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f42:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b0a      	ldr	r3, [pc, #40]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fe fbaf 	bl	80056b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f54:	4b0a      	ldr	r3, [pc, #40]	@ (8006f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d202      	bcs.n	8006f64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f5e:	4a08      	ldr	r2, [pc, #32]	@ (8006f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6013      	str	r3, [r2, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20001200 	.word	0x20001200
 8006f70:	20000d28 	.word	0x20000d28
 8006f74:	200011e8 	.word	0x200011e8
 8006f78:	200011b8 	.word	0x200011b8
 8006f7c:	200011b4 	.word	0x200011b4
 8006f80:	2000121c 	.word	0x2000121c

08006f84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	@ 0x28
 8006f88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f8e:	f000 fb13 	bl	80075b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f92:	4b1d      	ldr	r3, [pc, #116]	@ (8007008 <xTimerCreateTimerTask+0x84>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d021      	beq.n	8006fde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fa2:	1d3a      	adds	r2, r7, #4
 8006fa4:	f107 0108 	add.w	r1, r7, #8
 8006fa8:	f107 030c 	add.w	r3, r7, #12
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fb15 	bl	80055dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	9202      	str	r2, [sp, #8]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	4911      	ldr	r1, [pc, #68]	@ (800700c <xTimerCreateTimerTask+0x88>)
 8006fc6:	4812      	ldr	r0, [pc, #72]	@ (8007010 <xTimerCreateTimerTask+0x8c>)
 8006fc8:	f7ff f8d0 	bl	800616c <xTaskCreateStatic>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4a11      	ldr	r2, [pc, #68]	@ (8007014 <xTimerCreateTimerTask+0x90>)
 8006fd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fd2:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <xTimerCreateTimerTask+0x90>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10b      	bne.n	8006ffc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	613b      	str	r3, [r7, #16]
}
 8006ff6:	bf00      	nop
 8006ff8:	bf00      	nop
 8006ffa:	e7fd      	b.n	8006ff8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ffc:	697b      	ldr	r3, [r7, #20]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20001258 	.word	0x20001258
 800700c:	0800887c 	.word	0x0800887c
 8007010:	08007151 	.word	0x08007151
 8007014:	2000125c 	.word	0x2000125c

08007018 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	@ 0x28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <xTimerGenericCommand+0x30>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	623b      	str	r3, [r7, #32]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007048:	4b19      	ldr	r3, [pc, #100]	@ (80070b0 <xTimerGenericCommand+0x98>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02a      	beq.n	80070a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b05      	cmp	r3, #5
 8007060:	dc18      	bgt.n	8007094 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007062:	f7ff fead 	bl	8006dc0 <xTaskGetSchedulerState>
 8007066:	4603      	mov	r3, r0
 8007068:	2b02      	cmp	r3, #2
 800706a:	d109      	bne.n	8007080 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800706c:	4b10      	ldr	r3, [pc, #64]	@ (80070b0 <xTimerGenericCommand+0x98>)
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	f107 0110 	add.w	r1, r7, #16
 8007074:	2300      	movs	r3, #0
 8007076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007078:	f7fe fc88 	bl	800598c <xQueueGenericSend>
 800707c:	6278      	str	r0, [r7, #36]	@ 0x24
 800707e:	e012      	b.n	80070a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007080:	4b0b      	ldr	r3, [pc, #44]	@ (80070b0 <xTimerGenericCommand+0x98>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	f107 0110 	add.w	r1, r7, #16
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	f7fe fc7e 	bl	800598c <xQueueGenericSend>
 8007090:	6278      	str	r0, [r7, #36]	@ 0x24
 8007092:	e008      	b.n	80070a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007094:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <xTimerGenericCommand+0x98>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	f107 0110 	add.w	r1, r7, #16
 800709c:	2300      	movs	r3, #0
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	f7fe fd76 	bl	8005b90 <xQueueGenericSendFromISR>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3728      	adds	r7, #40	@ 0x28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20001258 	.word	0x20001258

080070b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070be:	4b23      	ldr	r3, [pc, #140]	@ (800714c <prvProcessExpiredTimer+0x98>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe fb29 	bl	8005724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d023      	beq.n	8007128 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	18d1      	adds	r1, r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	f000 f8d5 	bl	800729c <prvInsertTimerInActiveList>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d020      	beq.n	800713a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	2100      	movs	r1, #0
 8007102:	6978      	ldr	r0, [r7, #20]
 8007104:	f7ff ff88 	bl	8007018 <xTimerGenericCommand>
 8007108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d114      	bne.n	800713a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	60fb      	str	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	b2da      	uxtb	r2, r3
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	6978      	ldr	r0, [r7, #20]
 8007140:	4798      	blx	r3
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20001250 	.word	0x20001250

08007150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007158:	f107 0308 	add.w	r3, r7, #8
 800715c:	4618      	mov	r0, r3
 800715e:	f000 f859 	bl	8007214 <prvGetNextExpireTime>
 8007162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4619      	mov	r1, r3
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f805 	bl	8007178 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800716e:	f000 f8d7 	bl	8007320 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007172:	bf00      	nop
 8007174:	e7f0      	b.n	8007158 <prvTimerTask+0x8>
	...

08007178 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007182:	f7ff fa37 	bl	80065f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007186:	f107 0308 	add.w	r3, r7, #8
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f866 	bl	800725c <prvSampleTimeNow>
 8007190:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d130      	bne.n	80071fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <prvProcessTimerOrBlockTask+0x3c>
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d806      	bhi.n	80071b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071a6:	f7ff fa33 	bl	8006610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ff81 	bl	80070b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071b2:	e024      	b.n	80071fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071ba:	4b13      	ldr	r3, [pc, #76]	@ (8007208 <prvProcessTimerOrBlockTask+0x90>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <prvProcessTimerOrBlockTask+0x50>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <prvProcessTimerOrBlockTask+0x52>
 80071c8:	2300      	movs	r3, #0
 80071ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071cc:	4b0f      	ldr	r3, [pc, #60]	@ (800720c <prvProcessTimerOrBlockTask+0x94>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4619      	mov	r1, r3
 80071da:	f7fe ff93 	bl	8006104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071de:	f7ff fa17 	bl	8006610 <xTaskResumeAll>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071e8:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <prvProcessTimerOrBlockTask+0x98>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
}
 80071f8:	e001      	b.n	80071fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071fa:	f7ff fa09 	bl	8006610 <xTaskResumeAll>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20001254 	.word	0x20001254
 800720c:	20001258 	.word	0x20001258
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800721c:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <prvGetNextExpireTime+0x44>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <prvGetNextExpireTime+0x16>
 8007226:	2201      	movs	r2, #1
 8007228:	e000      	b.n	800722c <prvGetNextExpireTime+0x18>
 800722a:	2200      	movs	r2, #0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d105      	bne.n	8007244 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007238:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <prvGetNextExpireTime+0x44>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e001      	b.n	8007248 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007248:	68fb      	ldr	r3, [r7, #12]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20001250 	.word	0x20001250

0800725c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007264:	f7ff fa72 	bl	800674c <xTaskGetTickCount>
 8007268:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <prvSampleTimeNow+0x3c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d205      	bcs.n	8007280 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007274:	f000 f93a 	bl	80074ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e002      	b.n	8007286 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007286:	4a04      	ldr	r2, [pc, #16]	@ (8007298 <prvSampleTimeNow+0x3c>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800728c:	68fb      	ldr	r3, [r7, #12]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20001260 	.word	0x20001260

0800729c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d812      	bhi.n	80072e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d302      	bcc.n	80072d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e01b      	b.n	800730e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072d6:	4b10      	ldr	r3, [pc, #64]	@ (8007318 <prvInsertTimerInActiveList+0x7c>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3304      	adds	r3, #4
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f7fe f9e6 	bl	80056b2 <vListInsert>
 80072e6:	e012      	b.n	800730e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d206      	bcs.n	80072fe <prvInsertTimerInActiveList+0x62>
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d302      	bcc.n	80072fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	e007      	b.n	800730e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072fe:	4b07      	ldr	r3, [pc, #28]	@ (800731c <prvInsertTimerInActiveList+0x80>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe f9d2 	bl	80056b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800730e:	697b      	ldr	r3, [r7, #20]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20001254 	.word	0x20001254
 800731c:	20001250 	.word	0x20001250

08007320 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08e      	sub	sp, #56	@ 0x38
 8007324:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007326:	e0ce      	b.n	80074c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	da19      	bge.n	8007362 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800732e:	1d3b      	adds	r3, r7, #4
 8007330:	3304      	adds	r3, #4
 8007332:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	61fb      	str	r3, [r7, #28]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007358:	6850      	ldr	r0, [r2, #4]
 800735a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800735c:	6892      	ldr	r2, [r2, #8]
 800735e:	4611      	mov	r1, r2
 8007360:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f2c0 80ae 	blt.w	80074c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800736e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007378:	3304      	adds	r3, #4
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe f9d2 	bl	8005724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007380:	463b      	mov	r3, r7
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff ff6a 	bl	800725c <prvSampleTimeNow>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b09      	cmp	r3, #9
 800738e:	f200 8097 	bhi.w	80074c0 <prvProcessReceivedCommands+0x1a0>
 8007392:	a201      	add	r2, pc, #4	@ (adr r2, 8007398 <prvProcessReceivedCommands+0x78>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	080073c1 	.word	0x080073c1
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073c1 	.word	0x080073c1
 80073a4:	08007437 	.word	0x08007437
 80073a8:	0800744b 	.word	0x0800744b
 80073ac:	08007497 	.word	0x08007497
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073c1 	.word	0x080073c1
 80073b8:	08007437 	.word	0x08007437
 80073bc:	0800744b 	.word	0x0800744b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	18d1      	adds	r1, r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073e0:	f7ff ff5c 	bl	800729c <prvInsertTimerInActiveList>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d06c      	beq.n	80074c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d061      	beq.n	80074c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	441a      	add	r2, r3
 8007408:	2300      	movs	r3, #0
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	2300      	movs	r3, #0
 800740e:	2100      	movs	r1, #0
 8007410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007412:	f7ff fe01 	bl	8007018 <xTimerGenericCommand>
 8007416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d152      	bne.n	80074c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	61bb      	str	r3, [r7, #24]
}
 8007430:	bf00      	nop
 8007432:	bf00      	nop
 8007434:	e7fd      	b.n	8007432 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007448:	e03d      	b.n	80074c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007460:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	617b      	str	r3, [r7, #20]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	18d1      	adds	r1, r2, r3
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007490:	f7ff ff04 	bl	800729c <prvInsertTimerInActiveList>
					break;
 8007494:	e017      	b.n	80074c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80074a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074a6:	f000 fbe7 	bl	8007c78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074aa:	e00c      	b.n	80074c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074be:	e002      	b.n	80074c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80074c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074c6:	4b08      	ldr	r3, [pc, #32]	@ (80074e8 <prvProcessReceivedCommands+0x1c8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	1d39      	adds	r1, r7, #4
 80074cc:	2200      	movs	r2, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fbfc 	bl	8005ccc <xQueueReceive>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f47f af26 	bne.w	8007328 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	3730      	adds	r7, #48	@ 0x30
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20001258 	.word	0x20001258

080074ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074f2:	e049      	b.n	8007588 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074f4:	4b2e      	ldr	r3, [pc, #184]	@ (80075b0 <prvSwitchTimerLists+0xc4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fe:	4b2c      	ldr	r3, [pc, #176]	@ (80075b0 <prvSwitchTimerLists+0xc4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe f909 	bl	8005724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d02f      	beq.n	8007588 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	d90e      	bls.n	8007558 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007546:	4b1a      	ldr	r3, [pc, #104]	@ (80075b0 <prvSwitchTimerLists+0xc4>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f7fe f8ae 	bl	80056b2 <vListInsert>
 8007556:	e017      	b.n	8007588 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007558:	2300      	movs	r3, #0
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	2300      	movs	r3, #0
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	2100      	movs	r1, #0
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff fd58 	bl	8007018 <xTimerGenericCommand>
 8007568:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10b      	bne.n	8007588 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	603b      	str	r3, [r7, #0]
}
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007588:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <prvSwitchTimerLists+0xc4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1b0      	bne.n	80074f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007592:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <prvSwitchTimerLists+0xc4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007598:	4b06      	ldr	r3, [pc, #24]	@ (80075b4 <prvSwitchTimerLists+0xc8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a04      	ldr	r2, [pc, #16]	@ (80075b0 <prvSwitchTimerLists+0xc4>)
 800759e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075a0:	4a04      	ldr	r2, [pc, #16]	@ (80075b4 <prvSwitchTimerLists+0xc8>)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6013      	str	r3, [r2, #0]
}
 80075a6:	bf00      	nop
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20001250 	.word	0x20001250
 80075b4:	20001254 	.word	0x20001254

080075b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075be:	f000 f96b 	bl	8007898 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075c2:	4b15      	ldr	r3, [pc, #84]	@ (8007618 <prvCheckForValidListAndQueue+0x60>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d120      	bne.n	800760c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075ca:	4814      	ldr	r0, [pc, #80]	@ (800761c <prvCheckForValidListAndQueue+0x64>)
 80075cc:	f7fe f820 	bl	8005610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075d0:	4813      	ldr	r0, [pc, #76]	@ (8007620 <prvCheckForValidListAndQueue+0x68>)
 80075d2:	f7fe f81d 	bl	8005610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075d6:	4b13      	ldr	r3, [pc, #76]	@ (8007624 <prvCheckForValidListAndQueue+0x6c>)
 80075d8:	4a10      	ldr	r2, [pc, #64]	@ (800761c <prvCheckForValidListAndQueue+0x64>)
 80075da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075dc:	4b12      	ldr	r3, [pc, #72]	@ (8007628 <prvCheckForValidListAndQueue+0x70>)
 80075de:	4a10      	ldr	r2, [pc, #64]	@ (8007620 <prvCheckForValidListAndQueue+0x68>)
 80075e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075e2:	2300      	movs	r3, #0
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4b11      	ldr	r3, [pc, #68]	@ (800762c <prvCheckForValidListAndQueue+0x74>)
 80075e8:	4a11      	ldr	r2, [pc, #68]	@ (8007630 <prvCheckForValidListAndQueue+0x78>)
 80075ea:	2110      	movs	r1, #16
 80075ec:	200a      	movs	r0, #10
 80075ee:	f7fe f92d 	bl	800584c <xQueueGenericCreateStatic>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <prvCheckForValidListAndQueue+0x60>)
 80075f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075f8:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <prvCheckForValidListAndQueue+0x60>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007600:	4b05      	ldr	r3, [pc, #20]	@ (8007618 <prvCheckForValidListAndQueue+0x60>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	490b      	ldr	r1, [pc, #44]	@ (8007634 <prvCheckForValidListAndQueue+0x7c>)
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fd52 	bl	80060b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800760c:	f000 f976 	bl	80078fc <vPortExitCritical>
}
 8007610:	bf00      	nop
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20001258 	.word	0x20001258
 800761c:	20001228 	.word	0x20001228
 8007620:	2000123c 	.word	0x2000123c
 8007624:	20001250 	.word	0x20001250
 8007628:	20001254 	.word	0x20001254
 800762c:	20001304 	.word	0x20001304
 8007630:	20001264 	.word	0x20001264
 8007634:	08008884 	.word	0x08008884

08007638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3b04      	subs	r3, #4
 8007648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3b04      	subs	r3, #4
 8007656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0201 	bic.w	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3b04      	subs	r3, #4
 8007666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007668:	4a0c      	ldr	r2, [pc, #48]	@ (800769c <pxPortInitialiseStack+0x64>)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3b14      	subs	r3, #20
 8007672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3b04      	subs	r3, #4
 800767e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f06f 0202 	mvn.w	r2, #2
 8007686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3b20      	subs	r3, #32
 800768c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	080076a1 	.word	0x080076a1

080076a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076aa:	4b13      	ldr	r3, [pc, #76]	@ (80076f8 <prvTaskExitError+0x58>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076b2:	d00b      	beq.n	80076cc <prvTaskExitError+0x2c>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <prvTaskExitError+0x28>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60bb      	str	r3, [r7, #8]
}
 80076de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076e0:	bf00      	nop
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0fc      	beq.n	80076e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000018 	.word	0x20000018
 80076fc:	00000000 	.word	0x00000000

08007700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007700:	4b07      	ldr	r3, [pc, #28]	@ (8007720 <pxCurrentTCBConst2>)
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	6808      	ldr	r0, [r1, #0]
 8007706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	f380 8809 	msr	PSP, r0
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8811 	msr	BASEPRI, r0
 800771a:	4770      	bx	lr
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst2>:
 8007720:	20000d28 	.word	0x20000d28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007728:	4808      	ldr	r0, [pc, #32]	@ (800774c <prvPortStartFirstTask+0x24>)
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f380 8808 	msr	MSP, r0
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8814 	msr	CONTROL, r0
 800773a:	b662      	cpsie	i
 800773c:	b661      	cpsie	f
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	df00      	svc	0
 8007748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800774a:	bf00      	nop
 800774c:	e000ed08 	.word	0xe000ed08

08007750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007756:	4b47      	ldr	r3, [pc, #284]	@ (8007874 <xPortStartScheduler+0x124>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a47      	ldr	r2, [pc, #284]	@ (8007878 <xPortStartScheduler+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10b      	bne.n	8007778 <xPortStartScheduler+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007778:	4b3e      	ldr	r3, [pc, #248]	@ (8007874 <xPortStartScheduler+0x124>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a3f      	ldr	r2, [pc, #252]	@ (800787c <xPortStartScheduler+0x12c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10b      	bne.n	800779a <xPortStartScheduler+0x4a>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60fb      	str	r3, [r7, #12]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800779a:	4b39      	ldr	r3, [pc, #228]	@ (8007880 <xPortStartScheduler+0x130>)
 800779c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	22ff      	movs	r2, #255	@ 0xff
 80077aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4b31      	ldr	r3, [pc, #196]	@ (8007884 <xPortStartScheduler+0x134>)
 80077c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077c2:	4b31      	ldr	r3, [pc, #196]	@ (8007888 <xPortStartScheduler+0x138>)
 80077c4:	2207      	movs	r2, #7
 80077c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077c8:	e009      	b.n	80077de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80077ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007888 <xPortStartScheduler+0x138>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007888 <xPortStartScheduler+0x138>)
 80077d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e6:	2b80      	cmp	r3, #128	@ 0x80
 80077e8:	d0ef      	beq.n	80077ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077ea:	4b27      	ldr	r3, [pc, #156]	@ (8007888 <xPortStartScheduler+0x138>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1c3 0307 	rsb	r3, r3, #7
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d00b      	beq.n	800780e <xPortStartScheduler+0xbe>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60bb      	str	r3, [r7, #8]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800780e:	4b1e      	ldr	r3, [pc, #120]	@ (8007888 <xPortStartScheduler+0x138>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	4a1c      	ldr	r2, [pc, #112]	@ (8007888 <xPortStartScheduler+0x138>)
 8007816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007818:	4b1b      	ldr	r3, [pc, #108]	@ (8007888 <xPortStartScheduler+0x138>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007820:	4a19      	ldr	r2, [pc, #100]	@ (8007888 <xPortStartScheduler+0x138>)
 8007822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800782c:	4b17      	ldr	r3, [pc, #92]	@ (800788c <xPortStartScheduler+0x13c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a16      	ldr	r2, [pc, #88]	@ (800788c <xPortStartScheduler+0x13c>)
 8007832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <xPortStartScheduler+0x13c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a13      	ldr	r2, [pc, #76]	@ (800788c <xPortStartScheduler+0x13c>)
 800783e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007844:	f000 f8da 	bl	80079fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007848:	4b11      	ldr	r3, [pc, #68]	@ (8007890 <xPortStartScheduler+0x140>)
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800784e:	f000 f8f9 	bl	8007a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007852:	4b10      	ldr	r3, [pc, #64]	@ (8007894 <xPortStartScheduler+0x144>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a0f      	ldr	r2, [pc, #60]	@ (8007894 <xPortStartScheduler+0x144>)
 8007858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800785c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800785e:	f7ff ff63 	bl	8007728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007862:	f7ff f83d 	bl	80068e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007866:	f7ff ff1b 	bl	80076a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed00 	.word	0xe000ed00
 8007878:	410fc271 	.word	0x410fc271
 800787c:	410fc270 	.word	0x410fc270
 8007880:	e000e400 	.word	0xe000e400
 8007884:	20001354 	.word	0x20001354
 8007888:	20001358 	.word	0x20001358
 800788c:	e000ed20 	.word	0xe000ed20
 8007890:	20000018 	.word	0x20000018
 8007894:	e000ef34 	.word	0xe000ef34

08007898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	607b      	str	r3, [r7, #4]
}
 80078b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078b2:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <vPortEnterCritical+0x5c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	4a0e      	ldr	r2, [pc, #56]	@ (80078f4 <vPortEnterCritical+0x5c>)
 80078ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078bc:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <vPortEnterCritical+0x5c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078c4:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <vPortEnterCritical+0x60>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	603b      	str	r3, [r7, #0]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <vPortEnterCritical+0x4a>
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000018 	.word	0x20000018
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007902:	4b12      	ldr	r3, [pc, #72]	@ (800794c <vPortExitCritical+0x50>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <vPortExitCritical+0x26>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	607b      	str	r3, [r7, #4]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007922:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <vPortExitCritical+0x50>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3b01      	subs	r3, #1
 8007928:	4a08      	ldr	r2, [pc, #32]	@ (800794c <vPortExitCritical+0x50>)
 800792a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800792c:	4b07      	ldr	r3, [pc, #28]	@ (800794c <vPortExitCritical+0x50>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <vPortExitCritical+0x44>
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f383 8811 	msr	BASEPRI, r3
}
 800793e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	20000018 	.word	0x20000018

08007950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007950:	f3ef 8009 	mrs	r0, PSP
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4b15      	ldr	r3, [pc, #84]	@ (80079b0 <pxCurrentTCBConst>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f01e 0f10 	tst.w	lr, #16
 8007960:	bf08      	it	eq
 8007962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	6010      	str	r0, [r2, #0]
 800796c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007974:	f380 8811 	msr	BASEPRI, r0
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f7fe ffae 	bl	80068e0 <vTaskSwitchContext>
 8007984:	f04f 0000 	mov.w	r0, #0
 8007988:	f380 8811 	msr	BASEPRI, r0
 800798c:	bc09      	pop	{r0, r3}
 800798e:	6819      	ldr	r1, [r3, #0]
 8007990:	6808      	ldr	r0, [r1, #0]
 8007992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007996:	f01e 0f10 	tst.w	lr, #16
 800799a:	bf08      	it	eq
 800799c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079a0:	f380 8809 	msr	PSP, r0
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst>:
 80079b0:	20000d28 	.word	0x20000d28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	607b      	str	r3, [r7, #4]
}
 80079d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079d2:	f7fe fecb 	bl	800676c <xTaskIncrementTick>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079dc:	4b06      	ldr	r3, [pc, #24]	@ (80079f8 <xPortSysTickHandler+0x40>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <vPortSetupTimerInterrupt+0x38>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <vPortSetupTimerInterrupt+0x3c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0a      	ldr	r2, [pc, #40]	@ (8007a3c <vPortSetupTimerInterrupt+0x40>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	099b      	lsrs	r3, r3, #6
 8007a18:	4a09      	ldr	r2, [pc, #36]	@ (8007a40 <vPortSetupTimerInterrupt+0x44>)
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a1e:	4b04      	ldr	r3, [pc, #16]	@ (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e000e010 	.word	0xe000e010
 8007a34:	e000e018 	.word	0xe000e018
 8007a38:	2000000c 	.word	0x2000000c
 8007a3c:	10624dd3 	.word	0x10624dd3
 8007a40:	e000e014 	.word	0xe000e014

08007a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a54 <vPortEnableVFP+0x10>
 8007a48:	6801      	ldr	r1, [r0, #0]
 8007a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a4e:	6001      	str	r1, [r0, #0]
 8007a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a52:	bf00      	nop
 8007a54:	e000ed88 	.word	0xe000ed88

08007a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a5e:	f3ef 8305 	mrs	r3, IPSR
 8007a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d915      	bls.n	8007a96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <vPortValidateInterruptPriority+0x74>)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a74:	4b16      	ldr	r3, [pc, #88]	@ (8007ad0 <vPortValidateInterruptPriority+0x78>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	7afa      	ldrb	r2, [r7, #11]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d20b      	bcs.n	8007a96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	607b      	str	r3, [r7, #4]
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	e7fd      	b.n	8007a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a96:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad4 <vPortValidateInterruptPriority+0x7c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad8 <vPortValidateInterruptPriority+0x80>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d90b      	bls.n	8007abe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	603b      	str	r3, [r7, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <vPortValidateInterruptPriority+0x62>
	}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	e000e3f0 	.word	0xe000e3f0
 8007ad0:	20001354 	.word	0x20001354
 8007ad4:	e000ed0c 	.word	0xe000ed0c
 8007ad8:	20001358 	.word	0x20001358

08007adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	@ 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ae8:	f7fe fd84 	bl	80065f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007aec:	4b5c      	ldr	r3, [pc, #368]	@ (8007c60 <pvPortMalloc+0x184>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007af4:	f000 f924 	bl	8007d40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007af8:	4b5a      	ldr	r3, [pc, #360]	@ (8007c64 <pvPortMalloc+0x188>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 8095 	bne.w	8007c30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01e      	beq.n	8007b4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d015      	beq.n	8007b4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f023 0307 	bic.w	r3, r3, #7
 8007b24:	3308      	adds	r3, #8
 8007b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <pvPortMalloc+0x6e>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	617b      	str	r3, [r7, #20]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d06f      	beq.n	8007c30 <pvPortMalloc+0x154>
 8007b50:	4b45      	ldr	r3, [pc, #276]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d86a      	bhi.n	8007c30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b5a:	4b44      	ldr	r3, [pc, #272]	@ (8007c6c <pvPortMalloc+0x190>)
 8007b5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b5e:	4b43      	ldr	r3, [pc, #268]	@ (8007c6c <pvPortMalloc+0x190>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b64:	e004      	b.n	8007b70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d903      	bls.n	8007b82 <pvPortMalloc+0xa6>
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1f1      	bne.n	8007b66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b82:	4b37      	ldr	r3, [pc, #220]	@ (8007c60 <pvPortMalloc+0x184>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d051      	beq.n	8007c30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2208      	movs	r2, #8
 8007b92:	4413      	add	r3, r2
 8007b94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	1ad2      	subs	r2, r2, r3
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d920      	bls.n	8007bf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <pvPortMalloc+0xfc>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	613b      	str	r3, [r7, #16]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bea:	69b8      	ldr	r0, [r7, #24]
 8007bec:	f000 f90a 	bl	8007e04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007bfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b1b      	ldr	r3, [pc, #108]	@ (8007c70 <pvPortMalloc+0x194>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d203      	bcs.n	8007c12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c0a:	4b17      	ldr	r3, [pc, #92]	@ (8007c68 <pvPortMalloc+0x18c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a18      	ldr	r2, [pc, #96]	@ (8007c70 <pvPortMalloc+0x194>)
 8007c10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	4b13      	ldr	r3, [pc, #76]	@ (8007c64 <pvPortMalloc+0x188>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c26:	4b13      	ldr	r3, [pc, #76]	@ (8007c74 <pvPortMalloc+0x198>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	4a11      	ldr	r2, [pc, #68]	@ (8007c74 <pvPortMalloc+0x198>)
 8007c2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c30:	f7fe fcee 	bl	8006610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <pvPortMalloc+0x17a>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	60fb      	str	r3, [r7, #12]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <pvPortMalloc+0x176>
	return pvReturn;
 8007c56:	69fb      	ldr	r3, [r7, #28]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3728      	adds	r7, #40	@ 0x28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20004f64 	.word	0x20004f64
 8007c64:	20004f78 	.word	0x20004f78
 8007c68:	20004f68 	.word	0x20004f68
 8007c6c:	20004f5c 	.word	0x20004f5c
 8007c70:	20004f6c 	.word	0x20004f6c
 8007c74:	20004f70 	.word	0x20004f70

08007c78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04f      	beq.n	8007d2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4413      	add	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b25      	ldr	r3, [pc, #148]	@ (8007d34 <vPortFree+0xbc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <vPortFree+0x46>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <vPortFree+0x66>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60bb      	str	r3, [r7, #8]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	4b14      	ldr	r3, [pc, #80]	@ (8007d34 <vPortFree+0xbc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01e      	beq.n	8007d2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11a      	bne.n	8007d2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d34 <vPortFree+0xbc>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	401a      	ands	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d04:	f7fe fc76 	bl	80065f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <vPortFree+0xc0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4413      	add	r3, r2
 8007d12:	4a09      	ldr	r2, [pc, #36]	@ (8007d38 <vPortFree+0xc0>)
 8007d14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d16:	6938      	ldr	r0, [r7, #16]
 8007d18:	f000 f874 	bl	8007e04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d1c:	4b07      	ldr	r3, [pc, #28]	@ (8007d3c <vPortFree+0xc4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a06      	ldr	r2, [pc, #24]	@ (8007d3c <vPortFree+0xc4>)
 8007d24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d26:	f7fe fc73 	bl	8006610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d2a:	bf00      	nop
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20004f78 	.word	0x20004f78
 8007d38:	20004f68 	.word	0x20004f68
 8007d3c:	20004f74 	.word	0x20004f74

08007d40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d4c:	4b27      	ldr	r3, [pc, #156]	@ (8007dec <prvHeapInit+0xac>)
 8007d4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00c      	beq.n	8007d74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3307      	adds	r3, #7
 8007d5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0307 	bic.w	r3, r3, #7
 8007d66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dec <prvHeapInit+0xac>)
 8007d70:	4413      	add	r3, r2
 8007d72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d78:	4a1d      	ldr	r2, [pc, #116]	@ (8007df0 <prvHeapInit+0xb0>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8007df0 <prvHeapInit+0xb0>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	@ (8007df4 <prvHeapInit+0xb4>)
 8007da0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007da2:	4b14      	ldr	r3, [pc, #80]	@ (8007df4 <prvHeapInit+0xb4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2200      	movs	r2, #0
 8007da8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007daa:	4b12      	ldr	r3, [pc, #72]	@ (8007df4 <prvHeapInit+0xb4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <prvHeapInit+0xb4>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007df8 <prvHeapInit+0xb8>)
 8007dce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	4a09      	ldr	r2, [pc, #36]	@ (8007dfc <prvHeapInit+0xbc>)
 8007dd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dd8:	4b09      	ldr	r3, [pc, #36]	@ (8007e00 <prvHeapInit+0xc0>)
 8007dda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	2000135c 	.word	0x2000135c
 8007df0:	20004f5c 	.word	0x20004f5c
 8007df4:	20004f64 	.word	0x20004f64
 8007df8:	20004f6c 	.word	0x20004f6c
 8007dfc:	20004f68 	.word	0x20004f68
 8007e00:	20004f78 	.word	0x20004f78

08007e04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e0c:	4b28      	ldr	r3, [pc, #160]	@ (8007eb0 <prvInsertBlockIntoFreeList+0xac>)
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e002      	b.n	8007e18 <prvInsertBlockIntoFreeList+0x14>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d8f7      	bhi.n	8007e12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d108      	bne.n	8007e46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	441a      	add	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d118      	bne.n	8007e8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b15      	ldr	r3, [pc, #84]	@ (8007eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d00d      	beq.n	8007e82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e008      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e82:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e003      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d002      	beq.n	8007ea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20004f5c 	.word	0x20004f5c
 8007eb4:	20004f64 	.word	0x20004f64

08007eb8 <siprintf>:
 8007eb8:	b40e      	push	{r1, r2, r3}
 8007eba:	b500      	push	{lr}
 8007ebc:	b09c      	sub	sp, #112	@ 0x70
 8007ebe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ec0:	9002      	str	r0, [sp, #8]
 8007ec2:	9006      	str	r0, [sp, #24]
 8007ec4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ec8:	4809      	ldr	r0, [pc, #36]	@ (8007ef0 <siprintf+0x38>)
 8007eca:	9107      	str	r1, [sp, #28]
 8007ecc:	9104      	str	r1, [sp, #16]
 8007ece:	4909      	ldr	r1, [pc, #36]	@ (8007ef4 <siprintf+0x3c>)
 8007ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed4:	9105      	str	r1, [sp, #20]
 8007ed6:	6800      	ldr	r0, [r0, #0]
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	a902      	add	r1, sp, #8
 8007edc:	f000 f8aa 	bl	8008034 <_svfiprintf_r>
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	b01c      	add	sp, #112	@ 0x70
 8007ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eec:	b003      	add	sp, #12
 8007eee:	4770      	bx	lr
 8007ef0:	2000001c 	.word	0x2000001c
 8007ef4:	ffff0208 	.word	0xffff0208

08007ef8 <memset>:
 8007ef8:	4402      	add	r2, r0
 8007efa:	4603      	mov	r3, r0
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d100      	bne.n	8007f02 <memset+0xa>
 8007f00:	4770      	bx	lr
 8007f02:	f803 1b01 	strb.w	r1, [r3], #1
 8007f06:	e7f9      	b.n	8007efc <memset+0x4>

08007f08 <__errno>:
 8007f08:	4b01      	ldr	r3, [pc, #4]	@ (8007f10 <__errno+0x8>)
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	2000001c 	.word	0x2000001c

08007f14 <__libc_init_array>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	4d0d      	ldr	r5, [pc, #52]	@ (8007f4c <__libc_init_array+0x38>)
 8007f18:	4c0d      	ldr	r4, [pc, #52]	@ (8007f50 <__libc_init_array+0x3c>)
 8007f1a:	1b64      	subs	r4, r4, r5
 8007f1c:	10a4      	asrs	r4, r4, #2
 8007f1e:	2600      	movs	r6, #0
 8007f20:	42a6      	cmp	r6, r4
 8007f22:	d109      	bne.n	8007f38 <__libc_init_array+0x24>
 8007f24:	4d0b      	ldr	r5, [pc, #44]	@ (8007f54 <__libc_init_array+0x40>)
 8007f26:	4c0c      	ldr	r4, [pc, #48]	@ (8007f58 <__libc_init_array+0x44>)
 8007f28:	f000 fc66 	bl	80087f8 <_init>
 8007f2c:	1b64      	subs	r4, r4, r5
 8007f2e:	10a4      	asrs	r4, r4, #2
 8007f30:	2600      	movs	r6, #0
 8007f32:	42a6      	cmp	r6, r4
 8007f34:	d105      	bne.n	8007f42 <__libc_init_array+0x2e>
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3c:	4798      	blx	r3
 8007f3e:	3601      	adds	r6, #1
 8007f40:	e7ee      	b.n	8007f20 <__libc_init_array+0xc>
 8007f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f46:	4798      	blx	r3
 8007f48:	3601      	adds	r6, #1
 8007f4a:	e7f2      	b.n	8007f32 <__libc_init_array+0x1e>
 8007f4c:	08009738 	.word	0x08009738
 8007f50:	08009738 	.word	0x08009738
 8007f54:	08009738 	.word	0x08009738
 8007f58:	0800973c 	.word	0x0800973c

08007f5c <__retarget_lock_acquire_recursive>:
 8007f5c:	4770      	bx	lr

08007f5e <__retarget_lock_release_recursive>:
 8007f5e:	4770      	bx	lr

08007f60 <memcpy>:
 8007f60:	440a      	add	r2, r1
 8007f62:	4291      	cmp	r1, r2
 8007f64:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f68:	d100      	bne.n	8007f6c <memcpy+0xc>
 8007f6a:	4770      	bx	lr
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d1f9      	bne.n	8007f6e <memcpy+0xe>
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <__ssputs_r>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	688e      	ldr	r6, [r1, #8]
 8007f82:	461f      	mov	r7, r3
 8007f84:	42be      	cmp	r6, r7
 8007f86:	680b      	ldr	r3, [r1, #0]
 8007f88:	4682      	mov	sl, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	4690      	mov	r8, r2
 8007f8e:	d82d      	bhi.n	8007fec <__ssputs_r+0x70>
 8007f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f98:	d026      	beq.n	8007fe8 <__ssputs_r+0x6c>
 8007f9a:	6965      	ldr	r5, [r4, #20]
 8007f9c:	6909      	ldr	r1, [r1, #16]
 8007f9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fa2:	eba3 0901 	sub.w	r9, r3, r1
 8007fa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007faa:	1c7b      	adds	r3, r7, #1
 8007fac:	444b      	add	r3, r9
 8007fae:	106d      	asrs	r5, r5, #1
 8007fb0:	429d      	cmp	r5, r3
 8007fb2:	bf38      	it	cc
 8007fb4:	461d      	movcc	r5, r3
 8007fb6:	0553      	lsls	r3, r2, #21
 8007fb8:	d527      	bpl.n	800800a <__ssputs_r+0x8e>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f000 f958 	bl	8008270 <_malloc_r>
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	b360      	cbz	r0, 800801e <__ssputs_r+0xa2>
 8007fc4:	6921      	ldr	r1, [r4, #16]
 8007fc6:	464a      	mov	r2, r9
 8007fc8:	f7ff ffca 	bl	8007f60 <memcpy>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	6126      	str	r6, [r4, #16]
 8007fda:	6165      	str	r5, [r4, #20]
 8007fdc:	444e      	add	r6, r9
 8007fde:	eba5 0509 	sub.w	r5, r5, r9
 8007fe2:	6026      	str	r6, [r4, #0]
 8007fe4:	60a5      	str	r5, [r4, #8]
 8007fe6:	463e      	mov	r6, r7
 8007fe8:	42be      	cmp	r6, r7
 8007fea:	d900      	bls.n	8007fee <__ssputs_r+0x72>
 8007fec:	463e      	mov	r6, r7
 8007fee:	6820      	ldr	r0, [r4, #0]
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	f000 fb84 	bl	8008700 <memmove>
 8007ff8:	68a3      	ldr	r3, [r4, #8]
 8007ffa:	1b9b      	subs	r3, r3, r6
 8007ffc:	60a3      	str	r3, [r4, #8]
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	4433      	add	r3, r6
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	2000      	movs	r0, #0
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800a:	462a      	mov	r2, r5
 800800c:	f000 fb4a 	bl	80086a4 <_realloc_r>
 8008010:	4606      	mov	r6, r0
 8008012:	2800      	cmp	r0, #0
 8008014:	d1e0      	bne.n	8007fd8 <__ssputs_r+0x5c>
 8008016:	6921      	ldr	r1, [r4, #16]
 8008018:	4650      	mov	r0, sl
 800801a:	f000 fb9b 	bl	8008754 <_free_r>
 800801e:	230c      	movs	r3, #12
 8008020:	f8ca 3000 	str.w	r3, [sl]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008030:	e7e9      	b.n	8008006 <__ssputs_r+0x8a>
	...

08008034 <_svfiprintf_r>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	4698      	mov	r8, r3
 800803a:	898b      	ldrh	r3, [r1, #12]
 800803c:	061b      	lsls	r3, r3, #24
 800803e:	b09d      	sub	sp, #116	@ 0x74
 8008040:	4607      	mov	r7, r0
 8008042:	460d      	mov	r5, r1
 8008044:	4614      	mov	r4, r2
 8008046:	d510      	bpl.n	800806a <_svfiprintf_r+0x36>
 8008048:	690b      	ldr	r3, [r1, #16]
 800804a:	b973      	cbnz	r3, 800806a <_svfiprintf_r+0x36>
 800804c:	2140      	movs	r1, #64	@ 0x40
 800804e:	f000 f90f 	bl	8008270 <_malloc_r>
 8008052:	6028      	str	r0, [r5, #0]
 8008054:	6128      	str	r0, [r5, #16]
 8008056:	b930      	cbnz	r0, 8008066 <_svfiprintf_r+0x32>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008060:	b01d      	add	sp, #116	@ 0x74
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	2340      	movs	r3, #64	@ 0x40
 8008068:	616b      	str	r3, [r5, #20]
 800806a:	2300      	movs	r3, #0
 800806c:	9309      	str	r3, [sp, #36]	@ 0x24
 800806e:	2320      	movs	r3, #32
 8008070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008074:	f8cd 800c 	str.w	r8, [sp, #12]
 8008078:	2330      	movs	r3, #48	@ 0x30
 800807a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008218 <_svfiprintf_r+0x1e4>
 800807e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008082:	f04f 0901 	mov.w	r9, #1
 8008086:	4623      	mov	r3, r4
 8008088:	469a      	mov	sl, r3
 800808a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800808e:	b10a      	cbz	r2, 8008094 <_svfiprintf_r+0x60>
 8008090:	2a25      	cmp	r2, #37	@ 0x25
 8008092:	d1f9      	bne.n	8008088 <_svfiprintf_r+0x54>
 8008094:	ebba 0b04 	subs.w	fp, sl, r4
 8008098:	d00b      	beq.n	80080b2 <_svfiprintf_r+0x7e>
 800809a:	465b      	mov	r3, fp
 800809c:	4622      	mov	r2, r4
 800809e:	4629      	mov	r1, r5
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ff6b 	bl	8007f7c <__ssputs_r>
 80080a6:	3001      	adds	r0, #1
 80080a8:	f000 80a7 	beq.w	80081fa <_svfiprintf_r+0x1c6>
 80080ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ae:	445a      	add	r2, fp
 80080b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080b2:	f89a 3000 	ldrb.w	r3, [sl]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 809f 	beq.w	80081fa <_svfiprintf_r+0x1c6>
 80080bc:	2300      	movs	r3, #0
 80080be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c6:	f10a 0a01 	add.w	sl, sl, #1
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	9307      	str	r3, [sp, #28]
 80080ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80080d4:	4654      	mov	r4, sl
 80080d6:	2205      	movs	r2, #5
 80080d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080dc:	484e      	ldr	r0, [pc, #312]	@ (8008218 <_svfiprintf_r+0x1e4>)
 80080de:	f7f8 f897 	bl	8000210 <memchr>
 80080e2:	9a04      	ldr	r2, [sp, #16]
 80080e4:	b9d8      	cbnz	r0, 800811e <_svfiprintf_r+0xea>
 80080e6:	06d0      	lsls	r0, r2, #27
 80080e8:	bf44      	itt	mi
 80080ea:	2320      	movmi	r3, #32
 80080ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080f0:	0711      	lsls	r1, r2, #28
 80080f2:	bf44      	itt	mi
 80080f4:	232b      	movmi	r3, #43	@ 0x2b
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fa:	f89a 3000 	ldrb.w	r3, [sl]
 80080fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008100:	d015      	beq.n	800812e <_svfiprintf_r+0xfa>
 8008102:	9a07      	ldr	r2, [sp, #28]
 8008104:	4654      	mov	r4, sl
 8008106:	2000      	movs	r0, #0
 8008108:	f04f 0c0a 	mov.w	ip, #10
 800810c:	4621      	mov	r1, r4
 800810e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008112:	3b30      	subs	r3, #48	@ 0x30
 8008114:	2b09      	cmp	r3, #9
 8008116:	d94b      	bls.n	80081b0 <_svfiprintf_r+0x17c>
 8008118:	b1b0      	cbz	r0, 8008148 <_svfiprintf_r+0x114>
 800811a:	9207      	str	r2, [sp, #28]
 800811c:	e014      	b.n	8008148 <_svfiprintf_r+0x114>
 800811e:	eba0 0308 	sub.w	r3, r0, r8
 8008122:	fa09 f303 	lsl.w	r3, r9, r3
 8008126:	4313      	orrs	r3, r2
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	46a2      	mov	sl, r4
 800812c:	e7d2      	b.n	80080d4 <_svfiprintf_r+0xa0>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d19      	adds	r1, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9103      	str	r1, [sp, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfbb      	ittet	lt
 800813a:	425b      	neglt	r3, r3
 800813c:	f042 0202 	orrlt.w	r2, r2, #2
 8008140:	9307      	strge	r3, [sp, #28]
 8008142:	9307      	strlt	r3, [sp, #28]
 8008144:	bfb8      	it	lt
 8008146:	9204      	strlt	r2, [sp, #16]
 8008148:	7823      	ldrb	r3, [r4, #0]
 800814a:	2b2e      	cmp	r3, #46	@ 0x2e
 800814c:	d10a      	bne.n	8008164 <_svfiprintf_r+0x130>
 800814e:	7863      	ldrb	r3, [r4, #1]
 8008150:	2b2a      	cmp	r3, #42	@ 0x2a
 8008152:	d132      	bne.n	80081ba <_svfiprintf_r+0x186>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	1d1a      	adds	r2, r3, #4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	9203      	str	r2, [sp, #12]
 800815c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008160:	3402      	adds	r4, #2
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008228 <_svfiprintf_r+0x1f4>
 8008168:	7821      	ldrb	r1, [r4, #0]
 800816a:	2203      	movs	r2, #3
 800816c:	4650      	mov	r0, sl
 800816e:	f7f8 f84f 	bl	8000210 <memchr>
 8008172:	b138      	cbz	r0, 8008184 <_svfiprintf_r+0x150>
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	eba0 000a 	sub.w	r0, r0, sl
 800817a:	2240      	movs	r2, #64	@ 0x40
 800817c:	4082      	lsls	r2, r0
 800817e:	4313      	orrs	r3, r2
 8008180:	3401      	adds	r4, #1
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008188:	4824      	ldr	r0, [pc, #144]	@ (800821c <_svfiprintf_r+0x1e8>)
 800818a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800818e:	2206      	movs	r2, #6
 8008190:	f7f8 f83e 	bl	8000210 <memchr>
 8008194:	2800      	cmp	r0, #0
 8008196:	d036      	beq.n	8008206 <_svfiprintf_r+0x1d2>
 8008198:	4b21      	ldr	r3, [pc, #132]	@ (8008220 <_svfiprintf_r+0x1ec>)
 800819a:	bb1b      	cbnz	r3, 80081e4 <_svfiprintf_r+0x1b0>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	3307      	adds	r3, #7
 80081a0:	f023 0307 	bic.w	r3, r3, #7
 80081a4:	3308      	adds	r3, #8
 80081a6:	9303      	str	r3, [sp, #12]
 80081a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081aa:	4433      	add	r3, r6
 80081ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ae:	e76a      	b.n	8008086 <_svfiprintf_r+0x52>
 80081b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b4:	460c      	mov	r4, r1
 80081b6:	2001      	movs	r0, #1
 80081b8:	e7a8      	b.n	800810c <_svfiprintf_r+0xd8>
 80081ba:	2300      	movs	r3, #0
 80081bc:	3401      	adds	r4, #1
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	4619      	mov	r1, r3
 80081c2:	f04f 0c0a 	mov.w	ip, #10
 80081c6:	4620      	mov	r0, r4
 80081c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081cc:	3a30      	subs	r2, #48	@ 0x30
 80081ce:	2a09      	cmp	r2, #9
 80081d0:	d903      	bls.n	80081da <_svfiprintf_r+0x1a6>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0c6      	beq.n	8008164 <_svfiprintf_r+0x130>
 80081d6:	9105      	str	r1, [sp, #20]
 80081d8:	e7c4      	b.n	8008164 <_svfiprintf_r+0x130>
 80081da:	fb0c 2101 	mla	r1, ip, r1, r2
 80081de:	4604      	mov	r4, r0
 80081e0:	2301      	movs	r3, #1
 80081e2:	e7f0      	b.n	80081c6 <_svfiprintf_r+0x192>
 80081e4:	ab03      	add	r3, sp, #12
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	462a      	mov	r2, r5
 80081ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <_svfiprintf_r+0x1f0>)
 80081ec:	a904      	add	r1, sp, #16
 80081ee:	4638      	mov	r0, r7
 80081f0:	f3af 8000 	nop.w
 80081f4:	1c42      	adds	r2, r0, #1
 80081f6:	4606      	mov	r6, r0
 80081f8:	d1d6      	bne.n	80081a8 <_svfiprintf_r+0x174>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	065b      	lsls	r3, r3, #25
 80081fe:	f53f af2d 	bmi.w	800805c <_svfiprintf_r+0x28>
 8008202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008204:	e72c      	b.n	8008060 <_svfiprintf_r+0x2c>
 8008206:	ab03      	add	r3, sp, #12
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	462a      	mov	r2, r5
 800820c:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <_svfiprintf_r+0x1f0>)
 800820e:	a904      	add	r1, sp, #16
 8008210:	4638      	mov	r0, r7
 8008212:	f000 f91b 	bl	800844c <_printf_i>
 8008216:	e7ed      	b.n	80081f4 <_svfiprintf_r+0x1c0>
 8008218:	080096fc 	.word	0x080096fc
 800821c:	08009706 	.word	0x08009706
 8008220:	00000000 	.word	0x00000000
 8008224:	08007f7d 	.word	0x08007f7d
 8008228:	08009702 	.word	0x08009702

0800822c <sbrk_aligned>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	4e0f      	ldr	r6, [pc, #60]	@ (800826c <sbrk_aligned+0x40>)
 8008230:	460c      	mov	r4, r1
 8008232:	6831      	ldr	r1, [r6, #0]
 8008234:	4605      	mov	r5, r0
 8008236:	b911      	cbnz	r1, 800823e <sbrk_aligned+0x12>
 8008238:	f000 fa7c 	bl	8008734 <_sbrk_r>
 800823c:	6030      	str	r0, [r6, #0]
 800823e:	4621      	mov	r1, r4
 8008240:	4628      	mov	r0, r5
 8008242:	f000 fa77 	bl	8008734 <_sbrk_r>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	d103      	bne.n	8008252 <sbrk_aligned+0x26>
 800824a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800824e:	4620      	mov	r0, r4
 8008250:	bd70      	pop	{r4, r5, r6, pc}
 8008252:	1cc4      	adds	r4, r0, #3
 8008254:	f024 0403 	bic.w	r4, r4, #3
 8008258:	42a0      	cmp	r0, r4
 800825a:	d0f8      	beq.n	800824e <sbrk_aligned+0x22>
 800825c:	1a21      	subs	r1, r4, r0
 800825e:	4628      	mov	r0, r5
 8008260:	f000 fa68 	bl	8008734 <_sbrk_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d1f2      	bne.n	800824e <sbrk_aligned+0x22>
 8008268:	e7ef      	b.n	800824a <sbrk_aligned+0x1e>
 800826a:	bf00      	nop
 800826c:	200050b8 	.word	0x200050b8

08008270 <_malloc_r>:
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	1ccd      	adds	r5, r1, #3
 8008276:	f025 0503 	bic.w	r5, r5, #3
 800827a:	3508      	adds	r5, #8
 800827c:	2d0c      	cmp	r5, #12
 800827e:	bf38      	it	cc
 8008280:	250c      	movcc	r5, #12
 8008282:	2d00      	cmp	r5, #0
 8008284:	4606      	mov	r6, r0
 8008286:	db01      	blt.n	800828c <_malloc_r+0x1c>
 8008288:	42a9      	cmp	r1, r5
 800828a:	d904      	bls.n	8008296 <_malloc_r+0x26>
 800828c:	230c      	movs	r3, #12
 800828e:	6033      	str	r3, [r6, #0]
 8008290:	2000      	movs	r0, #0
 8008292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800836c <_malloc_r+0xfc>
 800829a:	f000 f9f7 	bl	800868c <__malloc_lock>
 800829e:	f8d8 3000 	ldr.w	r3, [r8]
 80082a2:	461c      	mov	r4, r3
 80082a4:	bb44      	cbnz	r4, 80082f8 <_malloc_r+0x88>
 80082a6:	4629      	mov	r1, r5
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7ff ffbf 	bl	800822c <sbrk_aligned>
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	4604      	mov	r4, r0
 80082b2:	d158      	bne.n	8008366 <_malloc_r+0xf6>
 80082b4:	f8d8 4000 	ldr.w	r4, [r8]
 80082b8:	4627      	mov	r7, r4
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d143      	bne.n	8008346 <_malloc_r+0xd6>
 80082be:	2c00      	cmp	r4, #0
 80082c0:	d04b      	beq.n	800835a <_malloc_r+0xea>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	4639      	mov	r1, r7
 80082c6:	4630      	mov	r0, r6
 80082c8:	eb04 0903 	add.w	r9, r4, r3
 80082cc:	f000 fa32 	bl	8008734 <_sbrk_r>
 80082d0:	4581      	cmp	r9, r0
 80082d2:	d142      	bne.n	800835a <_malloc_r+0xea>
 80082d4:	6821      	ldr	r1, [r4, #0]
 80082d6:	1a6d      	subs	r5, r5, r1
 80082d8:	4629      	mov	r1, r5
 80082da:	4630      	mov	r0, r6
 80082dc:	f7ff ffa6 	bl	800822c <sbrk_aligned>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d03a      	beq.n	800835a <_malloc_r+0xea>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	442b      	add	r3, r5
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	f8d8 3000 	ldr.w	r3, [r8]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	bb62      	cbnz	r2, 800834c <_malloc_r+0xdc>
 80082f2:	f8c8 7000 	str.w	r7, [r8]
 80082f6:	e00f      	b.n	8008318 <_malloc_r+0xa8>
 80082f8:	6822      	ldr	r2, [r4, #0]
 80082fa:	1b52      	subs	r2, r2, r5
 80082fc:	d420      	bmi.n	8008340 <_malloc_r+0xd0>
 80082fe:	2a0b      	cmp	r2, #11
 8008300:	d917      	bls.n	8008332 <_malloc_r+0xc2>
 8008302:	1961      	adds	r1, r4, r5
 8008304:	42a3      	cmp	r3, r4
 8008306:	6025      	str	r5, [r4, #0]
 8008308:	bf18      	it	ne
 800830a:	6059      	strne	r1, [r3, #4]
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	bf08      	it	eq
 8008310:	f8c8 1000 	streq.w	r1, [r8]
 8008314:	5162      	str	r2, [r4, r5]
 8008316:	604b      	str	r3, [r1, #4]
 8008318:	4630      	mov	r0, r6
 800831a:	f000 f9bd 	bl	8008698 <__malloc_unlock>
 800831e:	f104 000b 	add.w	r0, r4, #11
 8008322:	1d23      	adds	r3, r4, #4
 8008324:	f020 0007 	bic.w	r0, r0, #7
 8008328:	1ac2      	subs	r2, r0, r3
 800832a:	bf1c      	itt	ne
 800832c:	1a1b      	subne	r3, r3, r0
 800832e:	50a3      	strne	r3, [r4, r2]
 8008330:	e7af      	b.n	8008292 <_malloc_r+0x22>
 8008332:	6862      	ldr	r2, [r4, #4]
 8008334:	42a3      	cmp	r3, r4
 8008336:	bf0c      	ite	eq
 8008338:	f8c8 2000 	streq.w	r2, [r8]
 800833c:	605a      	strne	r2, [r3, #4]
 800833e:	e7eb      	b.n	8008318 <_malloc_r+0xa8>
 8008340:	4623      	mov	r3, r4
 8008342:	6864      	ldr	r4, [r4, #4]
 8008344:	e7ae      	b.n	80082a4 <_malloc_r+0x34>
 8008346:	463c      	mov	r4, r7
 8008348:	687f      	ldr	r7, [r7, #4]
 800834a:	e7b6      	b.n	80082ba <_malloc_r+0x4a>
 800834c:	461a      	mov	r2, r3
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	42a3      	cmp	r3, r4
 8008352:	d1fb      	bne.n	800834c <_malloc_r+0xdc>
 8008354:	2300      	movs	r3, #0
 8008356:	6053      	str	r3, [r2, #4]
 8008358:	e7de      	b.n	8008318 <_malloc_r+0xa8>
 800835a:	230c      	movs	r3, #12
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	4630      	mov	r0, r6
 8008360:	f000 f99a 	bl	8008698 <__malloc_unlock>
 8008364:	e794      	b.n	8008290 <_malloc_r+0x20>
 8008366:	6005      	str	r5, [r0, #0]
 8008368:	e7d6      	b.n	8008318 <_malloc_r+0xa8>
 800836a:	bf00      	nop
 800836c:	200050bc 	.word	0x200050bc

08008370 <_printf_common>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	4616      	mov	r6, r2
 8008376:	4698      	mov	r8, r3
 8008378:	688a      	ldr	r2, [r1, #8]
 800837a:	690b      	ldr	r3, [r1, #16]
 800837c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008380:	4293      	cmp	r3, r2
 8008382:	bfb8      	it	lt
 8008384:	4613      	movlt	r3, r2
 8008386:	6033      	str	r3, [r6, #0]
 8008388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800838c:	4607      	mov	r7, r0
 800838e:	460c      	mov	r4, r1
 8008390:	b10a      	cbz	r2, 8008396 <_printf_common+0x26>
 8008392:	3301      	adds	r3, #1
 8008394:	6033      	str	r3, [r6, #0]
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	0699      	lsls	r1, r3, #26
 800839a:	bf42      	ittt	mi
 800839c:	6833      	ldrmi	r3, [r6, #0]
 800839e:	3302      	addmi	r3, #2
 80083a0:	6033      	strmi	r3, [r6, #0]
 80083a2:	6825      	ldr	r5, [r4, #0]
 80083a4:	f015 0506 	ands.w	r5, r5, #6
 80083a8:	d106      	bne.n	80083b8 <_printf_common+0x48>
 80083aa:	f104 0a19 	add.w	sl, r4, #25
 80083ae:	68e3      	ldr	r3, [r4, #12]
 80083b0:	6832      	ldr	r2, [r6, #0]
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	42ab      	cmp	r3, r5
 80083b6:	dc26      	bgt.n	8008406 <_printf_common+0x96>
 80083b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	3b00      	subs	r3, #0
 80083c0:	bf18      	it	ne
 80083c2:	2301      	movne	r3, #1
 80083c4:	0692      	lsls	r2, r2, #26
 80083c6:	d42b      	bmi.n	8008420 <_printf_common+0xb0>
 80083c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083cc:	4641      	mov	r1, r8
 80083ce:	4638      	mov	r0, r7
 80083d0:	47c8      	blx	r9
 80083d2:	3001      	adds	r0, #1
 80083d4:	d01e      	beq.n	8008414 <_printf_common+0xa4>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	6922      	ldr	r2, [r4, #16]
 80083da:	f003 0306 	and.w	r3, r3, #6
 80083de:	2b04      	cmp	r3, #4
 80083e0:	bf02      	ittt	eq
 80083e2:	68e5      	ldreq	r5, [r4, #12]
 80083e4:	6833      	ldreq	r3, [r6, #0]
 80083e6:	1aed      	subeq	r5, r5, r3
 80083e8:	68a3      	ldr	r3, [r4, #8]
 80083ea:	bf0c      	ite	eq
 80083ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f0:	2500      	movne	r5, #0
 80083f2:	4293      	cmp	r3, r2
 80083f4:	bfc4      	itt	gt
 80083f6:	1a9b      	subgt	r3, r3, r2
 80083f8:	18ed      	addgt	r5, r5, r3
 80083fa:	2600      	movs	r6, #0
 80083fc:	341a      	adds	r4, #26
 80083fe:	42b5      	cmp	r5, r6
 8008400:	d11a      	bne.n	8008438 <_printf_common+0xc8>
 8008402:	2000      	movs	r0, #0
 8008404:	e008      	b.n	8008418 <_printf_common+0xa8>
 8008406:	2301      	movs	r3, #1
 8008408:	4652      	mov	r2, sl
 800840a:	4641      	mov	r1, r8
 800840c:	4638      	mov	r0, r7
 800840e:	47c8      	blx	r9
 8008410:	3001      	adds	r0, #1
 8008412:	d103      	bne.n	800841c <_printf_common+0xac>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841c:	3501      	adds	r5, #1
 800841e:	e7c6      	b.n	80083ae <_printf_common+0x3e>
 8008420:	18e1      	adds	r1, r4, r3
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	2030      	movs	r0, #48	@ 0x30
 8008426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800842a:	4422      	add	r2, r4
 800842c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008434:	3302      	adds	r3, #2
 8008436:	e7c7      	b.n	80083c8 <_printf_common+0x58>
 8008438:	2301      	movs	r3, #1
 800843a:	4622      	mov	r2, r4
 800843c:	4641      	mov	r1, r8
 800843e:	4638      	mov	r0, r7
 8008440:	47c8      	blx	r9
 8008442:	3001      	adds	r0, #1
 8008444:	d0e6      	beq.n	8008414 <_printf_common+0xa4>
 8008446:	3601      	adds	r6, #1
 8008448:	e7d9      	b.n	80083fe <_printf_common+0x8e>
	...

0800844c <_printf_i>:
 800844c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	7e0f      	ldrb	r7, [r1, #24]
 8008452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008454:	2f78      	cmp	r7, #120	@ 0x78
 8008456:	4691      	mov	r9, r2
 8008458:	4680      	mov	r8, r0
 800845a:	460c      	mov	r4, r1
 800845c:	469a      	mov	sl, r3
 800845e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008462:	d807      	bhi.n	8008474 <_printf_i+0x28>
 8008464:	2f62      	cmp	r7, #98	@ 0x62
 8008466:	d80a      	bhi.n	800847e <_printf_i+0x32>
 8008468:	2f00      	cmp	r7, #0
 800846a:	f000 80d2 	beq.w	8008612 <_printf_i+0x1c6>
 800846e:	2f58      	cmp	r7, #88	@ 0x58
 8008470:	f000 80b9 	beq.w	80085e6 <_printf_i+0x19a>
 8008474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800847c:	e03a      	b.n	80084f4 <_printf_i+0xa8>
 800847e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008482:	2b15      	cmp	r3, #21
 8008484:	d8f6      	bhi.n	8008474 <_printf_i+0x28>
 8008486:	a101      	add	r1, pc, #4	@ (adr r1, 800848c <_printf_i+0x40>)
 8008488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800848c:	080084e5 	.word	0x080084e5
 8008490:	080084f9 	.word	0x080084f9
 8008494:	08008475 	.word	0x08008475
 8008498:	08008475 	.word	0x08008475
 800849c:	08008475 	.word	0x08008475
 80084a0:	08008475 	.word	0x08008475
 80084a4:	080084f9 	.word	0x080084f9
 80084a8:	08008475 	.word	0x08008475
 80084ac:	08008475 	.word	0x08008475
 80084b0:	08008475 	.word	0x08008475
 80084b4:	08008475 	.word	0x08008475
 80084b8:	080085f9 	.word	0x080085f9
 80084bc:	08008523 	.word	0x08008523
 80084c0:	080085b3 	.word	0x080085b3
 80084c4:	08008475 	.word	0x08008475
 80084c8:	08008475 	.word	0x08008475
 80084cc:	0800861b 	.word	0x0800861b
 80084d0:	08008475 	.word	0x08008475
 80084d4:	08008523 	.word	0x08008523
 80084d8:	08008475 	.word	0x08008475
 80084dc:	08008475 	.word	0x08008475
 80084e0:	080085bb 	.word	0x080085bb
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6032      	str	r2, [r6, #0]
 80084ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084f4:	2301      	movs	r3, #1
 80084f6:	e09d      	b.n	8008634 <_printf_i+0x1e8>
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	6820      	ldr	r0, [r4, #0]
 80084fc:	1d19      	adds	r1, r3, #4
 80084fe:	6031      	str	r1, [r6, #0]
 8008500:	0606      	lsls	r6, r0, #24
 8008502:	d501      	bpl.n	8008508 <_printf_i+0xbc>
 8008504:	681d      	ldr	r5, [r3, #0]
 8008506:	e003      	b.n	8008510 <_printf_i+0xc4>
 8008508:	0645      	lsls	r5, r0, #25
 800850a:	d5fb      	bpl.n	8008504 <_printf_i+0xb8>
 800850c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008510:	2d00      	cmp	r5, #0
 8008512:	da03      	bge.n	800851c <_printf_i+0xd0>
 8008514:	232d      	movs	r3, #45	@ 0x2d
 8008516:	426d      	negs	r5, r5
 8008518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800851c:	4859      	ldr	r0, [pc, #356]	@ (8008684 <_printf_i+0x238>)
 800851e:	230a      	movs	r3, #10
 8008520:	e011      	b.n	8008546 <_printf_i+0xfa>
 8008522:	6821      	ldr	r1, [r4, #0]
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	0608      	lsls	r0, r1, #24
 8008528:	f853 5b04 	ldr.w	r5, [r3], #4
 800852c:	d402      	bmi.n	8008534 <_printf_i+0xe8>
 800852e:	0649      	lsls	r1, r1, #25
 8008530:	bf48      	it	mi
 8008532:	b2ad      	uxthmi	r5, r5
 8008534:	2f6f      	cmp	r7, #111	@ 0x6f
 8008536:	4853      	ldr	r0, [pc, #332]	@ (8008684 <_printf_i+0x238>)
 8008538:	6033      	str	r3, [r6, #0]
 800853a:	bf14      	ite	ne
 800853c:	230a      	movne	r3, #10
 800853e:	2308      	moveq	r3, #8
 8008540:	2100      	movs	r1, #0
 8008542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008546:	6866      	ldr	r6, [r4, #4]
 8008548:	60a6      	str	r6, [r4, #8]
 800854a:	2e00      	cmp	r6, #0
 800854c:	bfa2      	ittt	ge
 800854e:	6821      	ldrge	r1, [r4, #0]
 8008550:	f021 0104 	bicge.w	r1, r1, #4
 8008554:	6021      	strge	r1, [r4, #0]
 8008556:	b90d      	cbnz	r5, 800855c <_printf_i+0x110>
 8008558:	2e00      	cmp	r6, #0
 800855a:	d04b      	beq.n	80085f4 <_printf_i+0x1a8>
 800855c:	4616      	mov	r6, r2
 800855e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008562:	fb03 5711 	mls	r7, r3, r1, r5
 8008566:	5dc7      	ldrb	r7, [r0, r7]
 8008568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800856c:	462f      	mov	r7, r5
 800856e:	42bb      	cmp	r3, r7
 8008570:	460d      	mov	r5, r1
 8008572:	d9f4      	bls.n	800855e <_printf_i+0x112>
 8008574:	2b08      	cmp	r3, #8
 8008576:	d10b      	bne.n	8008590 <_printf_i+0x144>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	07df      	lsls	r7, r3, #31
 800857c:	d508      	bpl.n	8008590 <_printf_i+0x144>
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	6861      	ldr	r1, [r4, #4]
 8008582:	4299      	cmp	r1, r3
 8008584:	bfde      	ittt	le
 8008586:	2330      	movle	r3, #48	@ 0x30
 8008588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800858c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008590:	1b92      	subs	r2, r2, r6
 8008592:	6122      	str	r2, [r4, #16]
 8008594:	f8cd a000 	str.w	sl, [sp]
 8008598:	464b      	mov	r3, r9
 800859a:	aa03      	add	r2, sp, #12
 800859c:	4621      	mov	r1, r4
 800859e:	4640      	mov	r0, r8
 80085a0:	f7ff fee6 	bl	8008370 <_printf_common>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d14a      	bne.n	800863e <_printf_i+0x1f2>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085ac:	b004      	add	sp, #16
 80085ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	f043 0320 	orr.w	r3, r3, #32
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	4833      	ldr	r0, [pc, #204]	@ (8008688 <_printf_i+0x23c>)
 80085bc:	2778      	movs	r7, #120	@ 0x78
 80085be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	6831      	ldr	r1, [r6, #0]
 80085c6:	061f      	lsls	r7, r3, #24
 80085c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80085cc:	d402      	bmi.n	80085d4 <_printf_i+0x188>
 80085ce:	065f      	lsls	r7, r3, #25
 80085d0:	bf48      	it	mi
 80085d2:	b2ad      	uxthmi	r5, r5
 80085d4:	6031      	str	r1, [r6, #0]
 80085d6:	07d9      	lsls	r1, r3, #31
 80085d8:	bf44      	itt	mi
 80085da:	f043 0320 	orrmi.w	r3, r3, #32
 80085de:	6023      	strmi	r3, [r4, #0]
 80085e0:	b11d      	cbz	r5, 80085ea <_printf_i+0x19e>
 80085e2:	2310      	movs	r3, #16
 80085e4:	e7ac      	b.n	8008540 <_printf_i+0xf4>
 80085e6:	4827      	ldr	r0, [pc, #156]	@ (8008684 <_printf_i+0x238>)
 80085e8:	e7e9      	b.n	80085be <_printf_i+0x172>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f023 0320 	bic.w	r3, r3, #32
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	e7f6      	b.n	80085e2 <_printf_i+0x196>
 80085f4:	4616      	mov	r6, r2
 80085f6:	e7bd      	b.n	8008574 <_printf_i+0x128>
 80085f8:	6833      	ldr	r3, [r6, #0]
 80085fa:	6825      	ldr	r5, [r4, #0]
 80085fc:	6961      	ldr	r1, [r4, #20]
 80085fe:	1d18      	adds	r0, r3, #4
 8008600:	6030      	str	r0, [r6, #0]
 8008602:	062e      	lsls	r6, r5, #24
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	d501      	bpl.n	800860c <_printf_i+0x1c0>
 8008608:	6019      	str	r1, [r3, #0]
 800860a:	e002      	b.n	8008612 <_printf_i+0x1c6>
 800860c:	0668      	lsls	r0, r5, #25
 800860e:	d5fb      	bpl.n	8008608 <_printf_i+0x1bc>
 8008610:	8019      	strh	r1, [r3, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	4616      	mov	r6, r2
 8008618:	e7bc      	b.n	8008594 <_printf_i+0x148>
 800861a:	6833      	ldr	r3, [r6, #0]
 800861c:	1d1a      	adds	r2, r3, #4
 800861e:	6032      	str	r2, [r6, #0]
 8008620:	681e      	ldr	r6, [r3, #0]
 8008622:	6862      	ldr	r2, [r4, #4]
 8008624:	2100      	movs	r1, #0
 8008626:	4630      	mov	r0, r6
 8008628:	f7f7 fdf2 	bl	8000210 <memchr>
 800862c:	b108      	cbz	r0, 8008632 <_printf_i+0x1e6>
 800862e:	1b80      	subs	r0, r0, r6
 8008630:	6060      	str	r0, [r4, #4]
 8008632:	6863      	ldr	r3, [r4, #4]
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	2300      	movs	r3, #0
 8008638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800863c:	e7aa      	b.n	8008594 <_printf_i+0x148>
 800863e:	6923      	ldr	r3, [r4, #16]
 8008640:	4632      	mov	r2, r6
 8008642:	4649      	mov	r1, r9
 8008644:	4640      	mov	r0, r8
 8008646:	47d0      	blx	sl
 8008648:	3001      	adds	r0, #1
 800864a:	d0ad      	beq.n	80085a8 <_printf_i+0x15c>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	079b      	lsls	r3, r3, #30
 8008650:	d413      	bmi.n	800867a <_printf_i+0x22e>
 8008652:	68e0      	ldr	r0, [r4, #12]
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	4298      	cmp	r0, r3
 8008658:	bfb8      	it	lt
 800865a:	4618      	movlt	r0, r3
 800865c:	e7a6      	b.n	80085ac <_printf_i+0x160>
 800865e:	2301      	movs	r3, #1
 8008660:	4632      	mov	r2, r6
 8008662:	4649      	mov	r1, r9
 8008664:	4640      	mov	r0, r8
 8008666:	47d0      	blx	sl
 8008668:	3001      	adds	r0, #1
 800866a:	d09d      	beq.n	80085a8 <_printf_i+0x15c>
 800866c:	3501      	adds	r5, #1
 800866e:	68e3      	ldr	r3, [r4, #12]
 8008670:	9903      	ldr	r1, [sp, #12]
 8008672:	1a5b      	subs	r3, r3, r1
 8008674:	42ab      	cmp	r3, r5
 8008676:	dcf2      	bgt.n	800865e <_printf_i+0x212>
 8008678:	e7eb      	b.n	8008652 <_printf_i+0x206>
 800867a:	2500      	movs	r5, #0
 800867c:	f104 0619 	add.w	r6, r4, #25
 8008680:	e7f5      	b.n	800866e <_printf_i+0x222>
 8008682:	bf00      	nop
 8008684:	0800970d 	.word	0x0800970d
 8008688:	0800971e 	.word	0x0800971e

0800868c <__malloc_lock>:
 800868c:	4801      	ldr	r0, [pc, #4]	@ (8008694 <__malloc_lock+0x8>)
 800868e:	f7ff bc65 	b.w	8007f5c <__retarget_lock_acquire_recursive>
 8008692:	bf00      	nop
 8008694:	200050b4 	.word	0x200050b4

08008698 <__malloc_unlock>:
 8008698:	4801      	ldr	r0, [pc, #4]	@ (80086a0 <__malloc_unlock+0x8>)
 800869a:	f7ff bc60 	b.w	8007f5e <__retarget_lock_release_recursive>
 800869e:	bf00      	nop
 80086a0:	200050b4 	.word	0x200050b4

080086a4 <_realloc_r>:
 80086a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a8:	4680      	mov	r8, r0
 80086aa:	4615      	mov	r5, r2
 80086ac:	460c      	mov	r4, r1
 80086ae:	b921      	cbnz	r1, 80086ba <_realloc_r+0x16>
 80086b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	4611      	mov	r1, r2
 80086b6:	f7ff bddb 	b.w	8008270 <_malloc_r>
 80086ba:	b92a      	cbnz	r2, 80086c8 <_realloc_r+0x24>
 80086bc:	f000 f84a 	bl	8008754 <_free_r>
 80086c0:	2400      	movs	r4, #0
 80086c2:	4620      	mov	r0, r4
 80086c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c8:	f000 f88e 	bl	80087e8 <_malloc_usable_size_r>
 80086cc:	4285      	cmp	r5, r0
 80086ce:	4606      	mov	r6, r0
 80086d0:	d802      	bhi.n	80086d8 <_realloc_r+0x34>
 80086d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086d6:	d8f4      	bhi.n	80086c2 <_realloc_r+0x1e>
 80086d8:	4629      	mov	r1, r5
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff fdc8 	bl	8008270 <_malloc_r>
 80086e0:	4607      	mov	r7, r0
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d0ec      	beq.n	80086c0 <_realloc_r+0x1c>
 80086e6:	42b5      	cmp	r5, r6
 80086e8:	462a      	mov	r2, r5
 80086ea:	4621      	mov	r1, r4
 80086ec:	bf28      	it	cs
 80086ee:	4632      	movcs	r2, r6
 80086f0:	f7ff fc36 	bl	8007f60 <memcpy>
 80086f4:	4621      	mov	r1, r4
 80086f6:	4640      	mov	r0, r8
 80086f8:	f000 f82c 	bl	8008754 <_free_r>
 80086fc:	463c      	mov	r4, r7
 80086fe:	e7e0      	b.n	80086c2 <_realloc_r+0x1e>

08008700 <memmove>:
 8008700:	4288      	cmp	r0, r1
 8008702:	b510      	push	{r4, lr}
 8008704:	eb01 0402 	add.w	r4, r1, r2
 8008708:	d902      	bls.n	8008710 <memmove+0x10>
 800870a:	4284      	cmp	r4, r0
 800870c:	4623      	mov	r3, r4
 800870e:	d807      	bhi.n	8008720 <memmove+0x20>
 8008710:	1e43      	subs	r3, r0, #1
 8008712:	42a1      	cmp	r1, r4
 8008714:	d008      	beq.n	8008728 <memmove+0x28>
 8008716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800871a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800871e:	e7f8      	b.n	8008712 <memmove+0x12>
 8008720:	4402      	add	r2, r0
 8008722:	4601      	mov	r1, r0
 8008724:	428a      	cmp	r2, r1
 8008726:	d100      	bne.n	800872a <memmove+0x2a>
 8008728:	bd10      	pop	{r4, pc}
 800872a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800872e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008732:	e7f7      	b.n	8008724 <memmove+0x24>

08008734 <_sbrk_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	@ (8008750 <_sbrk_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7f8 fe4c 	bl	80013dc <_sbrk>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_sbrk_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_sbrk_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	200050c0 	.word	0x200050c0

08008754 <_free_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4605      	mov	r5, r0
 8008758:	2900      	cmp	r1, #0
 800875a:	d041      	beq.n	80087e0 <_free_r+0x8c>
 800875c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008760:	1f0c      	subs	r4, r1, #4
 8008762:	2b00      	cmp	r3, #0
 8008764:	bfb8      	it	lt
 8008766:	18e4      	addlt	r4, r4, r3
 8008768:	f7ff ff90 	bl	800868c <__malloc_lock>
 800876c:	4a1d      	ldr	r2, [pc, #116]	@ (80087e4 <_free_r+0x90>)
 800876e:	6813      	ldr	r3, [r2, #0]
 8008770:	b933      	cbnz	r3, 8008780 <_free_r+0x2c>
 8008772:	6063      	str	r3, [r4, #4]
 8008774:	6014      	str	r4, [r2, #0]
 8008776:	4628      	mov	r0, r5
 8008778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877c:	f7ff bf8c 	b.w	8008698 <__malloc_unlock>
 8008780:	42a3      	cmp	r3, r4
 8008782:	d908      	bls.n	8008796 <_free_r+0x42>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	1821      	adds	r1, r4, r0
 8008788:	428b      	cmp	r3, r1
 800878a:	bf01      	itttt	eq
 800878c:	6819      	ldreq	r1, [r3, #0]
 800878e:	685b      	ldreq	r3, [r3, #4]
 8008790:	1809      	addeq	r1, r1, r0
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	e7ed      	b.n	8008772 <_free_r+0x1e>
 8008796:	461a      	mov	r2, r3
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	b10b      	cbz	r3, 80087a0 <_free_r+0x4c>
 800879c:	42a3      	cmp	r3, r4
 800879e:	d9fa      	bls.n	8008796 <_free_r+0x42>
 80087a0:	6811      	ldr	r1, [r2, #0]
 80087a2:	1850      	adds	r0, r2, r1
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d10b      	bne.n	80087c0 <_free_r+0x6c>
 80087a8:	6820      	ldr	r0, [r4, #0]
 80087aa:	4401      	add	r1, r0
 80087ac:	1850      	adds	r0, r2, r1
 80087ae:	4283      	cmp	r3, r0
 80087b0:	6011      	str	r1, [r2, #0]
 80087b2:	d1e0      	bne.n	8008776 <_free_r+0x22>
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	6053      	str	r3, [r2, #4]
 80087ba:	4408      	add	r0, r1
 80087bc:	6010      	str	r0, [r2, #0]
 80087be:	e7da      	b.n	8008776 <_free_r+0x22>
 80087c0:	d902      	bls.n	80087c8 <_free_r+0x74>
 80087c2:	230c      	movs	r3, #12
 80087c4:	602b      	str	r3, [r5, #0]
 80087c6:	e7d6      	b.n	8008776 <_free_r+0x22>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	1821      	adds	r1, r4, r0
 80087cc:	428b      	cmp	r3, r1
 80087ce:	bf04      	itt	eq
 80087d0:	6819      	ldreq	r1, [r3, #0]
 80087d2:	685b      	ldreq	r3, [r3, #4]
 80087d4:	6063      	str	r3, [r4, #4]
 80087d6:	bf04      	itt	eq
 80087d8:	1809      	addeq	r1, r1, r0
 80087da:	6021      	streq	r1, [r4, #0]
 80087dc:	6054      	str	r4, [r2, #4]
 80087de:	e7ca      	b.n	8008776 <_free_r+0x22>
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
 80087e2:	bf00      	nop
 80087e4:	200050bc 	.word	0x200050bc

080087e8 <_malloc_usable_size_r>:
 80087e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ec:	1f18      	subs	r0, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfbc      	itt	lt
 80087f2:	580b      	ldrlt	r3, [r1, r0]
 80087f4:	18c0      	addlt	r0, r0, r3
 80087f6:	4770      	bx	lr

080087f8 <_init>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr

08008804 <_fini>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	bf00      	nop
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr
